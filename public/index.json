[{"content":"La m√©moire est une ressource au m√™me titre que la fourchette dans le pr√©c√©dent article.\nDans un ordinateur, il existe plusieurs types de m√©moire que les programmes vont pouvoir utiliser en fonction de la mani√®re dont ils veulent traiter les donn√©es.\nIl faut voir la m√©moire comme un endroit o√π on entrepose des donn√©es.\nPour cet article on va parler d\u0026rsquo;un magasin, mais √ßa marche aussi avec un restaurant.\nLa m√©moire cache ‚Äî l\u0026rsquo;armoire r√©frig√©r√©e La m√©moire cache est le stockage le plus rapide qu\u0026rsquo;un programme peut utiliser. Pour un magasin, il s\u0026rsquo;agit des √©tag√®res et des armoires r√©frig√©r√©es qui forment les rayons.\nLes clients (les threads du programme) ont rapidement acc√®s aux viandes qui sont dans les armoires r√©frig√©r√©es, ils n\u0026rsquo;ont qu\u0026rsquo;√† tendre la main. Par contre, on ne peut pas stocker une grande quantit√© de viande dans ces armoires, pour l\u0026rsquo;exemple on va dire une dizaine au maximum.\nSur un ordinateur, cette m√©moire cache se trouve directement dans le processeur sous les noms cache L3, cache L2 et cache L1. On n\u0026rsquo;ira pas dans le d√©tail ici, mais sachez que plus le nombre est proche de 0, et plus le cache est rapide.\nJe prends l\u0026rsquo;exemple de l\u0026rsquo;armoire r√©frig√©r√©e car il y a un m√©canisme physique important dans un ordinateur: la m√©moire cache peut accueillir des donn√©es uniquement si elle est aliment√©e en √©lectricit√©, en cas de coupure de courant, on perd les donn√©es qui s\u0026rsquo;y trouvent.\nDe la m√™me mani√®re, dans un magasin, en cas de coupure de courant, il faut jeter toute la viande qui se trouve dans les armoires r√©frig√©r√©es*.\n*: Oui c\u0026rsquo;est pas tout √† fait le cas, mais en cas de coupure prolong√©e √ßa l\u0026rsquo;est.\nLa m√©moire vive ‚Äî l\u0026rsquo;arri√®re du magasin Au cours d\u0026rsquo;une journ√©e, le magasin souhaite vendre bien plus que dix viandes, c\u0026rsquo;est bien normal. Pour cela, √† l\u0026rsquo;arri√®re du magasin il y a un stock r√©frig√©r√© qui peut en contenir 1000. Un employ√© viendra remplir les rayons au cours de la journ√©e.\nCette action prend du temps, l\u0026rsquo;employ√© doit :\nAller dans le stock r√©frig√©r√© R√©cup√©rer des viandes Amener les viandes dans le rayon Mettre les viandes dans l\u0026#39;armoire r√©frig√©r√©e Pendant tout ce temps, le client ne peut prendre que les viandes qui sont encore dans l\u0026rsquo;armoire, il faut donc bien faire attention √† ce que l\u0026rsquo;employ√© recharge l\u0026rsquo;armoire quand il reste encore un peu de bo√Ætes.\nDans un ordinateur, la m√©moire vive (RAM en anglais pour Random Access Memory), joue le r√¥le du stock r√©frig√©r√© tr√®s rapide qu\u0026rsquo;un programme peut utiliser, mais beaucoup moins rapide que la m√©moire cache, environ 50x √† 100x moins rapide.\nEt tout comme la m√©moire cache, la RAM peut accueillir des donn√©es uniquement si elle est aliment√©e en √©lectricit√©.\nC\u0026rsquo;est pour √ßa qu\u0026rsquo;on appelle √ßa de la m√©moire vive, elle doit √™tre aliment√©e.\nAttends, mais tu dis que la RAM est tr√®s rapide, mais le processus pour recharger la m√©moire cache est lent ? On ne peut pas juste utiliser une grande quantit√© de m√©moire cache?\nLa m√©moire cache co√ªte tr√®s cher, beaucoup plus que la RAM. L\u0026rsquo;√©tat actuel est donc un compromis entre rapidit√© et co√ªt, un probl√®me typique en ing√©nierie.\nLe stockage ‚Äî la ferme en Nouvelle-Z√©lande Le stockage d\u0026rsquo;un ordinateur est compos√© des diff√©rents disques durs (HDD, SDD, etc.). Il s\u0026rsquo;agit d\u0026rsquo;une m√©moire persistante, c\u0026rsquo;est-√†-dire que m√™me en cas de coupure de courant, les donn√©es restent √©crites dans les disques.\nPour notre magasin, de la viande qui reste utilisable m√™me en cas de coupure\u0026hellip; Eh bien ce sont les boeufs vivants √† la ferme.\nTon analogie est d√©go√ªtante\nOui je sais, j\u0026rsquo;ai pas mieux, d√©sol√©. En m√™me temps, je ne peux pas vous dire que de la viande fra√Æche, qui reste longtemps √† l\u0026rsquo;air libre, est encore utilisable.\nEn plus, il y a plein d\u0026rsquo;√©tapes entre un boeuf vivant et un steak dans l\u0026rsquo;armoire !\nTout √† fait, mais c\u0026rsquo;est la meilleure analogie possible pour te faire comprendre pourquoi, en cas de coupure, si tu n\u0026rsquo;as pas sauvegard√© ton fichier Word depuis longtemps, tu perds tes donn√©es. Tant que tu n\u0026rsquo;as pas sauvegard√©, tes modifications restent dans le cache et la RAM.\nEt pourquoi en Nouvelle-Z√©lande ?\nOh, √ßa c\u0026rsquo;est parce qu\u0026rsquo;aller chercher une donn√©e dans un disque, c\u0026rsquo;est tr√®s lent compar√© √† aller la chercher dans la RAM. Si tu as un disque SSD c\u0026rsquo;est 10x plus lent, si tu as un disque HDD, c\u0026rsquo;est 100x plus lent.\nSi tu joues √† des jeux vid√©o un peu gourmands en ressources, tu as s√ªrement remarqu√© des √©crans de chargement plus ou moins longs. C\u0026rsquo;est surtout parce que le programme r√©cup√®re les donn√©es qui sont sur le disque.\nOptimiser la m√©moire ‚Äî pas besoin d\u0026rsquo;√™tre mentaliste Vous l\u0026rsquo;aurez donc compris, un magasin a diff√©rents types de m√©moire √† sa disposition. La mani√®re dont il orchestre les denr√©es √† travers ces diff√©rents composants lui permet d\u0026rsquo;anticiper les variations de stock, et limiter le risque de p√©nurie.\nLorsqu\u0026rsquo;un d√©veloppeur code un programme, il peut aussi anticiper l\u0026rsquo;utilisation des donn√©es et les charger avant d\u0026rsquo;en avoir besoin.\nDans l\u0026rsquo;exemple du jeu vid√©o, pourquoi est-ce que toutes les donn√©es ne sont pas charg√©es d√®s le d√©but? Moi j\u0026rsquo;en ai marre des √©crans de chargement.\nTout d\u0026rsquo;abord, ce chargement se fait du stockage vers la RAM (puis vers le cache), ensuite, si on chargeait toutes les donn√©es d\u0026rsquo;un coup, il y a de fortes chances pour que ta RAM soit satur√©e.\nA priori, le d√©veloppeur ne sait pas si tu as peu ou beaucoup de RAM disponible, et puis, maintenir deux versions du code, un qui charge toutes les donn√©es, et un qui charge via les √©crans de chargement, c\u0026rsquo;est du travail suppl√©mentaire qui n\u0026rsquo;apporte pas grand chose.\nLes √©crans de chargement sont un compromis : plut√¥t que de risquer de crasher ton ordinateur, le d√©veloppeur a cod√© le programme de sorte √† charger uniquement le contenu qui sera utilis√© dans le niveau, pour tous les niveaux.\nConclusion Dans cet article, on a vu les diff√©rentes m√©moires utilis√©es par les programmes. √Ä l\u0026rsquo;image d\u0026rsquo;un magasin qui √©vite les p√©nuries, un d√©veloppeur doit jongler avec ces m√©moires pour que son programme tourne correctement.\nDans le prochain article, IMVV ‚Äî Section 3 ‚Äî Chapitre 2 ‚Äî M√©mo√Øsation et Lazy loading, la technique du fain√©ant ultime, nous verrons des techniques pour √©viter de se surcharger le cerveau/le programme.\n‚Üê Retour √† la section\n‚Üê Retour √† l‚Äôintroduction\n","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/optimisation/memoire/","summary":"\u003cp\u003eLa m√©moire est une \u003cstrong\u003eressource\u003c/strong\u003e au m√™me titre que la fourchette dans le \u003ca href=\"../../l-execution/threads/\"\u003epr√©c√©dent article\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eDans un ordinateur, il existe plusieurs types de m√©moire que les programmes vont pouvoir utiliser en fonction de la mani√®re dont ils veulent traiter les donn√©es.\u003c/p\u003e\n\u003cp\u003eIl faut voir la m√©moire comme un endroit o√π on entrepose des donn√©es.\u003c/p\u003e\n\u003cp\u003ePour cet article on va parler d\u0026rsquo;un magasin, mais √ßa marche aussi avec un restaurant.\u003c/p\u003e\n\u003ch2 id=\"la-m√©moire-cache--larmoire-r√©frig√©r√©e\"\u003eLa m√©moire cache ‚Äî l\u0026rsquo;armoire r√©frig√©r√©e\u003c/h2\u003e\n\u003cp\u003eLa \u003cstrong\u003em√©moire cache\u003c/strong\u003e est le stockage \u003cstrong\u003ele plus rapide\u003c/strong\u003e qu\u0026rsquo;un programme peut utiliser. Pour un magasin, il s\u0026rsquo;agit des √©tag√®res et des armoires r√©frig√©r√©es qui forment les rayons.\u003c/p\u003e","title":"IMVV ‚Äî Section 3 ‚Äî Chapitre 1 ‚Äî La m√©moire, ou comment √©viter les p√©nuries dans un magasin"},{"content":"Dans le pr√©c√©dent article, IMVV ‚Äî Section 1 ‚Äî Chapitre 3 ‚Äî Structures de contr√¥le et algorithme, apprendre √† r√©fl√©chir, on a vu les diff√©rentes structures de contr√¥le et les algorithmes.\nMaintenant on va parler de la mani√®re dont on r√©alise un ensemble de t√¢ches ‚Äî c‚Äôest ce qu‚Äôon appelle en informatique un mode d‚Äôex√©cution. C\u0026rsquo;est applicable aussi bien pour un humain que pour un ordinateur.\nN\u0026rsquo;oublie pas que les objectifs de ces articles sont :\nTe donner une meilleure compr√©hension des bases de l‚Äôinformatique, T\u0026rsquo;inspirer pour analyser ou optimiser les situations du quotidien, ou peut-√™tre, qui sait, te donner envie d\u0026rsquo;explorer encore plus loin\u0026hellip; jusqu‚Äô√† en faire ton m√©tier. Programme et application ‚Äî c\u0026rsquo;est quoi la diff√©rence ? Un programme informatique est un ensemble d\u0026rsquo;algorithmes. Le mot application veut dire la m√™me chose.\nC‚Äôest juste que application, √ßa sonne plus moderne, m√™me si ce mot existe depuis longtemps.\nMerci le marketing Apple et son App Store. üòÑ\nSynchrone ‚Äî Avoir un serveur d√©di√© √† sa table, quel luxe Prenons l\u0026rsquo;exemple d\u0026rsquo;un restaurant chic. Dans ce restaurant chic, il y a 2 tables. Chaque table a son serveur attitr√©, celui-ci r√©pond uniquement aux besoins de sa table.\nPour la suite de cet exercice de pens√©e, on va dire qu\u0026rsquo;il y a 2 familles (famille 1, famille 2), 2 tables (table 1, table 2), 1 serveur, 1 chef.\nLa s√©quence d\u0026rsquo;actions que le serveur doit faire, l\u0026rsquo;algorithme est :\nSi une famille arrive: Accueillir la famille Installer la famille sur une table libre Prendre la commande Donner la commande au chef R√©cup√©rer les plats Servir les plats √† la famille Faire payer la famille Fin si La famille 1 arrive au restaurant, le serveur les accueille et les installe √† la table 1. Il reste en attente de leur commande, √† proximit√©*.\nQuand la famille 1 est pr√™te, vu que le serveur est √† c√¥t√©, ils passent commande. Le serveur s\u0026rsquo;en va ensuite en cuisine pour donner la commande au chef. Le serveur attend les plats. Le chef pr√©pare les plats.\nUne fois que les plats sont pr√™ts, il les r√©cup√®re et les sert √† la famille 1. La famille 1 paie et s\u0026rsquo;en va, heureuse de l\u0026rsquo;attention port√©e.\n*: A ce moment, la famille 2 arrive au restaurant, ils ne sont pas accueillis, puisque le serveur est en attente de la commande de la famille 1. Alors la famille 2 repart, agac√©e, ils laisseront un mauvais avis sur internet.\nDans cette configuration, le serveur ex√©cute ses t√¢ches de mani√®re synchrone, cela veut dire qu\u0026rsquo;il ex√©cute l\u0026rsquo;algorithme √©tape par √©tape sans interruption. Si une √©tape n√©cessite d\u0026rsquo;attendre, par exemple quand il doit attendre que la famille choisisse sa commande, alors il attend, on dit que le mode synchrone est bloquant. Le serveur va au bout de son algorithme.\nMais c\u0026rsquo;est nul, il y a une famille qui n\u0026rsquo;a pas √©t√© servie\u0026hellip;\nSi on reste dans le mode d\u0026rsquo;ex√©cution synchrone, le probl√®me est qu\u0026rsquo;il n\u0026rsquo;y a pas assez de serveur. S\u0026rsquo;il y avait autant de serveurs de tables et de chefs, il n\u0026rsquo;y aurait aucun souci. Chaque famille aurait √©t√© ravie d\u0026rsquo;avoir un serveur et un chef d√©di√©. Mais on verrait plut√¥t cette disposition dans les restaurants luxueux, qui peuvent se permettre d\u0026rsquo;avoir 100 tables, 100 serveurs et 100 chefs.\nPar d√©faut, les applications sont synchrones, car √† part le probl√®me de ressources, c‚Äôest bien plus simple de faire une t√¢che apr√®s l‚Äôautre, cependant, de nos jours, de plus en plus de syst√®mes sont asynchrones (exemple: navigateurs, certains serveurs applicatifs √† la mode).\nüìå Exemples dans la vie r√©elle Une personne qui suit une proc√©dure critique Pr√©parer une salade üíª Exemples en informatique Un distributeur de billets Une imprimante partag√©e Asynchrone ‚Äî Un serveur pour les gouverner tous ‚Äî Oui c\u0026rsquo;est une r√©f√©rence au Seigneur des Anneaux üòÑ ‚Äî\nReprenons l\u0026rsquo;exemple du restaurant, toujours avec 2 familles (famille 1, famille 2), 2 tables (table 1, table 2), 1 serveur, 1 chef.\nMais cette fois, on change l\u0026rsquo;algorithme :\nQuand une famille arrive, alors : Le serveur les accueille Il les installe √† une table libre Il leur donne un menu Il passe √† autre chose Fin quand Quand une famille appelle le serveur pour commander, alors : Le serveur prend la commande Il la transmet au chef Il passe √† autre chose Fin quand Quand la sonnette en cuisine retentit (plats pr√™ts), alors : Le serveur r√©cup√®re les plats Le serveur sert les plats √† la bonne table Il passe √† autre chose Fin quand Quand une famille veut payer, alors : Le serveur encaisse Il lib√®re la table Il passe √† autre chose Fin quand Cet algorithme est diff√©rent de ceux qu\u0026rsquo;on a vus jusqu\u0026rsquo;√† pr√©sent.\n\u0026ldquo;Quand \u0026hellip;,\u0026rdquo; marque un √©v√©nement, \u0026ldquo;alors\u0026rdquo; introduit le bloc d\u0026rsquo;instructions √† ex√©cuter en r√©action, et \u0026ldquo;Fin quand\u0026rdquo; marque la fin de ce bloc.\nOn dit alors qu\u0026rsquo;on fait de la programmation √©v√©nementielle (ou programmation r√©active) et que l\u0026rsquo;algorithme est asynchrone : il fait de sorte √† r√©agir aux √©v√©nements ext√©rieurs.\nLorsqu‚Äôun √©v√©nement se produit, le serveur y r√©agit imm√©diatement : il ex√©cute les instructions associ√©es, puis passe √† l‚Äô√©v√©nement suivant s‚Äôil y en a un. Sinon, il attend. Ce mode d\u0026rsquo;ex√©cution est donc non bloquant.\nEt dans les faits, c\u0026rsquo;est ce que fait la plupart des personnes, serveurs ou non. Quand on fait une t√¢che, et qu\u0026rsquo;on est interrompu par un bug, un appel, un coll√®gue de travail qui pose une question, on est en r√©action.\nAvec cet algorithme, un serveur seul pourra tr√®s bien g√©rer 2 tables.\nüìå Exemples dans la vie r√©elle Les serveurs dans la plupart des restaurants Mon chien quand il entend les croquettes üíª Exemples en informatique Les notifications sur ton smartphone Un arrosage automatique avec capteur d\u0026#39;humidit√© Attention : comme en mode synchrone, s\u0026rsquo;il y a trop de table pour un seul serveur, plusieurs √©v√©nements risquent de s\u0026rsquo;accumuler en attente de traitement.\nMais du coup, comment on fait pour r√©soudre ce probl√®me ?\nOn verra √ßa dans le prochain article.\nConclusion Dans cet article, on a vu ce qu\u0026rsquo;√©taient les modes d\u0026rsquo;ex√©cution synchrone et asynchrone.\nSi tu souhaites continuer cette aventure, tu peux regarder la suite ici: IMMV ‚Äî Section 2 ‚Äî Chapitre 2 ‚Äî Monothread et Multithread, je ne peux pas tout faire en m√™me temps !\n‚Üê Retour √† la section\n‚Üê Retour √† l‚Äôintroduction\n","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/l-execution/sync-async/","summary":"\u003cp\u003eDans le pr√©c√©dent article, \u003ca href=\"../../les-bases/structures-de-controle/\"\u003eIMVV ‚Äî Section 1 ‚Äî Chapitre 3 ‚Äî Structures de contr√¥le et algorithme, apprendre √† r√©fl√©chir\u003c/a\u003e, on a vu les diff√©rentes structures de contr√¥le et les algorithmes.\u003c/p\u003e\n\u003cp\u003eMaintenant on va parler de la mani√®re dont on r√©alise un ensemble de t√¢ches ‚Äî c‚Äôest ce qu‚Äôon appelle en informatique un \u003cstrong\u003emode d‚Äôex√©cution\u003c/strong\u003e. C\u0026rsquo;est applicable aussi bien pour un humain que pour un ordinateur.\u003c/p\u003e\n\u003cp\u003eN\u0026rsquo;oublie pas que les objectifs de ces articles sont :\u003c/p\u003e","title":"IMMV ‚Äî Section 2 ‚Äî Chapitre 1 ‚Äî Synchrone et Asynchrone, ou comment r√©agir au changement"},{"content":"Quand tu prends un ticket pour attendre ton tour, que tu fais la queue √† la caisse, que tu prends l‚Äôassiette du haut de la pile pour mettre la table, ou que tu cliques sur le bouton \u0026lsquo;Retour\u0026rsquo; (‚Üê) du navigateur internet‚Ä¶ Tu manipules sans le savoir des concepts appell√©s en informatique des structures de donn√©es, et les algorithmes associ√©s qui les font vivre.\nDans cet article, on va mettre un peu de clart√© l√†-dedans : pas besoin de coder pour comprendre, on va illustrer tout √ßa avec des situations de la vie courante.\nD√©finitions Avant d‚Äôaller plus loin, quelques d√©finitions simples, histoire de parler le m√™me langage :\nDonn√©e : une donn√©e, c‚Äôest une information num√©rique. √áa peut √™tre un num√©ro de passeport, le nombre de dents d‚Äôune personne, la liste des t√¢ches que tu as encore repouss√©es √† demain, ou ton nombre d‚Äôamis sur Facebook. Structure de donn√©es : imagine une bo√Æte, une √©tag√®re ou un sac √† dos, dans lequel tu ranges tes informations d‚Äôune certaine mani√®re pour mieux les retrouver ou les traiter. C‚Äôest la fa√ßon dont on organise les donn√©es. Algorithme : un algorithme, c‚Äôest une suite d‚Äô√©tapes ou d‚Äôinstructions pour manipuler ces donn√©es. Comme une recette de cuisine, ou une proc√©dure √† suivre pour obtenir un r√©sultat. File et pile : deux mani√®res d‚Äôattendre‚Ä¶ ou de repousser Maintenant qu‚Äôon a les bases, voyons deux structures de donn√©es tr√®s simples mais tr√®s puissantes : la file et la pile. On les retrouve partout dans notre quotidien, souvent sans s‚Äôen rendre compte.\nLa file ‚Äî ou comment attendre son tour (FIFO) Imagine une file d‚Äôattente devant un guichet. Le premier arriv√© est le premier servi. C‚Äôest ce qu‚Äôon appelle en informatique une file (ou queue en anglais), avec une logique FIFO : First In, First Out (premier entr√©, premier sorti).\nD√®s que quelqu‚Äôun est servi, c‚Äôest le suivant dans la file qui avance.\nüéØ C‚Äôest une structure √©quitable : chacun attend selon son ordre d‚Äôarriv√©e.\nüìå Exemples dans la vie r√©elle Faire la queue √† la caisse du magasin La liste des courses (si on lit de haut en bas) üíª Exemples en informatique Les syst√®mes de ticket dans les accueils (le num√©ro est g√©n√©r√© par un programme, et les appels suivent cet ordre) Les commentaires sur une publication Facebook (affich√©s du plus ancien au plus r√©cent) La pile ‚Äî ou comment empiler les priorit√©s (LIFO) Maintenant, imagine une pile de livres que tu dois r√©viser pour un examen. Tu prends celui du haut, tu le lis, puis tu prends celui juste en dessous, et ainsi de suite. Tu lis dans l‚Äôordre inverse de celui dans lequel tu as empil√© les livres. Tu viens de d√©piler ta pile, toujours en commen√ßant par le haut.\nC‚Äôest exactement le principe de la pile (ou stack en anglais), qui suit la logique LIFO : Last In, First Out (dernier entr√©, premier sorti).\nTu vas peut-√™tre me dire :\nOui mais je peux aussi prendre le livre du bas, non‚ÄØ?\nC‚Äôest vrai. Alors prenons un autre exemple, un peu plus r√©aliste :\nImagine que tu tombes sur un article de journal qui parle des nodules polym√©talliques dans les fonds marins de la Polyn√©sie fran√ßaise. Tu n‚Äôy connais pas grand-chose, mais √ßa t‚Äôintrigue. Tu lis l‚Äôarticle, puis tu ouvres une page Wikip√©dia pour comprendre ce qu‚Äôest un nodule polym√©tallique. Sur cette page, tu vois un lien vers les m√©taux rares, puis vers la transition √©nerg√©tique, puis‚Ä¶ tu vois o√π je veux en venir.\nEn lisant ce premier article, tu ne soup√ßonnais pas toute la pile d‚Äôinformations que tu allais explorer. Et tu viens de d√©piler ce savoir, en commen√ßant par la derni√®re page ouverte.\nüéØ Ce n‚Äôest pas une structure √©quitable : ce qui arrive en dernier est trait√© en premier. Mais c‚Äôest tr√®s utile pour remonter dans le temps, ou revenir sur ses pas, exactement comme le bouton \u0026ldquo;retour\u0026rdquo; de ton navigateur.\nüìå Exemples dans la vie r√©elle Les cartons dans un coffre bien rempli Les diff√©rentes strates de terre quand tu creuses dans ton jardin (c\u0026#39;est de la terre empil√©e au cours du temps) üíª Exemples en informatique Le bouton \u0026#39;Retour\u0026#39; (‚Üê) de ton navigateur Les annulations successives (Undo, CTRL\u0026#43;Z) dans un √©diteur de texte Si tu veux conna√Ætre d\u0026rsquo;autres structures de donn√©es, tu peux regarder le prochain article : IMVV ‚Äî Section 1 ‚Äî Chapitre 2 ‚Äî Autres structures de donn√©es, j\u0026rsquo;organise mon bordel\n‚Üê Retour √† la section\n‚Üê Retour √† l‚Äôintroduction\n","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/les-bases/file-et-pile/","summary":"\u003cp\u003eQuand tu prends un ticket pour attendre ton tour, que tu fais la queue √† la caisse, que tu prends l‚Äôassiette du haut de la pile pour mettre la table, ou que tu cliques sur le bouton \u0026lsquo;Retour\u0026rsquo; (‚Üê) du navigateur internet‚Ä¶\nTu manipules sans le savoir des concepts appell√©s en informatique \u003cstrong\u003edes structures de donn√©es\u003c/strong\u003e, et \u003cstrong\u003eles algorithmes\u003c/strong\u003e associ√©s qui les font vivre.\u003c/p\u003e\n\u003cp\u003eDans cet article, on va mettre un peu de clart√© l√†-dedans : pas besoin de coder pour comprendre, on va illustrer tout √ßa avec des situations de la vie courante.\u003c/p\u003e","title":"IMVV ‚Äî Section 1 ‚Äî Chapitre 1 ‚Äî File ou Pile ? L'art de passer avant les autres"},{"content":"√ätre fiu est un art, une vertu. Non, ce n\u0026rsquo;est pas une blague. Tu ne me crois pas ?\n\u0026ldquo;We will encourage you to develop the three great virtues of a programmer: laziness, impatience, and hubris.\u0026rdquo; ‚Äî Larry Wall, Programming perl (1991).\n\u0026ldquo;I choose a lazy person to do a hard job. Because a lazy person will find an easy way to do it.\u0026rdquo; ‚Äî Bill Gates.\nProgrammer une machine pour qu\u0026rsquo;elle fasse le travail √† ta place, c\u0026rsquo;est de la fain√©antise.\nEt les d√©veloppeurs sont des personnes qui ont atteint l\u0026rsquo;apog√©e du fiu. Apr√®s tout, qui passe 2 heures √† automatiser une t√¢che qui prend 2 minutes par jour, √† part quelqu\u0026rsquo;un de vraiment fiu ?\nDans cet article, on verra deux techniques que les d√©veloppeurs utilisent, mais que toi aussi tu utilises sans le savoir.\nM√©mo√Øsation ‚Äî ou comment garder une information dans un coin de la t√™te Supposons que tu sois responsable de la paie dans une petite entreprise. Pour ce mois-ci, tu dois calculer les salaires √† verser √† 2 employ√©s.\nTu sais que tous les deux ont un salaire brut de 200 000 XPF. De plus, ils ont fait un excellent travail, ton patron t\u0026rsquo;a dit de leur rajouter une prime de 50% de leur salaire brut. Enfin, l\u0026rsquo;un d\u0026rsquo;eux a fait des heures suppl√©mentaires, il faut donc lui rajouter 20 000 XPF brut sur sa paie.\nPour le 1er salari√©, tu pars de 200 000, tu rajoutes 50%, soit 100 000, ce qui lui fera 300 000 XPF brut pour ce mois.\nPour le 2√®me salari√©, tu sais que le d√©but du calcul est le m√™me, alors tu r√©utilises le nombre 300 000, et tu rajoutes 20 000 d\u0026rsquo;heures suppl√©mentaires, donc 320 000 bruts.\nSans m√©mo√Øsation, tu aurais recalcul√© 200 000 + 50 %. Mais tu t‚Äôes souvenu que ce calcul avait d√©j√† √©t√© fait, donc tu as directement repris le r√©sultat. Ce que tu viens de faire, c\u0026rsquo;est de la m√©mo√Øsation (memoization en anglais).\nC‚Äôest exactement ce que fait ton navigateur web quand il te propose un r√©sultat de recherche d√©j√† visit√©, ou qu‚Äôun site charge plus vite la 2·µâ fois.\nInstant Dev En informatique, on utilise un tableau ou un tableau associatif pour stocker les r√©sultats interm√©diares, ces structures sont stock√©es dans la RAM. De cette fa√ßon, on peut rapidement r√©cup√©rer le r√©sultat qui nous int√©resse. Attention : En informatique, comme dans la vraie vie, garder des informations de c√¥t√© peut conduire √† une saturation de la m√©moire. C\u0026rsquo;est un des facteurs de burn-out. M√©nagez votre cerveau, il n\u0026rsquo;y a pas de mal √† noter les choses, de plus, vous aurez moins de risque d\u0026rsquo;oublier des informations importantes.\nEager loading et Lazy loading ‚Äî l\u0026rsquo;art d\u0026rsquo;√™tre pr√©par√© √† toute √©ventualit√© Supposons que tu aies invit√© tes amis √† manger √† la maison ce soir. Tu as invit√© 10 personnes, mais tu sais que 5 vont vraiment venir, les autres t\u0026rsquo;ont dit \u0026ldquo;peut-√™tre\u0026rdquo;.\nPour √©viter d\u0026rsquo;√™tre √† court de nourriture, tu as pr√©par√© pour 10 personnes, au pire, ceux qui sont venus repartiront avec quelques plats, et tu termineras le reste durant la semaine.\nLes premiers invit√©s vont arriver, tu n\u0026rsquo;as pas encore pr√©par√© la table. Tu as 2 solutions :\nTout pr√©parer d\u0026rsquo;avance : sortir toutes les assiettes, les verres, les chaises, les couverts, etc. (solution eager loading : tu charges tout d√®s le d√©but).\nAttendre de voir qui arrive : d√®s qu‚Äôun invit√© entre, tu sors une assiette, un verre, une chaise, etc. (solution lazy loading : tu ne charges que ce qui est n√©cessaire, au moment o√π c‚Äôest n√©cessaire).\nMais tu peux aussi exiger des invit√©s qu\u0026rsquo;ils te disent, la veille au plus tard, si oui ou non ils viennent !\nOui, et que se passe-t-il si l\u0026rsquo;un d\u0026rsquo;eux a un emp√™chement ? En mettant tous les couverts, tu as d√©pens√© de l\u0026rsquo;√©nergie pour mettre son couvert, et tu en as re-d√©pens√© pour le ranger. Ce n\u0026rsquo;est pas tr√®s optimis√©.\nSi tous les invit√©s arrivent, tu auras fait plusieurs allers-retours pour mettre les couverts, ce n\u0026rsquo;est pas tr√®s optimis√© non plus\u0026hellip;\nAh, tu mets le doigt sur un point important : les techniques d\u0026rsquo;optimisation doivent √™tre utilis√©es uniquement si on est s√ªr de leur utilit√©.\n\u0026ldquo;Premature optimization is the root of all evil\u0026rdquo; ‚Äî Sir Tony Hoare et Donald Knuth.\nC\u0026rsquo;est un pi√®ge dans lequel tombent plusieurs d√©veloppeurs juniors. Les √©coles sup√©rieures enseignent diff√©rentes techniques d\u0026rsquo;optimisation, on est conditionn√©s √† d√©tecter un probl√®me et √† appliquer imm√©diatement une solution : c\u0026rsquo;est normal.\nAvec l\u0026rsquo;exp√©rience, on apprend qu\u0026rsquo;on a besoin d\u0026rsquo;optimiser uniquement quand une personne se plaint de lenteurs. Et dans ce cas, on cherche o√π se trouve la source du probl√®me, on mesure.\nOk mais\u0026hellip; √ßa me fait bizarre de ne pas pr√©parer une belle table, c\u0026rsquo;est pas un bon accueil.\nDans ce cas, le eager loading a une vraie plus-value. Tu charges tout d\u0026rsquo;un coup pour l\u0026rsquo;effet waow, pour que les personnes se disent que chez toi, on est bien re√ßu. La principale fonctionnalit√© n\u0026rsquo;est pas d\u0026rsquo;optimiser le fait de mettre la table, mais d\u0026rsquo;impressionner tes convives.\nJe finis cette partie avec un exemple informatique : Facebook ne charge pas toutes les publications d√®s le d√©but, seulement une partie.\nQuand tu commences √† scroller, tu vois ces publications. Si tu te rapproches de la fin, Facebook charge les prochaines publications, on appelle √ßa infinite scroll.\nAinsi, Facebook ne prend pas trop de temps √† se charger au d√©but.\nAttends mais\u0026hellip; Dans l\u0026rsquo;article pr√©c√©dent, on parlait des √©crans de chargement des jeux vid√©os, √ßa y ressemble un peu, non ?\nExactement, les √©crans de chargement sont aussi du lazy loading, et pour rejoindre ce qu\u0026rsquo;on disait sur ces √©crans : le lazy loading √©conomise de la m√©moire.\nEnfin, √† ton avis, comment Facebook sait qu\u0026rsquo;il faut charger la suite des publications ?\nEh bien en fait, l\u0026rsquo;application est r√©active, on peut √©crire son algorithme de chargement comme ceci:\nQuand un certain seuil de scroll est atteint (par exemple, 90% du contenu affich√©), alors: Charge la suite du contenu Passe √† autre chose Fin quand Tu l\u0026rsquo;auras remarqu√©, c\u0026rsquo;est ce qu\u0026rsquo;on a vu dans l\u0026rsquo;article IMMV ‚Äî Section 2 ‚Äî Chapitre 1 ‚Äî Synchrone et Asynchrone, ou comment r√©agir au changement.\nConclusion Dans cet article, on a vu diff√©rents m√©canimes d\u0026rsquo;optimisation.\nPlus important encore, si on se rappelle des pr√©c√©dents articles, on a vu qu\u0026rsquo;en informatique, en plus de combiner les structures de donn√©es et les structures de contr√¥le, on pouvait combiner les concepts d\u0026rsquo;optimisation et de modes d\u0026rsquo;ex√©cution.\nLe prochaine article est en cours de r√©daction, on parlera de complexit√©.\n‚Üê Retour √† la section\n‚Üê Retour √† l‚Äôintroduction\n","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/optimisation/memoisation/","summary":"\u003cp\u003e√ätre \u003cem\u003efiu\u003c/em\u003e est un art, une vertu. \u003cstrong\u003eNon, ce n\u0026rsquo;est pas une blague\u003c/strong\u003e. Tu ne me crois pas ?\u003c/p\u003e\n\u003cp\u003e\u0026ldquo;We will encourage you to develop the three great virtues of a programmer: laziness, impatience, and hubris.\u0026rdquo; ‚Äî \u003cem\u003eLarry Wall, Programming perl (1991)\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003e\u0026ldquo;I choose a lazy person to do a hard job. Because a lazy person will find an easy way to do it.\u0026rdquo; ‚Äî \u003cem\u003eBill Gates\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eProgrammer une machine pour qu\u0026rsquo;elle fasse le travail √† ta place, c\u0026rsquo;est de la fain√©antise.\u003c/p\u003e","title":"IMVV ‚Äî Section 3 ‚Äî Chapitre 2 ‚Äî M√©mo√Øsation et Lazy loading, la technique du fain√©ant ultime"},{"content":"Dans le pr√©c√©dent article, IMMV ‚Äî Section 2 ‚Äî Chapitre 1 ‚Äî Synchrone et Asynchrone, ou comment r√©agir au changement, on a vu les diff√©rents modes d\u0026rsquo;ex√©cution.\nOn s\u0026rsquo;√©tait arr√™t√© sur le probl√®me suivant : Comment faire pour r√©pondre √† la mont√©e en charge, √† l\u0026rsquo;accumulation de t√¢ches ?\nEh bien, dans cet article, on va voir comment on r√©sout ce probl√®me, en informatique comme dans la vraie vie : les m√©canismes sont souvent tr√®s proches.\nPour cela on va continuer avec notre exemple de restaurant. Et on va expliciter diff√©rents termes que j\u0026rsquo;avais regroup√©s en parlant d\u0026rsquo;algorithmes et de programmes.\nN\u0026rsquo;oublie pas que les objectifs de ces articles sont :\nTe donner une meilleure compr√©hension des bases de l‚Äôinformatique, T\u0026rsquo;inspirer pour analyser ou optimiser les situations du quotidien, ou peut-√™tre, qui sait, te donner envie d\u0026rsquo;explorer encore plus loin\u0026hellip; jusqu‚Äô√† en faire ton m√©tier. Le programme ‚Äî l\u0026rsquo;id√©e de restaurant En informatique, quand on parle de programme, on parle uniquement d\u0026rsquo;un ensemble d\u0026rsquo;algorithmes, des t√¢ches qui le composent. Il n\u0026rsquo;est pas encore en train d\u0026rsquo;√™tre ex√©cut√©. Par exemple, Facebook est un programme ‚Äî mais tant que tu ne l‚Äôouvres pas, il ne fait rien.\nEh bien, c\u0026rsquo;est pareil pour un restaurant dans la vie de tous les jours, quand je parle du restaurant √† un ami, je n\u0026rsquo;y suis pas physiquement. Je parle juste du concept de restaurant, de l\u0026rsquo;id√©e que je m\u0026rsquo;en fais.\nLe processus - le restaurant ouvert Si je veux parler du restaurant physiquement ouvert, avec les employ√©s qui s\u0026rsquo;activent, en informatique il faut plut√¥t utiliser le terme processus. C\u0026rsquo;est le programme en cours d\u0026rsquo;ex√©cution.\nUn processus poss√®de son propre contexte d\u0026rsquo;ex√©cution, c\u0026rsquo;est un gros mot pour dire qu\u0026rsquo;il a ses propres ressources, et que personne ne peut lui prendre ses ressources.\nEn effet, quand le restaurant est ouvert, les assiettes qu\u0026rsquo;il utilise sont ses propres assiettes, ses propres ressources. Il n\u0026rsquo;y a pas un autre restaurant qui lui prendrait ses assiettes pendant qu\u0026rsquo;il est ouvert, sinon il risque d\u0026rsquo;avoir des assiettes manquantes.\nPour ex√©cuter un algorithme, un processus est compos√© d\u0026rsquo;un thread principal, et il peut avoir d\u0026rsquo;autres thread.\nLe thread ‚Äî la proc√©dure en cours d\u0026rsquo;ex√©cution du serveur Le thread (fil d\u0026rsquo;ex√©cution en fran√ßais) est ce qu‚Äôon appelle la proc√©dure en train de s\u0026rsquo;ex√©cuter. C‚Äôest un peu comme un serveur qui suit activement une fiche d\u0026rsquo;instructions √† un instant donn√©. Attention, ce n\u0026rsquo;est pas le serveur.\nEn informatique, on dit que le thread est l‚Äôunit√© d‚Äôex√©cution, C‚Äôest la plus petite unit√© qu‚Äôun ordinateur puisse piloter pour ex√©cuter du code. il n‚Äôexiste pas d‚Äôunit√© plus petite qu‚Äôun thread pour ex√©cuter une t√¢che.\nMaintenant qu‚Äôon comprend ce qu‚Äôest un thread ‚Äî une proc√©dure en cours d\u0026rsquo;ex√©cution ‚Äî il faut se demander qui ex√©cute cette proc√©dure.\nLe coeur ‚Äî le serveur On y arrive enfin, dans un ordinateur, le composant physique qui ex√©cute un thread s\u0026rsquo;appelle un coeur (core en anglais). Pour notre restaurant, ce core est le serveur. C\u0026rsquo;est lui, physiquement, qui prend les commandes, sert les plats, etc.\nConcurrence, parall√©lisme, multithread et monothread ‚Äî ou comment servir 2 familles en m√™me temps Un serveur ne peut faire qu\u0026rsquo;une seule chose √† la fois, √† un instant donn√© : quand il prend une commande √† l\u0026rsquo;instant T, il ne peut pas, en m√™me temps, servir des plats.\nPar contre, il pourrait s\u0026rsquo;interrompre pendant les t√¢ches, par exemple, au lieu de prendre toutes les commandes de la famille, d\u0026rsquo;un coup, il peut :\nprendre la commande d\u0026rsquo;un 1er plat aller chercher un plat √† servir servir le plat prendre la commande d\u0026rsquo;un 2√®me plat aller chercher un autre plat √† servir servir le plat etc. Attention: ici nous n\u0026rsquo;avons pas d√©coup√© les actions. C\u0026rsquo;est juste que le serveur a jongl√© entre les 2 t√¢ches \u0026ldquo;prendre la commande\u0026rdquo; et \u0026ldquo;servir les plats\u0026rdquo;. On appelle ce comportement la concurrence, car les 2 t√¢ches sont en concurrence pour √™tre termin√©es.\nDans un ordinateur, les threads sont concurrents, et comme √©nonc√© plus haut, √©tant donn√© qu\u0026rsquo;un processus est compos√© d\u0026rsquo;un thread principal, on dit que les processus sont concurrents.\nDans la vraie vie il y a des situations o√π on ne jongle pas avec les t√¢ches, o√π il faut √™tre concentr√© sur une t√¢che\nTout √† fait, et dans ce cas, s\u0026rsquo;il y a trop de t√¢ches pour une seule personne, on fait intervenir une 2√®me personne, une 3√®me etc.\nDans notre restaurant, avec 2 serveurs, pendant que l\u0026rsquo;un prend les commandes de la famille 1, un autre peut servir les plats de la famille 2. On appelle √ßa le parall√©lisme, les proc√©dures/threads sont ex√©cut√©s en parall√®le.\nEnfin, dans un restaurant, si on ne peut avoir qu\u0026rsquo;un seul serveur qui suit activement une fiche d\u0026rsquo;instructions ‚Äî un seul thread ‚Äî, on dit que le restaurant/le programme est monothread. S\u0026rsquo;il y en a plusieurs, on dit que le restaurant/serveur est multithread.\nDu coup, la solution pour le restaurant est d\u0026rsquo;embaucher plus de serveurs ?\nC\u0026rsquo;est l\u0026rsquo;une des solutions, oui, mais ce n\u0026rsquo;est pas la seule. Il y a globalement 2 chemins pour r√©pondre √† une mont√©e en charge. On peut :\noptimiser les algorithmes pour les rendre plus performants et/ou changer le mode d\u0026rsquo;ex√©cution, ou alors on peut mettre plus de coeurs et faire du multithread. De la m√™me mani√®re, dans la vraie vie, on peut :\nmieux former le serveur et/ou optimiser les proc√©dures qu\u0026rsquo;il doit suivre et/ou le motiver pour qu\u0026rsquo;il travaille plus vite, embaucher plus de serveurs. Dans tous les cas, je ne m\u0026rsquo;avancerai pas pour apprendre √† un restaurateur son m√©tier.\nLe partage de ressources ‚Äî ou comment partager une fourchette Dans le restaurant, on va maintenant se mettre du point de vue d\u0026rsquo;un couple, venu manger en t√™te √† t√™te dans une ambiance cosy, tamis√©e, √† l\u0026rsquo;abri des regards.\nLe serveur leur annonce la mauvaise nouvelle: il y a assez de couverts pour 2, sauf pour la fourchette. S\u0026rsquo;ils souhaitent tout de m√™me manger ici, ils devront se partager la fourchette, et interdiction de manger avec les doigts.\nLe couple discute, et finalement ce n\u0026rsquo;est pas un probl√®me, ils sont l√† pour profiter de l\u0026rsquo;instant.\nUne fois la commande pass√©e et les plats servis, Le couple commence √† manger. Mais comment s‚Äôorganisent-ils ?\nBen ils mangent chacun leur tour, ou alors l\u0026rsquo;un mange d\u0026rsquo;abord, et l\u0026rsquo;autre ensuite ?\nBingo, que l\u0026rsquo;un mange d\u0026rsquo;abord, puis l\u0026rsquo;autre, ou qu\u0026rsquo;ils mangent √† tour de r√¥le, dans tous les cas, ils doivent se partager une ressource : la fourchette. Donc l\u0026rsquo;un prend le contr√¥le de la ressource/fourchette, fait des actions avec cette ressource, puis lib√®re la ressource. L\u0026rsquo;autre peut √† son tour prendre le contr√¥le de la ressource, etc.\nDans un ordinateur, c\u0026rsquo;est pareil, dans un processus, les threads doivent se partager les ressources. De m√™me, les processus doivent se partager les ressources.\nC\u0026rsquo;est pour √ßa que sur un ordinateur, quand tu ouvres un document Word partag√© avec tes coll√®gues, parfois tu as un message du genre \u0026ldquo;le fichier est d√©j√† ouvert par\u0026hellip;\u0026rdquo; car le document Word est une fourchette ressource partag√©e entre ton application Word, et celle de ton coll√®gue.\nElle est bizarre ton explication\u0026hellip;\nJe ne vois pas de quoi tu parles.\nQuoiqu\u0026rsquo;il en soit, tu comprends donc qu\u0026rsquo;en rajoutant plus de threads/cores/personnes, on ne va pas forc√©ment plus vite. Ils doivent se synchroniser pour partager les ressources et parfois attendre.\nInstant Dev En informatique, ce partage de ressource s‚Äôappelle une section critique. Pour √©viter que deux t√¢ches utilisent la ressource en m√™me temps, on utilise des verrous (locks). Conclusion Dans cet article, on a vu diff√©rents termes informatiques qui permettent de comprendre un peu plus comment fonctionne un ordinateur, comment on pouvait r√©pondre √† la mont√©e en charge de diff√©rentes mani√®res, et que finalement, c\u0026rsquo;est tr√®s proche de la vie r√©elle.\nNous avons fini cette section \u0026ldquo;IMMV ‚Äî Section 2 ‚Äî L\u0026rsquo;ex√©cution : comment faire des actions ?\u0026rdquo;.\nDans la prochaine section, IMMV ‚Äî Section 3 ‚Äî L\u0026rsquo;optimisation : comment se faire passer pour un coach de vie, on verra comment optimiser des applications et la vie r√©elle.\n‚Üê Retour √† la section\n‚Üê Retour √† l‚Äôintroduction\n","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/l-execution/threads/","summary":"\u003cp\u003eDans le pr√©c√©dent article, \u003ca href=\"../sync-async/\"\u003eIMMV ‚Äî Section 2 ‚Äî Chapitre 1 ‚Äî Synchrone et Asynchrone, ou comment r√©agir au changement\u003c/a\u003e, on a vu les diff√©rents modes d\u0026rsquo;ex√©cution.\u003c/p\u003e\n\u003cp\u003eOn s\u0026rsquo;√©tait arr√™t√© sur le probl√®me suivant : Comment faire pour r√©pondre √† la mont√©e en charge, √† l\u0026rsquo;accumulation de t√¢ches ?\u003c/p\u003e\n\u003cp\u003eEh bien, dans cet article, on va voir comment on r√©sout ce probl√®me, en informatique \u003cstrong\u003ecomme dans la vraie vie\u003c/strong\u003e : les m√©canismes sont souvent tr√®s proches.\u003c/p\u003e","title":"IMMV ‚Äî Section 2 ‚Äî Chapitre 2 ‚Äî Monothread, Multithread, Parall√©lisme et Concurrence, je ne peux pas tout faire en m√™me temps !"},{"content":"Dans le pr√©c√©dent article IMVV ‚Äî Section 1 ‚Äî Chapitre 1 ‚Äî File ou Pile ? L\u0026rsquo;art de passer avant les autres on a d√©couvert les files et les piles. Cette fois, on va survoler plusieurs autres structures de donn√©es (data structures en anglais) qu\u0026rsquo;on utilise tr√®s souvent en informatique\u0026hellip; et dans la vraie vie.\nN\u0026rsquo;oublie pas que les objectifs de ces articles sont :\nTe donner une meilleure compr√©hension des bases de l‚Äôinformatique, T\u0026rsquo;inspirer pour analyser ou optimiser les situations du quotidien, ou peut-√™tre, qui sait, te donner envie d\u0026rsquo;explorer encore plus loin\u0026hellip; jusqu‚Äô√† en faire ton m√©tier. Le tableau ‚Äî la base de presque tout Tu as peut-√™tre remarqu√© dans le pr√©c√©dent article que la file et la pile se ressemblent beaucoup. En r√©alit√©, on peut les repr√©senter toutes les deux avec la m√™me structure : un tableau.\nEn informatique, le tableau (ou array en anglais) est l‚Äôune des structures les plus simples : on range des √©l√©ments les uns √† la suite des autres, dans un espace de taille fixe, et chaque √©l√©ment est rep√©r√© par sa position (ou index).\nPrenons un exemple simple : un tableau d\u0026rsquo;amis √† inviter pour un anniversaire, mais dans mon carnet d\u0026rsquo;adresses je n\u0026rsquo;ai que 6 places.\nAmis Manutea Vai Purotu Heiarii Reva (vide) index 0 1 2 3 4 5 L‚Äôindex est simplement la position de la personne dans le tableau, ce n\u0026rsquo;est pas un ordre.\nDans la plupart des langages informatiques, l\u0026rsquo;index commence √† 0, et pas √† 1.\nCet index nous permet d\u0026rsquo;acc√©der directement √† Vai, l\u0026rsquo;amie √† l\u0026rsquo;index 2 (ou 3√®me √©l√©ment), pour voir son num√©ro de t√©l√©phone par exemple.\nEt ce tableau peut se comporter diff√©remment selon la mani√®re dont on ajoute et retire les √©l√©ments. Par exemple, on peut le faire fonctionner comme une file ou une pile, simplement en changeant les r√®gles du jeu.\nSi c\u0026rsquo;est une file : On ajoute les amis √† la fin, par exemple, Jean arrive apr√®s Reva : Amis Manutea Vai Purotu Heiarii Reva Jean index 0 1 2 3 4 5 Et on traite depuis le d√©but, on retire Manutea du tableau : Amis Vai Purotu Heiarii Reva Jean (vide) index 0 1 2 3 4 5 Pour une pile : On ajoute les amis au d√©but, Jean arrive avant Manutea : Amis Jean Manutea Vai Purotu Heiarii Reva index 0 1 2 3 4 5 Et on traite toujours depuis le d√©but, on retire Jean du tableau : Amis Manutea Vai Purotu Heiarii Reva (vide) index 0 1 2 3 4 5 Dans les deux cas, on utilise un tableau pour stocker les amis. C‚Äôest la logique d‚Äôajout et de retrait qui transforme ce tableau en pile ou en file.\nüéØ Et c‚Äôest exactement pour √ßa que, lorsqu‚Äôon traite des dossiers empil√©s, il vaut mieux commencer par ceux du bas. Sinon, on inverse l‚Äôordre d‚Äôarriv√©e‚Ä¶ et ce n‚Äôest plus une file d‚Äôattente, mais une injustice organis√©e.\nS\u0026rsquo;il n\u0026rsquo;y a que 6 places, que se passe-t-il si j\u0026rsquo;ai 7 amis ?\nD\u0026rsquo;abord, je te f√©licite d\u0026rsquo;avoir autant d\u0026rsquo;amis. Ensuite, on peut s\u0026rsquo;en sortir, en achetant un carnet d\u0026rsquo;adresse qui a plus de places, et on recopie nos amis dans ce nouveau carnet.\nC\u0026rsquo;est similaire en informatique, on fait un nouveau tableau, plus grand, et on recopie.\nHeureusement, en informatique on a invent√© une autre structure.\nLa liste ‚Äî comme le tableau, mais dynamique La liste (ou list en anglais), c‚Äôest comme un tableau, mais en mieux : la taille n‚Äôest pas fixe.\nTu peux ajouter ou supprimer des √©l√©ments √† tout moment, sans te soucier du nombre de places pr√©vues au d√©part. Et √† tout moment, tu peux demander : ‚ÄúCombien d‚Äô√©l√©ments j‚Äôai dans cette liste ?‚Äù ‚Äî et obtenir une r√©ponse fiable.\nC‚Äôest la version souple du tableau, celle qu‚Äôon trouve dans la majorit√© des langages de programmation modernes.\nRefaisons les exemples de pile et de file, mais cette fois-ci avec des listes.\nSi c\u0026rsquo;est une file : On ajoute les amis √† la fin, par exemple, Jean arrive apr√®s Reva : Amis Manutea Vai Purotu Heiarii Reva Jean index 0 1 2 3 4 5 Nombre d\u0026rsquo;√©l√©ments: 6\nEt on traite depuis le d√©but, on retire Manutea du tableau : Amis Vai Purotu Heiarii Reva Jean index 0 1 2 3 4 Nombre d\u0026rsquo;√©l√©ments: 5\nPour une pile : On ajoute les amis au d√©but, Jean arrive avant Manutea : Amis Jean Manutea Vai Purotu Heiarii Reva index 0 1 2 3 4 5 Nombre d\u0026rsquo;√©l√©ments: 6\nEt on traite toujours depuis le d√©but, on retire Jean du tableau : Amis Manutea Vai Purotu Heiarii Reva index 0 1 2 3 4 Nombre d\u0026rsquo;√©l√©ments: 5\nOn remarque qu\u0026rsquo;il n\u0026rsquo;y a plus la case (vide) et le nombre d\u0026rsquo;√©l√©ments change.\nInstant Dev Pour permettre cette souplesse, la liste est plus gourmande en calculs:\ncalcul √† la vol√©e du nombre d\u0026rsquo;√©l√©ments, r√©allocation de m√©moire. Mais en vrai, √† moins que tu ne codes un satellite, une carte embarqu√©e, ou une console des ann√©es 80, o√π chaque octet compte, il y a peu de raisons d‚Äôutiliser un tableau fixe. Une liste dynamique t\u0026rsquo;√©vitera bien des migraines.\nLe tableau et la liste sont des structures tr√®s basiques et tr√®s puissantes, elles sont les bases de beaucoup d\u0026rsquo;autres structures qu\u0026rsquo;on verra par la suite.\nLe tableau associatif ‚Äî ou comment indexer On avait pris l\u0026rsquo;exemple d\u0026rsquo;un carnet d\u0026rsquo;adresses qu\u0026rsquo;on avait mis dans un tableau ou dans une liste. C\u0026rsquo;est d√©j√† tr√®s bien de pouvoir stocker ta liste d\u0026rsquo;amis, mais si tu as des centaines d\u0026rsquo;amis et que tu veux appeler Vai pour aller √† la mer, tu vas gal√©rer pour chercher dans ce carnet d\u0026rsquo;adresse.\nEn effet, avec les 2 derni√®res structures, tu dois parcourir les √©l√©ments un par un, jusqu\u0026rsquo;√† tomber sur Vai. Tu vas perdre beaucoup de temps √† chercher son num√©ro, √ßa va t\u0026rsquo;√©nerver, tu vas l\u0026rsquo;appeler, lui dire \u0026ldquo;mais quelle id√©e d\u0026rsquo;avoir un pr√©nom qui commence par V!\u0026rdquo;, elle va s\u0026rsquo;√©nerver, vous ne serez plus amis, alors que tu voulais juste aller surfer.\nJe m\u0026rsquo;emporte un peu? Peut-√™tre.\nPour r√©soudre ce probl√®me, en informatique on a invent√© le tableau associatif (ou map en anglais). On utilise le tableau, et on va profiter de l\u0026rsquo;index pour justement indexer les √©l√©ments.\nPour cela, on a besoin de r√©fl√©chir un peu:\nOn sait que l\u0026rsquo;index est une position dans le tableau, donc un nombre On sait que les pr√©noms commencent par une lettre (oui, je suis s√©rieux), on va supposer que c\u0026rsquo;est une lettre de l\u0026rsquo;alphabet, et pas un caract√®re sp√©cial comme *$@ On sait qu\u0026rsquo;il y a 26 lettres dans l\u0026rsquo;alphabet =\u0026gt; Eur√™ka: On peut utiliser la 1√®re lettre du pr√©nom, la transformer en index en utilisant sa position dans l\u0026rsquo;alphabet, et associer le pr√©nom √† cet index. On dit que l\u0026rsquo;index est une cl√© et que le pr√©nom est une valeur par exemple:\nManutea =\u0026gt; M =\u0026gt; M est la 14√®me lettre de l\u0026rsquo;alphabet, donc Manutea sera le 14√®me √©l√©ment. Pour rappel, l\u0026rsquo;index commence √† 0, donc M = index 13. cl√©: 13 valeur: Manutea\nPour Heiarii on aura: cl√©: 7 valeur: Heiarii\nCe qui nous donne:\nAmis (vide) (vide) (vide) (vide) (vide) (vide) (vide) Heiarii (vide) (vide) (vide) (vide) (vide) Manutea (vide) Purotu (vide) Reva (vide) (vide) (vide) Vai (vide) (vide) (vide) (vide) index 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 Avec cette map, on pourra facilement acc√©der aux informations de Vai, puisqu\u0026rsquo;on pourra juste aller directement √† l\u0026rsquo;index 21.\nInstant Dev En vrai, pour calculer l\u0026rsquo;index, on utilise une fonction de hachage (hash en anglais) qui permet de transformer les cl√©s en index. C\u0026rsquo;est pour √ßa qu\u0026rsquo;on appelle √ßa un HashMap en Java. Oui mais moi je n\u0026rsquo;ai pas envie de m\u0026rsquo;emb√™ter √† compter sur mes doigts √† quelle position est la lettre V\u0026hellip;\nTu as raison, dans la vraie vie, dans ton carnet d\u0026rsquo;adresse pour chaque lettre tu as une encoche o√π la lettre y est marqu√©e, et tu notes les informations dans les pages qui correspondent √† cette lettre.\nCarnet d'adresses papier, en rouge les encoches ‚Äî source: Wikim√©dia En informatique c\u0026rsquo;est le m√™me principe, sauf qu\u0026rsquo;on ne peut pas utiliser de lettre comme index, alors on est oblig√© de trouver cette astuce.\nEt en plus, il est nul ton carnet d\u0026rsquo;adresse, comment je fais si j\u0026rsquo;ai 2 amis qui s\u0026rsquo;appellent Vai et Vahine? Je mets Vahine dans la case juste apr√®s? Et si j\u0026rsquo;ai des centaines d\u0026rsquo;amis comme tu le disais au d√©but, je fais comment pour les mettre dans les 26 cases ?\nOk, tranquille, pas de stress.\nEn informatique, on peut combiner les structures, plut√¥t que d\u0026rsquo;associer un pr√©nom √† une lettre, on va associer une liste de pr√©noms √† une lettre. Ci-dessous on r√©√©crit notre map et on ajoute Vahine :\nCl√©s 7 13 15 17 21 ‚Üì ‚Üì ‚Üì ‚Üì ‚Üì Heiarii Manutea Purotu Reva Vai Vahine Comme tu l\u0026rsquo;as remarqu√©, au lieu de mettre directement les pr√©noms dans les cases, il y a des fl√®ches qui pointent vers des listes. On appelle √ßa un pointeur (ou pointer en anglais). c‚Äôest un m√©canisme qui permet √† l‚Äôordinateur de dire \u0026ldquo;Va chercher les donn√©es ailleurs.\u0026rdquo; Plut√¥t que de stocker directement les valeurs, on stocke l‚Äôendroit o√π elles se trouvent.\nC\u0026rsquo;est la plus grande force de l\u0026rsquo;informatique, on peut combiner diff√©rents concepts abstraits pour r√©pondre √† notre besoin.\nL\u0026rsquo;ensemble ‚Äî une structure unique Si comme moi tu fais ta liste de courses durant la semaine en pr√©vision des grandes courses du dimanche, tu as peut-√™tre d√©j√† eu la liste qui ressemble √† :\nlait oeufs pops viande salade oeufs Tu remarques que les oeufs apparaissent 2 fois. On appelle √ßa un doublon.\n√áa peut arriver si lundi tu t\u0026rsquo;es fait une omelette avec les derniers oeufs, tu les as not√©s pour en racheter. Puis que vendredi, tu voulais faire un g√¢teau, mais tu t\u0026rsquo;es souvenu que tu n\u0026rsquo;avais plus d\u0026rsquo;oeufs\u0026hellip; et alors tu les as r√©√©crits.\nC\u0026rsquo;est tr√®s sp√©cifique comme explication\u0026hellip; C\u0026rsquo;est ce qui t\u0026rsquo;es arriv√©, pas vrai?\nTu n\u0026rsquo;as pas de preuve. Cette accusation est fausse.\nBref, la liste et le tableau n\u0026rsquo;ont aucun moyen d\u0026rsquo;emp√™cher la pr√©sence de doublons dans leurs √©l√©ments. C\u0026rsquo;est pour √ßa qu\u0026rsquo;en informatique on a invent√© l\u0026rsquo;ensemble (ou set en anglais), une structure o√π chaque √©l√©ment est unique.\nPar contre, le set n\u0026rsquo;est pas ordonn√© comme le tableau et la liste. Il n\u0026rsquo;y a pas d\u0026rsquo;index permettant d\u0026rsquo;acc√©der directement au 2√®me ou 6√®me √©l√©ment.\nInstant Dev En informatique, pour faire un set, on utilise en fait une map o√π la cl√© est l\u0026rsquo;√©l√©ment. Le calcul de hash nous garantit qu\u0026rsquo;il ne peut pas y avoir de doublon. Et on met une valeur arbitraire dans la valeur associ√©e, comme 1 ou PRESENT.\nSi on veut une structure ordonn√©e sans doublons, on peut :\ncoder une liste avec une fonction d\u0026rsquo;ajout qui rejette les doublons, transformer un set en liste, utiliser une structure sp√©cialis√©e, comme LinkedHashSet en Java üìå Exemples dans la vie r√©elle L\u0026#39;ensemble des ingr√©dients qu‚Äôil te reste dans le frigo L\u0026#39;ensemble des invit√©s √† ton anniversaire üíª Exemples en informatique L\u0026#39;ensemble des num√©ros de passeport en Polyn√©sie fran√ßaise L\u0026#39;ensemble de tes amis Facebook Le graphe ‚Äî ou comment appeler l\u0026rsquo;ami d\u0026rsquo;un ami d\u0026rsquo;un ami Tu pr√©pares ta liste d‚Äôinvit√©s pour ton anniversaire, tu comptes inviter tout ton carnet d\u0026rsquo;adresses.\nEt l√†, tu r√©alises que tu n‚Äôas pas le contact de Paul. Tu l\u0026rsquo;as crois√© en soir√©e et il √©tait cool, tu voudrais l\u0026rsquo;inviter\u0026hellip; mais tu as oubli√© de lui demander son num√©ro.\nHeureusement, tu sais que Purotu le conna√Æt.\nTu l\u0026rsquo;appelles\u0026hellip; zut, elle n\u0026rsquo;a pas son num√©ro. Mais elle te donne le num√©ro de Tiare, une autre amie de Paul. Tu appelles Tiare, tu te pr√©sentes, tu l\u0026rsquo;invite √©galement car tu n\u0026rsquo;es pas un sauvage. Et tu lui demandes le num√©ro de Paul.\nBingo, elle l\u0026rsquo;a, tu appelles Paul et il est chaud pour venir √† ton anniversaire.\nLes liens entre ces personnes peuvent √™tre repr√©sent√©s par un graphe (ou graph en anglais).\nEt ce que tu viens de faire, sans t\u0026rsquo;en rendre compte, c\u0026rsquo;est un parcours de graphe, un algorithme !\n%%{ init: { 'theme': 'base', 'themeVariables': { 'primaryColor': '#ddd', 'primaryTextColor': '#007acc', 'primaryBorderColor': '#007acc', 'lineColor': '#007acc' } } }%% graph TD A[Toi] --- B[Manutea] A --- C[Vai] A --- D[Purotu] A --- E[Heiarii] A --- F[Reva] A --- G[Jean] D --- H[Tiare] H --- I[Paul] Graphe de relation entre les personnes Ce graphe est non orient√©, c\u0026rsquo;est-√†-dire qu\u0026rsquo;il n\u0026rsquo;y a pas de sens entre les √©l√©ments. Chaque case est un noeud, et chaque trait est une ar√™te.\nEffectivement pour √©viter de f√¢cher les personnes, on ne va pas dire \u0026ldquo;Purotu est l\u0026rsquo;ami de Tiare, mais Tiare n\u0026rsquo;est pas l\u0026rsquo;ami de Purotu\u0026rdquo;.\nPar contre, on peut utiliser un graphe orient√© pour repr√©senter les appels que tu as pass√©s.\n%%{ init: { 'theme': 'base', 'themeVariables': { 'primaryColor': '#ddd', 'primaryTextColor': '#007acc', 'primaryBorderColor': '#007acc', 'lineColor': '#007acc' } } }%% graph TD A[Toi] --\u003e B[Manutea] A --\u003e C[Vai] A --\u003e D[Purotu] A --\u003e E[Heiarii] A --\u003e F[Reva] A --\u003e G[Jean] A --\u003e H[Tiare] A --\u003e I[Paul] Graphe des appels que tu as pass√© Ici, chaque case est un noeud, tout comme le graphe non orient√©, mais cette fois-ci, chaque fl√®che est une ar√™te, et donne le sens d\u0026rsquo;appel.\nOn a donc les m√™mes donn√©es, mais on utilise la structure adapt√©e √† ce qu\u0026rsquo;on veut repr√©senter.\nEt c\u0026rsquo;est quoi le parcours de graphe?\nJe suis heureux que tu poses cette question, mais ta question d√©passe le cadre de cet article.\nConclusion On a d√©j√† vu pas mal de choses, je te laisse relire, essayer de combiner les structures entre elles, te renseigner sur internet en cherchant \u0026ldquo;structures de donn√©es\u0026rdquo; ou \u0026ldquo;data structure\u0026rdquo;.\nIl existe beaucoup de structures de donn√©es, celles qui sont pr√©sent√©es dans cet article sont juste les plus basiques, celles qu\u0026rsquo;on apprend dans les premi√®res heures de cours de programmation.\nSi tu souhaites continuer cette aventure, tu peux regarder la suite ici: IMVV ‚Äî Section 1 ‚Äî Chapitre 3 ‚Äî Structures de contr√¥le et algorithme, apprendre √† r√©fl√©chir\n‚Üê Retour √† la section\n‚Üê Retour √† l‚Äôintroduction\n","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/les-bases/structures-de-donnees/","summary":"\u003cp\u003eDans le pr√©c√©dent article \u003ca href=\"../file-et-pile/\"\u003eIMVV ‚Äî Section 1 ‚Äî Chapitre 1 ‚Äî File ou Pile ? L\u0026rsquo;art de passer avant les autres\u003c/a\u003e on a d√©couvert les files et les piles. Cette fois, on va survoler plusieurs autres \u003cstrong\u003estructures de donn√©es\u003c/strong\u003e (\u003cem\u003edata structures\u003c/em\u003e en anglais) qu\u0026rsquo;on utilise tr√®s souvent en informatique\u0026hellip; et dans la vraie vie.\u003c/p\u003e\n\u003cp\u003eN\u0026rsquo;oublie pas que les objectifs de ces articles sont :\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eTe donner une meilleure compr√©hension des bases de l‚Äôinformatique,\u003c/li\u003e\n\u003cli\u003eT\u0026rsquo;inspirer pour analyser ou optimiser les situations du quotidien,\u003c/li\u003e\n\u003cli\u003eou peut-√™tre, qui sait, te donner envie d\u0026rsquo;explorer encore plus loin\u0026hellip; jusqu‚Äô√† en faire ton m√©tier.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"le-tableau--la-base-de-presque-tout\"\u003eLe tableau ‚Äî la base de presque tout\u003c/h2\u003e\n\u003cp\u003eTu as peut-√™tre remarqu√© dans le pr√©c√©dent article que la \u003cstrong\u003efile\u003c/strong\u003e et la \u003cstrong\u003epile\u003c/strong\u003e se ressemblent beaucoup. En r√©alit√©, on peut les repr√©senter toutes les deux avec la m√™me structure : un \u003cstrong\u003etableau\u003c/strong\u003e.\u003c/p\u003e","title":"IMVV ‚Äî Section 1 ‚Äî Chapitre 2 ‚Äî Autres structures de donn√©es, j'organise mon bordel"},{"content":"Dans l\u0026rsquo;article pr√©c√©dent IMVV ‚Äî Section 1 ‚Äî Chapitre 2 ‚Äî Autres structures de donn√©es, j\u0026rsquo;organise mon bordel, on s\u0026rsquo;√©tait arr√™t√© sur ta question :\nEt c\u0026rsquo;est quoi le parcours de graphe?\nDans cet article, on va parler des structures de contr√¥le (control flow statements en anglais), qu\u0026rsquo;on utilise dans des algorithmes (algorithms en anglais).\nAvant d\u0026rsquo;expliquer l\u0026rsquo;algorithme que tu as fait, le parcours de graphe, on doit expliquer les structures de contr√¥le.\nN\u0026rsquo;oublie pas que les objectifs de ces articles sont :\nTe donner une meilleure compr√©hension des bases de l‚Äôinformatique, T\u0026rsquo;inspirer pour analyser ou optimiser les situations du quotidien, ou peut-√™tre, qui sait, te donner envie d\u0026rsquo;explorer encore plus loin\u0026hellip; jusqu‚Äô√† en faire ton m√©tier. Pseudo-code ‚Äî l\u0026rsquo;art de la cuisine Quand tu fais un g√¢teau, tu r√©alises les actions suivantes:\nPr√©chauffer le four Verser la farine dans le saladier Casser les oeufs et mettre le contenu dans le saladier Verser le lait dans le saladier Remuer Verser la pr√©paration dans un moule Mettre le moule au four Attendre 20 minutes Eteindre le four Sortir le moule du four D√©mouler Toute cette suite d\u0026rsquo;√©tapes est ce qu\u0026rsquo;on appelle un algorithme, et la fa√ßon dont on l\u0026rsquo;a √©crit, √ßa s\u0026rsquo;appelle du pseudo-code, parce que √ßa ressemble √† un langage de programmation, mais ce n\u0026rsquo;en est pas un.\nMais pourquoi on appelle √ßa un algorithme? on peut pas juste dire une suite d\u0026rsquo;actions?\nJe te laisse chercher sur internet pourquoi on appelle √ßa un algorithme.\nLa boucle for ‚Äî ou comment √™tre fiu Ton meilleur ami Manutea te demande \u0026ldquo;Comment tu as fait pour inviter toutes ces personnes √† ton anniversaire ?\u0026rdquo;. Laquelle de ces 2 phrases dirais-tu :\nJ\u0026rsquo;ai appel√© Manutea, puis j\u0026rsquo;ai appel√© Vai, puis j\u0026rsquo;ai appel√© Purotu, puis j\u0026rsquo;ai appel√© Heiarii, puis j\u0026rsquo;ai appel√© Reva, puis j\u0026rsquo;ai appel√© Jean, puis j\u0026rsquo;ai appel√© Tiare, puis j\u0026rsquo;ai appel√© Paul J\u0026rsquo;ai pris mon carnet d\u0026rsquo;adresses, puis pour chaque contact, j\u0026rsquo;ai appel√© le num√©ro correspondant La 1√®re phrase est un algorithme sans boucle (loop en anglais) : chaque action est √©crite explicitement.\nLa 2√®me, elle, utilise une boucle ‚Äî tu r√©p√®tes la m√™me action pour chaque contact. Sans forc√©ment y penser, tu utilises aussi une variable : un espace dans ta t√™te pour m√©moriser un num√©ro, que tu remplaces √† chaque nouvel appel.\nCette mani√®re de r√©p√©ter une action avec une variable, c‚Äôest exactement ce qu‚Äôun ordinateur fait quand on lui demande de parcourir une liste.\nSi tu relis bien la 2√®me phrase, tu verras que pour chaque est en gras. En anglais, pour chaque se dit for each, c\u0026rsquo;est pour √ßa qu\u0026rsquo;on l\u0026rsquo;appelle la boucle for dans la plupart des langages.\nSi on essayait d\u0026rsquo;√©crire un algorithme, sous forme de pseudo-code simple pour d√©crire la 2√®me phrase, √ßa donnerait :\nDans mon carnet d\u0026#39;adresses, pour chaque contact: J\u0026#39;ai appel√© le num√©ro correspondant au contact J\u0026#39;ai invit√© l\u0026#39;ami Fin pour \u0026ldquo;Dans mon carnet d\u0026rsquo;adresses, pour chaque contact\u0026rdquo; marque le d√©but de la boucle, et \u0026ldquo;Fin pour\u0026rdquo; marque la fin de la boucle.\nEntre ces 2 lignes, les actions \u0026ldquo;J\u0026rsquo;ai appel√© le num√©ro correspondant au contact\u0026rdquo; et \u0026ldquo;J\u0026rsquo;ai invit√© l\u0026rsquo;ami\u0026rdquo; forment ce qu\u0026rsquo;on appelle un bloc d\u0026rsquo;instructions.\nPar convention, on indente ce bloc ‚Äî on le d√©cale vers la droite ‚Äî pour montrer visuellement qu\u0026rsquo;il est √† l\u0026rsquo;int√©rieur de la boucle.\nOk, et quel est le rapport entre la boucle for et fiu comme marqu√© dans le titre ?\nSi on devait √©crire l\u0026rsquo;algorithme de la 1√®re phrase, √ßa donnerait :\nJ\u0026#39;ai appel√© Manutea J\u0026#39;ai appel√© Vai J\u0026#39;ai appel√© Purotu J\u0026#39;ai appel√© Heiarii J\u0026#39;ai appel√© Reva J\u0026#39;ai appel√© Jean J\u0026#39;ai appel√© Tiare J\u0026#39;ai appel√© Paul Chaque ligne est une action, donc il faut √©crire autant de lignes qu\u0026rsquo;il y a de contacts dans ta liste de contacts. Maintenant, que se passerait-il si tu devais inviter 100 personnes? Tu serais fiu.\nAlors qu\u0026rsquo;avec la boucle, tu n\u0026rsquo;as pas besoin de changer ton algorithme, c\u0026rsquo;est le m√™me, que tu aies 6 contacts ou 100.\nOui mais dans la vraie vie je dois quand m√™me appeler les amis un par un\nCet exemple n‚Äôest pas l√† pour dire que tu vas programmer ton t√©l√©phone ‚Äî mais pour te faire sentir la puissance de la boucle : un seul bloc, quelle que soit la longueur de ta liste.\nDans la vraie vie, tu fais un groupe Facebook avec tous tes amis et tu postes des messages d\u0026rsquo;informations dans le groupe pour organiser, idem pour un groupe SMS. Si t\u0026rsquo;es old school, tu postes un message dans le journal local et viendra qui verra. D\u0026rsquo;ailleurs j\u0026rsquo;en parlerai dans de prochains articles.\nLa boucle while ‚Äî ou comment faire ses devoirs avant d\u0026rsquo;aller jouer Quand tu √©tais plus jeune, on t\u0026rsquo;a s√ªrement d√©j√† dit \u0026ldquo;Fais d\u0026rsquo;abord tes devoirs, ensuite tu peux aller jouer\u0026rdquo;, ou autrement dit \u0026quot;Tant que tu n\u0026rsquo;a pas fini tes devoirs, tu travailles, ensuite tu peux aller jouer\u0026quot;.\nSi on devait √©crire cet algorithme, √ßa donnerait:\nTant que je n\u0026#39;ai pas fini mes devoirs: Je fais mes devoirs Fin tant que Je vais jouer \u0026ldquo;Tant que je n\u0026rsquo;ai pas fini mes devoirs\u0026rdquo; marque le d√©but de la boucle, et \u0026ldquo;Fin tant que\u0026rdquo; marque la fin de la boucle.\nEntre ces 2 lignes, l\u0026rsquo;action \u0026ldquo;Je fais mes devoirs\u0026rdquo; forme le bloc d\u0026rsquo;instructions.\nTu l\u0026rsquo;auras remarqu√©, c\u0026rsquo;est tr√®s similaire √† la boucle for, sauf qu\u0026rsquo;au lieu de parcourir des √©l√©ments, on v√©rifie une condition, et on r√©p√®te la boucle si la condition n\u0026rsquo;est remplie.\nOn appelle √ßa une boucle while, car Tant que se dit while en anglais.\nEnsuite, une fois que les devoirs sont finis, on sort de la boucle, on fait la suite des instructions, donc \u0026ldquo;Je vais jouer\u0026rdquo;. On aurait aussi pu avoir d\u0026rsquo;autres instructions apr√®s la boucle for, c\u0026rsquo;est juste que l\u0026rsquo;exemple ne s\u0026rsquo;y pr√™tait pas.\nMais alors‚Ä¶ pourquoi deux types de boucles si elles font (presque) la m√™me chose ? Pourquoi une boucle for, et une boucle while ?\nEn fait, en fonction du probl√®me qu\u0026rsquo;on veut r√©soudre :\ndans certains cas on pourra compter, et dans ce cas on pr√©f√®rera utiliser une boucle for dans certains cas on ne pourra pas compter, et dans ce cas on pr√©f√®rera utiliser une boucle while Par exemple, pour un enfant qui joue dehors:\nTant qu\u0026#39;il fait beau: Je joue Fin tant que Ici, impossible de compter.\nMais tu commences peut-√™tre √† te rendre compte d\u0026rsquo;une supercherie.\nInstant Dev üí° En r√©alit√©, toutes les boucles for peuvent √™tre r√©√©crites en boucle while.\nLa boucle for n‚Äôest qu‚Äôune boucle while optimis√©e, √©crite pour √™tre plus simple √† lire‚Ä¶ quand on sait compter.\nLes 2 types de boucles sont des instructions d\u0026rsquo;it√©ration, √† la diff√©rence des instructions simples comme \u0026ldquo;Je joue\u0026rdquo;, les instructions d\u0026rsquo;it√©ration permettre d\u0026rsquo;ex√©cuter des blocs d\u0026rsquo;instructions de mani√®re r√©p√©t√©e.\nBravo, tu commences √† r√©fl√©chir comme un d√©veloppeur !\nExplications\nPour rappel:\ndans une liste, l\u0026rsquo;index commence √† 0, dans une liste, le dernier index est √©gal au nombre d\u0026rsquo;√©l√©ments de la liste moins 1 Amis Manutea Vai Purotu Heiarii Reva Jean Tiare Paul index 0 1 2 3 4 5 6 7 Nombre d\u0026rsquo;√©l√©ments: 8\nune variable c\u0026rsquo;est juste un espace m√©moire o√π on stocke une donn√©e (un tableau, une liste, un pr√©nom, un num√©ro de t√©l√©phone) Si on reprend l\u0026rsquo;exemple de la boucle for:\nDans mon carnet d\u0026#39;adresses, pour chaque contact: J\u0026#39;appelle le num√©ro correspondant au contact J\u0026#39;invite l\u0026#39;ami Fin pour Derri√®re, voici plut√¥t ce que fait un ordinateur (de mani√®re simplifi√©e) :\nJe cr√©e une variable \u0026#34;index\u0026#34;, qui vaut 0 Tant que \u0026#34;index\u0026#34; est inf√©rieur au nombre d\u0026#39;√©l√©ments (8) du carnet d\u0026#39;adresses: Je regarde le contact qui se trouve √† l\u0026#39;\u0026#34;index\u0026#34; dans le carnet d\u0026#39;adresses Je r√©cup√®re son num√©ro Je l\u0026#39;invite \u0026#34;index\u0026#34; prend la valeur \u0026#34;index\u0026#34; + 1 Fin tant que Comme tu le vois, c\u0026rsquo;est un peu plus compliqu√©, c\u0026rsquo;est pour √ßa qu\u0026rsquo;on pr√©f√®re utiliser une boucle for quand on peut compter.\nL\u0026rsquo;instruction conditionnelle ‚Äî ou pourquoi il faut respecter le code de la route Juste au-dessus, on parlait de condition dans la boucle while. Mais on n\u0026rsquo;a jamais expliqu√© ce que c\u0026rsquo;√©tait.\nUne condition est une question qu\u0026rsquo;on se pose, et la r√©ponse est soit ‚Äúoui‚Äù, soit ‚Äúnon‚Äù ‚Äî jamais les deux, jamais \u0026ldquo;un peu\u0026rdquo;.\nQuand on √©crit \u0026ldquo;Tant que je n\u0026rsquo;ai pas fini mes devoirs\u0026rdquo;, √† chaque r√©p√©tition on pose la question \u0026ldquo;Est-ce que j\u0026rsquo;ai fini mes devoirs?\u0026rdquo;.\nEn informatique, comme dans la vraie vie, une condition doit √™tre claire.\nOn peut utiliser ce concept pour faire des branchements dans notre code, dans une instruction conditionnelle (conditional statement en anglais).\nPrenons un exemple simple : tu es en voiture, tu approches un feu tricolore. Il est vert.\nQue fais-tu si le feu passe √† l‚Äôorange juste devant toi‚ÄØ?\nVoici un algorithme qui repr√©sente cette situation :\nSi le feu passe au orange, alors: Tu t\u0026#39;arr√™tes Sinon (c\u0026#39;est toujours vert): Tu continues et traverse l\u0026#39;intersection Fin si \u0026ldquo;Si le feu passe au orange,\u0026rdquo; marque le d√©but de l\u0026rsquo;instruction conditionnelle, \u0026ldquo;alors\u0026rdquo; marque la branche du si, \u0026ldquo;Sinon\u0026rdquo; marque la branche du sinon, et \u0026ldquo;Fin si\u0026rdquo; marque la fin de l\u0026rsquo;instruction conditionnelle.\nDe la m√™me mani√®re que pour les boucles, chaque branche est un bloc d\u0026rsquo;instructions. Comme pour les boucles, chaque branche forme un bloc d‚Äôinstructions, qu‚Äôon indente pour bien le rep√©rer.\nPour visualiser, imagine un arbre : chaque fois qu‚Äôune condition est test√©e, tu choisis une branche √† suivre. Le chemin d√©pend de tes r√©ponses.\nRevenons √† notre parcours de graphe Rappels Tu avais appel√© tes amis pour les inviter √† ton anniversaire, et tu avais √©t√© jusqu\u0026rsquo;au bout du monde, en sautant de relations en relations, pour inviter Paul. Tu avais fait ces actions :\nTu comptes inviter tout ton carnet d\u0026#39;adresses. Tu r√©alises que tu n‚Äôas pas le contact de Paul. Tu l\u0026#39;as crois√© en soir√©e et il √©tait cool, tu voudrais l\u0026#39;inviter... mais t\u0026#39;as oubli√© de lui demander son num√©ro. Heureusement, tu sais que Purotu le conna√Æt. Tu l\u0026#39;appelles... zut, elle n\u0026#39;a pas son num√©ro. Mais elle te donne le num√©ro de Tiare, une autre amie de Paul. Tu appelles Tiare, tu te pr√©sentes, tu l\u0026#39;invites √©galement car tu n\u0026#39;es pas un sauvage. Et tu lui demandes le num√©ro de Paul. Bingo, elle l\u0026#39;a, tu appelles Paul et il est chaud pour venir √† ton anniversaire. Ci-dessous se trouve le graphe de relation entre les personnes, un graphe non orient√©.\n%%{ init: { 'theme': 'base', 'themeVariables': { 'primaryColor': '#ddd', 'primaryTextColor': '#007acc', 'primaryBorderColor': '#007acc', 'lineColor': '#007acc' } } }%% graph TD A[Toi] --- B[Manutea] A --- C[Vai] A --- D[Purotu] A --- E[Heiarii] A --- F[Reva] A --- G[Jean] D --- H[Tiare] H --- I[Paul] Graphe de relation entre les personnes En se basant sur ce qu\u0026rsquo;on a appris dans cet article, on va √©crire un algorithme pour repr√©senter les actions que tu as r√©alis√©es pour inviter tes amis :\n# √âtape 1 : inviter tous mes amis directs (les noeuds les plus proches de \u0026#34;Toi\u0026#34; dans le graphe) Je cr√©e une variable \u0026#34;liste d\u0026#39;amis\u0026#34;, contenant tous mes amis directs Je cr√©e une variable \u0026#34;ami\u0026#34;, le contact courant Dans la \u0026#34;liste d\u0026#39;amis\u0026#34;, pour chaque \u0026#34;ami\u0026#34; : J\u0026#39;appelle \u0026#34;ami\u0026#34; Si \u0026#34;ami\u0026#34; r√©pond, alors : Je l\u0026#39;invite √† mon anniversaire Fin si Fin pour # √âtape 2 : retrouver Paul (en parcourant le graphe en largeur) Je cr√©e une variable \u0026#34;file\u0026#34;, initialis√©e avec la \u0026#34;liste d\u0026#39;amis\u0026#34; Je cr√©e une variable \u0026#34;visit√©s\u0026#34;, une liste vide Tant que la \u0026#34;file\u0026#34; n‚Äôest pas vide : Je prends le premier √©l√©ment de la \u0026#34;file\u0026#34;, je le stocke dans \u0026#34;ami\u0026#34; Si \u0026#34;ami\u0026#34; n‚Äôest pas dans \u0026#34;visit√©s\u0026#34;, alors : J‚Äôajoute \u0026#34;ami\u0026#34; √† \u0026#34;visit√©s\u0026#34; J\u0026#39;appelle \u0026#34;ami\u0026#34; Si \u0026#34;ami\u0026#34; r√©pond, alors : Je lui demande s‚Äôil conna√Æt Paul Si \u0026#34;ami\u0026#34; me donne le num√©ro de Paul : Je cr√©e une variable \u0026#34;Paul\u0026#34; J\u0026#39;appelle \u0026#34;Paul\u0026#34; Si \u0026#34;Paul\u0026#34; r√©pond, alors : Je l‚Äôinvite √† mon anniversaire Je termine la recherche Fin si Sinon : Je r√©cup√®re la liste des amis de \u0026#34;ami\u0026#34; Pour chaque \u0026#34;contact\u0026#34; dans cette liste : J‚Äôajoute \u0026#34;contact\u0026#34; √† la \u0026#34;file\u0026#34; Fin pour Fin si Fin si Fin si Fin tant que √Ä premi√®re vue, √ßa a l\u0026rsquo;air compliqu√©. Mais en fait si tu prends le temps de d√©cortiquer, de bien regarder, tu verras que ce sont juste les actions que tu as r√©alis√©s plus haut, mais dans un langage plus proche de ce que fait un ordinateur.\nLa seule chose qu\u0026rsquo;on a fait en plus des concepts de base, c\u0026rsquo;est qu\u0026rsquo;on a combin√© les structures de contr√¥le et les structures de donn√©es, et le tout nous donne notre algorithme de parcours de graphe !\nInstant Dev üí° On a parcouru le graphe en largeur, c\u0026rsquo;est-√†-dire qu\u0026rsquo;on a d\u0026rsquo;abord regard√© les noeuds voisins de notre point de d√©part.\nD\u0026rsquo;autres algorithmes connus et enseign√©s en informatique sont le parcours en profondeur, l\u0026rsquo;algorithme de Dijkstra, A* et Floyd-Warshall, tu peux regarder sur internet si √ßa t\u0026rsquo;int√©resse.\nConclusion Dans cet article on a appris ce que sont :\nLes structures de contr√¥le, Les boucles, Les conditions, Les variables, Les algorithmes. Il existe d\u0026rsquo;autres structures de contr√¥le, des types de variables, et des algorithmes qu\u0026rsquo;on peut r√©utiliser pour r√©pondre √† beaucoup de probl√®mes. Comme d\u0026rsquo;habitude, je te laisse chercher sur internet si tu veux aller plus loin.\nMais le plus important, c\u0026rsquo;est que tu commences √† r√©fl√©chir comme un d√©veloppeur, et √† comprendre le pseudo-code. Dans la vraie vie, si tu as un probl√®me complexe √† r√©soudre, tu peux essayer de l\u0026rsquo;√©crire comme on l\u0026rsquo;a fait pour le parcours de graphe. Prends ton temps et d√©compose le probl√®me.\nNous avons fini cette section \u0026ldquo;IMMV ‚Äî Section 1 ‚Äî Les Bases : structures et contr√¥le\u0026rdquo;, dans cette section, nous avons √©galement vu les structures de donn√©es.\nDans la prochaine section, IMMV ‚Äî Section 2 ‚Äî L\u0026rsquo;ex√©cution : comment faire des actions ?, nous verrons que l\u0026rsquo;ordinateur et l\u0026rsquo;humain font les actions de mani√®re tr√®s similaire.\n‚Üê Retour √† la section\n‚Üê Retour √† l‚Äôintroduction\n","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/les-bases/structures-de-controle/","summary":"\u003cp\u003eDans l\u0026rsquo;article pr√©c√©dent \u003ca href=\"../structures-de-donnees/\"\u003eIMVV ‚Äî Section 1 ‚Äî Chapitre 2 ‚Äî Autres structures de donn√©es, j\u0026rsquo;organise mon bordel\u003c/a\u003e, on s\u0026rsquo;√©tait arr√™t√© sur ta question :\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eEt c\u0026rsquo;est quoi le parcours de graphe?\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eDans cet article, on va parler des \u003cstrong\u003estructures de contr√¥le\u003c/strong\u003e (\u003cem\u003econtrol flow statements\u003c/em\u003e en anglais), qu\u0026rsquo;on utilise dans des \u003cstrong\u003ealgorithmes\u003c/strong\u003e (\u003cem\u003ealgorithms\u003c/em\u003e en anglais).\u003c/p\u003e\n\u003cp\u003eAvant d\u0026rsquo;expliquer l\u0026rsquo;algorithme que tu as fait, le \u003cstrong\u003eparcours de graphe\u003c/strong\u003e, on doit expliquer les structures de contr√¥le.\u003c/p\u003e","title":"IMVV ‚Äî Section 1 ‚Äî Chapitre 3 ‚Äî Structures de contr√¥le et algorithme, apprendre √† r√©fl√©chir"},{"content":"Pr√©c√©demment, on a vu qu\u0026rsquo;en rajoutant des serveurs, on pouvait servir plus de familles. Dans cette section on verra diff√©rents tips permettant d\u0026rsquo;optimiser un programme existant et la vie r√©elle.\nChapitres IMVV ‚Äî Section 3 ‚Äî Chapitre 1 ‚Äî La m√©moire, ou comment √©viter les p√©nuries dans un magasin IMVV ‚Äî Section 3 ‚Äî Chapitre 2 ‚Äî M√©mo√Øsation et Lazy loading, la technique du fain√©ant ultime ","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/optimisation/optimisation/","summary":"\u003cp\u003ePr√©c√©demment, on a vu qu\u0026rsquo;en rajoutant des serveurs, on pouvait servir plus de familles. Dans cette section on verra diff√©rents tips permettant d\u0026rsquo;optimiser un programme existant et la vie r√©elle.\u003c/p\u003e\n\u003ch1 id=\"chapitres\"\u003eChapitres\u003c/h1\u003e\n\n\n\u003cul\u003e\n  \n\t\t\n\t\n\t\t\n    \t\n      \t\u003cli\u003e\u003ca href=\"/blog.dev/posts/miroir-informatique-vraie-vie/optimisation/memoire/\"\u003eIMVV ‚Äî Section 3 ‚Äî Chapitre 1 ‚Äî La m√©moire, ou comment √©viter les p√©nuries dans un magasin\u003c/a\u003e\u003c/li\u003e\n    \t\n  \t\n\t\n\t\t\n    \t\n      \t\u003cli\u003e\u003ca href=\"/blog.dev/posts/miroir-informatique-vraie-vie/optimisation/memoisation/\"\u003eIMVV ‚Äî Section 3 ‚Äî Chapitre 2 ‚Äî M√©mo√Øsation et Lazy loading, la technique du fain√©ant ultime\u003c/a\u003e\u003c/li\u003e\n    \t\n  \t\n\t\n\u003c/ul\u003e","title":"IMMV ‚Äî Section 3 ‚Äî L'optimisation : comment se faire passer pour un coach de vie"},{"content":"Dans cette section, nous verrons comment les actions sont ex√©cut√©es, par les ordinateurs et par les personnes. Et on verra quelques pistes pour r√©pondre √† une accumulation de t√¢ches.\nChapitres IMMV ‚Äî Section 2 ‚Äî Chapitre 1 ‚Äî Synchrone et Asynchrone, ou comment r√©agir au changement IMMV ‚Äî Section 2 ‚Äî Chapitre 2 ‚Äî Monothread, Multithread, Parall√©lisme et Concurrence, je ne peux pas tout faire en m√™me temps ! ","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/l-execution/l-execution/","summary":"\u003cp\u003eDans cette section, nous verrons comment les actions sont ex√©cut√©es, par les ordinateurs et par les personnes. Et on verra quelques pistes pour r√©pondre √† une accumulation de t√¢ches.\u003c/p\u003e\n\u003ch1 id=\"chapitres\"\u003eChapitres\u003c/h1\u003e\n\n\n\u003cul\u003e\n  \n\t\t\n\t\n\t\t\n    \t\n      \t\u003cli\u003e\u003ca href=\"/blog.dev/posts/miroir-informatique-vraie-vie/l-execution/sync-async/\"\u003eIMMV ‚Äî Section 2 ‚Äî Chapitre 1 ‚Äî Synchrone et Asynchrone, ou comment r√©agir au changement\u003c/a\u003e\u003c/li\u003e\n    \t\n  \t\n\t\n\t\t\n    \t\n      \t\u003cli\u003e\u003ca href=\"/blog.dev/posts/miroir-informatique-vraie-vie/l-execution/threads/\"\u003eIMMV ‚Äî Section 2 ‚Äî Chapitre 2 ‚Äî Monothread, Multithread, Parall√©lisme et Concurrence, je ne peux pas tout faire en m√™me temps !\u003c/a\u003e\u003c/li\u003e\n    \t\n  \t\n\t\n\u003c/ul\u003e","title":"IMMV ‚Äî Section 2 ‚Äî L'ex√©cution : comment faire des actions ?"},{"content":"Dans cette section, nous verrons les bases permettant de stocker et manipuler des donn√©es.\nChapitres IMVV ‚Äî Section 1 ‚Äî Chapitre 1 ‚Äî File ou Pile ? L\u0026#39;art de passer avant les autres IMVV ‚Äî Section 1 ‚Äî Chapitre 2 ‚Äî Autres structures de donn√©es, j\u0026#39;organise mon bordel IMVV ‚Äî Section 1 ‚Äî Chapitre 3 ‚Äî Structures de contr√¥le et algorithme, apprendre √† r√©fl√©chir ","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/les-bases/les-bases/","summary":"\u003cp\u003eDans cette section, nous verrons les bases permettant de stocker et manipuler des donn√©es.\u003c/p\u003e\n\u003ch1 id=\"chapitres\"\u003eChapitres\u003c/h1\u003e\n\n\n\u003cul\u003e\n  \n\t\t\n\t\n\t\t\n    \t\n      \t\u003cli\u003e\u003ca href=\"/blog.dev/posts/miroir-informatique-vraie-vie/les-bases/file-et-pile/\"\u003eIMVV ‚Äî Section 1 ‚Äî Chapitre 1 ‚Äî File ou Pile ? L\u0026#39;art de passer avant les autres\u003c/a\u003e\u003c/li\u003e\n    \t\n  \t\n\t\n\t\t\n    \t\n      \t\u003cli\u003e\u003ca href=\"/blog.dev/posts/miroir-informatique-vraie-vie/les-bases/structures-de-donnees/\"\u003eIMVV ‚Äî Section 1 ‚Äî Chapitre 2 ‚Äî Autres structures de donn√©es, j\u0026#39;organise mon bordel\u003c/a\u003e\u003c/li\u003e\n    \t\n  \t\n\t\n\t\t\n    \t\n      \t\u003cli\u003e\u003ca href=\"/blog.dev/posts/miroir-informatique-vraie-vie/les-bases/structures-de-controle/\"\u003eIMVV ‚Äî Section 1 ‚Äî Chapitre 3 ‚Äî Structures de contr√¥le et algorithme, apprendre √† r√©fl√©chir\u003c/a\u003e\u003c/li\u003e\n    \t\n  \t\n\t\n\u003c/ul\u003e","title":"IMMV ‚Äî Section 1 ‚Äî Les bases : structures et contr√¥le"},{"content":"\u0026lsquo;Ia ora na,\nL\u0026rsquo;informatique semble souvent obscure pour beaucoup. Quand je dis que je suis ing√©nieur informatique, on me demande r√©guli√®rement : ¬´ Mais tu fais quoi exactement ? ¬ª.\nAvec le temps, j‚Äôai pris l‚Äôhabitude de vulgariser mon m√©tier. Et ce qui fonctionne le mieux, ce sont les exemples concrets tir√©s de la vie quotidienne.\nEn √©cole d\u0026rsquo;ing√©nieur, j\u0026rsquo;apprenais beaucoup plus facilement l\u0026rsquo;informatique en partant de situations r√©elles. √Ä travers cette s√©rie d‚Äôarticles, \u0026ldquo;L‚Äôinformatique, un miroir de la vraie vie\u0026rdquo; (abr√©g√© IMVV), je vais tenter d‚Äôexpliquer des concepts informatiques en m‚Äôappuyant sur des sc√®nes famili√®res du quotidien, sur un ton l√©ger. Parce que finalement, coder un programme ou g√©rer une file d‚Äôattente au magasin, ce n‚Äôest pas si diff√©rent.\nInformations de lecture Avant de lire les articles list√©s en bas de cette page, quelques informations pour vous faciliter la lecture :\nIl y a un mode sombre et un mode clair : En haut de chaque page se trouve une ic√¥ne pour interchanger entre les modes de lecture sombre et clair\nJ\u0026rsquo;utiliserai des apart√©s pour les d√©veloppeurs,\nInstant Dev Ceci est un apart√© pour les d√©veloppeurs, si tu es non d√©veloppeur tu peux lire, mais tu auras peut-√™tre mal √† la t√™te. J\u0026rsquo;utiliserai des interjections de lecteur, J\u0026rsquo;interviens comme si j\u0026rsquo;√©tais toi, lecteur, pour aider l\u0026rsquo;auteur de ce blog √† rendre ces articles dynamiques\nCette s√©rie d\u0026rsquo;articles n\u0026rsquo;est pas un cours d\u0026rsquo;informatique, vous n\u0026rsquo;apprendrez pas √† d√©velopper juste en suivant ces articles. Mot de fin Que tu sois curieux, d√©butant ou simplement en qu√™te de sens dans ce monde num√©rique, cette s√©rie pourrait bien t‚Äôapporter quelque chose.\nTu y trouveras peut-√™tre :\nune meilleure compr√©hension des bases de l‚Äôinformatique, des id√©es pour analyser ou optimiser les situations du quotidien, ou m√™me, qui sait, l‚Äôenvie de plonger plus loin dans ce domaine‚Ä¶ jusqu‚Äô√† en faire ton m√©tier. Bien s√ªr, cette s√©rie n‚Äôexplorera qu‚Äôune infime partie de ce vaste domaine qu‚Äôest l‚Äôinformatique. Apr√®s tout, peut-on vraiment expliquer enti√®rement l\u0026rsquo;informatique\u0026hellip; un domaine qui, justement, est le miroir de la vie* ?\n*: cette analogie est √† prendre avec recul : l‚Äôinformatique ne refl√®te pas toute la complexit√© de la vie.\nLes articles de la s√©rie (En cours de r√©daction) IMMV ‚Äî Section 1 ‚Äî Les bases : structures et contr√¥le IMMV ‚Äî Section 1 ‚Äî Les bases : structures et contr√¥le IMVV ‚Äî Section 1 ‚Äî Chapitre 1 ‚Äî File ou Pile ? L\u0026#39;art de passer avant les autres IMVV ‚Äî Section 1 ‚Äî Chapitre 2 ‚Äî Autres structures de donn√©es, j\u0026#39;organise mon bordel IMVV ‚Äî Section 1 ‚Äî Chapitre 3 ‚Äî Structures de contr√¥le et algorithme, apprendre √† r√©fl√©chir IMMV ‚Äî Section 2 ‚Äî L\u0026#39;ex√©cution : comment faire des actions ? IMMV ‚Äî Section 2 ‚Äî L\u0026#39;ex√©cution : comment faire des actions ? IMMV ‚Äî Section 2 ‚Äî Chapitre 1 ‚Äî Synchrone et Asynchrone, ou comment r√©agir au changement IMMV ‚Äî Section 2 ‚Äî Chapitre 2 ‚Äî Monothread, Multithread, Parall√©lisme et Concurrence, je ne peux pas tout faire en m√™me temps ! IMMV ‚Äî Section 3 ‚Äî L\u0026#39;optimisation : comment se faire passer pour un coach de vie IMMV ‚Äî Section 3 ‚Äî L\u0026#39;optimisation : comment se faire passer pour un coach de vie IMVV ‚Äî Section 3 ‚Äî Chapitre 1 ‚Äî La m√©moire, ou comment √©viter les p√©nuries dans un magasin IMVV ‚Äî Section 3 ‚Äî Chapitre 2 ‚Äî M√©mo√Øsation et Lazy loading, la technique du fain√©ant ultime ","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/introduction/","summary":"\u003cp\u003e\u0026lsquo;Ia ora na,\u003c/p\u003e\n\u003cp\u003eL\u0026rsquo;informatique semble souvent obscure pour beaucoup. Quand je dis que je suis ing√©nieur informatique, on me demande r√©guli√®rement : ¬´ Mais tu fais quoi exactement ? ¬ª.\u003c/p\u003e\n\u003cp\u003eAvec le temps, j‚Äôai pris l‚Äôhabitude de vulgariser mon m√©tier. Et ce qui fonctionne le mieux, ce sont les exemples concrets tir√©s de la vie quotidienne.\u003c/p\u003e\n\u003cp\u003eEn √©cole d\u0026rsquo;ing√©nieur, j\u0026rsquo;apprenais beaucoup plus facilement l\u0026rsquo;informatique en partant de situations r√©elles.\n√Ä travers cette s√©rie d‚Äôarticles, \u003cstrong\u003e\u0026ldquo;L‚Äôinformatique, un miroir de la vraie vie\u0026rdquo;\u003c/strong\u003e (abr√©g√© \u003cem\u003eIMVV\u003c/em\u003e), je vais tenter d‚Äôexpliquer des concepts informatiques en m‚Äôappuyant sur des sc√®nes famili√®res du quotidien, sur un ton l√©ger.\nParce que finalement, coder un programme ou g√©rer une file d‚Äôattente au magasin, ce n‚Äôest pas si diff√©rent.\u003c/p\u003e","title":"IMMV - Introduction - L'informatique, un miroir de la vraie vie"},{"content":"Introduction Cet article est un aper√ßu tr√®s rapide des moyens de paiement en Polyn√©sie Fran√ßaise.\nUpdate (12/05/2022): suite √† quelques feedback, je me rend compte que cet article est √† destination des d√©veloppeurs de site de e-shopping, des commer√ßants, de mes confr√®res mon√©ticiens. Cet article sera complexe √† lire si vous n\u0026rsquo;avez jamais travaill√© avec un TPE, avec une plateforme de paiement, avec des cartes bancaires.\nDisclaimer: Au moment o√π j\u0026rsquo;√©cris cet article, je travaille √† l\u0026rsquo;Oc√©anienne des Services Bancaires (OSB), Ces articles ne sont pas sponsoris√©s par OSB, et j\u0026rsquo;encourage les gens √† faire des tutoriels pour les solutions des autres fournisseurs de solutions de paiement.\nLes diff√©rents types de carte En Polyn√©sie Fran√ßaise, il est possible de payer avec plusieurs types de cartes.\nCarte Bancaire (anciennement Carte Bleue, co-brand√©es ou non de Visa ou Mastercard), American Express (AMEX), Cartes privatives (Socredo Verte / Gold, Banque de Polyn√©sie Hoa, CCP de Fare Rata, Carte Tiare de la Banque de Tahiti), Union Pay International (UPI), Discover, Japan Credit Bureau (JCB) Les 3 derniers types de cartes sont surtout utilis√©s par les touristes.\nLes cartes privatives composent la majorit√© des cartes d√©tenues par les habitants de la Polyn√©sie Fran√ßaise.\nPourquoi autant de personnes ont une carte privative ? Les cartes privatives sont propos√©es par les diff√©rentes banques locales (√† l\u0026rsquo;exception d\u0026rsquo;OFINA qui √©met exclusivement les cartes AMEX). Il s\u0026rsquo;agit des banques Socredo, Banque de Tahiti, Banque de Polyn√©sie, et Fare Rata.\nLes cartes privatives sont soumises √† des r√©glementations et des frais moins co√ªteux que les cartes internationales.\nEn outre, elles sont uniquement r√©gul√©es par les banques locales contrairement aux cartes bancaires internationales, qui sont non seulement r√©gul√©es par les banques locales, mais aussi par les r√©seaux internationaux (CB, Visa, Mastercard, Union Pay, etc.).\nC\u0026rsquo;est en partie √† cause de ces r√©glementations et frais moins co√ªteux que les clients des banques doivent remplir moins de conditions pour avoir une carte privative. C\u0026rsquo;est pour cela que les cartes privatives sont plus r√©pandues sur le territoire.\nNotes:\nLes r√©seaux peuvent d√©cider d\u0026rsquo;appliquer des amendes voire de d√©sactiver le flux vers un acteur mon√©taire (banque, processeur de paiement, etc.) si celui-ci ne respecte pas la r√©glementation. Cette r√©glementation est mise √† jour r√©guli√®rement.\nPour les cartes privatives, ce sont les banques locales qui imposent leur r√©glementation, par abus de langage, on parle aussi de r√©seau privatif pour d√©signer l\u0026rsquo;ensemble de ces banques.\nCes r√©glementations sont suivies par les banques centrales des pays, par exemple l\u0026rsquo;IEOM en Polyn√©sie Fran√ßaise.\nJ\u0026rsquo;ai inclus la carte Tiare de la Banque de Tahiti dans les cartes privatives car elle a les m√™mes limitations g√©ographiques que celles-ci, et elle fonctionne aussi en m√©tropole, mais il s\u0026rsquo;agit bien d\u0026rsquo;une CB, donc elle est soumise aux r√©glementations CB.\nLes cartes Socredo privatives sont maintenant co-brand√©es UPI, mais il y a bien 2 applications dans la carte, sur le territoire, c\u0026rsquo;est l\u0026rsquo;application privative qui est utilis√©e, √† l\u0026rsquo;international, c\u0026rsquo;est l\u0026rsquo;application UPI qui est utilis√©e.\nFonctionnement des transactions Le sch√©ma √† 4 coins est l\u0026rsquo;un des sch√©mas de r√©f√©rence de la mon√©tique. Il explique les entit√©s qui entrent en jeu dans une transaction.\nLa banque √©mettrice √©met la carte et la fournit au porteur.\nLa banque acqu√©reuse fournit un contrat accepteur au commer√ßant, afin que celui-ci puisse encaisser les paiements avec les cartes, moyennant une commission, en plus des services annexes autour de l\u0026rsquo;encaissement (exemple: relev√© TPE). Les TPE et solutions de paiement en ligne sont des services d\u0026rsquo;encaissement.\nUn syst√®me d\u0026rsquo;acceptation est un logiciel ou un ensemble de logiciels, qui permet d\u0026rsquo;encaisser une carte bancaire, par exemple les TPE et les plateformes de paiement en ligne.\nIl existe 2 modes de fonctionnement pour le d√©roulement d\u0026rsquo;un paiement:\nle mode single message le mode dual message Lorsque vous payez avec votre carte, vous r√©alisez une transaction. Si toutes les r√®gles de gestion sont valid√©es, la transaction est autoris√©e.\nEn single message, la transaction autoris√©e est directement transform√©e en mouvement financier, i.e. un enregistrement est cr√©√© chez la banque acqu√©reuse qui dit \u0026ldquo;M. Client doit 1000 XPF √† M. Commer√ßant\u0026rdquo;.\nEn dual message, la transaction est enregistr√©e sur le TPE, ou sur la plateforme de paiement, puis, tous les jours √† une certaine heure, l\u0026rsquo;ensemble des transactions de la journ√©e sont envoy√©es √† la banque acqu√©reuse sous forme de mouvement financier.\nEn Polyn√©sie Fran√ßaise, le mode dual message est le plus r√©pandu, c\u0026rsquo;est d\u0026rsquo;ailleurs pour √ßa que l\u0026rsquo;on vous demande de ne pas d√©brancher votre TPE, votre internet, votre r√©seau √©lectrique.\nLes cartes et les syst√®mes d\u0026rsquo;acceptation Pour qu\u0026rsquo;un syst√®me d\u0026rsquo;acceptation puisse encaisser une carte, elle doit reconna√Ætre la carte.\nPour reconna√Ætre une carte, on utilise le BIN, qui sont les N premiers chiffres du num√©ro de la carte, N √©tant d√©fini par le r√©seau.\nDe plus, seule une application sp√©cifique √† ce r√©seau peut reconna√Ætre cette carte. Par exemple, pour une transaction avec une carte AMEX sur un TPE, c\u0026rsquo;est uniquement une application TPE AMEX qui pourra la reconna√Ætre, mais seulement si la carte fait partie d\u0026rsquo;une plage de BIN accept√©e par l\u0026rsquo;application.\nNote: Dans un TPE, il peut y avoir plusieurs applications, quand une carte est ins√©r√©e, le TPE demande √† chaque application \u0026ldquo;Peux-tu accepter cette carte?\u0026rdquo;.\nDe la m√™me mani√®re, pour une plateforme de paiement en ligne, celle-ci ne pourra accepter que des cartes qui font partie de ses plages de BIN d√©clar√©es.\nZoom sur le paiement en ligne en Polyn√©sie Fran√ßaise Comme √©nonc√© pr√©c√©demment, les cartes privatives sont majoritaires en Polyn√©sie Fran√ßaise, et elles ne sont pas reconnues √† l\u0026rsquo;√©tranger (sauf pour les cartes Socredo co-brand√©es UPI, comme cit√© pr√©c√©demment) car les BIN privatifs ne sont pas d√©clar√©s dans le monde.\nC\u0026rsquo;est pour cela qu\u0026rsquo;on ne peut pas payer avec une carte privative sur la plupart des plateformes de paiement en ligne (Paypal, Stripe, etc.), qui sont internationales.\nPour rem√©dier √† ce probl√®me, OSB propose Payzen, et la Banque de Tahiti propose SystemPay.\n√Ä mon avis, √† l\u0026rsquo;heure actuelle, c\u0026rsquo;est vers ces solutions que je conseille les commer√ßants d\u0026rsquo;aller, car il serait dommage de se priver des cartes privatives, alors qu\u0026rsquo;elles sont plus nombreuses.\nNotes:\nLes 2 solutions sont en r√©alit√© bas√©es sur les solutions Payzen et SystemPay de Lyra, soci√©t√© situ√©e en France. Certains d\u0026rsquo;entre vous ont d\u0026rsquo;ailleurs peut-√™tre d√©j√† √©t√© confus en recherchant de la documentation technique de ces solutions et se sont perdus entre:\nla documentation Payzen d\u0026rsquo;OSB, la documentation Payzen de Lyra, la documentation SystemPay de la Banque de Tahiti, la documentation SystemPay de Lyra. Je vous conseille de vous focaliser sur les documentations locales, et ensuite de compl√©ter avec les documentations de Lyra.\nConclusion Il existe plusieurs types de cartes.\nLes protocoles de paiement s\u0026rsquo;inscrivent dans un sch√©ma √† 4 coins, il y a plusieurs acteurs qui entrent en jeu.\nIl y a une r√©glementation g√©n√©rale qui englobe tous les types de cartes, et chaque type a √©galement sa r√©glementation sp√©cifique. Les banques sont soumises √† ces r√©glementations, l\u0026rsquo;IEOM et les r√©seaux (VISA, Mastercard, AMEX, etc.) veillent √† ce que les banques respectent ces r√©glementations.\nLa g√©ographie et les accords entre les acteurs sont importants pour comprendre les contraintes des syst√®mes de paiement locaux.\nEn Polyn√©sie Fran√ßaise, la majorit√© des cartes bancaires sont des cartes privatives, pour des raisons √©conomiques et r√©glementaires.\n","permalink":"http://localhost:1313/blog.dev/posts/intro-moyens-paiement/","summary":"\u003ch1 id=\"introduction\"\u003eIntroduction\u003c/h1\u003e\n\u003cp\u003eCet article est un aper√ßu tr√®s rapide des moyens de paiement en Polyn√©sie Fran√ßaise.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eUpdate (12/05/2022): suite √† quelques feedback, je me rend compte que cet article est √† destination des d√©veloppeurs de site de e-shopping, des commer√ßants, de mes confr√®res mon√©ticiens. Cet article sera complexe √† lire si vous n\u0026rsquo;avez jamais travaill√© avec un TPE, avec une plateforme de paiement, avec des cartes bancaires.\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e\u003cstrong\u003eDisclaimer\u003c/strong\u003e: Au moment o√π j\u0026rsquo;√©cris cet article, je travaille √† l\u0026rsquo;Oc√©anienne des Services Bancaires (OSB), Ces articles ne sont pas sponsoris√©s par OSB, et j\u0026rsquo;encourage les gens √† faire des tutoriels pour les solutions des autres fournisseurs de solutions de paiement.\u003c/p\u003e","title":"Introduction aux moyens de paiement en Polyn√©sie Fran√ßaise"},{"content":"Ia\u0026rsquo;orana, bonjour !\nCe post marque le d√©but du blog h√©berg√© sur Github.\nVous trouverez ici de temps en temps des articles de d√©veloppement et des POCs.\nBonne lecture !\n","permalink":"http://localhost:1313/blog.dev/posts/hello-world/","summary":"\u003cp\u003eIa\u0026rsquo;orana, bonjour !\u003c/p\u003e\n\u003cp\u003eCe post marque le d√©but du blog h√©berg√© sur Github.\u003c/p\u003e\n\u003cp\u003eVous trouverez ici de temps en temps des articles de d√©veloppement et des POCs.\u003c/p\u003e\n\u003cp\u003eBonne lecture !\u003c/p\u003e","title":"Hello World"},{"content":"La m√©moire est une ressource au m√™me titre que la fourchette dans le pr√©c√©dent article.\nDans un ordinateur, il existe plusieurs types de m√©moire que les programmes vont pouvoir utiliser en fonction de la mani√®re dont ils veulent traiter les donn√©es.\nIl faut voir la m√©moire comme un endroit o√π on entrepose des donn√©es.\nPour cet article on va parler d\u0026rsquo;un magasin, mais √ßa marche aussi avec un restaurant.\nLa m√©moire cache ‚Äî l\u0026rsquo;armoire r√©frig√©r√©e La m√©moire cache est le stockage le plus rapide qu\u0026rsquo;un programme peut utiliser. Pour un magasin, il s\u0026rsquo;agit des √©tag√®res et des armoires r√©frig√©r√©es qui forment les rayons.\nLes clients (les threads du programme) ont rapidement acc√®s aux viandes qui sont dans les armoires r√©frig√©r√©es, ils n\u0026rsquo;ont qu\u0026rsquo;√† tendre la main. Par contre, on ne peut pas stocker une grande quantit√© de viande dans ces armoires, pour l\u0026rsquo;exemple on va dire une dizaine au maximum.\nSur un ordinateur, cette m√©moire cache se trouve directement dans le processeur sous les noms cache L3, cache L2 et cache L1. On n\u0026rsquo;ira pas dans le d√©tail ici, mais sachez que plus le nombre est proche de 0, et plus le cache est rapide.\nJe prends l\u0026rsquo;exemple de l\u0026rsquo;armoire r√©frig√©r√©e car il y a un m√©canisme physique important dans un ordinateur: la m√©moire cache peut accueillir des donn√©es uniquement si elle est aliment√©e en √©lectricit√©, en cas de coupure de courant, on perd les donn√©es qui s\u0026rsquo;y trouvent.\nDe la m√™me mani√®re, dans un magasin, en cas de coupure de courant, il faut jeter toute la viande qui se trouve dans les armoires r√©frig√©r√©es*.\n*: Oui c\u0026rsquo;est pas tout √† fait le cas, mais en cas de coupure prolong√©e √ßa l\u0026rsquo;est.\nLa m√©moire vive ‚Äî l\u0026rsquo;arri√®re du magasin Au cours d\u0026rsquo;une journ√©e, le magasin souhaite vendre bien plus que dix viandes, c\u0026rsquo;est bien normal. Pour cela, √† l\u0026rsquo;arri√®re du magasin il y a un stock r√©frig√©r√© qui peut en contenir 1000. Un employ√© viendra remplir les rayons au cours de la journ√©e.\nCette action prend du temps, l\u0026rsquo;employ√© doit :\nAller dans le stock r√©frig√©r√© R√©cup√©rer des viandes Amener les viandes dans le rayon Mettre les viandes dans l\u0026#39;armoire r√©frig√©r√©e Pendant tout ce temps, le client ne peut prendre que les viandes qui sont encore dans l\u0026rsquo;armoire, il faut donc bien faire attention √† ce que l\u0026rsquo;employ√© recharge l\u0026rsquo;armoire quand il reste encore un peu de bo√Ætes.\nDans un ordinateur, la m√©moire vive (RAM en anglais pour Random Access Memory), joue le r√¥le du stock r√©frig√©r√© tr√®s rapide qu\u0026rsquo;un programme peut utiliser, mais beaucoup moins rapide que la m√©moire cache, environ 50x √† 100x moins rapide.\nEt tout comme la m√©moire cache, la RAM peut accueillir des donn√©es uniquement si elle est aliment√©e en √©lectricit√©.\nC\u0026rsquo;est pour √ßa qu\u0026rsquo;on appelle √ßa de la m√©moire vive, elle doit √™tre aliment√©e.\nAttends, mais tu dis que la RAM est tr√®s rapide, mais le processus pour recharger la m√©moire cache est lent ? On ne peut pas juste utiliser une grande quantit√© de m√©moire cache?\nLa m√©moire cache co√ªte tr√®s cher, beaucoup plus que la RAM. L\u0026rsquo;√©tat actuel est donc un compromis entre rapidit√© et co√ªt, un probl√®me typique en ing√©nierie.\nLe stockage ‚Äî la ferme en Nouvelle-Z√©lande Le stockage d\u0026rsquo;un ordinateur est compos√© des diff√©rents disques durs (HDD, SDD, etc.). Il s\u0026rsquo;agit d\u0026rsquo;une m√©moire persistante, c\u0026rsquo;est-√†-dire que m√™me en cas de coupure de courant, les donn√©es restent √©crites dans les disques.\nPour notre magasin, de la viande qui reste utilisable m√™me en cas de coupure\u0026hellip; Eh bien ce sont les boeufs vivants √† la ferme.\nTon analogie est d√©go√ªtante\nOui je sais, j\u0026rsquo;ai pas mieux, d√©sol√©. En m√™me temps, je ne peux pas vous dire que de la viande fra√Æche, qui reste longtemps √† l\u0026rsquo;air libre, est encore utilisable.\nEn plus, il y a plein d\u0026rsquo;√©tapes entre un boeuf vivant et un steak dans l\u0026rsquo;armoire !\nTout √† fait, mais c\u0026rsquo;est la meilleure analogie possible pour te faire comprendre pourquoi, en cas de coupure, si tu n\u0026rsquo;as pas sauvegard√© ton fichier Word depuis longtemps, tu perds tes donn√©es. Tant que tu n\u0026rsquo;as pas sauvegard√©, tes modifications restent dans le cache et la RAM.\nEt pourquoi en Nouvelle-Z√©lande ?\nOh, √ßa c\u0026rsquo;est parce qu\u0026rsquo;aller chercher une donn√©e dans un disque, c\u0026rsquo;est tr√®s lent compar√© √† aller la chercher dans la RAM. Si tu as un disque SSD c\u0026rsquo;est 10x plus lent, si tu as un disque HDD, c\u0026rsquo;est 100x plus lent.\nSi tu joues √† des jeux vid√©o un peu gourmands en ressources, tu as s√ªrement remarqu√© des √©crans de chargement plus ou moins longs. C\u0026rsquo;est surtout parce que le programme r√©cup√®re les donn√©es qui sont sur le disque.\nOptimiser la m√©moire ‚Äî pas besoin d\u0026rsquo;√™tre mentaliste Vous l\u0026rsquo;aurez donc compris, un magasin a diff√©rents types de m√©moire √† sa disposition. La mani√®re dont il orchestre les denr√©es √† travers ces diff√©rents composants lui permet d\u0026rsquo;anticiper les variations de stock, et limiter le risque de p√©nurie.\nLorsqu\u0026rsquo;un d√©veloppeur code un programme, il peut aussi anticiper l\u0026rsquo;utilisation des donn√©es et les charger avant d\u0026rsquo;en avoir besoin.\nDans l\u0026rsquo;exemple du jeu vid√©o, pourquoi est-ce que toutes les donn√©es ne sont pas charg√©es d√®s le d√©but? Moi j\u0026rsquo;en ai marre des √©crans de chargement.\nTout d\u0026rsquo;abord, ce chargement se fait du stockage vers la RAM (puis vers le cache), ensuite, si on chargeait toutes les donn√©es d\u0026rsquo;un coup, il y a de fortes chances pour que ta RAM soit satur√©e.\nA priori, le d√©veloppeur ne sait pas si tu as peu ou beaucoup de RAM disponible, et puis, maintenir deux versions du code, un qui charge toutes les donn√©es, et un qui charge via les √©crans de chargement, c\u0026rsquo;est du travail suppl√©mentaire qui n\u0026rsquo;apporte pas grand chose.\nLes √©crans de chargement sont un compromis : plut√¥t que de risquer de crasher ton ordinateur, le d√©veloppeur a cod√© le programme de sorte √† charger uniquement le contenu qui sera utilis√© dans le niveau, pour tous les niveaux.\nConclusion Dans cet article, on a vu les diff√©rentes m√©moires utilis√©es par les programmes. √Ä l\u0026rsquo;image d\u0026rsquo;un magasin qui √©vite les p√©nuries, un d√©veloppeur doit jongler avec ces m√©moires pour que son programme tourne correctement.\nDans le prochain article, IMVV ‚Äî Section 3 ‚Äî Chapitre 2 ‚Äî M√©mo√Øsation et Lazy loading, la technique du fain√©ant ultime, nous verrons des techniques pour √©viter de se surcharger le cerveau/le programme.\n‚Üê Retour √† la section\n‚Üê Retour √† l‚Äôintroduction\n","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/optimisation/memoire/","summary":"\u003cp\u003eLa m√©moire est une \u003cstrong\u003eressource\u003c/strong\u003e au m√™me titre que la fourchette dans le \u003ca href=\"../../l-execution/threads/\"\u003epr√©c√©dent article\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eDans un ordinateur, il existe plusieurs types de m√©moire que les programmes vont pouvoir utiliser en fonction de la mani√®re dont ils veulent traiter les donn√©es.\u003c/p\u003e\n\u003cp\u003eIl faut voir la m√©moire comme un endroit o√π on entrepose des donn√©es.\u003c/p\u003e\n\u003cp\u003ePour cet article on va parler d\u0026rsquo;un magasin, mais √ßa marche aussi avec un restaurant.\u003c/p\u003e\n\u003ch2 id=\"la-m√©moire-cache--larmoire-r√©frig√©r√©e\"\u003eLa m√©moire cache ‚Äî l\u0026rsquo;armoire r√©frig√©r√©e\u003c/h2\u003e\n\u003cp\u003eLa \u003cstrong\u003em√©moire cache\u003c/strong\u003e est le stockage \u003cstrong\u003ele plus rapide\u003c/strong\u003e qu\u0026rsquo;un programme peut utiliser. Pour un magasin, il s\u0026rsquo;agit des √©tag√®res et des armoires r√©frig√©r√©es qui forment les rayons.\u003c/p\u003e","title":"IMVV ‚Äî Section 3 ‚Äî Chapitre 1 ‚Äî La m√©moire, ou comment √©viter les p√©nuries dans un magasin"},{"content":"Dans le pr√©c√©dent article, IMVV ‚Äî Section 1 ‚Äî Chapitre 3 ‚Äî Structures de contr√¥le et algorithme, apprendre √† r√©fl√©chir, on a vu les diff√©rentes structures de contr√¥le et les algorithmes.\nMaintenant on va parler de la mani√®re dont on r√©alise un ensemble de t√¢ches ‚Äî c‚Äôest ce qu‚Äôon appelle en informatique un mode d‚Äôex√©cution. C\u0026rsquo;est applicable aussi bien pour un humain que pour un ordinateur.\nN\u0026rsquo;oublie pas que les objectifs de ces articles sont :\nTe donner une meilleure compr√©hension des bases de l‚Äôinformatique, T\u0026rsquo;inspirer pour analyser ou optimiser les situations du quotidien, ou peut-√™tre, qui sait, te donner envie d\u0026rsquo;explorer encore plus loin\u0026hellip; jusqu‚Äô√† en faire ton m√©tier. Programme et application ‚Äî c\u0026rsquo;est quoi la diff√©rence ? Un programme informatique est un ensemble d\u0026rsquo;algorithmes. Le mot application veut dire la m√™me chose.\nC‚Äôest juste que application, √ßa sonne plus moderne, m√™me si ce mot existe depuis longtemps.\nMerci le marketing Apple et son App Store. üòÑ\nSynchrone ‚Äî Avoir un serveur d√©di√© √† sa table, quel luxe Prenons l\u0026rsquo;exemple d\u0026rsquo;un restaurant chic. Dans ce restaurant chic, il y a 2 tables. Chaque table a son serveur attitr√©, celui-ci r√©pond uniquement aux besoins de sa table.\nPour la suite de cet exercice de pens√©e, on va dire qu\u0026rsquo;il y a 2 familles (famille 1, famille 2), 2 tables (table 1, table 2), 1 serveur, 1 chef.\nLa s√©quence d\u0026rsquo;actions que le serveur doit faire, l\u0026rsquo;algorithme est :\nSi une famille arrive: Accueillir la famille Installer la famille sur une table libre Prendre la commande Donner la commande au chef R√©cup√©rer les plats Servir les plats √† la famille Faire payer la famille Fin si La famille 1 arrive au restaurant, le serveur les accueille et les installe √† la table 1. Il reste en attente de leur commande, √† proximit√©*.\nQuand la famille 1 est pr√™te, vu que le serveur est √† c√¥t√©, ils passent commande. Le serveur s\u0026rsquo;en va ensuite en cuisine pour donner la commande au chef. Le serveur attend les plats. Le chef pr√©pare les plats.\nUne fois que les plats sont pr√™ts, il les r√©cup√®re et les sert √† la famille 1. La famille 1 paie et s\u0026rsquo;en va, heureuse de l\u0026rsquo;attention port√©e.\n*: A ce moment, la famille 2 arrive au restaurant, ils ne sont pas accueillis, puisque le serveur est en attente de la commande de la famille 1. Alors la famille 2 repart, agac√©e, ils laisseront un mauvais avis sur internet.\nDans cette configuration, le serveur ex√©cute ses t√¢ches de mani√®re synchrone, cela veut dire qu\u0026rsquo;il ex√©cute l\u0026rsquo;algorithme √©tape par √©tape sans interruption. Si une √©tape n√©cessite d\u0026rsquo;attendre, par exemple quand il doit attendre que la famille choisisse sa commande, alors il attend, on dit que le mode synchrone est bloquant. Le serveur va au bout de son algorithme.\nMais c\u0026rsquo;est nul, il y a une famille qui n\u0026rsquo;a pas √©t√© servie\u0026hellip;\nSi on reste dans le mode d\u0026rsquo;ex√©cution synchrone, le probl√®me est qu\u0026rsquo;il n\u0026rsquo;y a pas assez de serveur. S\u0026rsquo;il y avait autant de serveurs de tables et de chefs, il n\u0026rsquo;y aurait aucun souci. Chaque famille aurait √©t√© ravie d\u0026rsquo;avoir un serveur et un chef d√©di√©. Mais on verrait plut√¥t cette disposition dans les restaurants luxueux, qui peuvent se permettre d\u0026rsquo;avoir 100 tables, 100 serveurs et 100 chefs.\nPar d√©faut, les applications sont synchrones, car √† part le probl√®me de ressources, c‚Äôest bien plus simple de faire une t√¢che apr√®s l‚Äôautre, cependant, de nos jours, de plus en plus de syst√®mes sont asynchrones (exemple: navigateurs, certains serveurs applicatifs √† la mode).\nüìå Exemples dans la vie r√©elle Une personne qui suit une proc√©dure critique Pr√©parer une salade üíª Exemples en informatique Un distributeur de billets Une imprimante partag√©e Asynchrone ‚Äî Un serveur pour les gouverner tous ‚Äî Oui c\u0026rsquo;est une r√©f√©rence au Seigneur des Anneaux üòÑ ‚Äî\nReprenons l\u0026rsquo;exemple du restaurant, toujours avec 2 familles (famille 1, famille 2), 2 tables (table 1, table 2), 1 serveur, 1 chef.\nMais cette fois, on change l\u0026rsquo;algorithme :\nQuand une famille arrive, alors : Le serveur les accueille Il les installe √† une table libre Il leur donne un menu Il passe √† autre chose Fin quand Quand une famille appelle le serveur pour commander, alors : Le serveur prend la commande Il la transmet au chef Il passe √† autre chose Fin quand Quand la sonnette en cuisine retentit (plats pr√™ts), alors : Le serveur r√©cup√®re les plats Le serveur sert les plats √† la bonne table Il passe √† autre chose Fin quand Quand une famille veut payer, alors : Le serveur encaisse Il lib√®re la table Il passe √† autre chose Fin quand Cet algorithme est diff√©rent de ceux qu\u0026rsquo;on a vus jusqu\u0026rsquo;√† pr√©sent.\n\u0026ldquo;Quand \u0026hellip;,\u0026rdquo; marque un √©v√©nement, \u0026ldquo;alors\u0026rdquo; introduit le bloc d\u0026rsquo;instructions √† ex√©cuter en r√©action, et \u0026ldquo;Fin quand\u0026rdquo; marque la fin de ce bloc.\nOn dit alors qu\u0026rsquo;on fait de la programmation √©v√©nementielle (ou programmation r√©active) et que l\u0026rsquo;algorithme est asynchrone : il fait de sorte √† r√©agir aux √©v√©nements ext√©rieurs.\nLorsqu‚Äôun √©v√©nement se produit, le serveur y r√©agit imm√©diatement : il ex√©cute les instructions associ√©es, puis passe √† l‚Äô√©v√©nement suivant s‚Äôil y en a un. Sinon, il attend. Ce mode d\u0026rsquo;ex√©cution est donc non bloquant.\nEt dans les faits, c\u0026rsquo;est ce que fait la plupart des personnes, serveurs ou non. Quand on fait une t√¢che, et qu\u0026rsquo;on est interrompu par un bug, un appel, un coll√®gue de travail qui pose une question, on est en r√©action.\nAvec cet algorithme, un serveur seul pourra tr√®s bien g√©rer 2 tables.\nüìå Exemples dans la vie r√©elle Les serveurs dans la plupart des restaurants Mon chien quand il entend les croquettes üíª Exemples en informatique Les notifications sur ton smartphone Un arrosage automatique avec capteur d\u0026#39;humidit√© Attention : comme en mode synchrone, s\u0026rsquo;il y a trop de table pour un seul serveur, plusieurs √©v√©nements risquent de s\u0026rsquo;accumuler en attente de traitement.\nMais du coup, comment on fait pour r√©soudre ce probl√®me ?\nOn verra √ßa dans le prochain article.\nConclusion Dans cet article, on a vu ce qu\u0026rsquo;√©taient les modes d\u0026rsquo;ex√©cution synchrone et asynchrone.\nSi tu souhaites continuer cette aventure, tu peux regarder la suite ici: IMMV ‚Äî Section 2 ‚Äî Chapitre 2 ‚Äî Monothread et Multithread, je ne peux pas tout faire en m√™me temps !\n‚Üê Retour √† la section\n‚Üê Retour √† l‚Äôintroduction\n","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/l-execution/sync-async/","summary":"\u003cp\u003eDans le pr√©c√©dent article, \u003ca href=\"../../les-bases/structures-de-controle/\"\u003eIMVV ‚Äî Section 1 ‚Äî Chapitre 3 ‚Äî Structures de contr√¥le et algorithme, apprendre √† r√©fl√©chir\u003c/a\u003e, on a vu les diff√©rentes structures de contr√¥le et les algorithmes.\u003c/p\u003e\n\u003cp\u003eMaintenant on va parler de la mani√®re dont on r√©alise un ensemble de t√¢ches ‚Äî c‚Äôest ce qu‚Äôon appelle en informatique un \u003cstrong\u003emode d‚Äôex√©cution\u003c/strong\u003e. C\u0026rsquo;est applicable aussi bien pour un humain que pour un ordinateur.\u003c/p\u003e\n\u003cp\u003eN\u0026rsquo;oublie pas que les objectifs de ces articles sont :\u003c/p\u003e","title":"IMMV ‚Äî Section 2 ‚Äî Chapitre 1 ‚Äî Synchrone et Asynchrone, ou comment r√©agir au changement"},{"content":"Quand tu prends un ticket pour attendre ton tour, que tu fais la queue √† la caisse, que tu prends l‚Äôassiette du haut de la pile pour mettre la table, ou que tu cliques sur le bouton \u0026lsquo;Retour\u0026rsquo; (‚Üê) du navigateur internet‚Ä¶ Tu manipules sans le savoir des concepts appell√©s en informatique des structures de donn√©es, et les algorithmes associ√©s qui les font vivre.\nDans cet article, on va mettre un peu de clart√© l√†-dedans : pas besoin de coder pour comprendre, on va illustrer tout √ßa avec des situations de la vie courante.\nD√©finitions Avant d‚Äôaller plus loin, quelques d√©finitions simples, histoire de parler le m√™me langage :\nDonn√©e : une donn√©e, c‚Äôest une information num√©rique. √áa peut √™tre un num√©ro de passeport, le nombre de dents d‚Äôune personne, la liste des t√¢ches que tu as encore repouss√©es √† demain, ou ton nombre d‚Äôamis sur Facebook. Structure de donn√©es : imagine une bo√Æte, une √©tag√®re ou un sac √† dos, dans lequel tu ranges tes informations d‚Äôune certaine mani√®re pour mieux les retrouver ou les traiter. C‚Äôest la fa√ßon dont on organise les donn√©es. Algorithme : un algorithme, c‚Äôest une suite d‚Äô√©tapes ou d‚Äôinstructions pour manipuler ces donn√©es. Comme une recette de cuisine, ou une proc√©dure √† suivre pour obtenir un r√©sultat. File et pile : deux mani√®res d‚Äôattendre‚Ä¶ ou de repousser Maintenant qu‚Äôon a les bases, voyons deux structures de donn√©es tr√®s simples mais tr√®s puissantes : la file et la pile. On les retrouve partout dans notre quotidien, souvent sans s‚Äôen rendre compte.\nLa file ‚Äî ou comment attendre son tour (FIFO) Imagine une file d‚Äôattente devant un guichet. Le premier arriv√© est le premier servi. C‚Äôest ce qu‚Äôon appelle en informatique une file (ou queue en anglais), avec une logique FIFO : First In, First Out (premier entr√©, premier sorti).\nD√®s que quelqu‚Äôun est servi, c‚Äôest le suivant dans la file qui avance.\nüéØ C‚Äôest une structure √©quitable : chacun attend selon son ordre d‚Äôarriv√©e.\nüìå Exemples dans la vie r√©elle Faire la queue √† la caisse du magasin La liste des courses (si on lit de haut en bas) üíª Exemples en informatique Les syst√®mes de ticket dans les accueils (le num√©ro est g√©n√©r√© par un programme, et les appels suivent cet ordre) Les commentaires sur une publication Facebook (affich√©s du plus ancien au plus r√©cent) La pile ‚Äî ou comment empiler les priorit√©s (LIFO) Maintenant, imagine une pile de livres que tu dois r√©viser pour un examen. Tu prends celui du haut, tu le lis, puis tu prends celui juste en dessous, et ainsi de suite. Tu lis dans l‚Äôordre inverse de celui dans lequel tu as empil√© les livres. Tu viens de d√©piler ta pile, toujours en commen√ßant par le haut.\nC‚Äôest exactement le principe de la pile (ou stack en anglais), qui suit la logique LIFO : Last In, First Out (dernier entr√©, premier sorti).\nTu vas peut-√™tre me dire :\nOui mais je peux aussi prendre le livre du bas, non‚ÄØ?\nC‚Äôest vrai. Alors prenons un autre exemple, un peu plus r√©aliste :\nImagine que tu tombes sur un article de journal qui parle des nodules polym√©talliques dans les fonds marins de la Polyn√©sie fran√ßaise. Tu n‚Äôy connais pas grand-chose, mais √ßa t‚Äôintrigue. Tu lis l‚Äôarticle, puis tu ouvres une page Wikip√©dia pour comprendre ce qu‚Äôest un nodule polym√©tallique. Sur cette page, tu vois un lien vers les m√©taux rares, puis vers la transition √©nerg√©tique, puis‚Ä¶ tu vois o√π je veux en venir.\nEn lisant ce premier article, tu ne soup√ßonnais pas toute la pile d‚Äôinformations que tu allais explorer. Et tu viens de d√©piler ce savoir, en commen√ßant par la derni√®re page ouverte.\nüéØ Ce n‚Äôest pas une structure √©quitable : ce qui arrive en dernier est trait√© en premier. Mais c‚Äôest tr√®s utile pour remonter dans le temps, ou revenir sur ses pas, exactement comme le bouton \u0026ldquo;retour\u0026rdquo; de ton navigateur.\nüìå Exemples dans la vie r√©elle Les cartons dans un coffre bien rempli Les diff√©rentes strates de terre quand tu creuses dans ton jardin (c\u0026#39;est de la terre empil√©e au cours du temps) üíª Exemples en informatique Le bouton \u0026#39;Retour\u0026#39; (‚Üê) de ton navigateur Les annulations successives (Undo, CTRL\u0026#43;Z) dans un √©diteur de texte Si tu veux conna√Ætre d\u0026rsquo;autres structures de donn√©es, tu peux regarder le prochain article : IMVV ‚Äî Section 1 ‚Äî Chapitre 2 ‚Äî Autres structures de donn√©es, j\u0026rsquo;organise mon bordel\n‚Üê Retour √† la section\n‚Üê Retour √† l‚Äôintroduction\n","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/les-bases/file-et-pile/","summary":"\u003cp\u003eQuand tu prends un ticket pour attendre ton tour, que tu fais la queue √† la caisse, que tu prends l‚Äôassiette du haut de la pile pour mettre la table, ou que tu cliques sur le bouton \u0026lsquo;Retour\u0026rsquo; (‚Üê) du navigateur internet‚Ä¶\nTu manipules sans le savoir des concepts appell√©s en informatique \u003cstrong\u003edes structures de donn√©es\u003c/strong\u003e, et \u003cstrong\u003eles algorithmes\u003c/strong\u003e associ√©s qui les font vivre.\u003c/p\u003e\n\u003cp\u003eDans cet article, on va mettre un peu de clart√© l√†-dedans : pas besoin de coder pour comprendre, on va illustrer tout √ßa avec des situations de la vie courante.\u003c/p\u003e","title":"IMVV ‚Äî Section 1 ‚Äî Chapitre 1 ‚Äî File ou Pile ? L'art de passer avant les autres"},{"content":"√ätre fiu est un art, une vertu. Non, ce n\u0026rsquo;est pas une blague. Tu ne me crois pas ?\n\u0026ldquo;We will encourage you to develop the three great virtues of a programmer: laziness, impatience, and hubris.\u0026rdquo; ‚Äî Larry Wall, Programming perl (1991).\n\u0026ldquo;I choose a lazy person to do a hard job. Because a lazy person will find an easy way to do it.\u0026rdquo; ‚Äî Bill Gates.\nProgrammer une machine pour qu\u0026rsquo;elle fasse le travail √† ta place, c\u0026rsquo;est de la fain√©antise.\nEt les d√©veloppeurs sont des personnes qui ont atteint l\u0026rsquo;apog√©e du fiu. Apr√®s tout, qui passe 2 heures √† automatiser une t√¢che qui prend 2 minutes par jour, √† part quelqu\u0026rsquo;un de vraiment fiu ?\nDans cet article, on verra deux techniques que les d√©veloppeurs utilisent, mais que toi aussi tu utilises sans le savoir.\nM√©mo√Øsation ‚Äî ou comment garder une information dans un coin de la t√™te Supposons que tu sois responsable de la paie dans une petite entreprise. Pour ce mois-ci, tu dois calculer les salaires √† verser √† 2 employ√©s.\nTu sais que tous les deux ont un salaire brut de 200 000 XPF. De plus, ils ont fait un excellent travail, ton patron t\u0026rsquo;a dit de leur rajouter une prime de 50% de leur salaire brut. Enfin, l\u0026rsquo;un d\u0026rsquo;eux a fait des heures suppl√©mentaires, il faut donc lui rajouter 20 000 XPF brut sur sa paie.\nPour le 1er salari√©, tu pars de 200 000, tu rajoutes 50%, soit 100 000, ce qui lui fera 300 000 XPF brut pour ce mois.\nPour le 2√®me salari√©, tu sais que le d√©but du calcul est le m√™me, alors tu r√©utilises le nombre 300 000, et tu rajoutes 20 000 d\u0026rsquo;heures suppl√©mentaires, donc 320 000 bruts.\nSans m√©mo√Øsation, tu aurais recalcul√© 200 000 + 50 %. Mais tu t‚Äôes souvenu que ce calcul avait d√©j√† √©t√© fait, donc tu as directement repris le r√©sultat. Ce que tu viens de faire, c\u0026rsquo;est de la m√©mo√Øsation (memoization en anglais).\nC‚Äôest exactement ce que fait ton navigateur web quand il te propose un r√©sultat de recherche d√©j√† visit√©, ou qu‚Äôun site charge plus vite la 2·µâ fois.\nInstant Dev En informatique, on utilise un tableau ou un tableau associatif pour stocker les r√©sultats interm√©diares, ces structures sont stock√©es dans la RAM. De cette fa√ßon, on peut rapidement r√©cup√©rer le r√©sultat qui nous int√©resse. Attention : En informatique, comme dans la vraie vie, garder des informations de c√¥t√© peut conduire √† une saturation de la m√©moire. C\u0026rsquo;est un des facteurs de burn-out. M√©nagez votre cerveau, il n\u0026rsquo;y a pas de mal √† noter les choses, de plus, vous aurez moins de risque d\u0026rsquo;oublier des informations importantes.\nEager loading et Lazy loading ‚Äî l\u0026rsquo;art d\u0026rsquo;√™tre pr√©par√© √† toute √©ventualit√© Supposons que tu aies invit√© tes amis √† manger √† la maison ce soir. Tu as invit√© 10 personnes, mais tu sais que 5 vont vraiment venir, les autres t\u0026rsquo;ont dit \u0026ldquo;peut-√™tre\u0026rdquo;.\nPour √©viter d\u0026rsquo;√™tre √† court de nourriture, tu as pr√©par√© pour 10 personnes, au pire, ceux qui sont venus repartiront avec quelques plats, et tu termineras le reste durant la semaine.\nLes premiers invit√©s vont arriver, tu n\u0026rsquo;as pas encore pr√©par√© la table. Tu as 2 solutions :\nTout pr√©parer d\u0026rsquo;avance : sortir toutes les assiettes, les verres, les chaises, les couverts, etc. (solution eager loading : tu charges tout d√®s le d√©but).\nAttendre de voir qui arrive : d√®s qu‚Äôun invit√© entre, tu sors une assiette, un verre, une chaise, etc. (solution lazy loading : tu ne charges que ce qui est n√©cessaire, au moment o√π c‚Äôest n√©cessaire).\nMais tu peux aussi exiger des invit√©s qu\u0026rsquo;ils te disent, la veille au plus tard, si oui ou non ils viennent !\nOui, et que se passe-t-il si l\u0026rsquo;un d\u0026rsquo;eux a un emp√™chement ? En mettant tous les couverts, tu as d√©pens√© de l\u0026rsquo;√©nergie pour mettre son couvert, et tu en as re-d√©pens√© pour le ranger. Ce n\u0026rsquo;est pas tr√®s optimis√©.\nSi tous les invit√©s arrivent, tu auras fait plusieurs allers-retours pour mettre les couverts, ce n\u0026rsquo;est pas tr√®s optimis√© non plus\u0026hellip;\nAh, tu mets le doigt sur un point important : les techniques d\u0026rsquo;optimisation doivent √™tre utilis√©es uniquement si on est s√ªr de leur utilit√©.\n\u0026ldquo;Premature optimization is the root of all evil\u0026rdquo; ‚Äî Sir Tony Hoare et Donald Knuth.\nC\u0026rsquo;est un pi√®ge dans lequel tombent plusieurs d√©veloppeurs juniors. Les √©coles sup√©rieures enseignent diff√©rentes techniques d\u0026rsquo;optimisation, on est conditionn√©s √† d√©tecter un probl√®me et √† appliquer imm√©diatement une solution : c\u0026rsquo;est normal.\nAvec l\u0026rsquo;exp√©rience, on apprend qu\u0026rsquo;on a besoin d\u0026rsquo;optimiser uniquement quand une personne se plaint de lenteurs. Et dans ce cas, on cherche o√π se trouve la source du probl√®me, on mesure.\nOk mais\u0026hellip; √ßa me fait bizarre de ne pas pr√©parer une belle table, c\u0026rsquo;est pas un bon accueil.\nDans ce cas, le eager loading a une vraie plus-value. Tu charges tout d\u0026rsquo;un coup pour l\u0026rsquo;effet waow, pour que les personnes se disent que chez toi, on est bien re√ßu. La principale fonctionnalit√© n\u0026rsquo;est pas d\u0026rsquo;optimiser le fait de mettre la table, mais d\u0026rsquo;impressionner tes convives.\nJe finis cette partie avec un exemple informatique : Facebook ne charge pas toutes les publications d√®s le d√©but, seulement une partie.\nQuand tu commences √† scroller, tu vois ces publications. Si tu te rapproches de la fin, Facebook charge les prochaines publications, on appelle √ßa infinite scroll.\nAinsi, Facebook ne prend pas trop de temps √† se charger au d√©but.\nAttends mais\u0026hellip; Dans l\u0026rsquo;article pr√©c√©dent, on parlait des √©crans de chargement des jeux vid√©os, √ßa y ressemble un peu, non ?\nExactement, les √©crans de chargement sont aussi du lazy loading, et pour rejoindre ce qu\u0026rsquo;on disait sur ces √©crans : le lazy loading √©conomise de la m√©moire.\nEnfin, √† ton avis, comment Facebook sait qu\u0026rsquo;il faut charger la suite des publications ?\nEh bien en fait, l\u0026rsquo;application est r√©active, on peut √©crire son algorithme de chargement comme ceci:\nQuand un certain seuil de scroll est atteint (par exemple, 90% du contenu affich√©), alors: Charge la suite du contenu Passe √† autre chose Fin quand Tu l\u0026rsquo;auras remarqu√©, c\u0026rsquo;est ce qu\u0026rsquo;on a vu dans l\u0026rsquo;article IMMV ‚Äî Section 2 ‚Äî Chapitre 1 ‚Äî Synchrone et Asynchrone, ou comment r√©agir au changement.\nConclusion Dans cet article, on a vu diff√©rents m√©canimes d\u0026rsquo;optimisation.\nPlus important encore, si on se rappelle des pr√©c√©dents articles, on a vu qu\u0026rsquo;en informatique, en plus de combiner les structures de donn√©es et les structures de contr√¥le, on pouvait combiner les concepts d\u0026rsquo;optimisation et de modes d\u0026rsquo;ex√©cution.\nLe prochaine article est en cours de r√©daction, on parlera de complexit√©.\n‚Üê Retour √† la section\n‚Üê Retour √† l‚Äôintroduction\n","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/optimisation/memoisation/","summary":"\u003cp\u003e√ätre \u003cem\u003efiu\u003c/em\u003e est un art, une vertu. \u003cstrong\u003eNon, ce n\u0026rsquo;est pas une blague\u003c/strong\u003e. Tu ne me crois pas ?\u003c/p\u003e\n\u003cp\u003e\u0026ldquo;We will encourage you to develop the three great virtues of a programmer: laziness, impatience, and hubris.\u0026rdquo; ‚Äî \u003cem\u003eLarry Wall, Programming perl (1991)\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003e\u0026ldquo;I choose a lazy person to do a hard job. Because a lazy person will find an easy way to do it.\u0026rdquo; ‚Äî \u003cem\u003eBill Gates\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eProgrammer une machine pour qu\u0026rsquo;elle fasse le travail √† ta place, c\u0026rsquo;est de la fain√©antise.\u003c/p\u003e","title":"IMVV ‚Äî Section 3 ‚Äî Chapitre 2 ‚Äî M√©mo√Øsation et Lazy loading, les techniques du fain√©ant ultime"},{"content":"Dans le pr√©c√©dent article, IMMV ‚Äî Section 2 ‚Äî Chapitre 1 ‚Äî Synchrone et Asynchrone, ou comment r√©agir au changement, on a vu les diff√©rents modes d\u0026rsquo;ex√©cution.\nOn s\u0026rsquo;√©tait arr√™t√© sur le probl√®me suivant : Comment faire pour r√©pondre √† la mont√©e en charge, √† l\u0026rsquo;accumulation de t√¢ches ?\nEh bien, dans cet article, on va voir comment on r√©sout ce probl√®me, en informatique comme dans la vraie vie : les m√©canismes sont souvent tr√®s proches.\nPour cela on va continuer avec notre exemple de restaurant. Et on va expliciter diff√©rents termes que j\u0026rsquo;avais regroup√©s en parlant d\u0026rsquo;algorithmes et de programmes.\nN\u0026rsquo;oublie pas que les objectifs de ces articles sont :\nTe donner une meilleure compr√©hension des bases de l‚Äôinformatique, T\u0026rsquo;inspirer pour analyser ou optimiser les situations du quotidien, ou peut-√™tre, qui sait, te donner envie d\u0026rsquo;explorer encore plus loin\u0026hellip; jusqu‚Äô√† en faire ton m√©tier. Le programme ‚Äî l\u0026rsquo;id√©e de restaurant En informatique, quand on parle de programme, on parle uniquement d\u0026rsquo;un ensemble d\u0026rsquo;algorithmes, des t√¢ches qui le composent. Il n\u0026rsquo;est pas encore en train d\u0026rsquo;√™tre ex√©cut√©. Par exemple, Facebook est un programme ‚Äî mais tant que tu ne l‚Äôouvres pas, il ne fait rien.\nEh bien, c\u0026rsquo;est pareil pour un restaurant dans la vie de tous les jours, quand je parle du restaurant √† un ami, je n\u0026rsquo;y suis pas physiquement. Je parle juste du concept de restaurant, de l\u0026rsquo;id√©e que je m\u0026rsquo;en fais.\nLe processus - le restaurant ouvert Si je veux parler du restaurant physiquement ouvert, avec les employ√©s qui s\u0026rsquo;activent, en informatique il faut plut√¥t utiliser le terme processus. C\u0026rsquo;est le programme en cours d\u0026rsquo;ex√©cution.\nUn processus poss√®de son propre contexte d\u0026rsquo;ex√©cution, c\u0026rsquo;est un gros mot pour dire qu\u0026rsquo;il a ses propres ressources, et que personne ne peut lui prendre ses ressources.\nEn effet, quand le restaurant est ouvert, les assiettes qu\u0026rsquo;il utilise sont ses propres assiettes, ses propres ressources. Il n\u0026rsquo;y a pas un autre restaurant qui lui prendrait ses assiettes pendant qu\u0026rsquo;il est ouvert, sinon il risque d\u0026rsquo;avoir des assiettes manquantes.\nPour ex√©cuter un algorithme, un processus est compos√© d\u0026rsquo;un thread principal, et il peut avoir d\u0026rsquo;autres thread.\nLe thread ‚Äî la proc√©dure en cours d\u0026rsquo;ex√©cution du serveur Le thread (fil d\u0026rsquo;ex√©cution en fran√ßais) est ce qu‚Äôon appelle la proc√©dure en train de s\u0026rsquo;ex√©cuter. C‚Äôest un peu comme un serveur qui suit activement une fiche d\u0026rsquo;instructions √† un instant donn√©. Attention, ce n\u0026rsquo;est pas le serveur.\nEn informatique, on dit que le thread est l‚Äôunit√© d‚Äôex√©cution, C‚Äôest la plus petite unit√© qu‚Äôun ordinateur puisse piloter pour ex√©cuter du code. il n‚Äôexiste pas d‚Äôunit√© plus petite qu‚Äôun thread pour ex√©cuter une t√¢che.\nMaintenant qu‚Äôon comprend ce qu‚Äôest un thread ‚Äî une proc√©dure en cours d\u0026rsquo;ex√©cution ‚Äî il faut se demander qui ex√©cute cette proc√©dure.\nLe coeur ‚Äî le serveur On y arrive enfin, dans un ordinateur, le composant physique qui ex√©cute un thread s\u0026rsquo;appelle un coeur (core en anglais). Pour notre restaurant, ce core est le serveur. C\u0026rsquo;est lui, physiquement, qui prend les commandes, sert les plats, etc.\nConcurrence, parall√©lisme, multithread et monothread ‚Äî ou comment servir 2 familles en m√™me temps Un serveur ne peut faire qu\u0026rsquo;une seule chose √† la fois, √† un instant donn√© : quand il prend une commande √† l\u0026rsquo;instant T, il ne peut pas, en m√™me temps, servir des plats.\nPar contre, il pourrait s\u0026rsquo;interrompre pendant les t√¢ches, par exemple, au lieu de prendre toutes les commandes de la famille, d\u0026rsquo;un coup, il peut :\nprendre la commande d\u0026rsquo;un 1er plat aller chercher un plat √† servir servir le plat prendre la commande d\u0026rsquo;un 2√®me plat aller chercher un autre plat √† servir servir le plat etc. Attention: ici nous n\u0026rsquo;avons pas d√©coup√© les actions. C\u0026rsquo;est juste que le serveur a jongl√© entre les 2 t√¢ches \u0026ldquo;prendre la commande\u0026rdquo; et \u0026ldquo;servir les plats\u0026rdquo;. On appelle ce comportement la concurrence, car les 2 t√¢ches sont en concurrence pour √™tre termin√©es.\nDans un ordinateur, les threads sont concurrents, et comme √©nonc√© plus haut, √©tant donn√© qu\u0026rsquo;un processus est compos√© d\u0026rsquo;un thread principal, on dit que les processus sont concurrents.\nDans la vraie vie il y a des situations o√π on ne jongle pas avec les t√¢ches, o√π il faut √™tre concentr√© sur une t√¢che\nTout √† fait, et dans ce cas, s\u0026rsquo;il y a trop de t√¢ches pour une seule personne, on fait intervenir une 2√®me personne, une 3√®me etc.\nDans notre restaurant, avec 2 serveurs, pendant que l\u0026rsquo;un prend les commandes de la famille 1, un autre peut servir les plats de la famille 2. On appelle √ßa le parall√©lisme, les proc√©dures/threads sont ex√©cut√©s en parall√®le.\nEnfin, dans un restaurant, si on ne peut avoir qu\u0026rsquo;un seul serveur qui suit activement une fiche d\u0026rsquo;instructions ‚Äî un seul thread ‚Äî, on dit que le restaurant/le programme est monothread. S\u0026rsquo;il y en a plusieurs, on dit que le restaurant/serveur est multithread.\nDu coup, la solution pour le restaurant est d\u0026rsquo;embaucher plus de serveurs ?\nC\u0026rsquo;est l\u0026rsquo;une des solutions, oui, mais ce n\u0026rsquo;est pas la seule. Il y a globalement 2 chemins pour r√©pondre √† une mont√©e en charge. On peut :\noptimiser les algorithmes pour les rendre plus performants et/ou changer le mode d\u0026rsquo;ex√©cution, ou alors on peut mettre plus de coeurs et faire du multithread. De la m√™me mani√®re, dans la vraie vie, on peut :\nmieux former le serveur et/ou optimiser les proc√©dures qu\u0026rsquo;il doit suivre et/ou le motiver pour qu\u0026rsquo;il travaille plus vite, embaucher plus de serveurs. Dans tous les cas, je ne m\u0026rsquo;avancerai pas pour apprendre √† un restaurateur son m√©tier.\nLe partage de ressources ‚Äî ou comment partager une fourchette Dans le restaurant, on va maintenant se mettre du point de vue d\u0026rsquo;un couple, venu manger en t√™te √† t√™te dans une ambiance cosy, tamis√©e, √† l\u0026rsquo;abri des regards.\nLe serveur leur annonce la mauvaise nouvelle: il y a assez de couverts pour 2, sauf pour la fourchette. S\u0026rsquo;ils souhaitent tout de m√™me manger ici, ils devront se partager la fourchette, et interdiction de manger avec les doigts.\nLe couple discute, et finalement ce n\u0026rsquo;est pas un probl√®me, ils sont l√† pour profiter de l\u0026rsquo;instant.\nUne fois la commande pass√©e et les plats servis, Le couple commence √† manger. Mais comment s‚Äôorganisent-ils ?\nBen ils mangent chacun leur tour, ou alors l\u0026rsquo;un mange d\u0026rsquo;abord, et l\u0026rsquo;autre ensuite ?\nBingo, que l\u0026rsquo;un mange d\u0026rsquo;abord, puis l\u0026rsquo;autre, ou qu\u0026rsquo;ils mangent √† tour de r√¥le, dans tous les cas, ils doivent se partager une ressource : la fourchette. Donc l\u0026rsquo;un prend le contr√¥le de la ressource/fourchette, fait des actions avec cette ressource, puis lib√®re la ressource. L\u0026rsquo;autre peut √† son tour prendre le contr√¥le de la ressource, etc.\nDans un ordinateur, c\u0026rsquo;est pareil, dans un processus, les threads doivent se partager les ressources. De m√™me, les processus doivent se partager les ressources.\nC\u0026rsquo;est pour √ßa que sur un ordinateur, quand tu ouvres un document Word partag√© avec tes coll√®gues, parfois tu as un message du genre \u0026ldquo;le fichier est d√©j√† ouvert par\u0026hellip;\u0026rdquo; car le document Word est une fourchette ressource partag√©e entre ton application Word, et celle de ton coll√®gue.\nElle est bizarre ton explication\u0026hellip;\nJe ne vois pas de quoi tu parles.\nQuoiqu\u0026rsquo;il en soit, tu comprends donc qu\u0026rsquo;en rajoutant plus de threads/cores/personnes, on ne va pas forc√©ment plus vite. Ils doivent se synchroniser pour partager les ressources et parfois attendre.\nInstant Dev En informatique, ce partage de ressource s‚Äôappelle une section critique. Pour √©viter que deux t√¢ches utilisent la ressource en m√™me temps, on utilise des verrous (locks). Conclusion Dans cet article, on a vu diff√©rents termes informatiques qui permettent de comprendre un peu plus comment fonctionne un ordinateur, comment on pouvait r√©pondre √† la mont√©e en charge de diff√©rentes mani√®res, et que finalement, c\u0026rsquo;est tr√®s proche de la vie r√©elle.\nNous avons fini cette section \u0026ldquo;IMMV ‚Äî Section 2 ‚Äî L\u0026rsquo;ex√©cution : comment faire des actions ?\u0026rdquo;.\nDans la prochaine section, IMMV ‚Äî Section 3 ‚Äî L\u0026rsquo;optimisation : comment se faire passer pour un coach de vie, on verra comment optimiser des applications et la vie r√©elle.\n‚Üê Retour √† la section\n‚Üê Retour √† l‚Äôintroduction\n","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/l-execution/threads/","summary":"\u003cp\u003eDans le pr√©c√©dent article, \u003ca href=\"../sync-async/\"\u003eIMMV ‚Äî Section 2 ‚Äî Chapitre 1 ‚Äî Synchrone et Asynchrone, ou comment r√©agir au changement\u003c/a\u003e, on a vu les diff√©rents modes d\u0026rsquo;ex√©cution.\u003c/p\u003e\n\u003cp\u003eOn s\u0026rsquo;√©tait arr√™t√© sur le probl√®me suivant : Comment faire pour r√©pondre √† la mont√©e en charge, √† l\u0026rsquo;accumulation de t√¢ches ?\u003c/p\u003e\n\u003cp\u003eEh bien, dans cet article, on va voir comment on r√©sout ce probl√®me, en informatique \u003cstrong\u003ecomme dans la vraie vie\u003c/strong\u003e : les m√©canismes sont souvent tr√®s proches.\u003c/p\u003e","title":"IMMV ‚Äî Section 2 ‚Äî Chapitre 2 ‚Äî Monothread, Multithread, Parall√©lisme et Concurrence, je ne peux pas tout faire en m√™me temps !"},{"content":"Dans le pr√©c√©dent article IMVV ‚Äî Section 1 ‚Äî Chapitre 1 ‚Äî File ou Pile ? L\u0026rsquo;art de passer avant les autres on a d√©couvert les files et les piles. Cette fois, on va survoler plusieurs autres structures de donn√©es (data structures en anglais) qu\u0026rsquo;on utilise tr√®s souvent en informatique\u0026hellip; et dans la vraie vie.\nN\u0026rsquo;oublie pas que les objectifs de ces articles sont :\nTe donner une meilleure compr√©hension des bases de l‚Äôinformatique, T\u0026rsquo;inspirer pour analyser ou optimiser les situations du quotidien, ou peut-√™tre, qui sait, te donner envie d\u0026rsquo;explorer encore plus loin\u0026hellip; jusqu‚Äô√† en faire ton m√©tier. Le tableau ‚Äî la base de presque tout Tu as peut-√™tre remarqu√© dans le pr√©c√©dent article que la file et la pile se ressemblent beaucoup. En r√©alit√©, on peut les repr√©senter toutes les deux avec la m√™me structure : un tableau.\nEn informatique, le tableau (ou array en anglais) est l‚Äôune des structures les plus simples : on range des √©l√©ments les uns √† la suite des autres, dans un espace de taille fixe, et chaque √©l√©ment est rep√©r√© par sa position (ou index).\nPrenons un exemple simple : un tableau d\u0026rsquo;amis √† inviter pour un anniversaire, mais dans mon carnet d\u0026rsquo;adresses je n\u0026rsquo;ai que 6 places.\nAmis Manutea Vai Purotu Heiarii Reva (vide) index 0 1 2 3 4 5 L‚Äôindex est simplement la position de la personne dans le tableau, ce n\u0026rsquo;est pas un ordre.\nDans la plupart des langages informatiques, l\u0026rsquo;index commence √† 0, et pas √† 1.\nCet index nous permet d\u0026rsquo;acc√©der directement √† Vai, l\u0026rsquo;amie √† l\u0026rsquo;index 2 (ou 3√®me √©l√©ment), pour voir son num√©ro de t√©l√©phone par exemple.\nEt ce tableau peut se comporter diff√©remment selon la mani√®re dont on ajoute et retire les √©l√©ments. Par exemple, on peut le faire fonctionner comme une file ou une pile, simplement en changeant les r√®gles du jeu.\nSi c\u0026rsquo;est une file : On ajoute les amis √† la fin, par exemple, Jean arrive apr√®s Reva : Amis Manutea Vai Purotu Heiarii Reva Jean index 0 1 2 3 4 5 Et on traite depuis le d√©but, on retire Manutea du tableau : Amis Vai Purotu Heiarii Reva Jean (vide) index 0 1 2 3 4 5 Pour une pile : On ajoute les amis au d√©but, Jean arrive avant Manutea : Amis Jean Manutea Vai Purotu Heiarii Reva index 0 1 2 3 4 5 Et on traite toujours depuis le d√©but, on retire Jean du tableau : Amis Manutea Vai Purotu Heiarii Reva (vide) index 0 1 2 3 4 5 Dans les deux cas, on utilise un tableau pour stocker les amis. C‚Äôest la logique d‚Äôajout et de retrait qui transforme ce tableau en pile ou en file.\nüéØ Et c‚Äôest exactement pour √ßa que, lorsqu‚Äôon traite des dossiers empil√©s, il vaut mieux commencer par ceux du bas. Sinon, on inverse l‚Äôordre d‚Äôarriv√©e‚Ä¶ et ce n‚Äôest plus une file d‚Äôattente, mais une injustice organis√©e.\nS\u0026rsquo;il n\u0026rsquo;y a que 6 places, que se passe-t-il si j\u0026rsquo;ai 7 amis ?\nD\u0026rsquo;abord, je te f√©licite d\u0026rsquo;avoir autant d\u0026rsquo;amis. Ensuite, on peut s\u0026rsquo;en sortir, en achetant un carnet d\u0026rsquo;adresse qui a plus de places, et on recopie nos amis dans ce nouveau carnet.\nC\u0026rsquo;est similaire en informatique, on fait un nouveau tableau, plus grand, et on recopie.\nHeureusement, en informatique on a invent√© une autre structure.\nLa liste ‚Äî comme le tableau, mais dynamique La liste (ou list en anglais), c‚Äôest comme un tableau, mais en mieux : la taille n‚Äôest pas fixe.\nTu peux ajouter ou supprimer des √©l√©ments √† tout moment, sans te soucier du nombre de places pr√©vues au d√©part. Et √† tout moment, tu peux demander : ‚ÄúCombien d‚Äô√©l√©ments j‚Äôai dans cette liste ?‚Äù ‚Äî et obtenir une r√©ponse fiable.\nC‚Äôest la version souple du tableau, celle qu‚Äôon trouve dans la majorit√© des langages de programmation modernes.\nRefaisons les exemples de pile et de file, mais cette fois-ci avec des listes.\nSi c\u0026rsquo;est une file : On ajoute les amis √† la fin, par exemple, Jean arrive apr√®s Reva : Amis Manutea Vai Purotu Heiarii Reva Jean index 0 1 2 3 4 5 Nombre d\u0026rsquo;√©l√©ments: 6\nEt on traite depuis le d√©but, on retire Manutea du tableau : Amis Vai Purotu Heiarii Reva Jean index 0 1 2 3 4 Nombre d\u0026rsquo;√©l√©ments: 5\nPour une pile : On ajoute les amis au d√©but, Jean arrive avant Manutea : Amis Jean Manutea Vai Purotu Heiarii Reva index 0 1 2 3 4 5 Nombre d\u0026rsquo;√©l√©ments: 6\nEt on traite toujours depuis le d√©but, on retire Jean du tableau : Amis Manutea Vai Purotu Heiarii Reva index 0 1 2 3 4 Nombre d\u0026rsquo;√©l√©ments: 5\nOn remarque qu\u0026rsquo;il n\u0026rsquo;y a plus la case (vide) et le nombre d\u0026rsquo;√©l√©ments change.\nInstant Dev Pour permettre cette souplesse, la liste est plus gourmande en calculs:\ncalcul √† la vol√©e du nombre d\u0026rsquo;√©l√©ments, r√©allocation de m√©moire. Mais en vrai, √† moins que tu ne codes un satellite, une carte embarqu√©e, ou une console des ann√©es 80, o√π chaque octet compte, il y a peu de raisons d‚Äôutiliser un tableau fixe. Une liste dynamique t\u0026rsquo;√©vitera bien des migraines.\nLe tableau et la liste sont des structures tr√®s basiques et tr√®s puissantes, elles sont les bases de beaucoup d\u0026rsquo;autres structures qu\u0026rsquo;on verra par la suite.\nLe tableau associatif ‚Äî ou comment indexer On avait pris l\u0026rsquo;exemple d\u0026rsquo;un carnet d\u0026rsquo;adresses qu\u0026rsquo;on avait mis dans un tableau ou dans une liste. C\u0026rsquo;est d√©j√† tr√®s bien de pouvoir stocker ta liste d\u0026rsquo;amis, mais si tu as des centaines d\u0026rsquo;amis et que tu veux appeler Vai pour aller √† la mer, tu vas gal√©rer pour chercher dans ce carnet d\u0026rsquo;adresse.\nEn effet, avec les 2 derni√®res structures, tu dois parcourir les √©l√©ments un par un, jusqu\u0026rsquo;√† tomber sur Vai. Tu vas perdre beaucoup de temps √† chercher son num√©ro, √ßa va t\u0026rsquo;√©nerver, tu vas l\u0026rsquo;appeler, lui dire \u0026ldquo;mais quelle id√©e d\u0026rsquo;avoir un pr√©nom qui commence par V!\u0026rdquo;, elle va s\u0026rsquo;√©nerver, vous ne serez plus amis, alors que tu voulais juste aller surfer.\nJe m\u0026rsquo;emporte un peu? Peut-√™tre.\nPour r√©soudre ce probl√®me, en informatique on a invent√© le tableau associatif (ou map en anglais). On utilise le tableau, et on va profiter de l\u0026rsquo;index pour justement indexer les √©l√©ments.\nPour cela, on a besoin de r√©fl√©chir un peu:\nOn sait que l\u0026rsquo;index est une position dans le tableau, donc un nombre On sait que les pr√©noms commencent par une lettre (oui, je suis s√©rieux), on va supposer que c\u0026rsquo;est une lettre de l\u0026rsquo;alphabet, et pas un caract√®re sp√©cial comme *$@ On sait qu\u0026rsquo;il y a 26 lettres dans l\u0026rsquo;alphabet =\u0026gt; Eur√™ka: On peut utiliser la 1√®re lettre du pr√©nom, la transformer en index en utilisant sa position dans l\u0026rsquo;alphabet, et associer le pr√©nom √† cet index. On dit que l\u0026rsquo;index est une cl√© et que le pr√©nom est une valeur par exemple:\nManutea =\u0026gt; M =\u0026gt; M est la 14√®me lettre de l\u0026rsquo;alphabet, donc Manutea sera le 14√®me √©l√©ment. Pour rappel, l\u0026rsquo;index commence √† 0, donc M = index 13. cl√©: 13 valeur: Manutea\nPour Heiarii on aura: cl√©: 7 valeur: Heiarii\nCe qui nous donne:\nAmis (vide) (vide) (vide) (vide) (vide) (vide) (vide) Heiarii (vide) (vide) (vide) (vide) (vide) Manutea (vide) Purotu (vide) Reva (vide) (vide) (vide) Vai (vide) (vide) (vide) (vide) index 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 Avec cette map, on pourra facilement acc√©der aux informations de Vai, puisqu\u0026rsquo;on pourra juste aller directement √† l\u0026rsquo;index 21.\nInstant Dev En vrai, pour calculer l\u0026rsquo;index, on utilise une fonction de hachage (hash en anglais) qui permet de transformer les cl√©s en index. C\u0026rsquo;est pour √ßa qu\u0026rsquo;on appelle √ßa un HashMap en Java. Oui mais moi je n\u0026rsquo;ai pas envie de m\u0026rsquo;emb√™ter √† compter sur mes doigts √† quelle position est la lettre V\u0026hellip;\nTu as raison, dans la vraie vie, dans ton carnet d\u0026rsquo;adresse pour chaque lettre tu as une encoche o√π la lettre y est marqu√©e, et tu notes les informations dans les pages qui correspondent √† cette lettre.\nCarnet d'adresses papier, en rouge les encoches ‚Äî source: Wikim√©dia En informatique c\u0026rsquo;est le m√™me principe, sauf qu\u0026rsquo;on ne peut pas utiliser de lettre comme index, alors on est oblig√© de trouver cette astuce.\nEt en plus, il est nul ton carnet d\u0026rsquo;adresse, comment je fais si j\u0026rsquo;ai 2 amis qui s\u0026rsquo;appellent Vai et Vahine? Je mets Vahine dans la case juste apr√®s? Et si j\u0026rsquo;ai des centaines d\u0026rsquo;amis comme tu le disais au d√©but, je fais comment pour les mettre dans les 26 cases ?\nOk, tranquille, pas de stress.\nEn informatique, on peut combiner les structures, plut√¥t que d\u0026rsquo;associer un pr√©nom √† une lettre, on va associer une liste de pr√©noms √† une lettre. Ci-dessous on r√©√©crit notre map et on ajoute Vahine :\nCl√©s 7 13 15 17 21 ‚Üì ‚Üì ‚Üì ‚Üì ‚Üì Heiarii Manutea Purotu Reva Vai Vahine Comme tu l\u0026rsquo;as remarqu√©, au lieu de mettre directement les pr√©noms dans les cases, il y a des fl√®ches qui pointent vers des listes. On appelle √ßa un pointeur (ou pointer en anglais). c‚Äôest un m√©canisme qui permet √† l‚Äôordinateur de dire \u0026ldquo;Va chercher les donn√©es ailleurs.\u0026rdquo; Plut√¥t que de stocker directement les valeurs, on stocke l‚Äôendroit o√π elles se trouvent.\nC\u0026rsquo;est la plus grande force de l\u0026rsquo;informatique, on peut combiner diff√©rents concepts abstraits pour r√©pondre √† notre besoin.\nL\u0026rsquo;ensemble ‚Äî une structure unique Si comme moi tu fais ta liste de courses durant la semaine en pr√©vision des grandes courses du dimanche, tu as peut-√™tre d√©j√† eu la liste qui ressemble √† :\nlait oeufs pops viande salade oeufs Tu remarques que les oeufs apparaissent 2 fois. On appelle √ßa un doublon.\n√áa peut arriver si lundi tu t\u0026rsquo;es fait une omelette avec les derniers oeufs, tu les as not√©s pour en racheter. Puis que vendredi, tu voulais faire un g√¢teau, mais tu t\u0026rsquo;es souvenu que tu n\u0026rsquo;avais plus d\u0026rsquo;oeufs\u0026hellip; et alors tu les as r√©√©crits.\nC\u0026rsquo;est tr√®s sp√©cifique comme explication\u0026hellip; C\u0026rsquo;est ce qui t\u0026rsquo;es arriv√©, pas vrai?\nTu n\u0026rsquo;as pas de preuve. Cette accusation est fausse.\nBref, la liste et le tableau n\u0026rsquo;ont aucun moyen d\u0026rsquo;emp√™cher la pr√©sence de doublons dans leurs √©l√©ments. C\u0026rsquo;est pour √ßa qu\u0026rsquo;en informatique on a invent√© l\u0026rsquo;ensemble (ou set en anglais), une structure o√π chaque √©l√©ment est unique.\nPar contre, le set n\u0026rsquo;est pas ordonn√© comme le tableau et la liste. Il n\u0026rsquo;y a pas d\u0026rsquo;index permettant d\u0026rsquo;acc√©der directement au 2√®me ou 6√®me √©l√©ment.\nInstant Dev En informatique, pour faire un set, on utilise en fait une map o√π la cl√© est l\u0026rsquo;√©l√©ment. Le calcul de hash nous garantit qu\u0026rsquo;il ne peut pas y avoir de doublon. Et on met une valeur arbitraire dans la valeur associ√©e, comme 1 ou PRESENT.\nSi on veut une structure ordonn√©e sans doublons, on peut :\ncoder une liste avec une fonction d\u0026rsquo;ajout qui rejette les doublons, transformer un set en liste, utiliser une structure sp√©cialis√©e, comme LinkedHashSet en Java üìå Exemples dans la vie r√©elle L\u0026#39;ensemble des ingr√©dients qu‚Äôil te reste dans le frigo L\u0026#39;ensemble des invit√©s √† ton anniversaire üíª Exemples en informatique L\u0026#39;ensemble des num√©ros de passeport en Polyn√©sie fran√ßaise L\u0026#39;ensemble de tes amis Facebook Le graphe ‚Äî ou comment appeler l\u0026rsquo;ami d\u0026rsquo;un ami d\u0026rsquo;un ami Tu pr√©pares ta liste d‚Äôinvit√©s pour ton anniversaire, tu comptes inviter tout ton carnet d\u0026rsquo;adresses.\nEt l√†, tu r√©alises que tu n‚Äôas pas le contact de Paul. Tu l\u0026rsquo;as crois√© en soir√©e et il √©tait cool, tu voudrais l\u0026rsquo;inviter\u0026hellip; mais tu as oubli√© de lui demander son num√©ro.\nHeureusement, tu sais que Purotu le conna√Æt.\nTu l\u0026rsquo;appelles\u0026hellip; zut, elle n\u0026rsquo;a pas son num√©ro. Mais elle te donne le num√©ro de Tiare, une autre amie de Paul. Tu appelles Tiare, tu te pr√©sentes, tu l\u0026rsquo;invite √©galement car tu n\u0026rsquo;es pas un sauvage. Et tu lui demandes le num√©ro de Paul.\nBingo, elle l\u0026rsquo;a, tu appelles Paul et il est chaud pour venir √† ton anniversaire.\nLes liens entre ces personnes peuvent √™tre repr√©sent√©s par un graphe (ou graph en anglais).\nEt ce que tu viens de faire, sans t\u0026rsquo;en rendre compte, c\u0026rsquo;est un parcours de graphe, un algorithme !\n%%{ init: { 'theme': 'base', 'themeVariables': { 'primaryColor': '#ddd', 'primaryTextColor': '#007acc', 'primaryBorderColor': '#007acc', 'lineColor': '#007acc' } } }%% graph TD A[Toi] --- B[Manutea] A --- C[Vai] A --- D[Purotu] A --- E[Heiarii] A --- F[Reva] A --- G[Jean] D --- H[Tiare] H --- I[Paul] Graphe de relation entre les personnes Ce graphe est non orient√©, c\u0026rsquo;est-√†-dire qu\u0026rsquo;il n\u0026rsquo;y a pas de sens entre les √©l√©ments. Chaque case est un noeud, et chaque trait est une ar√™te.\nEffectivement pour √©viter de f√¢cher les personnes, on ne va pas dire \u0026ldquo;Purotu est l\u0026rsquo;ami de Tiare, mais Tiare n\u0026rsquo;est pas l\u0026rsquo;ami de Purotu\u0026rdquo;.\nPar contre, on peut utiliser un graphe orient√© pour repr√©senter les appels que tu as pass√©s.\n%%{ init: { 'theme': 'base', 'themeVariables': { 'primaryColor': '#ddd', 'primaryTextColor': '#007acc', 'primaryBorderColor': '#007acc', 'lineColor': '#007acc' } } }%% graph TD A[Toi] --\u003e B[Manutea] A --\u003e C[Vai] A --\u003e D[Purotu] A --\u003e E[Heiarii] A --\u003e F[Reva] A --\u003e G[Jean] A --\u003e H[Tiare] A --\u003e I[Paul] Graphe des appels que tu as pass√© Ici, chaque case est un noeud, tout comme le graphe non orient√©, mais cette fois-ci, chaque fl√®che est une ar√™te, et donne le sens d\u0026rsquo;appel.\nOn a donc les m√™mes donn√©es, mais on utilise la structure adapt√©e √† ce qu\u0026rsquo;on veut repr√©senter.\nEt c\u0026rsquo;est quoi le parcours de graphe?\nJe suis heureux que tu poses cette question, mais ta question d√©passe le cadre de cet article.\nConclusion On a d√©j√† vu pas mal de choses, je te laisse relire, essayer de combiner les structures entre elles, te renseigner sur internet en cherchant \u0026ldquo;structures de donn√©es\u0026rdquo; ou \u0026ldquo;data structure\u0026rdquo;.\nIl existe beaucoup de structures de donn√©es, celles qui sont pr√©sent√©es dans cet article sont juste les plus basiques, celles qu\u0026rsquo;on apprend dans les premi√®res heures de cours de programmation.\nSi tu souhaites continuer cette aventure, tu peux regarder la suite ici: IMVV ‚Äî Section 1 ‚Äî Chapitre 3 ‚Äî Structures de contr√¥le et algorithme, apprendre √† r√©fl√©chir\n‚Üê Retour √† la section\n‚Üê Retour √† l‚Äôintroduction\n","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/les-bases/structures-de-donnees/","summary":"\u003cp\u003eDans le pr√©c√©dent article \u003ca href=\"../file-et-pile/\"\u003eIMVV ‚Äî Section 1 ‚Äî Chapitre 1 ‚Äî File ou Pile ? L\u0026rsquo;art de passer avant les autres\u003c/a\u003e on a d√©couvert les files et les piles. Cette fois, on va survoler plusieurs autres \u003cstrong\u003estructures de donn√©es\u003c/strong\u003e (\u003cem\u003edata structures\u003c/em\u003e en anglais) qu\u0026rsquo;on utilise tr√®s souvent en informatique\u0026hellip; et dans la vraie vie.\u003c/p\u003e\n\u003cp\u003eN\u0026rsquo;oublie pas que les objectifs de ces articles sont :\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eTe donner une meilleure compr√©hension des bases de l‚Äôinformatique,\u003c/li\u003e\n\u003cli\u003eT\u0026rsquo;inspirer pour analyser ou optimiser les situations du quotidien,\u003c/li\u003e\n\u003cli\u003eou peut-√™tre, qui sait, te donner envie d\u0026rsquo;explorer encore plus loin\u0026hellip; jusqu‚Äô√† en faire ton m√©tier.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"le-tableau--la-base-de-presque-tout\"\u003eLe tableau ‚Äî la base de presque tout\u003c/h2\u003e\n\u003cp\u003eTu as peut-√™tre remarqu√© dans le pr√©c√©dent article que la \u003cstrong\u003efile\u003c/strong\u003e et la \u003cstrong\u003epile\u003c/strong\u003e se ressemblent beaucoup. En r√©alit√©, on peut les repr√©senter toutes les deux avec la m√™me structure : un \u003cstrong\u003etableau\u003c/strong\u003e.\u003c/p\u003e","title":"IMVV ‚Äî Section 1 ‚Äî Chapitre 2 ‚Äî Autres structures de donn√©es, j'organise mon bordel"},{"content":"Dans l\u0026rsquo;article pr√©c√©dent IMVV ‚Äî Section 1 ‚Äî Chapitre 2 ‚Äî Autres structures de donn√©es, j\u0026rsquo;organise mon bordel, on s\u0026rsquo;√©tait arr√™t√© sur ta question :\nEt c\u0026rsquo;est quoi le parcours de graphe?\nDans cet article, on va parler des structures de contr√¥le (control flow statements en anglais), qu\u0026rsquo;on utilise dans des algorithmes (algorithms en anglais).\nAvant d\u0026rsquo;expliquer l\u0026rsquo;algorithme que tu as fait, le parcours de graphe, on doit expliquer les structures de contr√¥le.\nN\u0026rsquo;oublie pas que les objectifs de ces articles sont :\nTe donner une meilleure compr√©hension des bases de l‚Äôinformatique, T\u0026rsquo;inspirer pour analyser ou optimiser les situations du quotidien, ou peut-√™tre, qui sait, te donner envie d\u0026rsquo;explorer encore plus loin\u0026hellip; jusqu‚Äô√† en faire ton m√©tier. Pseudo-code ‚Äî l\u0026rsquo;art de la cuisine Quand tu fais un g√¢teau, tu r√©alises les actions suivantes:\nPr√©chauffer le four Verser la farine dans le saladier Casser les oeufs et mettre le contenu dans le saladier Verser le lait dans le saladier Remuer Verser la pr√©paration dans un moule Mettre le moule au four Attendre 20 minutes Eteindre le four Sortir le moule du four D√©mouler Toute cette suite d\u0026rsquo;√©tapes est ce qu\u0026rsquo;on appelle un algorithme, et la fa√ßon dont on l\u0026rsquo;a √©crit, √ßa s\u0026rsquo;appelle du pseudo-code, parce que √ßa ressemble √† un langage de programmation, mais ce n\u0026rsquo;en est pas un.\nMais pourquoi on appelle √ßa un algorithme? on peut pas juste dire une suite d\u0026rsquo;actions?\nJe te laisse chercher sur internet pourquoi on appelle √ßa un algorithme.\nLa boucle for ‚Äî ou comment √™tre fiu Ton meilleur ami Manutea te demande \u0026ldquo;Comment tu as fait pour inviter toutes ces personnes √† ton anniversaire ?\u0026rdquo;. Laquelle de ces 2 phrases dirais-tu :\nJ\u0026rsquo;ai appel√© Manutea, puis j\u0026rsquo;ai appel√© Vai, puis j\u0026rsquo;ai appel√© Purotu, puis j\u0026rsquo;ai appel√© Heiarii, puis j\u0026rsquo;ai appel√© Reva, puis j\u0026rsquo;ai appel√© Jean, puis j\u0026rsquo;ai appel√© Tiare, puis j\u0026rsquo;ai appel√© Paul J\u0026rsquo;ai pris mon carnet d\u0026rsquo;adresses, puis pour chaque contact, j\u0026rsquo;ai appel√© le num√©ro correspondant La 1√®re phrase est un algorithme sans boucle (loop en anglais) : chaque action est √©crite explicitement.\nLa 2√®me, elle, utilise une boucle ‚Äî tu r√©p√®tes la m√™me action pour chaque contact. Sans forc√©ment y penser, tu utilises aussi une variable : un espace dans ta t√™te pour m√©moriser un num√©ro, que tu remplaces √† chaque nouvel appel.\nCette mani√®re de r√©p√©ter une action avec une variable, c‚Äôest exactement ce qu‚Äôun ordinateur fait quand on lui demande de parcourir une liste.\nSi tu relis bien la 2√®me phrase, tu verras que pour chaque est en gras. En anglais, pour chaque se dit for each, c\u0026rsquo;est pour √ßa qu\u0026rsquo;on l\u0026rsquo;appelle la boucle for dans la plupart des langages.\nSi on essayait d\u0026rsquo;√©crire un algorithme, sous forme de pseudo-code simple pour d√©crire la 2√®me phrase, √ßa donnerait :\nDans mon carnet d\u0026#39;adresses, pour chaque contact: J\u0026#39;ai appel√© le num√©ro correspondant au contact J\u0026#39;ai invit√© l\u0026#39;ami Fin pour \u0026ldquo;Dans mon carnet d\u0026rsquo;adresses, pour chaque contact\u0026rdquo; marque le d√©but de la boucle, et \u0026ldquo;Fin pour\u0026rdquo; marque la fin de la boucle.\nEntre ces 2 lignes, les actions \u0026ldquo;J\u0026rsquo;ai appel√© le num√©ro correspondant au contact\u0026rdquo; et \u0026ldquo;J\u0026rsquo;ai invit√© l\u0026rsquo;ami\u0026rdquo; forment ce qu\u0026rsquo;on appelle un bloc d\u0026rsquo;instructions.\nPar convention, on indente ce bloc ‚Äî on le d√©cale vers la droite ‚Äî pour montrer visuellement qu\u0026rsquo;il est √† l\u0026rsquo;int√©rieur de la boucle.\nOk, et quel est le rapport entre la boucle for et fiu comme marqu√© dans le titre ?\nSi on devait √©crire l\u0026rsquo;algorithme de la 1√®re phrase, √ßa donnerait :\nJ\u0026#39;ai appel√© Manutea J\u0026#39;ai appel√© Vai J\u0026#39;ai appel√© Purotu J\u0026#39;ai appel√© Heiarii J\u0026#39;ai appel√© Reva J\u0026#39;ai appel√© Jean J\u0026#39;ai appel√© Tiare J\u0026#39;ai appel√© Paul Chaque ligne est une action, donc il faut √©crire autant de lignes qu\u0026rsquo;il y a de contacts dans ta liste de contacts. Maintenant, que se passerait-il si tu devais inviter 100 personnes? Tu serais fiu.\nAlors qu\u0026rsquo;avec la boucle, tu n\u0026rsquo;as pas besoin de changer ton algorithme, c\u0026rsquo;est le m√™me, que tu aies 6 contacts ou 100.\nOui mais dans la vraie vie je dois quand m√™me appeler les amis un par un\nCet exemple n‚Äôest pas l√† pour dire que tu vas programmer ton t√©l√©phone ‚Äî mais pour te faire sentir la puissance de la boucle : un seul bloc, quelle que soit la longueur de ta liste.\nDans la vraie vie, tu fais un groupe Facebook avec tous tes amis et tu postes des messages d\u0026rsquo;informations dans le groupe pour organiser, idem pour un groupe SMS. Si t\u0026rsquo;es old school, tu postes un message dans le journal local et viendra qui verra. D\u0026rsquo;ailleurs j\u0026rsquo;en parlerai dans de prochains articles.\nLa boucle while ‚Äî ou comment faire ses devoirs avant d\u0026rsquo;aller jouer Quand tu √©tais plus jeune, on t\u0026rsquo;a s√ªrement d√©j√† dit \u0026ldquo;Fais d\u0026rsquo;abord tes devoirs, ensuite tu peux aller jouer\u0026rdquo;, ou autrement dit \u0026quot;Tant que tu n\u0026rsquo;a pas fini tes devoirs, tu travailles, ensuite tu peux aller jouer\u0026quot;.\nSi on devait √©crire cet algorithme, √ßa donnerait:\nTant que je n\u0026#39;ai pas fini mes devoirs: Je fais mes devoirs Fin tant que Je vais jouer \u0026ldquo;Tant que je n\u0026rsquo;ai pas fini mes devoirs\u0026rdquo; marque le d√©but de la boucle, et \u0026ldquo;Fin tant que\u0026rdquo; marque la fin de la boucle.\nEntre ces 2 lignes, l\u0026rsquo;action \u0026ldquo;Je fais mes devoirs\u0026rdquo; forme le bloc d\u0026rsquo;instructions.\nTu l\u0026rsquo;auras remarqu√©, c\u0026rsquo;est tr√®s similaire √† la boucle for, sauf qu\u0026rsquo;au lieu de parcourir des √©l√©ments, on v√©rifie une condition, et on r√©p√®te la boucle si la condition n\u0026rsquo;est remplie.\nOn appelle √ßa une boucle while, car Tant que se dit while en anglais.\nEnsuite, une fois que les devoirs sont finis, on sort de la boucle, on fait la suite des instructions, donc \u0026ldquo;Je vais jouer\u0026rdquo;. On aurait aussi pu avoir d\u0026rsquo;autres instructions apr√®s la boucle for, c\u0026rsquo;est juste que l\u0026rsquo;exemple ne s\u0026rsquo;y pr√™tait pas.\nMais alors‚Ä¶ pourquoi deux types de boucles si elles font (presque) la m√™me chose ? Pourquoi une boucle for, et une boucle while ?\nEn fait, en fonction du probl√®me qu\u0026rsquo;on veut r√©soudre :\ndans certains cas on pourra compter, et dans ce cas on pr√©f√®rera utiliser une boucle for dans certains cas on ne pourra pas compter, et dans ce cas on pr√©f√®rera utiliser une boucle while Par exemple, pour un enfant qui joue dehors:\nTant qu\u0026#39;il fait beau: Je joue Fin tant que Ici, impossible de compter.\nMais tu commences peut-√™tre √† te rendre compte d\u0026rsquo;une supercherie.\nInstant Dev üí° En r√©alit√©, toutes les boucles for peuvent √™tre r√©√©crites en boucle while.\nLa boucle for n‚Äôest qu‚Äôune boucle while optimis√©e, √©crite pour √™tre plus simple √† lire‚Ä¶ quand on sait compter.\nLes 2 types de boucles sont des instructions d\u0026rsquo;it√©ration, √† la diff√©rence des instructions simples comme \u0026ldquo;Je joue\u0026rdquo;, les instructions d\u0026rsquo;it√©ration permettre d\u0026rsquo;ex√©cuter des blocs d\u0026rsquo;instructions de mani√®re r√©p√©t√©e.\nBravo, tu commences √† r√©fl√©chir comme un d√©veloppeur !\nExplications\nPour rappel:\ndans une liste, l\u0026rsquo;index commence √† 0, dans une liste, le dernier index est √©gal au nombre d\u0026rsquo;√©l√©ments de la liste moins 1 Amis Manutea Vai Purotu Heiarii Reva Jean Tiare Paul index 0 1 2 3 4 5 6 7 Nombre d\u0026rsquo;√©l√©ments: 8\nune variable c\u0026rsquo;est juste un espace m√©moire o√π on stocke une donn√©e (un tableau, une liste, un pr√©nom, un num√©ro de t√©l√©phone) Si on reprend l\u0026rsquo;exemple de la boucle for:\nDans mon carnet d\u0026#39;adresses, pour chaque contact: J\u0026#39;appelle le num√©ro correspondant au contact J\u0026#39;invite l\u0026#39;ami Fin pour Derri√®re, voici plut√¥t ce que fait un ordinateur (de mani√®re simplifi√©e) :\nJe cr√©e une variable \u0026#34;index\u0026#34;, qui vaut 0 Tant que \u0026#34;index\u0026#34; est inf√©rieur au nombre d\u0026#39;√©l√©ments (8) du carnet d\u0026#39;adresses: Je regarde le contact qui se trouve √† l\u0026#39;\u0026#34;index\u0026#34; dans le carnet d\u0026#39;adresses Je r√©cup√®re son num√©ro Je l\u0026#39;invite \u0026#34;index\u0026#34; prend la valeur \u0026#34;index\u0026#34; + 1 Fin tant que Comme tu le vois, c\u0026rsquo;est un peu plus compliqu√©, c\u0026rsquo;est pour √ßa qu\u0026rsquo;on pr√©f√®re utiliser une boucle for quand on peut compter.\nL\u0026rsquo;instruction conditionnelle ‚Äî ou pourquoi il faut respecter le code de la route Juste au-dessus, on parlait de condition dans la boucle while. Mais on n\u0026rsquo;a jamais expliqu√© ce que c\u0026rsquo;√©tait.\nUne condition est une question qu\u0026rsquo;on se pose, et la r√©ponse est soit ‚Äúoui‚Äù, soit ‚Äúnon‚Äù ‚Äî jamais les deux, jamais \u0026ldquo;un peu\u0026rdquo;.\nQuand on √©crit \u0026ldquo;Tant que je n\u0026rsquo;ai pas fini mes devoirs\u0026rdquo;, √† chaque r√©p√©tition on pose la question \u0026ldquo;Est-ce que j\u0026rsquo;ai fini mes devoirs?\u0026rdquo;.\nEn informatique, comme dans la vraie vie, une condition doit √™tre claire.\nOn peut utiliser ce concept pour faire des branchements dans notre code, dans une instruction conditionnelle (conditional statement en anglais).\nPrenons un exemple simple : tu es en voiture, tu approches un feu tricolore. Il est vert.\nQue fais-tu si le feu passe √† l‚Äôorange juste devant toi‚ÄØ?\nVoici un algorithme qui repr√©sente cette situation :\nSi le feu passe au orange, alors: Tu t\u0026#39;arr√™tes Sinon (c\u0026#39;est toujours vert): Tu continues et traverse l\u0026#39;intersection Fin si \u0026ldquo;Si le feu passe au orange,\u0026rdquo; marque le d√©but de l\u0026rsquo;instruction conditionnelle, \u0026ldquo;alors\u0026rdquo; marque la branche du si, \u0026ldquo;Sinon\u0026rdquo; marque la branche du sinon, et \u0026ldquo;Fin si\u0026rdquo; marque la fin de l\u0026rsquo;instruction conditionnelle.\nDe la m√™me mani√®re que pour les boucles, chaque branche est un bloc d\u0026rsquo;instructions. Comme pour les boucles, chaque branche forme un bloc d‚Äôinstructions, qu‚Äôon indente pour bien le rep√©rer.\nPour visualiser, imagine un arbre : chaque fois qu‚Äôune condition est test√©e, tu choisis une branche √† suivre. Le chemin d√©pend de tes r√©ponses.\nRevenons √† notre parcours de graphe Rappels Tu avais appel√© tes amis pour les inviter √† ton anniversaire, et tu avais √©t√© jusqu\u0026rsquo;au bout du monde, en sautant de relations en relations, pour inviter Paul. Tu avais fait ces actions :\nTu comptes inviter tout ton carnet d\u0026#39;adresses. Tu r√©alises que tu n‚Äôas pas le contact de Paul. Tu l\u0026#39;as crois√© en soir√©e et il √©tait cool, tu voudrais l\u0026#39;inviter... mais t\u0026#39;as oubli√© de lui demander son num√©ro. Heureusement, tu sais que Purotu le conna√Æt. Tu l\u0026#39;appelles... zut, elle n\u0026#39;a pas son num√©ro. Mais elle te donne le num√©ro de Tiare, une autre amie de Paul. Tu appelles Tiare, tu te pr√©sentes, tu l\u0026#39;invites √©galement car tu n\u0026#39;es pas un sauvage. Et tu lui demandes le num√©ro de Paul. Bingo, elle l\u0026#39;a, tu appelles Paul et il est chaud pour venir √† ton anniversaire. Ci-dessous se trouve le graphe de relation entre les personnes, un graphe non orient√©.\n%%{ init: { 'theme': 'base', 'themeVariables': { 'primaryColor': '#ddd', 'primaryTextColor': '#007acc', 'primaryBorderColor': '#007acc', 'lineColor': '#007acc' } } }%% graph TD A[Toi] --- B[Manutea] A --- C[Vai] A --- D[Purotu] A --- E[Heiarii] A --- F[Reva] A --- G[Jean] D --- H[Tiare] H --- I[Paul] Graphe de relation entre les personnes En se basant sur ce qu\u0026rsquo;on a appris dans cet article, on va √©crire un algorithme pour repr√©senter les actions que tu as r√©alis√©es pour inviter tes amis :\n# √âtape 1 : inviter tous mes amis directs (les noeuds les plus proches de \u0026#34;Toi\u0026#34; dans le graphe) Je cr√©e une variable \u0026#34;liste d\u0026#39;amis\u0026#34;, contenant tous mes amis directs Je cr√©e une variable \u0026#34;ami\u0026#34;, le contact courant Dans la \u0026#34;liste d\u0026#39;amis\u0026#34;, pour chaque \u0026#34;ami\u0026#34; : J\u0026#39;appelle \u0026#34;ami\u0026#34; Si \u0026#34;ami\u0026#34; r√©pond, alors : Je l\u0026#39;invite √† mon anniversaire Fin si Fin pour # √âtape 2 : retrouver Paul (en parcourant le graphe en largeur) Je cr√©e une variable \u0026#34;file\u0026#34;, initialis√©e avec la \u0026#34;liste d\u0026#39;amis\u0026#34; Je cr√©e une variable \u0026#34;visit√©s\u0026#34;, une liste vide Tant que la \u0026#34;file\u0026#34; n‚Äôest pas vide : Je prends le premier √©l√©ment de la \u0026#34;file\u0026#34;, je le stocke dans \u0026#34;ami\u0026#34; Si \u0026#34;ami\u0026#34; n‚Äôest pas dans \u0026#34;visit√©s\u0026#34;, alors : J‚Äôajoute \u0026#34;ami\u0026#34; √† \u0026#34;visit√©s\u0026#34; J\u0026#39;appelle \u0026#34;ami\u0026#34; Si \u0026#34;ami\u0026#34; r√©pond, alors : Je lui demande s‚Äôil conna√Æt Paul Si \u0026#34;ami\u0026#34; me donne le num√©ro de Paul : Je cr√©e une variable \u0026#34;Paul\u0026#34; J\u0026#39;appelle \u0026#34;Paul\u0026#34; Si \u0026#34;Paul\u0026#34; r√©pond, alors : Je l‚Äôinvite √† mon anniversaire Je termine la recherche Fin si Sinon : Je r√©cup√®re la liste des amis de \u0026#34;ami\u0026#34; Pour chaque \u0026#34;contact\u0026#34; dans cette liste : J‚Äôajoute \u0026#34;contact\u0026#34; √† la \u0026#34;file\u0026#34; Fin pour Fin si Fin si Fin si Fin tant que √Ä premi√®re vue, √ßa a l\u0026rsquo;air compliqu√©. Mais en fait si tu prends le temps de d√©cortiquer, de bien regarder, tu verras que ce sont juste les actions que tu as r√©alis√©s plus haut, mais dans un langage plus proche de ce que fait un ordinateur.\nLa seule chose qu\u0026rsquo;on a fait en plus des concepts de base, c\u0026rsquo;est qu\u0026rsquo;on a combin√© les structures de contr√¥le et les structures de donn√©es, et le tout nous donne notre algorithme de parcours de graphe !\nInstant Dev üí° On a parcouru le graphe en largeur, c\u0026rsquo;est-√†-dire qu\u0026rsquo;on a d\u0026rsquo;abord regard√© les noeuds voisins de notre point de d√©part.\nD\u0026rsquo;autres algorithmes connus et enseign√©s en informatique sont le parcours en profondeur, l\u0026rsquo;algorithme de Dijkstra, A* et Floyd-Warshall, tu peux regarder sur internet si √ßa t\u0026rsquo;int√©resse.\nConclusion Dans cet article on a appris ce que sont :\nLes structures de contr√¥le, Les boucles, Les conditions, Les variables, Les algorithmes. Il existe d\u0026rsquo;autres structures de contr√¥le, des types de variables, et des algorithmes qu\u0026rsquo;on peut r√©utiliser pour r√©pondre √† beaucoup de probl√®mes. Comme d\u0026rsquo;habitude, je te laisse chercher sur internet si tu veux aller plus loin.\nMais le plus important, c\u0026rsquo;est que tu commences √† r√©fl√©chir comme un d√©veloppeur, et √† comprendre le pseudo-code. Dans la vraie vie, si tu as un probl√®me complexe √† r√©soudre, tu peux essayer de l\u0026rsquo;√©crire comme on l\u0026rsquo;a fait pour le parcours de graphe. Prends ton temps et d√©compose le probl√®me.\nNous avons fini cette section \u0026ldquo;IMMV ‚Äî Section 1 ‚Äî Les Bases : structures et contr√¥le\u0026rdquo;, dans cette section, nous avons √©galement vu les structures de donn√©es.\nDans la prochaine section, IMMV ‚Äî Section 2 ‚Äî L\u0026rsquo;ex√©cution : comment faire des actions ?, nous verrons que l\u0026rsquo;ordinateur et l\u0026rsquo;humain font les actions de mani√®re tr√®s similaire.\n‚Üê Retour √† la section\n‚Üê Retour √† l‚Äôintroduction\n","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/les-bases/structures-de-controle/","summary":"\u003cp\u003eDans l\u0026rsquo;article pr√©c√©dent \u003ca href=\"../structures-de-donnees/\"\u003eIMVV ‚Äî Section 1 ‚Äî Chapitre 2 ‚Äî Autres structures de donn√©es, j\u0026rsquo;organise mon bordel\u003c/a\u003e, on s\u0026rsquo;√©tait arr√™t√© sur ta question :\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eEt c\u0026rsquo;est quoi le parcours de graphe?\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eDans cet article, on va parler des \u003cstrong\u003estructures de contr√¥le\u003c/strong\u003e (\u003cem\u003econtrol flow statements\u003c/em\u003e en anglais), qu\u0026rsquo;on utilise dans des \u003cstrong\u003ealgorithmes\u003c/strong\u003e (\u003cem\u003ealgorithms\u003c/em\u003e en anglais).\u003c/p\u003e\n\u003cp\u003eAvant d\u0026rsquo;expliquer l\u0026rsquo;algorithme que tu as fait, le \u003cstrong\u003eparcours de graphe\u003c/strong\u003e, on doit expliquer les structures de contr√¥le.\u003c/p\u003e","title":"IMVV ‚Äî Section 1 ‚Äî Chapitre 3 ‚Äî Structures de contr√¥le et algorithme, apprendre √† r√©fl√©chir"},{"content":"Pr√©c√©demment, on a vu qu\u0026rsquo;en rajoutant des serveurs, on pouvait servir plus de familles. Dans cette section on verra diff√©rents tips permettant d\u0026rsquo;optimiser un programme existant et la vie r√©elle.\nChapitres IMVV ‚Äî Section 3 ‚Äî Chapitre 1 ‚Äî La m√©moire, ou comment √©viter les p√©nuries dans un magasin IMVV ‚Äî Section 3 ‚Äî Chapitre 2 ‚Äî M√©mo√Øsation et Lazy loading, les techniques du fain√©ant ultime ","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/optimisation/optimisation/","summary":"\u003cp\u003ePr√©c√©demment, on a vu qu\u0026rsquo;en rajoutant des serveurs, on pouvait servir plus de familles. Dans cette section on verra diff√©rents tips permettant d\u0026rsquo;optimiser un programme existant et la vie r√©elle.\u003c/p\u003e\n\u003ch1 id=\"chapitres\"\u003eChapitres\u003c/h1\u003e\n\n\n\u003cul\u003e\n  \n\t\t\n\t\n\t\t\n    \t\n      \t\u003cli\u003e\u003ca href=\"/blog.dev/posts/miroir-informatique-vraie-vie/optimisation/memoire/\"\u003eIMVV ‚Äî Section 3 ‚Äî Chapitre 1 ‚Äî La m√©moire, ou comment √©viter les p√©nuries dans un magasin\u003c/a\u003e\u003c/li\u003e\n    \t\n  \t\n\t\n\t\t\n    \t\n      \t\u003cli\u003e\u003ca href=\"/blog.dev/posts/miroir-informatique-vraie-vie/optimisation/memoisation/\"\u003eIMVV ‚Äî Section 3 ‚Äî Chapitre 2 ‚Äî M√©mo√Øsation et Lazy loading, les techniques du fain√©ant ultime\u003c/a\u003e\u003c/li\u003e\n    \t\n  \t\n\t\n\u003c/ul\u003e","title":"IMMV ‚Äî Section 3 ‚Äî L'optimisation : comment se faire passer pour un coach de vie"},{"content":"Dans cette section, nous verrons comment les actions sont ex√©cut√©es, par les ordinateurs et par les personnes. Et on verra quelques pistes pour r√©pondre √† une accumulation de t√¢ches.\nChapitres IMMV ‚Äî Section 2 ‚Äî Chapitre 1 ‚Äî Synchrone et Asynchrone, ou comment r√©agir au changement IMMV ‚Äî Section 2 ‚Äî Chapitre 2 ‚Äî Monothread, Multithread, Parall√©lisme et Concurrence, je ne peux pas tout faire en m√™me temps ! ","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/l-execution/l-execution/","summary":"\u003cp\u003eDans cette section, nous verrons comment les actions sont ex√©cut√©es, par les ordinateurs et par les personnes. Et on verra quelques pistes pour r√©pondre √† une accumulation de t√¢ches.\u003c/p\u003e\n\u003ch1 id=\"chapitres\"\u003eChapitres\u003c/h1\u003e\n\n\n\u003cul\u003e\n  \n\t\t\n\t\n\t\t\n    \t\n      \t\u003cli\u003e\u003ca href=\"/blog.dev/posts/miroir-informatique-vraie-vie/l-execution/sync-async/\"\u003eIMMV ‚Äî Section 2 ‚Äî Chapitre 1 ‚Äî Synchrone et Asynchrone, ou comment r√©agir au changement\u003c/a\u003e\u003c/li\u003e\n    \t\n  \t\n\t\n\t\t\n    \t\n      \t\u003cli\u003e\u003ca href=\"/blog.dev/posts/miroir-informatique-vraie-vie/l-execution/threads/\"\u003eIMMV ‚Äî Section 2 ‚Äî Chapitre 2 ‚Äî Monothread, Multithread, Parall√©lisme et Concurrence, je ne peux pas tout faire en m√™me temps !\u003c/a\u003e\u003c/li\u003e\n    \t\n  \t\n\t\n\u003c/ul\u003e","title":"IMMV ‚Äî Section 2 ‚Äî L'ex√©cution : comment faire des actions ?"},{"content":"Dans cette section, nous verrons les bases permettant de stocker et manipuler des donn√©es.\nChapitres IMVV ‚Äî Section 1 ‚Äî Chapitre 1 ‚Äî File ou Pile ? L\u0026#39;art de passer avant les autres IMVV ‚Äî Section 1 ‚Äî Chapitre 2 ‚Äî Autres structures de donn√©es, j\u0026#39;organise mon bordel IMVV ‚Äî Section 1 ‚Äî Chapitre 3 ‚Äî Structures de contr√¥le et algorithme, apprendre √† r√©fl√©chir ","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/les-bases/les-bases/","summary":"\u003cp\u003eDans cette section, nous verrons les bases permettant de stocker et manipuler des donn√©es.\u003c/p\u003e\n\u003ch1 id=\"chapitres\"\u003eChapitres\u003c/h1\u003e\n\n\n\u003cul\u003e\n  \n\t\t\n\t\n\t\t\n    \t\n      \t\u003cli\u003e\u003ca href=\"/blog.dev/posts/miroir-informatique-vraie-vie/les-bases/file-et-pile/\"\u003eIMVV ‚Äî Section 1 ‚Äî Chapitre 1 ‚Äî File ou Pile ? L\u0026#39;art de passer avant les autres\u003c/a\u003e\u003c/li\u003e\n    \t\n  \t\n\t\n\t\t\n    \t\n      \t\u003cli\u003e\u003ca href=\"/blog.dev/posts/miroir-informatique-vraie-vie/les-bases/structures-de-donnees/\"\u003eIMVV ‚Äî Section 1 ‚Äî Chapitre 2 ‚Äî Autres structures de donn√©es, j\u0026#39;organise mon bordel\u003c/a\u003e\u003c/li\u003e\n    \t\n  \t\n\t\n\t\t\n    \t\n      \t\u003cli\u003e\u003ca href=\"/blog.dev/posts/miroir-informatique-vraie-vie/les-bases/structures-de-controle/\"\u003eIMVV ‚Äî Section 1 ‚Äî Chapitre 3 ‚Äî Structures de contr√¥le et algorithme, apprendre √† r√©fl√©chir\u003c/a\u003e\u003c/li\u003e\n    \t\n  \t\n\t\n\u003c/ul\u003e","title":"IMMV ‚Äî Section 1 ‚Äî Les bases : structures et contr√¥le"},{"content":"\u0026lsquo;Ia ora na,\nL\u0026rsquo;informatique semble souvent obscure pour beaucoup. Quand je dis que je suis ing√©nieur informatique, on me demande r√©guli√®rement : ¬´ Mais tu fais quoi exactement ? ¬ª.\nAvec le temps, j‚Äôai pris l‚Äôhabitude de vulgariser mon m√©tier. Et ce qui fonctionne le mieux, ce sont les exemples concrets tir√©s de la vie quotidienne.\nEn √©cole d\u0026rsquo;ing√©nieur, j\u0026rsquo;apprenais beaucoup plus facilement l\u0026rsquo;informatique en partant de situations r√©elles. √Ä travers cette s√©rie d‚Äôarticles, \u0026ldquo;L‚Äôinformatique, un miroir de la vraie vie\u0026rdquo; (abr√©g√© IMVV), je vais tenter d‚Äôexpliquer des concepts informatiques en m‚Äôappuyant sur des sc√®nes famili√®res du quotidien, sur un ton l√©ger. Parce que finalement, coder un programme ou g√©rer une file d‚Äôattente au magasin, ce n‚Äôest pas si diff√©rent.\nInformations de lecture Avant de lire les articles list√©s en bas de cette page, quelques informations pour vous faciliter la lecture :\nIl y a un mode sombre et un mode clair : En haut de chaque page se trouve une ic√¥ne pour interchanger entre les modes de lecture sombre et clair\nJ\u0026rsquo;utiliserai des apart√©s pour les d√©veloppeurs,\nInstant Dev Ceci est un apart√© pour les d√©veloppeurs, si tu es non d√©veloppeur tu peux lire, mais tu auras peut-√™tre mal √† la t√™te. J\u0026rsquo;utiliserai des interjections de lecteur, J\u0026rsquo;interviens comme si j\u0026rsquo;√©tais toi, lecteur, pour aider l\u0026rsquo;auteur de ce blog √† rendre ces articles dynamiques\nCette s√©rie d\u0026rsquo;articles n\u0026rsquo;est pas un cours d\u0026rsquo;informatique, vous n\u0026rsquo;apprendrez pas √† d√©velopper juste en suivant ces articles. Mot de fin Que tu sois curieux, d√©butant ou simplement en qu√™te de sens dans ce monde num√©rique, cette s√©rie pourrait bien t‚Äôapporter quelque chose.\nTu y trouveras peut-√™tre :\nune meilleure compr√©hension des bases de l‚Äôinformatique, des id√©es pour analyser ou optimiser les situations du quotidien, ou m√™me, qui sait, l‚Äôenvie de plonger plus loin dans ce domaine‚Ä¶ jusqu‚Äô√† en faire ton m√©tier. Bien s√ªr, cette s√©rie n‚Äôexplorera qu‚Äôune infime partie de ce vaste domaine qu‚Äôest l‚Äôinformatique. Apr√®s tout, peut-on vraiment expliquer enti√®rement l\u0026rsquo;informatique\u0026hellip; un domaine qui, justement, est le miroir de la vie* ?\n*: cette analogie est √† prendre avec recul : l‚Äôinformatique ne refl√®te pas toute la complexit√© de la vie.\nLes articles de la s√©rie (En cours de r√©daction) IMMV ‚Äî Section 1 ‚Äî Les bases : structures et contr√¥le IMMV ‚Äî Section 1 ‚Äî Les bases : structures et contr√¥le IMVV ‚Äî Section 1 ‚Äî Chapitre 1 ‚Äî File ou Pile ? L\u0026#39;art de passer avant les autres IMVV ‚Äî Section 1 ‚Äî Chapitre 2 ‚Äî Autres structures de donn√©es, j\u0026#39;organise mon bordel IMVV ‚Äî Section 1 ‚Äî Chapitre 3 ‚Äî Structures de contr√¥le et algorithme, apprendre √† r√©fl√©chir IMMV ‚Äî Section 2 ‚Äî L\u0026#39;ex√©cution : comment faire des actions ? IMMV ‚Äî Section 2 ‚Äî L\u0026#39;ex√©cution : comment faire des actions ? IMMV ‚Äî Section 2 ‚Äî Chapitre 1 ‚Äî Synchrone et Asynchrone, ou comment r√©agir au changement IMMV ‚Äî Section 2 ‚Äî Chapitre 2 ‚Äî Monothread, Multithread, Parall√©lisme et Concurrence, je ne peux pas tout faire en m√™me temps ! IMMV ‚Äî Section 3 ‚Äî L\u0026#39;optimisation : comment se faire passer pour un coach de vie IMMV ‚Äî Section 3 ‚Äî L\u0026#39;optimisation : comment se faire passer pour un coach de vie IMVV ‚Äî Section 3 ‚Äî Chapitre 1 ‚Äî La m√©moire, ou comment √©viter les p√©nuries dans un magasin IMVV ‚Äî Section 3 ‚Äî Chapitre 2 ‚Äî M√©mo√Øsation et Lazy loading, les techniques du fain√©ant ultime ","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/introduction/","summary":"\u003cp\u003e\u0026lsquo;Ia ora na,\u003c/p\u003e\n\u003cp\u003eL\u0026rsquo;informatique semble souvent obscure pour beaucoup. Quand je dis que je suis ing√©nieur informatique, on me demande r√©guli√®rement : ¬´ Mais tu fais quoi exactement ? ¬ª.\u003c/p\u003e\n\u003cp\u003eAvec le temps, j‚Äôai pris l‚Äôhabitude de vulgariser mon m√©tier. Et ce qui fonctionne le mieux, ce sont les exemples concrets tir√©s de la vie quotidienne.\u003c/p\u003e\n\u003cp\u003eEn √©cole d\u0026rsquo;ing√©nieur, j\u0026rsquo;apprenais beaucoup plus facilement l\u0026rsquo;informatique en partant de situations r√©elles.\n√Ä travers cette s√©rie d‚Äôarticles, \u003cstrong\u003e\u0026ldquo;L‚Äôinformatique, un miroir de la vraie vie\u0026rdquo;\u003c/strong\u003e (abr√©g√© \u003cem\u003eIMVV\u003c/em\u003e), je vais tenter d‚Äôexpliquer des concepts informatiques en m‚Äôappuyant sur des sc√®nes famili√®res du quotidien, sur un ton l√©ger.\nParce que finalement, coder un programme ou g√©rer une file d‚Äôattente au magasin, ce n‚Äôest pas si diff√©rent.\u003c/p\u003e","title":"IMMV - Introduction - L'informatique, un miroir de la vraie vie"},{"content":"Introduction Cet article est un aper√ßu tr√®s rapide des moyens de paiement en Polyn√©sie Fran√ßaise.\nUpdate (12/05/2022): suite √† quelques feedback, je me rend compte que cet article est √† destination des d√©veloppeurs de site de e-shopping, des commer√ßants, de mes confr√®res mon√©ticiens. Cet article sera complexe √† lire si vous n\u0026rsquo;avez jamais travaill√© avec un TPE, avec une plateforme de paiement, avec des cartes bancaires.\nDisclaimer: Au moment o√π j\u0026rsquo;√©cris cet article, je travaille √† l\u0026rsquo;Oc√©anienne des Services Bancaires (OSB), Ces articles ne sont pas sponsoris√©s par OSB, et j\u0026rsquo;encourage les gens √† faire des tutoriels pour les solutions des autres fournisseurs de solutions de paiement.\nLes diff√©rents types de carte En Polyn√©sie Fran√ßaise, il est possible de payer avec plusieurs types de cartes.\nCarte Bancaire (anciennement Carte Bleue, co-brand√©es ou non de Visa ou Mastercard), American Express (AMEX), Cartes privatives (Socredo Verte / Gold, Banque de Polyn√©sie Hoa, CCP de Fare Rata, Carte Tiare de la Banque de Tahiti), Union Pay International (UPI), Discover, Japan Credit Bureau (JCB) Les 3 derniers types de cartes sont surtout utilis√©s par les touristes.\nLes cartes privatives composent la majorit√© des cartes d√©tenues par les habitants de la Polyn√©sie Fran√ßaise.\nPourquoi autant de personnes ont une carte privative ? Les cartes privatives sont propos√©es par les diff√©rentes banques locales (√† l\u0026rsquo;exception d\u0026rsquo;OFINA qui √©met exclusivement les cartes AMEX). Il s\u0026rsquo;agit des banques Socredo, Banque de Tahiti, Banque de Polyn√©sie, et Fare Rata.\nLes cartes privatives sont soumises √† des r√©glementations et des frais moins co√ªteux que les cartes internationales.\nEn outre, elles sont uniquement r√©gul√©es par les banques locales contrairement aux cartes bancaires internationales, qui sont non seulement r√©gul√©es par les banques locales, mais aussi par les r√©seaux internationaux (CB, Visa, Mastercard, Union Pay, etc.).\nC\u0026rsquo;est en partie √† cause de ces r√©glementations et frais moins co√ªteux que les clients des banques doivent remplir moins de conditions pour avoir une carte privative. C\u0026rsquo;est pour cela que les cartes privatives sont plus r√©pandues sur le territoire.\nNotes:\nLes r√©seaux peuvent d√©cider d\u0026rsquo;appliquer des amendes voire de d√©sactiver le flux vers un acteur mon√©taire (banque, processeur de paiement, etc.) si celui-ci ne respecte pas la r√©glementation. Cette r√©glementation est mise √† jour r√©guli√®rement.\nPour les cartes privatives, ce sont les banques locales qui imposent leur r√©glementation, par abus de langage, on parle aussi de r√©seau privatif pour d√©signer l\u0026rsquo;ensemble de ces banques.\nCes r√©glementations sont suivies par les banques centrales des pays, par exemple l\u0026rsquo;IEOM en Polyn√©sie Fran√ßaise.\nJ\u0026rsquo;ai inclus la carte Tiare de la Banque de Tahiti dans les cartes privatives car elle a les m√™mes limitations g√©ographiques que celles-ci, et elle fonctionne aussi en m√©tropole, mais il s\u0026rsquo;agit bien d\u0026rsquo;une CB, donc elle est soumise aux r√©glementations CB.\nLes cartes Socredo privatives sont maintenant co-brand√©es UPI, mais il y a bien 2 applications dans la carte, sur le territoire, c\u0026rsquo;est l\u0026rsquo;application privative qui est utilis√©e, √† l\u0026rsquo;international, c\u0026rsquo;est l\u0026rsquo;application UPI qui est utilis√©e.\nFonctionnement des transactions Le sch√©ma √† 4 coins est l\u0026rsquo;un des sch√©mas de r√©f√©rence de la mon√©tique. Il explique les entit√©s qui entrent en jeu dans une transaction.\nLa banque √©mettrice √©met la carte et la fournit au porteur.\nLa banque acqu√©reuse fournit un contrat accepteur au commer√ßant, afin que celui-ci puisse encaisser les paiements avec les cartes, moyennant une commission, en plus des services annexes autour de l\u0026rsquo;encaissement (exemple: relev√© TPE). Les TPE et solutions de paiement en ligne sont des services d\u0026rsquo;encaissement.\nUn syst√®me d\u0026rsquo;acceptation est un logiciel ou un ensemble de logiciels, qui permet d\u0026rsquo;encaisser une carte bancaire, par exemple les TPE et les plateformes de paiement en ligne.\nIl existe 2 modes de fonctionnement pour le d√©roulement d\u0026rsquo;un paiement:\nle mode single message le mode dual message Lorsque vous payez avec votre carte, vous r√©alisez une transaction. Si toutes les r√®gles de gestion sont valid√©es, la transaction est autoris√©e.\nEn single message, la transaction autoris√©e est directement transform√©e en mouvement financier, i.e. un enregistrement est cr√©√© chez la banque acqu√©reuse qui dit \u0026ldquo;M. Client doit 1000 XPF √† M. Commer√ßant\u0026rdquo;.\nEn dual message, la transaction est enregistr√©e sur le TPE, ou sur la plateforme de paiement, puis, tous les jours √† une certaine heure, l\u0026rsquo;ensemble des transactions de la journ√©e sont envoy√©es √† la banque acqu√©reuse sous forme de mouvement financier.\nEn Polyn√©sie Fran√ßaise, le mode dual message est le plus r√©pandu, c\u0026rsquo;est d\u0026rsquo;ailleurs pour √ßa que l\u0026rsquo;on vous demande de ne pas d√©brancher votre TPE, votre internet, votre r√©seau √©lectrique.\nLes cartes et les syst√®mes d\u0026rsquo;acceptation Pour qu\u0026rsquo;un syst√®me d\u0026rsquo;acceptation puisse encaisser une carte, elle doit reconna√Ætre la carte.\nPour reconna√Ætre une carte, on utilise le BIN, qui sont les N premiers chiffres du num√©ro de la carte, N √©tant d√©fini par le r√©seau.\nDe plus, seule une application sp√©cifique √† ce r√©seau peut reconna√Ætre cette carte. Par exemple, pour une transaction avec une carte AMEX sur un TPE, c\u0026rsquo;est uniquement une application TPE AMEX qui pourra la reconna√Ætre, mais seulement si la carte fait partie d\u0026rsquo;une plage de BIN accept√©e par l\u0026rsquo;application.\nNote: Dans un TPE, il peut y avoir plusieurs applications, quand une carte est ins√©r√©e, le TPE demande √† chaque application \u0026ldquo;Peux-tu accepter cette carte?\u0026rdquo;.\nDe la m√™me mani√®re, pour une plateforme de paiement en ligne, celle-ci ne pourra accepter que des cartes qui font partie de ses plages de BIN d√©clar√©es.\nZoom sur le paiement en ligne en Polyn√©sie Fran√ßaise Comme √©nonc√© pr√©c√©demment, les cartes privatives sont majoritaires en Polyn√©sie Fran√ßaise, et elles ne sont pas reconnues √† l\u0026rsquo;√©tranger (sauf pour les cartes Socredo co-brand√©es UPI, comme cit√© pr√©c√©demment) car les BIN privatifs ne sont pas d√©clar√©s dans le monde.\nC\u0026rsquo;est pour cela qu\u0026rsquo;on ne peut pas payer avec une carte privative sur la plupart des plateformes de paiement en ligne (Paypal, Stripe, etc.), qui sont internationales.\nPour rem√©dier √† ce probl√®me, OSB propose Payzen, et la Banque de Tahiti propose SystemPay.\n√Ä mon avis, √† l\u0026rsquo;heure actuelle, c\u0026rsquo;est vers ces solutions que je conseille les commer√ßants d\u0026rsquo;aller, car il serait dommage de se priver des cartes privatives, alors qu\u0026rsquo;elles sont plus nombreuses.\nNotes:\nLes 2 solutions sont en r√©alit√© bas√©es sur les solutions Payzen et SystemPay de Lyra, soci√©t√© situ√©e en France. Certains d\u0026rsquo;entre vous ont d\u0026rsquo;ailleurs peut-√™tre d√©j√† √©t√© confus en recherchant de la documentation technique de ces solutions et se sont perdus entre:\nla documentation Payzen d\u0026rsquo;OSB, la documentation Payzen de Lyra, la documentation SystemPay de la Banque de Tahiti, la documentation SystemPay de Lyra. Je vous conseille de vous focaliser sur les documentations locales, et ensuite de compl√©ter avec les documentations de Lyra.\nConclusion Il existe plusieurs types de cartes.\nLes protocoles de paiement s\u0026rsquo;inscrivent dans un sch√©ma √† 4 coins, il y a plusieurs acteurs qui entrent en jeu.\nIl y a une r√©glementation g√©n√©rale qui englobe tous les types de cartes, et chaque type a √©galement sa r√©glementation sp√©cifique. Les banques sont soumises √† ces r√©glementations, l\u0026rsquo;IEOM et les r√©seaux (VISA, Mastercard, AMEX, etc.) veillent √† ce que les banques respectent ces r√©glementations.\nLa g√©ographie et les accords entre les acteurs sont importants pour comprendre les contraintes des syst√®mes de paiement locaux.\nEn Polyn√©sie Fran√ßaise, la majorit√© des cartes bancaires sont des cartes privatives, pour des raisons √©conomiques et r√©glementaires.\n","permalink":"http://localhost:1313/blog.dev/posts/intro-moyens-paiement/","summary":"\u003ch1 id=\"introduction\"\u003eIntroduction\u003c/h1\u003e\n\u003cp\u003eCet article est un aper√ßu tr√®s rapide des moyens de paiement en Polyn√©sie Fran√ßaise.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eUpdate (12/05/2022): suite √† quelques feedback, je me rend compte que cet article est √† destination des d√©veloppeurs de site de e-shopping, des commer√ßants, de mes confr√®res mon√©ticiens. Cet article sera complexe √† lire si vous n\u0026rsquo;avez jamais travaill√© avec un TPE, avec une plateforme de paiement, avec des cartes bancaires.\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e\u003cstrong\u003eDisclaimer\u003c/strong\u003e: Au moment o√π j\u0026rsquo;√©cris cet article, je travaille √† l\u0026rsquo;Oc√©anienne des Services Bancaires (OSB), Ces articles ne sont pas sponsoris√©s par OSB, et j\u0026rsquo;encourage les gens √† faire des tutoriels pour les solutions des autres fournisseurs de solutions de paiement.\u003c/p\u003e","title":"Introduction aux moyens de paiement en Polyn√©sie Fran√ßaise"},{"content":"Ia\u0026rsquo;orana, bonjour !\nCe post marque le d√©but du blog h√©berg√© sur Github.\nVous trouverez ici de temps en temps des articles de d√©veloppement et des POCs.\nBonne lecture !\n","permalink":"http://localhost:1313/blog.dev/posts/hello-world/","summary":"\u003cp\u003eIa\u0026rsquo;orana, bonjour !\u003c/p\u003e\n\u003cp\u003eCe post marque le d√©but du blog h√©berg√© sur Github.\u003c/p\u003e\n\u003cp\u003eVous trouverez ici de temps en temps des articles de d√©veloppement et des POCs.\u003c/p\u003e\n\u003cp\u003eBonne lecture !\u003c/p\u003e","title":"Hello World"},{"content":"La m√©moire est une ressource au m√™me titre que la fourchette dans le pr√©c√©dent article.\nDans un ordinateur, il existe plusieurs types de m√©moire que les programmes vont pouvoir utiliser en fonction de la mani√®re dont ils veulent traiter les donn√©es.\nIl faut voir la m√©moire comme un endroit o√π on entrepose des donn√©es.\nPour cet article on va parler d\u0026rsquo;un magasin, mais √ßa marche aussi avec un restaurant.\nLa m√©moire cache ‚Äî l\u0026rsquo;armoire r√©frig√©r√©e La m√©moire cache est le stockage le plus rapide qu\u0026rsquo;un programme peut utiliser. Pour un magasin, il s\u0026rsquo;agit des √©tag√®res et des armoires r√©frig√©r√©es qui forment les rayons.\nLes clients (les threads du programme) ont rapidement acc√®s aux viandes qui sont dans les armoires r√©frig√©r√©es, ils n\u0026rsquo;ont qu\u0026rsquo;√† tendre la main. Par contre, on ne peut pas stocker une grande quantit√© de viande dans ces armoires, pour l\u0026rsquo;exemple on va dire une dizaine au maximum.\nSur un ordinateur, cette m√©moire cache se trouve directement dans le processeur sous les noms cache L3, cache L2 et cache L1. On n\u0026rsquo;ira pas dans le d√©tail ici, mais sachez que plus le nombre est proche de 0, et plus le cache est rapide.\nJe prends l\u0026rsquo;exemple de l\u0026rsquo;armoire r√©frig√©r√©e car il y a un m√©canisme physique important dans un ordinateur: la m√©moire cache peut accueillir des donn√©es uniquement si elle est aliment√©e en √©lectricit√©, en cas de coupure de courant, on perd les donn√©es qui s\u0026rsquo;y trouvent.\nDe la m√™me mani√®re, dans un magasin, en cas de coupure de courant, il faut jeter toute la viande qui se trouve dans les armoires r√©frig√©r√©es*.\n*: Oui c\u0026rsquo;est pas tout √† fait le cas, mais en cas de coupure prolong√©e √ßa l\u0026rsquo;est.\nLa m√©moire vive ‚Äî l\u0026rsquo;arri√®re du magasin Au cours d\u0026rsquo;une journ√©e, le magasin souhaite vendre bien plus que dix viandes, c\u0026rsquo;est bien normal. Pour cela, √† l\u0026rsquo;arri√®re du magasin il y a un stock r√©frig√©r√© qui peut en contenir 1000. Un employ√© viendra remplir les rayons au cours de la journ√©e.\nCette action prend du temps, l\u0026rsquo;employ√© doit :\nAller dans le stock r√©frig√©r√© R√©cup√©rer des viandes Amener les viandes dans le rayon Mettre les viandes dans l\u0026#39;armoire r√©frig√©r√©e Pendant tout ce temps, le client ne peut prendre que les viandes qui sont encore dans l\u0026rsquo;armoire, il faut donc bien faire attention √† ce que l\u0026rsquo;employ√© recharge l\u0026rsquo;armoire quand il reste encore un peu de bo√Ætes.\nDans un ordinateur, la m√©moire vive (RAM en anglais pour Random Access Memory), joue le r√¥le du stock r√©frig√©r√© tr√®s rapide qu\u0026rsquo;un programme peut utiliser, mais beaucoup moins rapide que la m√©moire cache, environ 50x √† 100x moins rapide.\nEt tout comme la m√©moire cache, la RAM peut accueillir des donn√©es uniquement si elle est aliment√©e en √©lectricit√©.\nC\u0026rsquo;est pour √ßa qu\u0026rsquo;on appelle √ßa de la m√©moire vive, elle doit √™tre aliment√©e.\nAttends, mais tu dis que la RAM est tr√®s rapide, mais le processus pour recharger la m√©moire cache est lent ? On ne peut pas juste utiliser une grande quantit√© de m√©moire cache?\nLa m√©moire cache co√ªte tr√®s cher, beaucoup plus que la RAM. L\u0026rsquo;√©tat actuel est donc un compromis entre rapidit√© et co√ªt, un probl√®me typique en ing√©nierie.\nLe stockage ‚Äî la ferme en Nouvelle-Z√©lande Le stockage d\u0026rsquo;un ordinateur est compos√© des diff√©rents disques durs (HDD, SDD, etc.). Il s\u0026rsquo;agit d\u0026rsquo;une m√©moire persistante, c\u0026rsquo;est-√†-dire que m√™me en cas de coupure de courant, les donn√©es restent √©crites dans les disques.\nPour notre magasin, de la viande qui reste utilisable m√™me en cas de coupure\u0026hellip; Eh bien ce sont les boeufs vivants √† la ferme.\nTon analogie est d√©go√ªtante\nOui je sais, j\u0026rsquo;ai pas mieux, d√©sol√©. En m√™me temps, je ne peux pas vous dire que de la viande fra√Æche, qui reste longtemps √† l\u0026rsquo;air libre, est encore utilisable.\nEn plus, il y a plein d\u0026rsquo;√©tapes entre un boeuf vivant et un steak dans l\u0026rsquo;armoire !\nTout √† fait, mais c\u0026rsquo;est la meilleure analogie possible pour te faire comprendre pourquoi, en cas de coupure, si tu n\u0026rsquo;as pas sauvegard√© ton fichier Word depuis longtemps, tu perds tes donn√©es. Tant que tu n\u0026rsquo;as pas sauvegard√©, tes modifications restent dans le cache et la RAM.\nEt pourquoi en Nouvelle-Z√©lande ?\nOh, √ßa c\u0026rsquo;est parce qu\u0026rsquo;aller chercher une donn√©e dans un disque, c\u0026rsquo;est tr√®s lent compar√© √† aller la chercher dans la RAM. Si tu as un disque SSD c\u0026rsquo;est 10x plus lent, si tu as un disque HDD, c\u0026rsquo;est 100x plus lent.\nSi tu joues √† des jeux vid√©o un peu gourmands en ressources, tu as s√ªrement remarqu√© des √©crans de chargement plus ou moins longs. C\u0026rsquo;est surtout parce que le programme r√©cup√®re les donn√©es qui sont sur le disque.\nOptimiser la m√©moire ‚Äî pas besoin d\u0026rsquo;√™tre mentaliste Vous l\u0026rsquo;aurez donc compris, un magasin a diff√©rents types de m√©moire √† sa disposition. La mani√®re dont il orchestre les denr√©es √† travers ces diff√©rents composants lui permet d\u0026rsquo;anticiper les variations de stock, et limiter le risque de p√©nurie.\nLorsqu\u0026rsquo;un d√©veloppeur code un programme, il peut aussi anticiper l\u0026rsquo;utilisation des donn√©es et les charger avant d\u0026rsquo;en avoir besoin.\nDans l\u0026rsquo;exemple du jeu vid√©o, pourquoi est-ce que toutes les donn√©es ne sont pas charg√©es d√®s le d√©but? Moi j\u0026rsquo;en ai marre des √©crans de chargement.\nTout d\u0026rsquo;abord, ce chargement se fait du stockage vers la RAM (puis vers le cache), ensuite, si on chargeait toutes les donn√©es d\u0026rsquo;un coup, il y a de fortes chances pour que ta RAM soit satur√©e.\nA priori, le d√©veloppeur ne sait pas si tu as peu ou beaucoup de RAM disponible, et puis, maintenir deux versions du code, un qui charge toutes les donn√©es, et un qui charge via les √©crans de chargement, c\u0026rsquo;est du travail suppl√©mentaire qui n\u0026rsquo;apporte pas grand chose.\nLes √©crans de chargement sont un compromis : plut√¥t que de risquer de crasher ton ordinateur, le d√©veloppeur a cod√© le programme de sorte √† charger uniquement le contenu qui sera utilis√© dans le niveau, pour tous les niveaux.\nConclusion Dans cet article, on a vu les diff√©rentes m√©moires utilis√©es par les programmes. √Ä l\u0026rsquo;image d\u0026rsquo;un magasin qui √©vite les p√©nuries, un d√©veloppeur doit jongler avec ces m√©moires pour que son programme tourne correctement.\nDans le prochain article, IMVV ‚Äî Section 3 ‚Äî Chapitre 2 ‚Äî M√©mo√Øsation et Lazy loading, les technique du fain√©ant ultime, nous verrons des techniques pour √©viter de se surcharger le cerveau/le programme.\n‚Üê Retour √† la section\n‚Üê Retour √† l‚Äôintroduction\n","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/optimisation/memoire/","summary":"\u003cp\u003eLa m√©moire est une \u003cstrong\u003eressource\u003c/strong\u003e au m√™me titre que la fourchette dans le \u003ca href=\"../../l-execution/threads/\"\u003epr√©c√©dent article\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eDans un ordinateur, il existe plusieurs types de m√©moire que les programmes vont pouvoir utiliser en fonction de la mani√®re dont ils veulent traiter les donn√©es.\u003c/p\u003e\n\u003cp\u003eIl faut voir la m√©moire comme un endroit o√π on entrepose des donn√©es.\u003c/p\u003e\n\u003cp\u003ePour cet article on va parler d\u0026rsquo;un magasin, mais √ßa marche aussi avec un restaurant.\u003c/p\u003e\n\u003ch2 id=\"la-m√©moire-cache--larmoire-r√©frig√©r√©e\"\u003eLa m√©moire cache ‚Äî l\u0026rsquo;armoire r√©frig√©r√©e\u003c/h2\u003e\n\u003cp\u003eLa \u003cstrong\u003em√©moire cache\u003c/strong\u003e est le stockage \u003cstrong\u003ele plus rapide\u003c/strong\u003e qu\u0026rsquo;un programme peut utiliser. Pour un magasin, il s\u0026rsquo;agit des √©tag√®res et des armoires r√©frig√©r√©es qui forment les rayons.\u003c/p\u003e","title":"IMVV ‚Äî Section 3 ‚Äî Chapitre 1 ‚Äî La m√©moire, ou comment √©viter les p√©nuries dans un magasin"},{"content":"Dans le pr√©c√©dent article, IMVV ‚Äî Section 1 ‚Äî Chapitre 3 ‚Äî Structures de contr√¥le et algorithme, apprendre √† r√©fl√©chir, on a vu les diff√©rentes structures de contr√¥le et les algorithmes.\nMaintenant on va parler de la mani√®re dont on r√©alise un ensemble de t√¢ches ‚Äî c‚Äôest ce qu‚Äôon appelle en informatique un mode d‚Äôex√©cution. C\u0026rsquo;est applicable aussi bien pour un humain que pour un ordinateur.\nN\u0026rsquo;oublie pas que les objectifs de ces articles sont :\nTe donner une meilleure compr√©hension des bases de l‚Äôinformatique, T\u0026rsquo;inspirer pour analyser ou optimiser les situations du quotidien, ou peut-√™tre, qui sait, te donner envie d\u0026rsquo;explorer encore plus loin\u0026hellip; jusqu‚Äô√† en faire ton m√©tier. Programme et application ‚Äî c\u0026rsquo;est quoi la diff√©rence ? Un programme informatique est un ensemble d\u0026rsquo;algorithmes. Le mot application veut dire la m√™me chose.\nC‚Äôest juste que application, √ßa sonne plus moderne, m√™me si ce mot existe depuis longtemps.\nMerci le marketing Apple et son App Store. üòÑ\nSynchrone ‚Äî Avoir un serveur d√©di√© √† sa table, quel luxe Prenons l\u0026rsquo;exemple d\u0026rsquo;un restaurant chic. Dans ce restaurant chic, il y a 2 tables. Chaque table a son serveur attitr√©, celui-ci r√©pond uniquement aux besoins de sa table.\nPour la suite de cet exercice de pens√©e, on va dire qu\u0026rsquo;il y a 2 familles (famille 1, famille 2), 2 tables (table 1, table 2), 1 serveur, 1 chef.\nLa s√©quence d\u0026rsquo;actions que le serveur doit faire, l\u0026rsquo;algorithme est :\nSi une famille arrive: Accueillir la famille Installer la famille sur une table libre Prendre la commande Donner la commande au chef R√©cup√©rer les plats Servir les plats √† la famille Faire payer la famille Fin si La famille 1 arrive au restaurant, le serveur les accueille et les installe √† la table 1. Il reste en attente de leur commande, √† proximit√©*.\nQuand la famille 1 est pr√™te, vu que le serveur est √† c√¥t√©, ils passent commande. Le serveur s\u0026rsquo;en va ensuite en cuisine pour donner la commande au chef. Le serveur attend les plats. Le chef pr√©pare les plats.\nUne fois que les plats sont pr√™ts, il les r√©cup√®re et les sert √† la famille 1. La famille 1 paie et s\u0026rsquo;en va, heureuse de l\u0026rsquo;attention port√©e.\n*: A ce moment, la famille 2 arrive au restaurant, ils ne sont pas accueillis, puisque le serveur est en attente de la commande de la famille 1. Alors la famille 2 repart, agac√©e, ils laisseront un mauvais avis sur internet.\nDans cette configuration, le serveur ex√©cute ses t√¢ches de mani√®re synchrone, cela veut dire qu\u0026rsquo;il ex√©cute l\u0026rsquo;algorithme √©tape par √©tape sans interruption. Si une √©tape n√©cessite d\u0026rsquo;attendre, par exemple quand il doit attendre que la famille choisisse sa commande, alors il attend, on dit que le mode synchrone est bloquant. Le serveur va au bout de son algorithme.\nMais c\u0026rsquo;est nul, il y a une famille qui n\u0026rsquo;a pas √©t√© servie\u0026hellip;\nSi on reste dans le mode d\u0026rsquo;ex√©cution synchrone, le probl√®me est qu\u0026rsquo;il n\u0026rsquo;y a pas assez de serveur. S\u0026rsquo;il y avait autant de serveurs de tables et de chefs, il n\u0026rsquo;y aurait aucun souci. Chaque famille aurait √©t√© ravie d\u0026rsquo;avoir un serveur et un chef d√©di√©. Mais on verrait plut√¥t cette disposition dans les restaurants luxueux, qui peuvent se permettre d\u0026rsquo;avoir 100 tables, 100 serveurs et 100 chefs.\nPar d√©faut, les applications sont synchrones, car √† part le probl√®me de ressources, c‚Äôest bien plus simple de faire une t√¢che apr√®s l‚Äôautre, cependant, de nos jours, de plus en plus de syst√®mes sont asynchrones (exemple: navigateurs, certains serveurs applicatifs √† la mode).\nüìå Exemples dans la vie r√©elle Une personne qui suit une proc√©dure critique Pr√©parer une salade üíª Exemples en informatique Un distributeur de billets Une imprimante partag√©e Asynchrone ‚Äî Un serveur pour les gouverner tous ‚Äî Oui c\u0026rsquo;est une r√©f√©rence au Seigneur des Anneaux üòÑ ‚Äî\nReprenons l\u0026rsquo;exemple du restaurant, toujours avec 2 familles (famille 1, famille 2), 2 tables (table 1, table 2), 1 serveur, 1 chef.\nMais cette fois, on change l\u0026rsquo;algorithme :\nQuand une famille arrive, alors : Le serveur les accueille Il les installe √† une table libre Il leur donne un menu Il passe √† autre chose Fin quand Quand une famille appelle le serveur pour commander, alors : Le serveur prend la commande Il la transmet au chef Il passe √† autre chose Fin quand Quand la sonnette en cuisine retentit (plats pr√™ts), alors : Le serveur r√©cup√®re les plats Le serveur sert les plats √† la bonne table Il passe √† autre chose Fin quand Quand une famille veut payer, alors : Le serveur encaisse Il lib√®re la table Il passe √† autre chose Fin quand Cet algorithme est diff√©rent de ceux qu\u0026rsquo;on a vus jusqu\u0026rsquo;√† pr√©sent.\n\u0026ldquo;Quand \u0026hellip;,\u0026rdquo; marque un √©v√©nement, \u0026ldquo;alors\u0026rdquo; introduit le bloc d\u0026rsquo;instructions √† ex√©cuter en r√©action, et \u0026ldquo;Fin quand\u0026rdquo; marque la fin de ce bloc.\nOn dit alors qu\u0026rsquo;on fait de la programmation √©v√©nementielle (ou programmation r√©active) et que l\u0026rsquo;algorithme est asynchrone : il fait de sorte √† r√©agir aux √©v√©nements ext√©rieurs.\nLorsqu‚Äôun √©v√©nement se produit, le serveur y r√©agit imm√©diatement : il ex√©cute les instructions associ√©es, puis passe √† l‚Äô√©v√©nement suivant s‚Äôil y en a un. Sinon, il attend. Ce mode d\u0026rsquo;ex√©cution est donc non bloquant.\nEt dans les faits, c\u0026rsquo;est ce que fait la plupart des personnes, serveurs ou non. Quand on fait une t√¢che, et qu\u0026rsquo;on est interrompu par un bug, un appel, un coll√®gue de travail qui pose une question, on est en r√©action.\nAvec cet algorithme, un serveur seul pourra tr√®s bien g√©rer 2 tables.\nüìå Exemples dans la vie r√©elle Les serveurs dans la plupart des restaurants Mon chien quand il entend les croquettes üíª Exemples en informatique Les notifications sur ton smartphone Un arrosage automatique avec capteur d\u0026#39;humidit√© Attention : comme en mode synchrone, s\u0026rsquo;il y a trop de table pour un seul serveur, plusieurs √©v√©nements risquent de s\u0026rsquo;accumuler en attente de traitement.\nMais du coup, comment on fait pour r√©soudre ce probl√®me ?\nOn verra √ßa dans le prochain article.\nConclusion Dans cet article, on a vu ce qu\u0026rsquo;√©taient les modes d\u0026rsquo;ex√©cution synchrone et asynchrone.\nSi tu souhaites continuer cette aventure, tu peux regarder la suite ici: IMMV ‚Äî Section 2 ‚Äî Chapitre 2 ‚Äî Monothread et Multithread, je ne peux pas tout faire en m√™me temps !\n‚Üê Retour √† la section\n‚Üê Retour √† l‚Äôintroduction\n","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/l-execution/sync-async/","summary":"\u003cp\u003eDans le pr√©c√©dent article, \u003ca href=\"../../les-bases/structures-de-controle/\"\u003eIMVV ‚Äî Section 1 ‚Äî Chapitre 3 ‚Äî Structures de contr√¥le et algorithme, apprendre √† r√©fl√©chir\u003c/a\u003e, on a vu les diff√©rentes structures de contr√¥le et les algorithmes.\u003c/p\u003e\n\u003cp\u003eMaintenant on va parler de la mani√®re dont on r√©alise un ensemble de t√¢ches ‚Äî c‚Äôest ce qu‚Äôon appelle en informatique un \u003cstrong\u003emode d‚Äôex√©cution\u003c/strong\u003e. C\u0026rsquo;est applicable aussi bien pour un humain que pour un ordinateur.\u003c/p\u003e\n\u003cp\u003eN\u0026rsquo;oublie pas que les objectifs de ces articles sont :\u003c/p\u003e","title":"IMMV ‚Äî Section 2 ‚Äî Chapitre 1 ‚Äî Synchrone et Asynchrone, ou comment r√©agir au changement"},{"content":"Quand tu prends un ticket pour attendre ton tour, que tu fais la queue √† la caisse, que tu prends l‚Äôassiette du haut de la pile pour mettre la table, ou que tu cliques sur le bouton \u0026lsquo;Retour\u0026rsquo; (‚Üê) du navigateur internet‚Ä¶ Tu manipules sans le savoir des concepts appell√©s en informatique des structures de donn√©es, et les algorithmes associ√©s qui les font vivre.\nDans cet article, on va mettre un peu de clart√© l√†-dedans : pas besoin de coder pour comprendre, on va illustrer tout √ßa avec des situations de la vie courante.\nD√©finitions Avant d‚Äôaller plus loin, quelques d√©finitions simples, histoire de parler le m√™me langage :\nDonn√©e : une donn√©e, c‚Äôest une information num√©rique. √áa peut √™tre un num√©ro de passeport, le nombre de dents d‚Äôune personne, la liste des t√¢ches que tu as encore repouss√©es √† demain, ou ton nombre d‚Äôamis sur Facebook. Structure de donn√©es : imagine une bo√Æte, une √©tag√®re ou un sac √† dos, dans lequel tu ranges tes informations d‚Äôune certaine mani√®re pour mieux les retrouver ou les traiter. C‚Äôest la fa√ßon dont on organise les donn√©es. Algorithme : un algorithme, c‚Äôest une suite d‚Äô√©tapes ou d‚Äôinstructions pour manipuler ces donn√©es. Comme une recette de cuisine, ou une proc√©dure √† suivre pour obtenir un r√©sultat. File et pile : deux mani√®res d‚Äôattendre‚Ä¶ ou de repousser Maintenant qu‚Äôon a les bases, voyons deux structures de donn√©es tr√®s simples mais tr√®s puissantes : la file et la pile. On les retrouve partout dans notre quotidien, souvent sans s‚Äôen rendre compte.\nLa file ‚Äî ou comment attendre son tour (FIFO) Imagine une file d‚Äôattente devant un guichet. Le premier arriv√© est le premier servi. C‚Äôest ce qu‚Äôon appelle en informatique une file (ou queue en anglais), avec une logique FIFO : First In, First Out (premier entr√©, premier sorti).\nD√®s que quelqu‚Äôun est servi, c‚Äôest le suivant dans la file qui avance.\nüéØ C‚Äôest une structure √©quitable : chacun attend selon son ordre d‚Äôarriv√©e.\nüìå Exemples dans la vie r√©elle Faire la queue √† la caisse du magasin La liste des courses (si on lit de haut en bas) üíª Exemples en informatique Les syst√®mes de ticket dans les accueils (le num√©ro est g√©n√©r√© par un programme, et les appels suivent cet ordre) Les commentaires sur une publication Facebook (affich√©s du plus ancien au plus r√©cent) La pile ‚Äî ou comment empiler les priorit√©s (LIFO) Maintenant, imagine une pile de livres que tu dois r√©viser pour un examen. Tu prends celui du haut, tu le lis, puis tu prends celui juste en dessous, et ainsi de suite. Tu lis dans l‚Äôordre inverse de celui dans lequel tu as empil√© les livres. Tu viens de d√©piler ta pile, toujours en commen√ßant par le haut.\nC‚Äôest exactement le principe de la pile (ou stack en anglais), qui suit la logique LIFO : Last In, First Out (dernier entr√©, premier sorti).\nTu vas peut-√™tre me dire :\nOui mais je peux aussi prendre le livre du bas, non‚ÄØ?\nC‚Äôest vrai. Alors prenons un autre exemple, un peu plus r√©aliste :\nImagine que tu tombes sur un article de journal qui parle des nodules polym√©talliques dans les fonds marins de la Polyn√©sie fran√ßaise. Tu n‚Äôy connais pas grand-chose, mais √ßa t‚Äôintrigue. Tu lis l‚Äôarticle, puis tu ouvres une page Wikip√©dia pour comprendre ce qu‚Äôest un nodule polym√©tallique. Sur cette page, tu vois un lien vers les m√©taux rares, puis vers la transition √©nerg√©tique, puis‚Ä¶ tu vois o√π je veux en venir.\nEn lisant ce premier article, tu ne soup√ßonnais pas toute la pile d‚Äôinformations que tu allais explorer. Et tu viens de d√©piler ce savoir, en commen√ßant par la derni√®re page ouverte.\nüéØ Ce n‚Äôest pas une structure √©quitable : ce qui arrive en dernier est trait√© en premier. Mais c‚Äôest tr√®s utile pour remonter dans le temps, ou revenir sur ses pas, exactement comme le bouton \u0026ldquo;retour\u0026rdquo; de ton navigateur.\nüìå Exemples dans la vie r√©elle Les cartons dans un coffre bien rempli Les diff√©rentes strates de terre quand tu creuses dans ton jardin (c\u0026#39;est de la terre empil√©e au cours du temps) üíª Exemples en informatique Le bouton \u0026#39;Retour\u0026#39; (‚Üê) de ton navigateur Les annulations successives (Undo, CTRL\u0026#43;Z) dans un √©diteur de texte Si tu veux conna√Ætre d\u0026rsquo;autres structures de donn√©es, tu peux regarder le prochain article : IMVV ‚Äî Section 1 ‚Äî Chapitre 2 ‚Äî Autres structures de donn√©es, j\u0026rsquo;organise mon bordel\n‚Üê Retour √† la section\n‚Üê Retour √† l‚Äôintroduction\n","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/les-bases/file-et-pile/","summary":"\u003cp\u003eQuand tu prends un ticket pour attendre ton tour, que tu fais la queue √† la caisse, que tu prends l‚Äôassiette du haut de la pile pour mettre la table, ou que tu cliques sur le bouton \u0026lsquo;Retour\u0026rsquo; (‚Üê) du navigateur internet‚Ä¶\nTu manipules sans le savoir des concepts appell√©s en informatique \u003cstrong\u003edes structures de donn√©es\u003c/strong\u003e, et \u003cstrong\u003eles algorithmes\u003c/strong\u003e associ√©s qui les font vivre.\u003c/p\u003e\n\u003cp\u003eDans cet article, on va mettre un peu de clart√© l√†-dedans : pas besoin de coder pour comprendre, on va illustrer tout √ßa avec des situations de la vie courante.\u003c/p\u003e","title":"IMVV ‚Äî Section 1 ‚Äî Chapitre 1 ‚Äî File ou Pile ? L'art de passer avant les autres"},{"content":"√ätre fiu est un art, une vertu. Non, ce n\u0026rsquo;est pas une blague. Tu ne me crois pas ?\n\u0026ldquo;We will encourage you to develop the three great virtues of a programmer: laziness, impatience, and hubris.\u0026rdquo; ‚Äî Larry Wall, Programming perl (1991).\n\u0026ldquo;I choose a lazy person to do a hard job. Because a lazy person will find an easy way to do it.\u0026rdquo; ‚Äî Bill Gates.\nProgrammer une machine pour qu\u0026rsquo;elle fasse le travail √† ta place, c\u0026rsquo;est de la fain√©antise.\nEt les d√©veloppeurs sont des personnes qui ont atteint l\u0026rsquo;apog√©e du fiu. Apr√®s tout, qui passe 2 heures √† automatiser une t√¢che qui prend 2 minutes par jour, √† part quelqu\u0026rsquo;un de vraiment fiu ?\nDans cet article, on verra deux techniques que les d√©veloppeurs utilisent, mais que toi aussi tu utilises sans le savoir.\nM√©mo√Øsation ‚Äî ou comment garder une information dans un coin de la t√™te Supposons que tu sois responsable de la paie dans une petite entreprise. Pour ce mois-ci, tu dois calculer les salaires √† verser √† 2 employ√©s.\nTu sais que tous les deux ont un salaire brut de 200 000 XPF. De plus, ils ont fait un excellent travail, ton patron t\u0026rsquo;a dit de leur rajouter une prime de 50% de leur salaire brut. Enfin, l\u0026rsquo;un d\u0026rsquo;eux a fait des heures suppl√©mentaires, il faut donc lui rajouter 20 000 XPF brut sur sa paie.\nPour le 1er salari√©, tu pars de 200 000, tu rajoutes 50%, soit 100 000, ce qui lui fera 300 000 XPF brut pour ce mois.\nPour le 2√®me salari√©, tu sais que le d√©but du calcul est le m√™me, alors tu r√©utilises le nombre 300 000, et tu rajoutes 20 000 d\u0026rsquo;heures suppl√©mentaires, donc 320 000 bruts.\nSans m√©mo√Øsation, tu aurais recalcul√© 200 000 + 50 %. Mais tu t‚Äôes souvenu que ce calcul avait d√©j√† √©t√© fait, donc tu as directement repris le r√©sultat. Ce que tu viens de faire, c\u0026rsquo;est de la m√©mo√Øsation (memoization en anglais).\nC‚Äôest exactement ce que fait ton navigateur web quand il te propose un r√©sultat de recherche d√©j√† visit√©, ou qu‚Äôun site charge plus vite la 2·µâ fois.\nInstant Dev En informatique, on utilise un tableau ou un tableau associatif pour stocker les r√©sultats interm√©diares, ces structures sont stock√©es dans la RAM. De cette fa√ßon, on peut rapidement r√©cup√©rer le r√©sultat qui nous int√©resse. Attention : En informatique, comme dans la vraie vie, garder des informations de c√¥t√© peut conduire √† une saturation de la m√©moire. C\u0026rsquo;est un des facteurs de burn-out. M√©nagez votre cerveau, il n\u0026rsquo;y a pas de mal √† noter les choses, de plus, vous aurez moins de risque d\u0026rsquo;oublier des informations importantes.\nEager loading et Lazy loading ‚Äî l\u0026rsquo;art d\u0026rsquo;√™tre pr√©par√© √† toute √©ventualit√© Supposons que tu aies invit√© tes amis √† manger √† la maison ce soir. Tu as invit√© 10 personnes, mais tu sais que 5 vont vraiment venir, les autres t\u0026rsquo;ont dit \u0026ldquo;peut-√™tre\u0026rdquo;.\nPour √©viter d\u0026rsquo;√™tre √† court de nourriture, tu as pr√©par√© pour 10 personnes, au pire, ceux qui sont venus repartiront avec quelques plats, et tu termineras le reste durant la semaine.\nLes premiers invit√©s vont arriver, tu n\u0026rsquo;as pas encore pr√©par√© la table. Tu as 2 solutions :\nTout pr√©parer d\u0026rsquo;avance : sortir toutes les assiettes, les verres, les chaises, les couverts, etc. (solution eager loading : tu charges tout d√®s le d√©but).\nAttendre de voir qui arrive : d√®s qu‚Äôun invit√© entre, tu sors une assiette, un verre, une chaise, etc. (solution lazy loading : tu ne charges que ce qui est n√©cessaire, au moment o√π c‚Äôest n√©cessaire).\nMais tu peux aussi exiger des invit√©s qu\u0026rsquo;ils te disent, la veille au plus tard, si oui ou non ils viennent !\nOui, et que se passe-t-il si l\u0026rsquo;un d\u0026rsquo;eux a un emp√™chement ? En mettant tous les couverts, tu as d√©pens√© de l\u0026rsquo;√©nergie pour mettre son couvert, et tu en as re-d√©pens√© pour le ranger. Ce n\u0026rsquo;est pas tr√®s optimis√©.\nSi tous les invit√©s arrivent, tu auras fait plusieurs allers-retours pour mettre les couverts, ce n\u0026rsquo;est pas tr√®s optimis√© non plus\u0026hellip;\nAh, tu mets le doigt sur un point important : les techniques d\u0026rsquo;optimisation doivent √™tre utilis√©es uniquement si on est s√ªr de leur utilit√©.\n\u0026ldquo;Premature optimization is the root of all evil\u0026rdquo; ‚Äî Sir Tony Hoare et Donald Knuth.\nC\u0026rsquo;est un pi√®ge dans lequel tombent plusieurs d√©veloppeurs juniors. Les √©coles sup√©rieures enseignent diff√©rentes techniques d\u0026rsquo;optimisation, on est conditionn√©s √† d√©tecter un probl√®me et √† appliquer imm√©diatement une solution : c\u0026rsquo;est normal.\nAvec l\u0026rsquo;exp√©rience, on apprend qu\u0026rsquo;on a besoin d\u0026rsquo;optimiser uniquement quand une personne se plaint de lenteurs. Et dans ce cas, on cherche o√π se trouve la source du probl√®me, on mesure.\nOk mais\u0026hellip; √ßa me fait bizarre de ne pas pr√©parer une belle table, c\u0026rsquo;est pas un bon accueil.\nDans ce cas, le eager loading a une vraie plus-value. Tu charges tout d\u0026rsquo;un coup pour l\u0026rsquo;effet waow, pour que les personnes se disent que chez toi, on est bien re√ßu. La principale fonctionnalit√© n\u0026rsquo;est pas d\u0026rsquo;optimiser le fait de mettre la table, mais d\u0026rsquo;impressionner tes convives.\nJe finis cette partie avec un exemple informatique : Facebook ne charge pas toutes les publications d√®s le d√©but, seulement une partie.\nQuand tu commences √† scroller, tu vois ces publications. Si tu te rapproches de la fin, Facebook charge les prochaines publications, on appelle √ßa infinite scroll.\nAinsi, Facebook ne prend pas trop de temps √† se charger au d√©but.\nAttends mais\u0026hellip; Dans l\u0026rsquo;article pr√©c√©dent, on parlait des √©crans de chargement des jeux vid√©os, √ßa y ressemble un peu, non ?\nExactement, les √©crans de chargement sont aussi du lazy loading, et pour rejoindre ce qu\u0026rsquo;on disait sur ces √©crans : le lazy loading √©conomise de la m√©moire.\nEnfin, √† ton avis, comment Facebook sait qu\u0026rsquo;il faut charger la suite des publications ?\nEh bien en fait, l\u0026rsquo;application est r√©active, on peut √©crire son algorithme de chargement comme ceci:\nQuand un certain seuil de scroll est atteint (par exemple, 90% du contenu affich√©), alors: Charge la suite du contenu Passe √† autre chose Fin quand Tu l\u0026rsquo;auras remarqu√©, c\u0026rsquo;est ce qu\u0026rsquo;on a vu dans l\u0026rsquo;article IMMV ‚Äî Section 2 ‚Äî Chapitre 1 ‚Äî Synchrone et Asynchrone, ou comment r√©agir au changement.\nConclusion Dans cet article, on a vu diff√©rents m√©canimes d\u0026rsquo;optimisation.\nPlus important encore, si on se rappelle des pr√©c√©dents articles, on a vu qu\u0026rsquo;en informatique, en plus de combiner les structures de donn√©es et les structures de contr√¥le, on pouvait combiner les concepts d\u0026rsquo;optimisation et de modes d\u0026rsquo;ex√©cution.\nLe prochaine article est en cours de r√©daction, on parlera de complexit√©.\n‚Üê Retour √† la section\n‚Üê Retour √† l‚Äôintroduction\n","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/optimisation/memoisation/","summary":"\u003cp\u003e√ätre \u003cem\u003efiu\u003c/em\u003e est un art, une vertu. \u003cstrong\u003eNon, ce n\u0026rsquo;est pas une blague\u003c/strong\u003e. Tu ne me crois pas ?\u003c/p\u003e\n\u003cp\u003e\u0026ldquo;We will encourage you to develop the three great virtues of a programmer: laziness, impatience, and hubris.\u0026rdquo; ‚Äî \u003cem\u003eLarry Wall, Programming perl (1991)\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003e\u0026ldquo;I choose a lazy person to do a hard job. Because a lazy person will find an easy way to do it.\u0026rdquo; ‚Äî \u003cem\u003eBill Gates\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eProgrammer une machine pour qu\u0026rsquo;elle fasse le travail √† ta place, c\u0026rsquo;est de la fain√©antise.\u003c/p\u003e","title":"IMVV ‚Äî Section 3 ‚Äî Chapitre 2 ‚Äî M√©mo√Øsation et Lazy loading, les techniques du fain√©ant ultime"},{"content":"Dans le pr√©c√©dent article, IMMV ‚Äî Section 2 ‚Äî Chapitre 1 ‚Äî Synchrone et Asynchrone, ou comment r√©agir au changement, on a vu les diff√©rents modes d\u0026rsquo;ex√©cution.\nOn s\u0026rsquo;√©tait arr√™t√© sur le probl√®me suivant : Comment faire pour r√©pondre √† la mont√©e en charge, √† l\u0026rsquo;accumulation de t√¢ches ?\nEh bien, dans cet article, on va voir comment on r√©sout ce probl√®me, en informatique comme dans la vraie vie : les m√©canismes sont souvent tr√®s proches.\nPour cela on va continuer avec notre exemple de restaurant. Et on va expliciter diff√©rents termes que j\u0026rsquo;avais regroup√©s en parlant d\u0026rsquo;algorithmes et de programmes.\nN\u0026rsquo;oublie pas que les objectifs de ces articles sont :\nTe donner une meilleure compr√©hension des bases de l‚Äôinformatique, T\u0026rsquo;inspirer pour analyser ou optimiser les situations du quotidien, ou peut-√™tre, qui sait, te donner envie d\u0026rsquo;explorer encore plus loin\u0026hellip; jusqu‚Äô√† en faire ton m√©tier. Le programme ‚Äî l\u0026rsquo;id√©e de restaurant En informatique, quand on parle de programme, on parle uniquement d\u0026rsquo;un ensemble d\u0026rsquo;algorithmes, des t√¢ches qui le composent. Il n\u0026rsquo;est pas encore en train d\u0026rsquo;√™tre ex√©cut√©. Par exemple, Facebook est un programme ‚Äî mais tant que tu ne l‚Äôouvres pas, il ne fait rien.\nEh bien, c\u0026rsquo;est pareil pour un restaurant dans la vie de tous les jours, quand je parle du restaurant √† un ami, je n\u0026rsquo;y suis pas physiquement. Je parle juste du concept de restaurant, de l\u0026rsquo;id√©e que je m\u0026rsquo;en fais.\nLe processus - le restaurant ouvert Si je veux parler du restaurant physiquement ouvert, avec les employ√©s qui s\u0026rsquo;activent, en informatique il faut plut√¥t utiliser le terme processus. C\u0026rsquo;est le programme en cours d\u0026rsquo;ex√©cution.\nUn processus poss√®de son propre contexte d\u0026rsquo;ex√©cution, c\u0026rsquo;est un gros mot pour dire qu\u0026rsquo;il a ses propres ressources, et que personne ne peut lui prendre ses ressources.\nEn effet, quand le restaurant est ouvert, les assiettes qu\u0026rsquo;il utilise sont ses propres assiettes, ses propres ressources. Il n\u0026rsquo;y a pas un autre restaurant qui lui prendrait ses assiettes pendant qu\u0026rsquo;il est ouvert, sinon il risque d\u0026rsquo;avoir des assiettes manquantes.\nPour ex√©cuter un algorithme, un processus est compos√© d\u0026rsquo;un thread principal, et il peut avoir d\u0026rsquo;autres thread.\nLe thread ‚Äî la proc√©dure en cours d\u0026rsquo;ex√©cution du serveur Le thread (fil d\u0026rsquo;ex√©cution en fran√ßais) est ce qu‚Äôon appelle la proc√©dure en train de s\u0026rsquo;ex√©cuter. C‚Äôest un peu comme un serveur qui suit activement une fiche d\u0026rsquo;instructions √† un instant donn√©. Attention, ce n\u0026rsquo;est pas le serveur.\nEn informatique, on dit que le thread est l‚Äôunit√© d‚Äôex√©cution, C‚Äôest la plus petite unit√© qu‚Äôun ordinateur puisse piloter pour ex√©cuter du code. il n‚Äôexiste pas d‚Äôunit√© plus petite qu‚Äôun thread pour ex√©cuter une t√¢che.\nMaintenant qu‚Äôon comprend ce qu‚Äôest un thread ‚Äî une proc√©dure en cours d\u0026rsquo;ex√©cution ‚Äî il faut se demander qui ex√©cute cette proc√©dure.\nLe coeur ‚Äî le serveur On y arrive enfin, dans un ordinateur, le composant physique qui ex√©cute un thread s\u0026rsquo;appelle un coeur (core en anglais). Pour notre restaurant, ce core est le serveur. C\u0026rsquo;est lui, physiquement, qui prend les commandes, sert les plats, etc.\nConcurrence, parall√©lisme, multithread et monothread ‚Äî ou comment servir 2 familles en m√™me temps Un serveur ne peut faire qu\u0026rsquo;une seule chose √† la fois, √† un instant donn√© : quand il prend une commande √† l\u0026rsquo;instant T, il ne peut pas, en m√™me temps, servir des plats.\nPar contre, il pourrait s\u0026rsquo;interrompre pendant les t√¢ches, par exemple, au lieu de prendre toutes les commandes de la famille, d\u0026rsquo;un coup, il peut :\nprendre la commande d\u0026rsquo;un 1er plat aller chercher un plat √† servir servir le plat prendre la commande d\u0026rsquo;un 2√®me plat aller chercher un autre plat √† servir servir le plat etc. Attention: ici nous n\u0026rsquo;avons pas d√©coup√© les actions. C\u0026rsquo;est juste que le serveur a jongl√© entre les 2 t√¢ches \u0026ldquo;prendre la commande\u0026rdquo; et \u0026ldquo;servir les plats\u0026rdquo;. On appelle ce comportement la concurrence, car les 2 t√¢ches sont en concurrence pour √™tre termin√©es.\nDans un ordinateur, les threads sont concurrents, et comme √©nonc√© plus haut, √©tant donn√© qu\u0026rsquo;un processus est compos√© d\u0026rsquo;un thread principal, on dit que les processus sont concurrents.\nDans la vraie vie il y a des situations o√π on ne jongle pas avec les t√¢ches, o√π il faut √™tre concentr√© sur une t√¢che\nTout √† fait, et dans ce cas, s\u0026rsquo;il y a trop de t√¢ches pour une seule personne, on fait intervenir une 2√®me personne, une 3√®me etc.\nDans notre restaurant, avec 2 serveurs, pendant que l\u0026rsquo;un prend les commandes de la famille 1, un autre peut servir les plats de la famille 2. On appelle √ßa le parall√©lisme, les proc√©dures/threads sont ex√©cut√©s en parall√®le.\nEnfin, dans un restaurant, si on ne peut avoir qu\u0026rsquo;un seul serveur qui suit activement une fiche d\u0026rsquo;instructions ‚Äî un seul thread ‚Äî, on dit que le restaurant/le programme est monothread. S\u0026rsquo;il y en a plusieurs, on dit que le restaurant/serveur est multithread.\nDu coup, la solution pour le restaurant est d\u0026rsquo;embaucher plus de serveurs ?\nC\u0026rsquo;est l\u0026rsquo;une des solutions, oui, mais ce n\u0026rsquo;est pas la seule. Il y a globalement 2 chemins pour r√©pondre √† une mont√©e en charge. On peut :\noptimiser les algorithmes pour les rendre plus performants et/ou changer le mode d\u0026rsquo;ex√©cution, ou alors on peut mettre plus de coeurs et faire du multithread. De la m√™me mani√®re, dans la vraie vie, on peut :\nmieux former le serveur et/ou optimiser les proc√©dures qu\u0026rsquo;il doit suivre et/ou le motiver pour qu\u0026rsquo;il travaille plus vite, embaucher plus de serveurs. Dans tous les cas, je ne m\u0026rsquo;avancerai pas pour apprendre √† un restaurateur son m√©tier.\nLe partage de ressources ‚Äî ou comment partager une fourchette Dans le restaurant, on va maintenant se mettre du point de vue d\u0026rsquo;un couple, venu manger en t√™te √† t√™te dans une ambiance cosy, tamis√©e, √† l\u0026rsquo;abri des regards.\nLe serveur leur annonce la mauvaise nouvelle: il y a assez de couverts pour 2, sauf pour la fourchette. S\u0026rsquo;ils souhaitent tout de m√™me manger ici, ils devront se partager la fourchette, et interdiction de manger avec les doigts.\nLe couple discute, et finalement ce n\u0026rsquo;est pas un probl√®me, ils sont l√† pour profiter de l\u0026rsquo;instant.\nUne fois la commande pass√©e et les plats servis, Le couple commence √† manger. Mais comment s‚Äôorganisent-ils ?\nBen ils mangent chacun leur tour, ou alors l\u0026rsquo;un mange d\u0026rsquo;abord, et l\u0026rsquo;autre ensuite ?\nBingo, que l\u0026rsquo;un mange d\u0026rsquo;abord, puis l\u0026rsquo;autre, ou qu\u0026rsquo;ils mangent √† tour de r√¥le, dans tous les cas, ils doivent se partager une ressource : la fourchette. Donc l\u0026rsquo;un prend le contr√¥le de la ressource/fourchette, fait des actions avec cette ressource, puis lib√®re la ressource. L\u0026rsquo;autre peut √† son tour prendre le contr√¥le de la ressource, etc.\nDans un ordinateur, c\u0026rsquo;est pareil, dans un processus, les threads doivent se partager les ressources. De m√™me, les processus doivent se partager les ressources.\nC\u0026rsquo;est pour √ßa que sur un ordinateur, quand tu ouvres un document Word partag√© avec tes coll√®gues, parfois tu as un message du genre \u0026ldquo;le fichier est d√©j√† ouvert par\u0026hellip;\u0026rdquo; car le document Word est une fourchette ressource partag√©e entre ton application Word, et celle de ton coll√®gue.\nElle est bizarre ton explication\u0026hellip;\nJe ne vois pas de quoi tu parles.\nQuoiqu\u0026rsquo;il en soit, tu comprends donc qu\u0026rsquo;en rajoutant plus de threads/cores/personnes, on ne va pas forc√©ment plus vite. Ils doivent se synchroniser pour partager les ressources et parfois attendre.\nInstant Dev En informatique, ce partage de ressource s‚Äôappelle une section critique. Pour √©viter que deux t√¢ches utilisent la ressource en m√™me temps, on utilise des verrous (locks). Conclusion Dans cet article, on a vu diff√©rents termes informatiques qui permettent de comprendre un peu plus comment fonctionne un ordinateur, comment on pouvait r√©pondre √† la mont√©e en charge de diff√©rentes mani√®res, et que finalement, c\u0026rsquo;est tr√®s proche de la vie r√©elle.\nNous avons fini cette section \u0026ldquo;IMMV ‚Äî Section 2 ‚Äî L\u0026rsquo;ex√©cution : comment faire des actions ?\u0026rdquo;.\nDans la prochaine section, IMMV ‚Äî Section 3 ‚Äî L\u0026rsquo;optimisation : comment se faire passer pour un coach de vie, on verra comment optimiser des applications et la vie r√©elle.\n‚Üê Retour √† la section\n‚Üê Retour √† l‚Äôintroduction\n","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/l-execution/threads/","summary":"\u003cp\u003eDans le pr√©c√©dent article, \u003ca href=\"../sync-async/\"\u003eIMMV ‚Äî Section 2 ‚Äî Chapitre 1 ‚Äî Synchrone et Asynchrone, ou comment r√©agir au changement\u003c/a\u003e, on a vu les diff√©rents modes d\u0026rsquo;ex√©cution.\u003c/p\u003e\n\u003cp\u003eOn s\u0026rsquo;√©tait arr√™t√© sur le probl√®me suivant : Comment faire pour r√©pondre √† la mont√©e en charge, √† l\u0026rsquo;accumulation de t√¢ches ?\u003c/p\u003e\n\u003cp\u003eEh bien, dans cet article, on va voir comment on r√©sout ce probl√®me, en informatique \u003cstrong\u003ecomme dans la vraie vie\u003c/strong\u003e : les m√©canismes sont souvent tr√®s proches.\u003c/p\u003e","title":"IMMV ‚Äî Section 2 ‚Äî Chapitre 2 ‚Äî Monothread, Multithread, Parall√©lisme et Concurrence, je ne peux pas tout faire en m√™me temps !"},{"content":"Dans le pr√©c√©dent article IMVV ‚Äî Section 1 ‚Äî Chapitre 1 ‚Äî File ou Pile ? L\u0026rsquo;art de passer avant les autres on a d√©couvert les files et les piles. Cette fois, on va survoler plusieurs autres structures de donn√©es (data structures en anglais) qu\u0026rsquo;on utilise tr√®s souvent en informatique\u0026hellip; et dans la vraie vie.\nN\u0026rsquo;oublie pas que les objectifs de ces articles sont :\nTe donner une meilleure compr√©hension des bases de l‚Äôinformatique, T\u0026rsquo;inspirer pour analyser ou optimiser les situations du quotidien, ou peut-√™tre, qui sait, te donner envie d\u0026rsquo;explorer encore plus loin\u0026hellip; jusqu‚Äô√† en faire ton m√©tier. Le tableau ‚Äî la base de presque tout Tu as peut-√™tre remarqu√© dans le pr√©c√©dent article que la file et la pile se ressemblent beaucoup. En r√©alit√©, on peut les repr√©senter toutes les deux avec la m√™me structure : un tableau.\nEn informatique, le tableau (ou array en anglais) est l‚Äôune des structures les plus simples : on range des √©l√©ments les uns √† la suite des autres, dans un espace de taille fixe, et chaque √©l√©ment est rep√©r√© par sa position (ou index).\nPrenons un exemple simple : un tableau d\u0026rsquo;amis √† inviter pour un anniversaire, mais dans mon carnet d\u0026rsquo;adresses je n\u0026rsquo;ai que 6 places.\nAmis Manutea Vai Purotu Heiarii Reva (vide) index 0 1 2 3 4 5 L‚Äôindex est simplement la position de la personne dans le tableau, ce n\u0026rsquo;est pas un ordre.\nDans la plupart des langages informatiques, l\u0026rsquo;index commence √† 0, et pas √† 1.\nCet index nous permet d\u0026rsquo;acc√©der directement √† Vai, l\u0026rsquo;amie √† l\u0026rsquo;index 2 (ou 3√®me √©l√©ment), pour voir son num√©ro de t√©l√©phone par exemple.\nEt ce tableau peut se comporter diff√©remment selon la mani√®re dont on ajoute et retire les √©l√©ments. Par exemple, on peut le faire fonctionner comme une file ou une pile, simplement en changeant les r√®gles du jeu.\nSi c\u0026rsquo;est une file : On ajoute les amis √† la fin, par exemple, Jean arrive apr√®s Reva : Amis Manutea Vai Purotu Heiarii Reva Jean index 0 1 2 3 4 5 Et on traite depuis le d√©but, on retire Manutea du tableau : Amis Vai Purotu Heiarii Reva Jean (vide) index 0 1 2 3 4 5 Pour une pile : On ajoute les amis au d√©but, Jean arrive avant Manutea : Amis Jean Manutea Vai Purotu Heiarii Reva index 0 1 2 3 4 5 Et on traite toujours depuis le d√©but, on retire Jean du tableau : Amis Manutea Vai Purotu Heiarii Reva (vide) index 0 1 2 3 4 5 Dans les deux cas, on utilise un tableau pour stocker les amis. C‚Äôest la logique d‚Äôajout et de retrait qui transforme ce tableau en pile ou en file.\nüéØ Et c‚Äôest exactement pour √ßa que, lorsqu‚Äôon traite des dossiers empil√©s, il vaut mieux commencer par ceux du bas. Sinon, on inverse l‚Äôordre d‚Äôarriv√©e‚Ä¶ et ce n‚Äôest plus une file d‚Äôattente, mais une injustice organis√©e.\nS\u0026rsquo;il n\u0026rsquo;y a que 6 places, que se passe-t-il si j\u0026rsquo;ai 7 amis ?\nD\u0026rsquo;abord, je te f√©licite d\u0026rsquo;avoir autant d\u0026rsquo;amis. Ensuite, on peut s\u0026rsquo;en sortir, en achetant un carnet d\u0026rsquo;adresse qui a plus de places, et on recopie nos amis dans ce nouveau carnet.\nC\u0026rsquo;est similaire en informatique, on fait un nouveau tableau, plus grand, et on recopie.\nHeureusement, en informatique on a invent√© une autre structure.\nLa liste ‚Äî comme le tableau, mais dynamique La liste (ou list en anglais), c‚Äôest comme un tableau, mais en mieux : la taille n‚Äôest pas fixe.\nTu peux ajouter ou supprimer des √©l√©ments √† tout moment, sans te soucier du nombre de places pr√©vues au d√©part. Et √† tout moment, tu peux demander : ‚ÄúCombien d‚Äô√©l√©ments j‚Äôai dans cette liste ?‚Äù ‚Äî et obtenir une r√©ponse fiable.\nC‚Äôest la version souple du tableau, celle qu‚Äôon trouve dans la majorit√© des langages de programmation modernes.\nRefaisons les exemples de pile et de file, mais cette fois-ci avec des listes.\nSi c\u0026rsquo;est une file : On ajoute les amis √† la fin, par exemple, Jean arrive apr√®s Reva : Amis Manutea Vai Purotu Heiarii Reva Jean index 0 1 2 3 4 5 Nombre d\u0026rsquo;√©l√©ments: 6\nEt on traite depuis le d√©but, on retire Manutea du tableau : Amis Vai Purotu Heiarii Reva Jean index 0 1 2 3 4 Nombre d\u0026rsquo;√©l√©ments: 5\nPour une pile : On ajoute les amis au d√©but, Jean arrive avant Manutea : Amis Jean Manutea Vai Purotu Heiarii Reva index 0 1 2 3 4 5 Nombre d\u0026rsquo;√©l√©ments: 6\nEt on traite toujours depuis le d√©but, on retire Jean du tableau : Amis Manutea Vai Purotu Heiarii Reva index 0 1 2 3 4 Nombre d\u0026rsquo;√©l√©ments: 5\nOn remarque qu\u0026rsquo;il n\u0026rsquo;y a plus la case (vide) et le nombre d\u0026rsquo;√©l√©ments change.\nInstant Dev Pour permettre cette souplesse, la liste est plus gourmande en calculs:\ncalcul √† la vol√©e du nombre d\u0026rsquo;√©l√©ments, r√©allocation de m√©moire. Mais en vrai, √† moins que tu ne codes un satellite, une carte embarqu√©e, ou une console des ann√©es 80, o√π chaque octet compte, il y a peu de raisons d‚Äôutiliser un tableau fixe. Une liste dynamique t\u0026rsquo;√©vitera bien des migraines.\nLe tableau et la liste sont des structures tr√®s basiques et tr√®s puissantes, elles sont les bases de beaucoup d\u0026rsquo;autres structures qu\u0026rsquo;on verra par la suite.\nLe tableau associatif ‚Äî ou comment indexer On avait pris l\u0026rsquo;exemple d\u0026rsquo;un carnet d\u0026rsquo;adresses qu\u0026rsquo;on avait mis dans un tableau ou dans une liste. C\u0026rsquo;est d√©j√† tr√®s bien de pouvoir stocker ta liste d\u0026rsquo;amis, mais si tu as des centaines d\u0026rsquo;amis et que tu veux appeler Vai pour aller √† la mer, tu vas gal√©rer pour chercher dans ce carnet d\u0026rsquo;adresse.\nEn effet, avec les 2 derni√®res structures, tu dois parcourir les √©l√©ments un par un, jusqu\u0026rsquo;√† tomber sur Vai. Tu vas perdre beaucoup de temps √† chercher son num√©ro, √ßa va t\u0026rsquo;√©nerver, tu vas l\u0026rsquo;appeler, lui dire \u0026ldquo;mais quelle id√©e d\u0026rsquo;avoir un pr√©nom qui commence par V!\u0026rdquo;, elle va s\u0026rsquo;√©nerver, vous ne serez plus amis, alors que tu voulais juste aller surfer.\nJe m\u0026rsquo;emporte un peu? Peut-√™tre.\nPour r√©soudre ce probl√®me, en informatique on a invent√© le tableau associatif (ou map en anglais). On utilise le tableau, et on va profiter de l\u0026rsquo;index pour justement indexer les √©l√©ments.\nPour cela, on a besoin de r√©fl√©chir un peu:\nOn sait que l\u0026rsquo;index est une position dans le tableau, donc un nombre On sait que les pr√©noms commencent par une lettre (oui, je suis s√©rieux), on va supposer que c\u0026rsquo;est une lettre de l\u0026rsquo;alphabet, et pas un caract√®re sp√©cial comme *$@ On sait qu\u0026rsquo;il y a 26 lettres dans l\u0026rsquo;alphabet =\u0026gt; Eur√™ka: On peut utiliser la 1√®re lettre du pr√©nom, la transformer en index en utilisant sa position dans l\u0026rsquo;alphabet, et associer le pr√©nom √† cet index. On dit que l\u0026rsquo;index est une cl√© et que le pr√©nom est une valeur par exemple:\nManutea =\u0026gt; M =\u0026gt; M est la 14√®me lettre de l\u0026rsquo;alphabet, donc Manutea sera le 14√®me √©l√©ment. Pour rappel, l\u0026rsquo;index commence √† 0, donc M = index 13. cl√©: 13 valeur: Manutea\nPour Heiarii on aura: cl√©: 7 valeur: Heiarii\nCe qui nous donne:\nAmis (vide) (vide) (vide) (vide) (vide) (vide) (vide) Heiarii (vide) (vide) (vide) (vide) (vide) Manutea (vide) Purotu (vide) Reva (vide) (vide) (vide) Vai (vide) (vide) (vide) (vide) index 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 Avec cette map, on pourra facilement acc√©der aux informations de Vai, puisqu\u0026rsquo;on pourra juste aller directement √† l\u0026rsquo;index 21.\nInstant Dev En vrai, pour calculer l\u0026rsquo;index, on utilise une fonction de hachage (hash en anglais) qui permet de transformer les cl√©s en index. C\u0026rsquo;est pour √ßa qu\u0026rsquo;on appelle √ßa un HashMap en Java. Oui mais moi je n\u0026rsquo;ai pas envie de m\u0026rsquo;emb√™ter √† compter sur mes doigts √† quelle position est la lettre V\u0026hellip;\nTu as raison, dans la vraie vie, dans ton carnet d\u0026rsquo;adresse pour chaque lettre tu as une encoche o√π la lettre y est marqu√©e, et tu notes les informations dans les pages qui correspondent √† cette lettre.\nCarnet d'adresses papier, en rouge les encoches ‚Äî source: Wikim√©dia En informatique c\u0026rsquo;est le m√™me principe, sauf qu\u0026rsquo;on ne peut pas utiliser de lettre comme index, alors on est oblig√© de trouver cette astuce.\nEt en plus, il est nul ton carnet d\u0026rsquo;adresse, comment je fais si j\u0026rsquo;ai 2 amis qui s\u0026rsquo;appellent Vai et Vahine? Je mets Vahine dans la case juste apr√®s? Et si j\u0026rsquo;ai des centaines d\u0026rsquo;amis comme tu le disais au d√©but, je fais comment pour les mettre dans les 26 cases ?\nOk, tranquille, pas de stress.\nEn informatique, on peut combiner les structures, plut√¥t que d\u0026rsquo;associer un pr√©nom √† une lettre, on va associer une liste de pr√©noms √† une lettre. Ci-dessous on r√©√©crit notre map et on ajoute Vahine :\nCl√©s 7 13 15 17 21 ‚Üì ‚Üì ‚Üì ‚Üì ‚Üì Heiarii Manutea Purotu Reva Vai Vahine Comme tu l\u0026rsquo;as remarqu√©, au lieu de mettre directement les pr√©noms dans les cases, il y a des fl√®ches qui pointent vers des listes. On appelle √ßa un pointeur (ou pointer en anglais). c‚Äôest un m√©canisme qui permet √† l‚Äôordinateur de dire \u0026ldquo;Va chercher les donn√©es ailleurs.\u0026rdquo; Plut√¥t que de stocker directement les valeurs, on stocke l‚Äôendroit o√π elles se trouvent.\nC\u0026rsquo;est la plus grande force de l\u0026rsquo;informatique, on peut combiner diff√©rents concepts abstraits pour r√©pondre √† notre besoin.\nL\u0026rsquo;ensemble ‚Äî une structure unique Si comme moi tu fais ta liste de courses durant la semaine en pr√©vision des grandes courses du dimanche, tu as peut-√™tre d√©j√† eu la liste qui ressemble √† :\nlait oeufs pops viande salade oeufs Tu remarques que les oeufs apparaissent 2 fois. On appelle √ßa un doublon.\n√áa peut arriver si lundi tu t\u0026rsquo;es fait une omelette avec les derniers oeufs, tu les as not√©s pour en racheter. Puis que vendredi, tu voulais faire un g√¢teau, mais tu t\u0026rsquo;es souvenu que tu n\u0026rsquo;avais plus d\u0026rsquo;oeufs\u0026hellip; et alors tu les as r√©√©crits.\nC\u0026rsquo;est tr√®s sp√©cifique comme explication\u0026hellip; C\u0026rsquo;est ce qui t\u0026rsquo;es arriv√©, pas vrai?\nTu n\u0026rsquo;as pas de preuve. Cette accusation est fausse.\nBref, la liste et le tableau n\u0026rsquo;ont aucun moyen d\u0026rsquo;emp√™cher la pr√©sence de doublons dans leurs √©l√©ments. C\u0026rsquo;est pour √ßa qu\u0026rsquo;en informatique on a invent√© l\u0026rsquo;ensemble (ou set en anglais), une structure o√π chaque √©l√©ment est unique.\nPar contre, le set n\u0026rsquo;est pas ordonn√© comme le tableau et la liste. Il n\u0026rsquo;y a pas d\u0026rsquo;index permettant d\u0026rsquo;acc√©der directement au 2√®me ou 6√®me √©l√©ment.\nInstant Dev En informatique, pour faire un set, on utilise en fait une map o√π la cl√© est l\u0026rsquo;√©l√©ment. Le calcul de hash nous garantit qu\u0026rsquo;il ne peut pas y avoir de doublon. Et on met une valeur arbitraire dans la valeur associ√©e, comme 1 ou PRESENT.\nSi on veut une structure ordonn√©e sans doublons, on peut :\ncoder une liste avec une fonction d\u0026rsquo;ajout qui rejette les doublons, transformer un set en liste, utiliser une structure sp√©cialis√©e, comme LinkedHashSet en Java üìå Exemples dans la vie r√©elle L\u0026#39;ensemble des ingr√©dients qu‚Äôil te reste dans le frigo L\u0026#39;ensemble des invit√©s √† ton anniversaire üíª Exemples en informatique L\u0026#39;ensemble des num√©ros de passeport en Polyn√©sie fran√ßaise L\u0026#39;ensemble de tes amis Facebook Le graphe ‚Äî ou comment appeler l\u0026rsquo;ami d\u0026rsquo;un ami d\u0026rsquo;un ami Tu pr√©pares ta liste d‚Äôinvit√©s pour ton anniversaire, tu comptes inviter tout ton carnet d\u0026rsquo;adresses.\nEt l√†, tu r√©alises que tu n‚Äôas pas le contact de Paul. Tu l\u0026rsquo;as crois√© en soir√©e et il √©tait cool, tu voudrais l\u0026rsquo;inviter\u0026hellip; mais tu as oubli√© de lui demander son num√©ro.\nHeureusement, tu sais que Purotu le conna√Æt.\nTu l\u0026rsquo;appelles\u0026hellip; zut, elle n\u0026rsquo;a pas son num√©ro. Mais elle te donne le num√©ro de Tiare, une autre amie de Paul. Tu appelles Tiare, tu te pr√©sentes, tu l\u0026rsquo;invite √©galement car tu n\u0026rsquo;es pas un sauvage. Et tu lui demandes le num√©ro de Paul.\nBingo, elle l\u0026rsquo;a, tu appelles Paul et il est chaud pour venir √† ton anniversaire.\nLes liens entre ces personnes peuvent √™tre repr√©sent√©s par un graphe (ou graph en anglais).\nEt ce que tu viens de faire, sans t\u0026rsquo;en rendre compte, c\u0026rsquo;est un parcours de graphe, un algorithme !\n%%{ init: { 'theme': 'base', 'themeVariables': { 'primaryColor': '#ddd', 'primaryTextColor': '#007acc', 'primaryBorderColor': '#007acc', 'lineColor': '#007acc' } } }%% graph TD A[Toi] --- B[Manutea] A --- C[Vai] A --- D[Purotu] A --- E[Heiarii] A --- F[Reva] A --- G[Jean] D --- H[Tiare] H --- I[Paul] Graphe de relation entre les personnes Ce graphe est non orient√©, c\u0026rsquo;est-√†-dire qu\u0026rsquo;il n\u0026rsquo;y a pas de sens entre les √©l√©ments. Chaque case est un noeud, et chaque trait est une ar√™te.\nEffectivement pour √©viter de f√¢cher les personnes, on ne va pas dire \u0026ldquo;Purotu est l\u0026rsquo;ami de Tiare, mais Tiare n\u0026rsquo;est pas l\u0026rsquo;ami de Purotu\u0026rdquo;.\nPar contre, on peut utiliser un graphe orient√© pour repr√©senter les appels que tu as pass√©s.\n%%{ init: { 'theme': 'base', 'themeVariables': { 'primaryColor': '#ddd', 'primaryTextColor': '#007acc', 'primaryBorderColor': '#007acc', 'lineColor': '#007acc' } } }%% graph TD A[Toi] --\u003e B[Manutea] A --\u003e C[Vai] A --\u003e D[Purotu] A --\u003e E[Heiarii] A --\u003e F[Reva] A --\u003e G[Jean] A --\u003e H[Tiare] A --\u003e I[Paul] Graphe des appels que tu as pass√© Ici, chaque case est un noeud, tout comme le graphe non orient√©, mais cette fois-ci, chaque fl√®che est une ar√™te, et donne le sens d\u0026rsquo;appel.\nOn a donc les m√™mes donn√©es, mais on utilise la structure adapt√©e √† ce qu\u0026rsquo;on veut repr√©senter.\nEt c\u0026rsquo;est quoi le parcours de graphe?\nJe suis heureux que tu poses cette question, mais ta question d√©passe le cadre de cet article.\nConclusion On a d√©j√† vu pas mal de choses, je te laisse relire, essayer de combiner les structures entre elles, te renseigner sur internet en cherchant \u0026ldquo;structures de donn√©es\u0026rdquo; ou \u0026ldquo;data structure\u0026rdquo;.\nIl existe beaucoup de structures de donn√©es, celles qui sont pr√©sent√©es dans cet article sont juste les plus basiques, celles qu\u0026rsquo;on apprend dans les premi√®res heures de cours de programmation.\nSi tu souhaites continuer cette aventure, tu peux regarder la suite ici: IMVV ‚Äî Section 1 ‚Äî Chapitre 3 ‚Äî Structures de contr√¥le et algorithme, apprendre √† r√©fl√©chir\n‚Üê Retour √† la section\n‚Üê Retour √† l‚Äôintroduction\n","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/les-bases/structures-de-donnees/","summary":"\u003cp\u003eDans le pr√©c√©dent article \u003ca href=\"../file-et-pile/\"\u003eIMVV ‚Äî Section 1 ‚Äî Chapitre 1 ‚Äî File ou Pile ? L\u0026rsquo;art de passer avant les autres\u003c/a\u003e on a d√©couvert les files et les piles. Cette fois, on va survoler plusieurs autres \u003cstrong\u003estructures de donn√©es\u003c/strong\u003e (\u003cem\u003edata structures\u003c/em\u003e en anglais) qu\u0026rsquo;on utilise tr√®s souvent en informatique\u0026hellip; et dans la vraie vie.\u003c/p\u003e\n\u003cp\u003eN\u0026rsquo;oublie pas que les objectifs de ces articles sont :\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eTe donner une meilleure compr√©hension des bases de l‚Äôinformatique,\u003c/li\u003e\n\u003cli\u003eT\u0026rsquo;inspirer pour analyser ou optimiser les situations du quotidien,\u003c/li\u003e\n\u003cli\u003eou peut-√™tre, qui sait, te donner envie d\u0026rsquo;explorer encore plus loin\u0026hellip; jusqu‚Äô√† en faire ton m√©tier.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"le-tableau--la-base-de-presque-tout\"\u003eLe tableau ‚Äî la base de presque tout\u003c/h2\u003e\n\u003cp\u003eTu as peut-√™tre remarqu√© dans le pr√©c√©dent article que la \u003cstrong\u003efile\u003c/strong\u003e et la \u003cstrong\u003epile\u003c/strong\u003e se ressemblent beaucoup. En r√©alit√©, on peut les repr√©senter toutes les deux avec la m√™me structure : un \u003cstrong\u003etableau\u003c/strong\u003e.\u003c/p\u003e","title":"IMVV ‚Äî Section 1 ‚Äî Chapitre 2 ‚Äî Autres structures de donn√©es, j'organise mon bordel"},{"content":"Dans l\u0026rsquo;article pr√©c√©dent IMVV ‚Äî Section 1 ‚Äî Chapitre 2 ‚Äî Autres structures de donn√©es, j\u0026rsquo;organise mon bordel, on s\u0026rsquo;√©tait arr√™t√© sur ta question :\nEt c\u0026rsquo;est quoi le parcours de graphe?\nDans cet article, on va parler des structures de contr√¥le (control flow statements en anglais), qu\u0026rsquo;on utilise dans des algorithmes (algorithms en anglais).\nAvant d\u0026rsquo;expliquer l\u0026rsquo;algorithme que tu as fait, le parcours de graphe, on doit expliquer les structures de contr√¥le.\nN\u0026rsquo;oublie pas que les objectifs de ces articles sont :\nTe donner une meilleure compr√©hension des bases de l‚Äôinformatique, T\u0026rsquo;inspirer pour analyser ou optimiser les situations du quotidien, ou peut-√™tre, qui sait, te donner envie d\u0026rsquo;explorer encore plus loin\u0026hellip; jusqu‚Äô√† en faire ton m√©tier. Pseudo-code ‚Äî l\u0026rsquo;art de la cuisine Quand tu fais un g√¢teau, tu r√©alises les actions suivantes:\nPr√©chauffer le four Verser la farine dans le saladier Casser les oeufs et mettre le contenu dans le saladier Verser le lait dans le saladier Remuer Verser la pr√©paration dans un moule Mettre le moule au four Attendre 20 minutes Eteindre le four Sortir le moule du four D√©mouler Toute cette suite d\u0026rsquo;√©tapes est ce qu\u0026rsquo;on appelle un algorithme, et la fa√ßon dont on l\u0026rsquo;a √©crit, √ßa s\u0026rsquo;appelle du pseudo-code, parce que √ßa ressemble √† un langage de programmation, mais ce n\u0026rsquo;en est pas un.\nMais pourquoi on appelle √ßa un algorithme? on peut pas juste dire une suite d\u0026rsquo;actions?\nJe te laisse chercher sur internet pourquoi on appelle √ßa un algorithme.\nLa boucle for ‚Äî ou comment √™tre fiu Ton meilleur ami Manutea te demande \u0026ldquo;Comment tu as fait pour inviter toutes ces personnes √† ton anniversaire ?\u0026rdquo;. Laquelle de ces 2 phrases dirais-tu :\nJ\u0026rsquo;ai appel√© Manutea, puis j\u0026rsquo;ai appel√© Vai, puis j\u0026rsquo;ai appel√© Purotu, puis j\u0026rsquo;ai appel√© Heiarii, puis j\u0026rsquo;ai appel√© Reva, puis j\u0026rsquo;ai appel√© Jean, puis j\u0026rsquo;ai appel√© Tiare, puis j\u0026rsquo;ai appel√© Paul J\u0026rsquo;ai pris mon carnet d\u0026rsquo;adresses, puis pour chaque contact, j\u0026rsquo;ai appel√© le num√©ro correspondant La 1√®re phrase est un algorithme sans boucle (loop en anglais) : chaque action est √©crite explicitement.\nLa 2√®me, elle, utilise une boucle ‚Äî tu r√©p√®tes la m√™me action pour chaque contact. Sans forc√©ment y penser, tu utilises aussi une variable : un espace dans ta t√™te pour m√©moriser un num√©ro, que tu remplaces √† chaque nouvel appel.\nCette mani√®re de r√©p√©ter une action avec une variable, c‚Äôest exactement ce qu‚Äôun ordinateur fait quand on lui demande de parcourir une liste.\nSi tu relis bien la 2√®me phrase, tu verras que pour chaque est en gras. En anglais, pour chaque se dit for each, c\u0026rsquo;est pour √ßa qu\u0026rsquo;on l\u0026rsquo;appelle la boucle for dans la plupart des langages.\nSi on essayait d\u0026rsquo;√©crire un algorithme, sous forme de pseudo-code simple pour d√©crire la 2√®me phrase, √ßa donnerait :\nDans mon carnet d\u0026#39;adresses, pour chaque contact: J\u0026#39;ai appel√© le num√©ro correspondant au contact J\u0026#39;ai invit√© l\u0026#39;ami Fin pour \u0026ldquo;Dans mon carnet d\u0026rsquo;adresses, pour chaque contact\u0026rdquo; marque le d√©but de la boucle, et \u0026ldquo;Fin pour\u0026rdquo; marque la fin de la boucle.\nEntre ces 2 lignes, les actions \u0026ldquo;J\u0026rsquo;ai appel√© le num√©ro correspondant au contact\u0026rdquo; et \u0026ldquo;J\u0026rsquo;ai invit√© l\u0026rsquo;ami\u0026rdquo; forment ce qu\u0026rsquo;on appelle un bloc d\u0026rsquo;instructions.\nPar convention, on indente ce bloc ‚Äî on le d√©cale vers la droite ‚Äî pour montrer visuellement qu\u0026rsquo;il est √† l\u0026rsquo;int√©rieur de la boucle.\nOk, et quel est le rapport entre la boucle for et fiu comme marqu√© dans le titre ?\nSi on devait √©crire l\u0026rsquo;algorithme de la 1√®re phrase, √ßa donnerait :\nJ\u0026#39;ai appel√© Manutea J\u0026#39;ai appel√© Vai J\u0026#39;ai appel√© Purotu J\u0026#39;ai appel√© Heiarii J\u0026#39;ai appel√© Reva J\u0026#39;ai appel√© Jean J\u0026#39;ai appel√© Tiare J\u0026#39;ai appel√© Paul Chaque ligne est une action, donc il faut √©crire autant de lignes qu\u0026rsquo;il y a de contacts dans ta liste de contacts. Maintenant, que se passerait-il si tu devais inviter 100 personnes? Tu serais fiu.\nAlors qu\u0026rsquo;avec la boucle, tu n\u0026rsquo;as pas besoin de changer ton algorithme, c\u0026rsquo;est le m√™me, que tu aies 6 contacts ou 100.\nOui mais dans la vraie vie je dois quand m√™me appeler les amis un par un\nCet exemple n‚Äôest pas l√† pour dire que tu vas programmer ton t√©l√©phone ‚Äî mais pour te faire sentir la puissance de la boucle : un seul bloc, quelle que soit la longueur de ta liste.\nDans la vraie vie, tu fais un groupe Facebook avec tous tes amis et tu postes des messages d\u0026rsquo;informations dans le groupe pour organiser, idem pour un groupe SMS. Si t\u0026rsquo;es old school, tu postes un message dans le journal local et viendra qui verra. D\u0026rsquo;ailleurs j\u0026rsquo;en parlerai dans de prochains articles.\nLa boucle while ‚Äî ou comment faire ses devoirs avant d\u0026rsquo;aller jouer Quand tu √©tais plus jeune, on t\u0026rsquo;a s√ªrement d√©j√† dit \u0026ldquo;Fais d\u0026rsquo;abord tes devoirs, ensuite tu peux aller jouer\u0026rdquo;, ou autrement dit \u0026quot;Tant que tu n\u0026rsquo;a pas fini tes devoirs, tu travailles, ensuite tu peux aller jouer\u0026quot;.\nSi on devait √©crire cet algorithme, √ßa donnerait:\nTant que je n\u0026#39;ai pas fini mes devoirs: Je fais mes devoirs Fin tant que Je vais jouer \u0026ldquo;Tant que je n\u0026rsquo;ai pas fini mes devoirs\u0026rdquo; marque le d√©but de la boucle, et \u0026ldquo;Fin tant que\u0026rdquo; marque la fin de la boucle.\nEntre ces 2 lignes, l\u0026rsquo;action \u0026ldquo;Je fais mes devoirs\u0026rdquo; forme le bloc d\u0026rsquo;instructions.\nTu l\u0026rsquo;auras remarqu√©, c\u0026rsquo;est tr√®s similaire √† la boucle for, sauf qu\u0026rsquo;au lieu de parcourir des √©l√©ments, on v√©rifie une condition, et on r√©p√®te la boucle si la condition n\u0026rsquo;est remplie.\nOn appelle √ßa une boucle while, car Tant que se dit while en anglais.\nEnsuite, une fois que les devoirs sont finis, on sort de la boucle, on fait la suite des instructions, donc \u0026ldquo;Je vais jouer\u0026rdquo;. On aurait aussi pu avoir d\u0026rsquo;autres instructions apr√®s la boucle for, c\u0026rsquo;est juste que l\u0026rsquo;exemple ne s\u0026rsquo;y pr√™tait pas.\nMais alors‚Ä¶ pourquoi deux types de boucles si elles font (presque) la m√™me chose ? Pourquoi une boucle for, et une boucle while ?\nEn fait, en fonction du probl√®me qu\u0026rsquo;on veut r√©soudre :\ndans certains cas on pourra compter, et dans ce cas on pr√©f√®rera utiliser une boucle for dans certains cas on ne pourra pas compter, et dans ce cas on pr√©f√®rera utiliser une boucle while Par exemple, pour un enfant qui joue dehors:\nTant qu\u0026#39;il fait beau: Je joue Fin tant que Ici, impossible de compter.\nMais tu commences peut-√™tre √† te rendre compte d\u0026rsquo;une supercherie.\nInstant Dev üí° En r√©alit√©, toutes les boucles for peuvent √™tre r√©√©crites en boucle while.\nLa boucle for n‚Äôest qu‚Äôune boucle while optimis√©e, √©crite pour √™tre plus simple √† lire‚Ä¶ quand on sait compter.\nLes 2 types de boucles sont des instructions d\u0026rsquo;it√©ration, √† la diff√©rence des instructions simples comme \u0026ldquo;Je joue\u0026rdquo;, les instructions d\u0026rsquo;it√©ration permettre d\u0026rsquo;ex√©cuter des blocs d\u0026rsquo;instructions de mani√®re r√©p√©t√©e.\nBravo, tu commences √† r√©fl√©chir comme un d√©veloppeur !\nExplications\nPour rappel:\ndans une liste, l\u0026rsquo;index commence √† 0, dans une liste, le dernier index est √©gal au nombre d\u0026rsquo;√©l√©ments de la liste moins 1 Amis Manutea Vai Purotu Heiarii Reva Jean Tiare Paul index 0 1 2 3 4 5 6 7 Nombre d\u0026rsquo;√©l√©ments: 8\nune variable c\u0026rsquo;est juste un espace m√©moire o√π on stocke une donn√©e (un tableau, une liste, un pr√©nom, un num√©ro de t√©l√©phone) Si on reprend l\u0026rsquo;exemple de la boucle for:\nDans mon carnet d\u0026#39;adresses, pour chaque contact: J\u0026#39;appelle le num√©ro correspondant au contact J\u0026#39;invite l\u0026#39;ami Fin pour Derri√®re, voici plut√¥t ce que fait un ordinateur (de mani√®re simplifi√©e) :\nJe cr√©e une variable \u0026#34;index\u0026#34;, qui vaut 0 Tant que \u0026#34;index\u0026#34; est inf√©rieur au nombre d\u0026#39;√©l√©ments (8) du carnet d\u0026#39;adresses: Je regarde le contact qui se trouve √† l\u0026#39;\u0026#34;index\u0026#34; dans le carnet d\u0026#39;adresses Je r√©cup√®re son num√©ro Je l\u0026#39;invite \u0026#34;index\u0026#34; prend la valeur \u0026#34;index\u0026#34; + 1 Fin tant que Comme tu le vois, c\u0026rsquo;est un peu plus compliqu√©, c\u0026rsquo;est pour √ßa qu\u0026rsquo;on pr√©f√®re utiliser une boucle for quand on peut compter.\nL\u0026rsquo;instruction conditionnelle ‚Äî ou pourquoi il faut respecter le code de la route Juste au-dessus, on parlait de condition dans la boucle while. Mais on n\u0026rsquo;a jamais expliqu√© ce que c\u0026rsquo;√©tait.\nUne condition est une question qu\u0026rsquo;on se pose, et la r√©ponse est soit ‚Äúoui‚Äù, soit ‚Äúnon‚Äù ‚Äî jamais les deux, jamais \u0026ldquo;un peu\u0026rdquo;.\nQuand on √©crit \u0026ldquo;Tant que je n\u0026rsquo;ai pas fini mes devoirs\u0026rdquo;, √† chaque r√©p√©tition on pose la question \u0026ldquo;Est-ce que j\u0026rsquo;ai fini mes devoirs?\u0026rdquo;.\nEn informatique, comme dans la vraie vie, une condition doit √™tre claire.\nOn peut utiliser ce concept pour faire des branchements dans notre code, dans une instruction conditionnelle (conditional statement en anglais).\nPrenons un exemple simple : tu es en voiture, tu approches un feu tricolore. Il est vert.\nQue fais-tu si le feu passe √† l‚Äôorange juste devant toi‚ÄØ?\nVoici un algorithme qui repr√©sente cette situation :\nSi le feu passe au orange, alors: Tu t\u0026#39;arr√™tes Sinon (c\u0026#39;est toujours vert): Tu continues et traverse l\u0026#39;intersection Fin si \u0026ldquo;Si le feu passe au orange,\u0026rdquo; marque le d√©but de l\u0026rsquo;instruction conditionnelle, \u0026ldquo;alors\u0026rdquo; marque la branche du si, \u0026ldquo;Sinon\u0026rdquo; marque la branche du sinon, et \u0026ldquo;Fin si\u0026rdquo; marque la fin de l\u0026rsquo;instruction conditionnelle.\nDe la m√™me mani√®re que pour les boucles, chaque branche est un bloc d\u0026rsquo;instructions. Comme pour les boucles, chaque branche forme un bloc d‚Äôinstructions, qu‚Äôon indente pour bien le rep√©rer.\nPour visualiser, imagine un arbre : chaque fois qu‚Äôune condition est test√©e, tu choisis une branche √† suivre. Le chemin d√©pend de tes r√©ponses.\nRevenons √† notre parcours de graphe Rappels Tu avais appel√© tes amis pour les inviter √† ton anniversaire, et tu avais √©t√© jusqu\u0026rsquo;au bout du monde, en sautant de relations en relations, pour inviter Paul. Tu avais fait ces actions :\nTu comptes inviter tout ton carnet d\u0026#39;adresses. Tu r√©alises que tu n‚Äôas pas le contact de Paul. Tu l\u0026#39;as crois√© en soir√©e et il √©tait cool, tu voudrais l\u0026#39;inviter... mais t\u0026#39;as oubli√© de lui demander son num√©ro. Heureusement, tu sais que Purotu le conna√Æt. Tu l\u0026#39;appelles... zut, elle n\u0026#39;a pas son num√©ro. Mais elle te donne le num√©ro de Tiare, une autre amie de Paul. Tu appelles Tiare, tu te pr√©sentes, tu l\u0026#39;invites √©galement car tu n\u0026#39;es pas un sauvage. Et tu lui demandes le num√©ro de Paul. Bingo, elle l\u0026#39;a, tu appelles Paul et il est chaud pour venir √† ton anniversaire. Ci-dessous se trouve le graphe de relation entre les personnes, un graphe non orient√©.\n%%{ init: { 'theme': 'base', 'themeVariables': { 'primaryColor': '#ddd', 'primaryTextColor': '#007acc', 'primaryBorderColor': '#007acc', 'lineColor': '#007acc' } } }%% graph TD A[Toi] --- B[Manutea] A --- C[Vai] A --- D[Purotu] A --- E[Heiarii] A --- F[Reva] A --- G[Jean] D --- H[Tiare] H --- I[Paul] Graphe de relation entre les personnes En se basant sur ce qu\u0026rsquo;on a appris dans cet article, on va √©crire un algorithme pour repr√©senter les actions que tu as r√©alis√©es pour inviter tes amis :\n# √âtape 1 : inviter tous mes amis directs (les noeuds les plus proches de \u0026#34;Toi\u0026#34; dans le graphe) Je cr√©e une variable \u0026#34;liste d\u0026#39;amis\u0026#34;, contenant tous mes amis directs Je cr√©e une variable \u0026#34;ami\u0026#34;, le contact courant Dans la \u0026#34;liste d\u0026#39;amis\u0026#34;, pour chaque \u0026#34;ami\u0026#34; : J\u0026#39;appelle \u0026#34;ami\u0026#34; Si \u0026#34;ami\u0026#34; r√©pond, alors : Je l\u0026#39;invite √† mon anniversaire Fin si Fin pour # √âtape 2 : retrouver Paul (en parcourant le graphe en largeur) Je cr√©e une variable \u0026#34;file\u0026#34;, initialis√©e avec la \u0026#34;liste d\u0026#39;amis\u0026#34; Je cr√©e une variable \u0026#34;visit√©s\u0026#34;, une liste vide Tant que la \u0026#34;file\u0026#34; n‚Äôest pas vide : Je prends le premier √©l√©ment de la \u0026#34;file\u0026#34;, je le stocke dans \u0026#34;ami\u0026#34; Si \u0026#34;ami\u0026#34; n‚Äôest pas dans \u0026#34;visit√©s\u0026#34;, alors : J‚Äôajoute \u0026#34;ami\u0026#34; √† \u0026#34;visit√©s\u0026#34; J\u0026#39;appelle \u0026#34;ami\u0026#34; Si \u0026#34;ami\u0026#34; r√©pond, alors : Je lui demande s‚Äôil conna√Æt Paul Si \u0026#34;ami\u0026#34; me donne le num√©ro de Paul : Je cr√©e une variable \u0026#34;Paul\u0026#34; J\u0026#39;appelle \u0026#34;Paul\u0026#34; Si \u0026#34;Paul\u0026#34; r√©pond, alors : Je l‚Äôinvite √† mon anniversaire Je termine la recherche Fin si Sinon : Je r√©cup√®re la liste des amis de \u0026#34;ami\u0026#34; Pour chaque \u0026#34;contact\u0026#34; dans cette liste : J‚Äôajoute \u0026#34;contact\u0026#34; √† la \u0026#34;file\u0026#34; Fin pour Fin si Fin si Fin si Fin tant que √Ä premi√®re vue, √ßa a l\u0026rsquo;air compliqu√©. Mais en fait si tu prends le temps de d√©cortiquer, de bien regarder, tu verras que ce sont juste les actions que tu as r√©alis√©s plus haut, mais dans un langage plus proche de ce que fait un ordinateur.\nLa seule chose qu\u0026rsquo;on a fait en plus des concepts de base, c\u0026rsquo;est qu\u0026rsquo;on a combin√© les structures de contr√¥le et les structures de donn√©es, et le tout nous donne notre algorithme de parcours de graphe !\nInstant Dev üí° On a parcouru le graphe en largeur, c\u0026rsquo;est-√†-dire qu\u0026rsquo;on a d\u0026rsquo;abord regard√© les noeuds voisins de notre point de d√©part.\nD\u0026rsquo;autres algorithmes connus et enseign√©s en informatique sont le parcours en profondeur, l\u0026rsquo;algorithme de Dijkstra, A* et Floyd-Warshall, tu peux regarder sur internet si √ßa t\u0026rsquo;int√©resse.\nConclusion Dans cet article on a appris ce que sont :\nLes structures de contr√¥le, Les boucles, Les conditions, Les variables, Les algorithmes. Il existe d\u0026rsquo;autres structures de contr√¥le, des types de variables, et des algorithmes qu\u0026rsquo;on peut r√©utiliser pour r√©pondre √† beaucoup de probl√®mes. Comme d\u0026rsquo;habitude, je te laisse chercher sur internet si tu veux aller plus loin.\nMais le plus important, c\u0026rsquo;est que tu commences √† r√©fl√©chir comme un d√©veloppeur, et √† comprendre le pseudo-code. Dans la vraie vie, si tu as un probl√®me complexe √† r√©soudre, tu peux essayer de l\u0026rsquo;√©crire comme on l\u0026rsquo;a fait pour le parcours de graphe. Prends ton temps et d√©compose le probl√®me.\nNous avons fini cette section \u0026ldquo;IMMV ‚Äî Section 1 ‚Äî Les Bases : structures et contr√¥le\u0026rdquo;, dans cette section, nous avons √©galement vu les structures de donn√©es.\nDans la prochaine section, IMMV ‚Äî Section 2 ‚Äî L\u0026rsquo;ex√©cution : comment faire des actions ?, nous verrons que l\u0026rsquo;ordinateur et l\u0026rsquo;humain font les actions de mani√®re tr√®s similaire.\n‚Üê Retour √† la section\n‚Üê Retour √† l‚Äôintroduction\n","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/les-bases/structures-de-controle/","summary":"\u003cp\u003eDans l\u0026rsquo;article pr√©c√©dent \u003ca href=\"../structures-de-donnees/\"\u003eIMVV ‚Äî Section 1 ‚Äî Chapitre 2 ‚Äî Autres structures de donn√©es, j\u0026rsquo;organise mon bordel\u003c/a\u003e, on s\u0026rsquo;√©tait arr√™t√© sur ta question :\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eEt c\u0026rsquo;est quoi le parcours de graphe?\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eDans cet article, on va parler des \u003cstrong\u003estructures de contr√¥le\u003c/strong\u003e (\u003cem\u003econtrol flow statements\u003c/em\u003e en anglais), qu\u0026rsquo;on utilise dans des \u003cstrong\u003ealgorithmes\u003c/strong\u003e (\u003cem\u003ealgorithms\u003c/em\u003e en anglais).\u003c/p\u003e\n\u003cp\u003eAvant d\u0026rsquo;expliquer l\u0026rsquo;algorithme que tu as fait, le \u003cstrong\u003eparcours de graphe\u003c/strong\u003e, on doit expliquer les structures de contr√¥le.\u003c/p\u003e","title":"IMVV ‚Äî Section 1 ‚Äî Chapitre 3 ‚Äî Structures de contr√¥le et algorithme, apprendre √† r√©fl√©chir"},{"content":"Pr√©c√©demment, on a vu qu\u0026rsquo;en rajoutant des serveurs, on pouvait servir plus de familles. Dans cette section on verra diff√©rents tips permettant d\u0026rsquo;optimiser un programme existant et la vie r√©elle.\nChapitres IMVV ‚Äî Section 3 ‚Äî Chapitre 1 ‚Äî La m√©moire, ou comment √©viter les p√©nuries dans un magasin IMVV ‚Äî Section 3 ‚Äî Chapitre 2 ‚Äî M√©mo√Øsation et Lazy loading, les techniques du fain√©ant ultime ","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/optimisation/optimisation/","summary":"\u003cp\u003ePr√©c√©demment, on a vu qu\u0026rsquo;en rajoutant des serveurs, on pouvait servir plus de familles. Dans cette section on verra diff√©rents tips permettant d\u0026rsquo;optimiser un programme existant et la vie r√©elle.\u003c/p\u003e\n\u003ch1 id=\"chapitres\"\u003eChapitres\u003c/h1\u003e\n\n\n\u003cul\u003e\n  \n\t\t\n\t\n\t\t\n    \t\n      \t\u003cli\u003e\u003ca href=\"/blog.dev/posts/miroir-informatique-vraie-vie/optimisation/memoire/\"\u003eIMVV ‚Äî Section 3 ‚Äî Chapitre 1 ‚Äî La m√©moire, ou comment √©viter les p√©nuries dans un magasin\u003c/a\u003e\u003c/li\u003e\n    \t\n  \t\n\t\n\t\t\n    \t\n      \t\u003cli\u003e\u003ca href=\"/blog.dev/posts/miroir-informatique-vraie-vie/optimisation/memoisation/\"\u003eIMVV ‚Äî Section 3 ‚Äî Chapitre 2 ‚Äî M√©mo√Øsation et Lazy loading, les techniques du fain√©ant ultime\u003c/a\u003e\u003c/li\u003e\n    \t\n  \t\n\t\n\u003c/ul\u003e","title":"IMMV ‚Äî Section 3 ‚Äî L'optimisation : comment se faire passer pour un coach de vie"},{"content":"Dans cette section, nous verrons comment les actions sont ex√©cut√©es, par les ordinateurs et par les personnes. Et on verra quelques pistes pour r√©pondre √† une accumulation de t√¢ches.\nChapitres IMMV ‚Äî Section 2 ‚Äî Chapitre 1 ‚Äî Synchrone et Asynchrone, ou comment r√©agir au changement IMMV ‚Äî Section 2 ‚Äî Chapitre 2 ‚Äî Monothread, Multithread, Parall√©lisme et Concurrence, je ne peux pas tout faire en m√™me temps ! ","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/l-execution/l-execution/","summary":"\u003cp\u003eDans cette section, nous verrons comment les actions sont ex√©cut√©es, par les ordinateurs et par les personnes. Et on verra quelques pistes pour r√©pondre √† une accumulation de t√¢ches.\u003c/p\u003e\n\u003ch1 id=\"chapitres\"\u003eChapitres\u003c/h1\u003e\n\n\n\u003cul\u003e\n  \n\t\t\n\t\n\t\t\n    \t\n      \t\u003cli\u003e\u003ca href=\"/blog.dev/posts/miroir-informatique-vraie-vie/l-execution/sync-async/\"\u003eIMMV ‚Äî Section 2 ‚Äî Chapitre 1 ‚Äî Synchrone et Asynchrone, ou comment r√©agir au changement\u003c/a\u003e\u003c/li\u003e\n    \t\n  \t\n\t\n\t\t\n    \t\n      \t\u003cli\u003e\u003ca href=\"/blog.dev/posts/miroir-informatique-vraie-vie/l-execution/threads/\"\u003eIMMV ‚Äî Section 2 ‚Äî Chapitre 2 ‚Äî Monothread, Multithread, Parall√©lisme et Concurrence, je ne peux pas tout faire en m√™me temps !\u003c/a\u003e\u003c/li\u003e\n    \t\n  \t\n\t\n\u003c/ul\u003e","title":"IMMV ‚Äî Section 2 ‚Äî L'ex√©cution : comment faire des actions ?"},{"content":"Dans cette section, nous verrons les bases permettant de stocker et manipuler des donn√©es.\nChapitres IMVV ‚Äî Section 1 ‚Äî Chapitre 1 ‚Äî File ou Pile ? L\u0026#39;art de passer avant les autres IMVV ‚Äî Section 1 ‚Äî Chapitre 2 ‚Äî Autres structures de donn√©es, j\u0026#39;organise mon bordel IMVV ‚Äî Section 1 ‚Äî Chapitre 3 ‚Äî Structures de contr√¥le et algorithme, apprendre √† r√©fl√©chir ","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/les-bases/les-bases/","summary":"\u003cp\u003eDans cette section, nous verrons les bases permettant de stocker et manipuler des donn√©es.\u003c/p\u003e\n\u003ch1 id=\"chapitres\"\u003eChapitres\u003c/h1\u003e\n\n\n\u003cul\u003e\n  \n\t\t\n\t\n\t\t\n    \t\n      \t\u003cli\u003e\u003ca href=\"/blog.dev/posts/miroir-informatique-vraie-vie/les-bases/file-et-pile/\"\u003eIMVV ‚Äî Section 1 ‚Äî Chapitre 1 ‚Äî File ou Pile ? L\u0026#39;art de passer avant les autres\u003c/a\u003e\u003c/li\u003e\n    \t\n  \t\n\t\n\t\t\n    \t\n      \t\u003cli\u003e\u003ca href=\"/blog.dev/posts/miroir-informatique-vraie-vie/les-bases/structures-de-donnees/\"\u003eIMVV ‚Äî Section 1 ‚Äî Chapitre 2 ‚Äî Autres structures de donn√©es, j\u0026#39;organise mon bordel\u003c/a\u003e\u003c/li\u003e\n    \t\n  \t\n\t\n\t\t\n    \t\n      \t\u003cli\u003e\u003ca href=\"/blog.dev/posts/miroir-informatique-vraie-vie/les-bases/structures-de-controle/\"\u003eIMVV ‚Äî Section 1 ‚Äî Chapitre 3 ‚Äî Structures de contr√¥le et algorithme, apprendre √† r√©fl√©chir\u003c/a\u003e\u003c/li\u003e\n    \t\n  \t\n\t\n\u003c/ul\u003e","title":"IMMV ‚Äî Section 1 ‚Äî Les bases : structures et contr√¥le"},{"content":"\u0026lsquo;Ia ora na,\nL\u0026rsquo;informatique semble souvent obscure pour beaucoup. Quand je dis que je suis ing√©nieur informatique, on me demande r√©guli√®rement : ¬´ Mais tu fais quoi exactement ? ¬ª.\nAvec le temps, j‚Äôai pris l‚Äôhabitude de vulgariser mon m√©tier. Et ce qui fonctionne le mieux, ce sont les exemples concrets tir√©s de la vie quotidienne.\nEn √©cole d\u0026rsquo;ing√©nieur, j\u0026rsquo;apprenais beaucoup plus facilement l\u0026rsquo;informatique en partant de situations r√©elles. √Ä travers cette s√©rie d‚Äôarticles, \u0026ldquo;L‚Äôinformatique, un miroir de la vraie vie\u0026rdquo; (abr√©g√© IMVV), je vais tenter d‚Äôexpliquer des concepts informatiques en m‚Äôappuyant sur des sc√®nes famili√®res du quotidien, sur un ton l√©ger. Parce que finalement, coder un programme ou g√©rer une file d‚Äôattente au magasin, ce n‚Äôest pas si diff√©rent.\nInformations de lecture Avant de lire les articles list√©s en bas de cette page, quelques informations pour vous faciliter la lecture :\nIl y a un mode sombre et un mode clair : En haut de chaque page se trouve une ic√¥ne pour interchanger entre les modes de lecture sombre et clair\nJ\u0026rsquo;utiliserai des apart√©s pour les d√©veloppeurs,\nInstant Dev Ceci est un apart√© pour les d√©veloppeurs, si tu es non d√©veloppeur tu peux lire, mais tu auras peut-√™tre mal √† la t√™te. J\u0026rsquo;utiliserai des interjections de lecteur, J\u0026rsquo;interviens comme si j\u0026rsquo;√©tais toi, lecteur, pour aider l\u0026rsquo;auteur de ce blog √† rendre ces articles dynamiques\nCette s√©rie d\u0026rsquo;articles n\u0026rsquo;est pas un cours d\u0026rsquo;informatique, vous n\u0026rsquo;apprendrez pas √† d√©velopper juste en suivant ces articles. Mot de fin Que tu sois curieux, d√©butant ou simplement en qu√™te de sens dans ce monde num√©rique, cette s√©rie pourrait bien t‚Äôapporter quelque chose.\nTu y trouveras peut-√™tre :\nune meilleure compr√©hension des bases de l‚Äôinformatique, des id√©es pour analyser ou optimiser les situations du quotidien, ou m√™me, qui sait, l‚Äôenvie de plonger plus loin dans ce domaine‚Ä¶ jusqu‚Äô√† en faire ton m√©tier. Bien s√ªr, cette s√©rie n‚Äôexplorera qu‚Äôune infime partie de ce vaste domaine qu‚Äôest l‚Äôinformatique. Apr√®s tout, peut-on vraiment expliquer enti√®rement l\u0026rsquo;informatique\u0026hellip; un domaine qui, justement, est le miroir de la vie* ?\n*: cette analogie est √† prendre avec recul : l‚Äôinformatique ne refl√®te pas toute la complexit√© de la vie.\nLes articles de la s√©rie (En cours de r√©daction) IMMV ‚Äî Section 1 ‚Äî Les bases : structures et contr√¥le IMMV ‚Äî Section 1 ‚Äî Les bases : structures et contr√¥le IMVV ‚Äî Section 1 ‚Äî Chapitre 1 ‚Äî File ou Pile ? L\u0026#39;art de passer avant les autres IMVV ‚Äî Section 1 ‚Äî Chapitre 2 ‚Äî Autres structures de donn√©es, j\u0026#39;organise mon bordel IMVV ‚Äî Section 1 ‚Äî Chapitre 3 ‚Äî Structures de contr√¥le et algorithme, apprendre √† r√©fl√©chir IMMV ‚Äî Section 2 ‚Äî L\u0026#39;ex√©cution : comment faire des actions ? IMMV ‚Äî Section 2 ‚Äî L\u0026#39;ex√©cution : comment faire des actions ? IMMV ‚Äî Section 2 ‚Äî Chapitre 1 ‚Äî Synchrone et Asynchrone, ou comment r√©agir au changement IMMV ‚Äî Section 2 ‚Äî Chapitre 2 ‚Äî Monothread, Multithread, Parall√©lisme et Concurrence, je ne peux pas tout faire en m√™me temps ! IMMV ‚Äî Section 3 ‚Äî L\u0026#39;optimisation : comment se faire passer pour un coach de vie IMMV ‚Äî Section 3 ‚Äî L\u0026#39;optimisation : comment se faire passer pour un coach de vie IMVV ‚Äî Section 3 ‚Äî Chapitre 1 ‚Äî La m√©moire, ou comment √©viter les p√©nuries dans un magasin IMVV ‚Äî Section 3 ‚Äî Chapitre 2 ‚Äî M√©mo√Øsation et Lazy loading, les techniques du fain√©ant ultime ","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/introduction/","summary":"\u003cp\u003e\u0026lsquo;Ia ora na,\u003c/p\u003e\n\u003cp\u003eL\u0026rsquo;informatique semble souvent obscure pour beaucoup. Quand je dis que je suis ing√©nieur informatique, on me demande r√©guli√®rement : ¬´ Mais tu fais quoi exactement ? ¬ª.\u003c/p\u003e\n\u003cp\u003eAvec le temps, j‚Äôai pris l‚Äôhabitude de vulgariser mon m√©tier. Et ce qui fonctionne le mieux, ce sont les exemples concrets tir√©s de la vie quotidienne.\u003c/p\u003e\n\u003cp\u003eEn √©cole d\u0026rsquo;ing√©nieur, j\u0026rsquo;apprenais beaucoup plus facilement l\u0026rsquo;informatique en partant de situations r√©elles.\n√Ä travers cette s√©rie d‚Äôarticles, \u003cstrong\u003e\u0026ldquo;L‚Äôinformatique, un miroir de la vraie vie\u0026rdquo;\u003c/strong\u003e (abr√©g√© \u003cem\u003eIMVV\u003c/em\u003e), je vais tenter d‚Äôexpliquer des concepts informatiques en m‚Äôappuyant sur des sc√®nes famili√®res du quotidien, sur un ton l√©ger.\nParce que finalement, coder un programme ou g√©rer une file d‚Äôattente au magasin, ce n‚Äôest pas si diff√©rent.\u003c/p\u003e","title":"IMMV - Introduction - L'informatique, un miroir de la vraie vie"},{"content":"Introduction Cet article est un aper√ßu tr√®s rapide des moyens de paiement en Polyn√©sie Fran√ßaise.\nUpdate (12/05/2022): suite √† quelques feedback, je me rend compte que cet article est √† destination des d√©veloppeurs de site de e-shopping, des commer√ßants, de mes confr√®res mon√©ticiens. Cet article sera complexe √† lire si vous n\u0026rsquo;avez jamais travaill√© avec un TPE, avec une plateforme de paiement, avec des cartes bancaires.\nDisclaimer: Au moment o√π j\u0026rsquo;√©cris cet article, je travaille √† l\u0026rsquo;Oc√©anienne des Services Bancaires (OSB), Ces articles ne sont pas sponsoris√©s par OSB, et j\u0026rsquo;encourage les gens √† faire des tutoriels pour les solutions des autres fournisseurs de solutions de paiement.\nLes diff√©rents types de carte En Polyn√©sie Fran√ßaise, il est possible de payer avec plusieurs types de cartes.\nCarte Bancaire (anciennement Carte Bleue, co-brand√©es ou non de Visa ou Mastercard), American Express (AMEX), Cartes privatives (Socredo Verte / Gold, Banque de Polyn√©sie Hoa, CCP de Fare Rata, Carte Tiare de la Banque de Tahiti), Union Pay International (UPI), Discover, Japan Credit Bureau (JCB) Les 3 derniers types de cartes sont surtout utilis√©s par les touristes.\nLes cartes privatives composent la majorit√© des cartes d√©tenues par les habitants de la Polyn√©sie Fran√ßaise.\nPourquoi autant de personnes ont une carte privative ? Les cartes privatives sont propos√©es par les diff√©rentes banques locales (√† l\u0026rsquo;exception d\u0026rsquo;OFINA qui √©met exclusivement les cartes AMEX). Il s\u0026rsquo;agit des banques Socredo, Banque de Tahiti, Banque de Polyn√©sie, et Fare Rata.\nLes cartes privatives sont soumises √† des r√©glementations et des frais moins co√ªteux que les cartes internationales.\nEn outre, elles sont uniquement r√©gul√©es par les banques locales contrairement aux cartes bancaires internationales, qui sont non seulement r√©gul√©es par les banques locales, mais aussi par les r√©seaux internationaux (CB, Visa, Mastercard, Union Pay, etc.).\nC\u0026rsquo;est en partie √† cause de ces r√©glementations et frais moins co√ªteux que les clients des banques doivent remplir moins de conditions pour avoir une carte privative. C\u0026rsquo;est pour cela que les cartes privatives sont plus r√©pandues sur le territoire.\nNotes:\nLes r√©seaux peuvent d√©cider d\u0026rsquo;appliquer des amendes voire de d√©sactiver le flux vers un acteur mon√©taire (banque, processeur de paiement, etc.) si celui-ci ne respecte pas la r√©glementation. Cette r√©glementation est mise √† jour r√©guli√®rement.\nPour les cartes privatives, ce sont les banques locales qui imposent leur r√©glementation, par abus de langage, on parle aussi de r√©seau privatif pour d√©signer l\u0026rsquo;ensemble de ces banques.\nCes r√©glementations sont suivies par les banques centrales des pays, par exemple l\u0026rsquo;IEOM en Polyn√©sie Fran√ßaise.\nJ\u0026rsquo;ai inclus la carte Tiare de la Banque de Tahiti dans les cartes privatives car elle a les m√™mes limitations g√©ographiques que celles-ci, et elle fonctionne aussi en m√©tropole, mais il s\u0026rsquo;agit bien d\u0026rsquo;une CB, donc elle est soumise aux r√©glementations CB.\nLes cartes Socredo privatives sont maintenant co-brand√©es UPI, mais il y a bien 2 applications dans la carte, sur le territoire, c\u0026rsquo;est l\u0026rsquo;application privative qui est utilis√©e, √† l\u0026rsquo;international, c\u0026rsquo;est l\u0026rsquo;application UPI qui est utilis√©e.\nFonctionnement des transactions Le sch√©ma √† 4 coins est l\u0026rsquo;un des sch√©mas de r√©f√©rence de la mon√©tique. Il explique les entit√©s qui entrent en jeu dans une transaction.\nLa banque √©mettrice √©met la carte et la fournit au porteur.\nLa banque acqu√©reuse fournit un contrat accepteur au commer√ßant, afin que celui-ci puisse encaisser les paiements avec les cartes, moyennant une commission, en plus des services annexes autour de l\u0026rsquo;encaissement (exemple: relev√© TPE). Les TPE et solutions de paiement en ligne sont des services d\u0026rsquo;encaissement.\nUn syst√®me d\u0026rsquo;acceptation est un logiciel ou un ensemble de logiciels, qui permet d\u0026rsquo;encaisser une carte bancaire, par exemple les TPE et les plateformes de paiement en ligne.\nIl existe 2 modes de fonctionnement pour le d√©roulement d\u0026rsquo;un paiement:\nle mode single message le mode dual message Lorsque vous payez avec votre carte, vous r√©alisez une transaction. Si toutes les r√®gles de gestion sont valid√©es, la transaction est autoris√©e.\nEn single message, la transaction autoris√©e est directement transform√©e en mouvement financier, i.e. un enregistrement est cr√©√© chez la banque acqu√©reuse qui dit \u0026ldquo;M. Client doit 1000 XPF √† M. Commer√ßant\u0026rdquo;.\nEn dual message, la transaction est enregistr√©e sur le TPE, ou sur la plateforme de paiement, puis, tous les jours √† une certaine heure, l\u0026rsquo;ensemble des transactions de la journ√©e sont envoy√©es √† la banque acqu√©reuse sous forme de mouvement financier.\nEn Polyn√©sie Fran√ßaise, le mode dual message est le plus r√©pandu, c\u0026rsquo;est d\u0026rsquo;ailleurs pour √ßa que l\u0026rsquo;on vous demande de ne pas d√©brancher votre TPE, votre internet, votre r√©seau √©lectrique.\nLes cartes et les syst√®mes d\u0026rsquo;acceptation Pour qu\u0026rsquo;un syst√®me d\u0026rsquo;acceptation puisse encaisser une carte, elle doit reconna√Ætre la carte.\nPour reconna√Ætre une carte, on utilise le BIN, qui sont les N premiers chiffres du num√©ro de la carte, N √©tant d√©fini par le r√©seau.\nDe plus, seule une application sp√©cifique √† ce r√©seau peut reconna√Ætre cette carte. Par exemple, pour une transaction avec une carte AMEX sur un TPE, c\u0026rsquo;est uniquement une application TPE AMEX qui pourra la reconna√Ætre, mais seulement si la carte fait partie d\u0026rsquo;une plage de BIN accept√©e par l\u0026rsquo;application.\nNote: Dans un TPE, il peut y avoir plusieurs applications, quand une carte est ins√©r√©e, le TPE demande √† chaque application \u0026ldquo;Peux-tu accepter cette carte?\u0026rdquo;.\nDe la m√™me mani√®re, pour une plateforme de paiement en ligne, celle-ci ne pourra accepter que des cartes qui font partie de ses plages de BIN d√©clar√©es.\nZoom sur le paiement en ligne en Polyn√©sie Fran√ßaise Comme √©nonc√© pr√©c√©demment, les cartes privatives sont majoritaires en Polyn√©sie Fran√ßaise, et elles ne sont pas reconnues √† l\u0026rsquo;√©tranger (sauf pour les cartes Socredo co-brand√©es UPI, comme cit√© pr√©c√©demment) car les BIN privatifs ne sont pas d√©clar√©s dans le monde.\nC\u0026rsquo;est pour cela qu\u0026rsquo;on ne peut pas payer avec une carte privative sur la plupart des plateformes de paiement en ligne (Paypal, Stripe, etc.), qui sont internationales.\nPour rem√©dier √† ce probl√®me, OSB propose Payzen, et la Banque de Tahiti propose SystemPay.\n√Ä mon avis, √† l\u0026rsquo;heure actuelle, c\u0026rsquo;est vers ces solutions que je conseille les commer√ßants d\u0026rsquo;aller, car il serait dommage de se priver des cartes privatives, alors qu\u0026rsquo;elles sont plus nombreuses.\nNotes:\nLes 2 solutions sont en r√©alit√© bas√©es sur les solutions Payzen et SystemPay de Lyra, soci√©t√© situ√©e en France. Certains d\u0026rsquo;entre vous ont d\u0026rsquo;ailleurs peut-√™tre d√©j√† √©t√© confus en recherchant de la documentation technique de ces solutions et se sont perdus entre:\nla documentation Payzen d\u0026rsquo;OSB, la documentation Payzen de Lyra, la documentation SystemPay de la Banque de Tahiti, la documentation SystemPay de Lyra. Je vous conseille de vous focaliser sur les documentations locales, et ensuite de compl√©ter avec les documentations de Lyra.\nConclusion Il existe plusieurs types de cartes.\nLes protocoles de paiement s\u0026rsquo;inscrivent dans un sch√©ma √† 4 coins, il y a plusieurs acteurs qui entrent en jeu.\nIl y a une r√©glementation g√©n√©rale qui englobe tous les types de cartes, et chaque type a √©galement sa r√©glementation sp√©cifique. Les banques sont soumises √† ces r√©glementations, l\u0026rsquo;IEOM et les r√©seaux (VISA, Mastercard, AMEX, etc.) veillent √† ce que les banques respectent ces r√©glementations.\nLa g√©ographie et les accords entre les acteurs sont importants pour comprendre les contraintes des syst√®mes de paiement locaux.\nEn Polyn√©sie Fran√ßaise, la majorit√© des cartes bancaires sont des cartes privatives, pour des raisons √©conomiques et r√©glementaires.\n","permalink":"http://localhost:1313/blog.dev/posts/intro-moyens-paiement/","summary":"\u003ch1 id=\"introduction\"\u003eIntroduction\u003c/h1\u003e\n\u003cp\u003eCet article est un aper√ßu tr√®s rapide des moyens de paiement en Polyn√©sie Fran√ßaise.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eUpdate (12/05/2022): suite √† quelques feedback, je me rend compte que cet article est √† destination des d√©veloppeurs de site de e-shopping, des commer√ßants, de mes confr√®res mon√©ticiens. Cet article sera complexe √† lire si vous n\u0026rsquo;avez jamais travaill√© avec un TPE, avec une plateforme de paiement, avec des cartes bancaires.\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e\u003cstrong\u003eDisclaimer\u003c/strong\u003e: Au moment o√π j\u0026rsquo;√©cris cet article, je travaille √† l\u0026rsquo;Oc√©anienne des Services Bancaires (OSB), Ces articles ne sont pas sponsoris√©s par OSB, et j\u0026rsquo;encourage les gens √† faire des tutoriels pour les solutions des autres fournisseurs de solutions de paiement.\u003c/p\u003e","title":"Introduction aux moyens de paiement en Polyn√©sie Fran√ßaise"},{"content":"Ia\u0026rsquo;orana, bonjour !\nCe post marque le d√©but du blog h√©berg√© sur Github.\nVous trouverez ici de temps en temps des articles de d√©veloppement et des POCs.\nBonne lecture !\n","permalink":"http://localhost:1313/blog.dev/posts/hello-world/","summary":"\u003cp\u003eIa\u0026rsquo;orana, bonjour !\u003c/p\u003e\n\u003cp\u003eCe post marque le d√©but du blog h√©berg√© sur Github.\u003c/p\u003e\n\u003cp\u003eVous trouverez ici de temps en temps des articles de d√©veloppement et des POCs.\u003c/p\u003e\n\u003cp\u003eBonne lecture !\u003c/p\u003e","title":"Hello World"},{"content":"La m√©moire est une ressource au m√™me titre que la fourchette dans le pr√©c√©dent article.\nDans un ordinateur, il existe plusieurs types de m√©moire que les programmes vont pouvoir utiliser en fonction de la mani√®re dont ils veulent traiter les donn√©es.\nIl faut voir la m√©moire comme un endroit o√π on entrepose des donn√©es.\nPour cet article on va parler d\u0026rsquo;un magasin, mais √ßa marche aussi avec un restaurant.\nLa m√©moire cache ‚Äî l\u0026rsquo;armoire r√©frig√©r√©e La m√©moire cache est le stockage le plus rapide qu\u0026rsquo;un programme peut utiliser. Pour un magasin, il s\u0026rsquo;agit des √©tag√®res et des armoires r√©frig√©r√©es qui forment les rayons.\nLes clients (les threads du programme) ont rapidement acc√®s aux viandes qui sont dans les armoires r√©frig√©r√©es, ils n\u0026rsquo;ont qu\u0026rsquo;√† tendre la main. Par contre, on ne peut pas stocker une grande quantit√© de viande dans ces armoires, pour l\u0026rsquo;exemple on va dire une dizaine au maximum.\nSur un ordinateur, cette m√©moire cache se trouve directement dans le processeur sous les noms cache L3, cache L2 et cache L1. On n\u0026rsquo;ira pas dans le d√©tail ici, mais sachez que plus le nombre est proche de 0, et plus le cache est rapide.\nJe prends l\u0026rsquo;exemple de l\u0026rsquo;armoire r√©frig√©r√©e car il y a un m√©canisme physique important dans un ordinateur: la m√©moire cache peut accueillir des donn√©es uniquement si elle est aliment√©e en √©lectricit√©, en cas de coupure de courant, on perd les donn√©es qui s\u0026rsquo;y trouvent.\nDe la m√™me mani√®re, dans un magasin, en cas de coupure de courant, il faut jeter toute la viande qui se trouve dans les armoires r√©frig√©r√©es*.\n*: Oui c\u0026rsquo;est pas tout √† fait le cas, mais en cas de coupure prolong√©e √ßa l\u0026rsquo;est.\nLa m√©moire vive ‚Äî l\u0026rsquo;arri√®re du magasin Au cours d\u0026rsquo;une journ√©e, le magasin souhaite vendre bien plus que dix viandes, c\u0026rsquo;est bien normal. Pour cela, √† l\u0026rsquo;arri√®re du magasin il y a un stock r√©frig√©r√© qui peut en contenir 1000. Un employ√© viendra remplir les rayons au cours de la journ√©e.\nCette action prend du temps, l\u0026rsquo;employ√© doit :\nAller dans le stock r√©frig√©r√© R√©cup√©rer des viandes Amener les viandes dans le rayon Mettre les viandes dans l\u0026#39;armoire r√©frig√©r√©e Pendant tout ce temps, le client ne peut prendre que les viandes qui sont encore dans l\u0026rsquo;armoire, il faut donc bien faire attention √† ce que l\u0026rsquo;employ√© recharge l\u0026rsquo;armoire quand il reste encore un peu de bo√Ætes.\nDans un ordinateur, la m√©moire vive (RAM en anglais pour Random Access Memory), joue le r√¥le du stock r√©frig√©r√© tr√®s rapide qu\u0026rsquo;un programme peut utiliser, mais beaucoup moins rapide que la m√©moire cache, environ 50x √† 100x moins rapide.\nEt tout comme la m√©moire cache, la RAM peut accueillir des donn√©es uniquement si elle est aliment√©e en √©lectricit√©.\nC\u0026rsquo;est pour √ßa qu\u0026rsquo;on appelle √ßa de la m√©moire vive, elle doit √™tre aliment√©e.\nAttends, mais tu dis que la RAM est tr√®s rapide, mais le processus pour recharger la m√©moire cache est lent ? On ne peut pas juste utiliser une grande quantit√© de m√©moire cache?\nLa m√©moire cache co√ªte tr√®s cher, beaucoup plus que la RAM. L\u0026rsquo;√©tat actuel est donc un compromis entre rapidit√© et co√ªt, un probl√®me typique en ing√©nierie.\nLe stockage ‚Äî la ferme en Nouvelle-Z√©lande Le stockage d\u0026rsquo;un ordinateur est compos√© des diff√©rents disques durs (HDD, SDD, etc.). Il s\u0026rsquo;agit d\u0026rsquo;une m√©moire persistante, c\u0026rsquo;est-√†-dire que m√™me en cas de coupure de courant, les donn√©es restent √©crites dans les disques.\nPour notre magasin, de la viande qui reste utilisable m√™me en cas de coupure\u0026hellip; Eh bien ce sont les boeufs vivants √† la ferme.\nTon analogie est d√©go√ªtante\nOui je sais, j\u0026rsquo;ai pas mieux, d√©sol√©. En m√™me temps, je ne peux pas vous dire que de la viande fra√Æche, qui reste longtemps √† l\u0026rsquo;air libre, est encore utilisable.\nEn plus, il y a plein d\u0026rsquo;√©tapes entre un boeuf vivant et un steak dans l\u0026rsquo;armoire !\nTout √† fait, mais c\u0026rsquo;est la meilleure analogie possible pour te faire comprendre pourquoi, en cas de coupure, si tu n\u0026rsquo;as pas sauvegard√© ton fichier Word depuis longtemps, tu perds tes donn√©es. Tant que tu n\u0026rsquo;as pas sauvegard√©, tes modifications restent dans le cache et la RAM.\nEt pourquoi en Nouvelle-Z√©lande ?\nOh, √ßa c\u0026rsquo;est parce qu\u0026rsquo;aller chercher une donn√©e dans un disque, c\u0026rsquo;est tr√®s lent compar√© √† aller la chercher dans la RAM. Si tu as un disque SSD c\u0026rsquo;est 10x plus lent, si tu as un disque HDD, c\u0026rsquo;est 100x plus lent.\nSi tu joues √† des jeux vid√©o un peu gourmands en ressources, tu as s√ªrement remarqu√© des √©crans de chargement plus ou moins longs. C\u0026rsquo;est surtout parce que le programme r√©cup√®re les donn√©es qui sont sur le disque.\nOptimiser la m√©moire ‚Äî pas besoin d\u0026rsquo;√™tre mentaliste Vous l\u0026rsquo;aurez donc compris, un magasin a diff√©rents types de m√©moire √† sa disposition. La mani√®re dont il orchestre les denr√©es √† travers ces diff√©rents composants lui permet d\u0026rsquo;anticiper les variations de stock, et limiter le risque de p√©nurie.\nLorsqu\u0026rsquo;un d√©veloppeur code un programme, il peut aussi anticiper l\u0026rsquo;utilisation des donn√©es et les charger avant d\u0026rsquo;en avoir besoin.\nDans l\u0026rsquo;exemple du jeu vid√©o, pourquoi est-ce que toutes les donn√©es ne sont pas charg√©es d√®s le d√©but? Moi j\u0026rsquo;en ai marre des √©crans de chargement.\nTout d\u0026rsquo;abord, ce chargement se fait du stockage vers la RAM (puis vers le cache), ensuite, si on chargeait toutes les donn√©es d\u0026rsquo;un coup, il y a de fortes chances pour que ta RAM soit satur√©e.\nA priori, le d√©veloppeur ne sait pas si tu as peu ou beaucoup de RAM disponible, et puis, maintenir deux versions du code, un qui charge toutes les donn√©es, et un qui charge via les √©crans de chargement, c\u0026rsquo;est du travail suppl√©mentaire qui n\u0026rsquo;apporte pas grand chose.\nLes √©crans de chargement sont un compromis : plut√¥t que de risquer de crasher ton ordinateur, le d√©veloppeur a cod√© le programme de sorte √† charger uniquement le contenu qui sera utilis√© dans le niveau, pour tous les niveaux.\nConclusion Dans cet article, on a vu les diff√©rentes m√©moires utilis√©es par les programmes. √Ä l\u0026rsquo;image d\u0026rsquo;un magasin qui √©vite les p√©nuries, un d√©veloppeur doit jongler avec ces m√©moires pour que son programme tourne correctement.\nDans le prochain article, IMVV ‚Äî Section 3 ‚Äî Chapitre 2 ‚Äî M√©mo√Øsation et Lazy loading, les technique du fain√©ant ultime, nous verrons des techniques qui feront de toi un bon fain√©ant.\n‚Üê Retour √† la section\n‚Üê Retour √† l‚Äôintroduction\n","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/optimisation/memoire/","summary":"\u003cp\u003eLa m√©moire est une \u003cstrong\u003eressource\u003c/strong\u003e au m√™me titre que la fourchette dans le \u003ca href=\"../../l-execution/threads/\"\u003epr√©c√©dent article\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eDans un ordinateur, il existe plusieurs types de m√©moire que les programmes vont pouvoir utiliser en fonction de la mani√®re dont ils veulent traiter les donn√©es.\u003c/p\u003e\n\u003cp\u003eIl faut voir la m√©moire comme un endroit o√π on entrepose des donn√©es.\u003c/p\u003e\n\u003cp\u003ePour cet article on va parler d\u0026rsquo;un magasin, mais √ßa marche aussi avec un restaurant.\u003c/p\u003e\n\u003ch2 id=\"la-m√©moire-cache--larmoire-r√©frig√©r√©e\"\u003eLa m√©moire cache ‚Äî l\u0026rsquo;armoire r√©frig√©r√©e\u003c/h2\u003e\n\u003cp\u003eLa \u003cstrong\u003em√©moire cache\u003c/strong\u003e est le stockage \u003cstrong\u003ele plus rapide\u003c/strong\u003e qu\u0026rsquo;un programme peut utiliser. Pour un magasin, il s\u0026rsquo;agit des √©tag√®res et des armoires r√©frig√©r√©es qui forment les rayons.\u003c/p\u003e","title":"IMVV ‚Äî Section 3 ‚Äî Chapitre 1 ‚Äî La m√©moire, ou comment √©viter les p√©nuries dans un magasin"},{"content":"Dans le pr√©c√©dent article, IMVV ‚Äî Section 1 ‚Äî Chapitre 3 ‚Äî Structures de contr√¥le et algorithme, apprendre √† r√©fl√©chir, on a vu les diff√©rentes structures de contr√¥le et les algorithmes.\nMaintenant on va parler de la mani√®re dont on r√©alise un ensemble de t√¢ches ‚Äî c‚Äôest ce qu‚Äôon appelle en informatique un mode d‚Äôex√©cution. C\u0026rsquo;est applicable aussi bien pour un humain que pour un ordinateur.\nN\u0026rsquo;oublie pas que les objectifs de ces articles sont :\nTe donner une meilleure compr√©hension des bases de l‚Äôinformatique, T\u0026rsquo;inspirer pour analyser ou optimiser les situations du quotidien, ou peut-√™tre, qui sait, te donner envie d\u0026rsquo;explorer encore plus loin\u0026hellip; jusqu‚Äô√† en faire ton m√©tier. Programme et application ‚Äî c\u0026rsquo;est quoi la diff√©rence ? Un programme informatique est un ensemble d\u0026rsquo;algorithmes. Le mot application veut dire la m√™me chose.\nC‚Äôest juste que application, √ßa sonne plus moderne, m√™me si ce mot existe depuis longtemps.\nMerci le marketing Apple et son App Store. üòÑ\nSynchrone ‚Äî Avoir un serveur d√©di√© √† sa table, quel luxe Prenons l\u0026rsquo;exemple d\u0026rsquo;un restaurant chic. Dans ce restaurant chic, il y a 2 tables. Chaque table a son serveur attitr√©, celui-ci r√©pond uniquement aux besoins de sa table.\nPour la suite de cet exercice de pens√©e, on va dire qu\u0026rsquo;il y a 2 familles (famille 1, famille 2), 2 tables (table 1, table 2), 1 serveur, 1 chef.\nLa s√©quence d\u0026rsquo;actions que le serveur doit faire, l\u0026rsquo;algorithme est :\nSi une famille arrive: Accueillir la famille Installer la famille sur une table libre Prendre la commande Donner la commande au chef R√©cup√©rer les plats Servir les plats √† la famille Faire payer la famille Fin si La famille 1 arrive au restaurant, le serveur les accueille et les installe √† la table 1. Il reste en attente de leur commande, √† proximit√©*.\nQuand la famille 1 est pr√™te, vu que le serveur est √† c√¥t√©, ils passent commande. Le serveur s\u0026rsquo;en va ensuite en cuisine pour donner la commande au chef. Le serveur attend les plats. Le chef pr√©pare les plats.\nUne fois que les plats sont pr√™ts, il les r√©cup√®re et les sert √† la famille 1. La famille 1 paie et s\u0026rsquo;en va, heureuse de l\u0026rsquo;attention port√©e.\n*: A ce moment, la famille 2 arrive au restaurant, ils ne sont pas accueillis, puisque le serveur est en attente de la commande de la famille 1. Alors la famille 2 repart, agac√©e, ils laisseront un mauvais avis sur internet.\nDans cette configuration, le serveur ex√©cute ses t√¢ches de mani√®re synchrone, cela veut dire qu\u0026rsquo;il ex√©cute l\u0026rsquo;algorithme √©tape par √©tape sans interruption. Si une √©tape n√©cessite d\u0026rsquo;attendre, par exemple quand il doit attendre que la famille choisisse sa commande, alors il attend, on dit que le mode synchrone est bloquant. Le serveur va au bout de son algorithme.\nMais c\u0026rsquo;est nul, il y a une famille qui n\u0026rsquo;a pas √©t√© servie\u0026hellip;\nSi on reste dans le mode d\u0026rsquo;ex√©cution synchrone, le probl√®me est qu\u0026rsquo;il n\u0026rsquo;y a pas assez de serveur. S\u0026rsquo;il y avait autant de serveurs de tables et de chefs, il n\u0026rsquo;y aurait aucun souci. Chaque famille aurait √©t√© ravie d\u0026rsquo;avoir un serveur et un chef d√©di√©. Mais on verrait plut√¥t cette disposition dans les restaurants luxueux, qui peuvent se permettre d\u0026rsquo;avoir 100 tables, 100 serveurs et 100 chefs.\nPar d√©faut, les applications sont synchrones, car √† part le probl√®me de ressources, c‚Äôest bien plus simple de faire une t√¢che apr√®s l‚Äôautre, cependant, de nos jours, de plus en plus de syst√®mes sont asynchrones (exemple: navigateurs, certains serveurs applicatifs √† la mode).\nüìå Exemples dans la vie r√©elle Une personne qui suit une proc√©dure critique Pr√©parer une salade üíª Exemples en informatique Un distributeur de billets Une imprimante partag√©e Asynchrone ‚Äî Un serveur pour les gouverner tous ‚Äî Oui c\u0026rsquo;est une r√©f√©rence au Seigneur des Anneaux üòÑ ‚Äî\nReprenons l\u0026rsquo;exemple du restaurant, toujours avec 2 familles (famille 1, famille 2), 2 tables (table 1, table 2), 1 serveur, 1 chef.\nMais cette fois, on change l\u0026rsquo;algorithme :\nQuand une famille arrive, alors : Le serveur les accueille Il les installe √† une table libre Il leur donne un menu Il passe √† autre chose Fin quand Quand une famille appelle le serveur pour commander, alors : Le serveur prend la commande Il la transmet au chef Il passe √† autre chose Fin quand Quand la sonnette en cuisine retentit (plats pr√™ts), alors : Le serveur r√©cup√®re les plats Le serveur sert les plats √† la bonne table Il passe √† autre chose Fin quand Quand une famille veut payer, alors : Le serveur encaisse Il lib√®re la table Il passe √† autre chose Fin quand Cet algorithme est diff√©rent de ceux qu\u0026rsquo;on a vus jusqu\u0026rsquo;√† pr√©sent.\n\u0026ldquo;Quand \u0026hellip;,\u0026rdquo; marque un √©v√©nement, \u0026ldquo;alors\u0026rdquo; introduit le bloc d\u0026rsquo;instructions √† ex√©cuter en r√©action, et \u0026ldquo;Fin quand\u0026rdquo; marque la fin de ce bloc.\nOn dit alors qu\u0026rsquo;on fait de la programmation √©v√©nementielle (ou programmation r√©active) et que l\u0026rsquo;algorithme est asynchrone : il fait de sorte √† r√©agir aux √©v√©nements ext√©rieurs.\nLorsqu‚Äôun √©v√©nement se produit, le serveur y r√©agit imm√©diatement : il ex√©cute les instructions associ√©es, puis passe √† l‚Äô√©v√©nement suivant s‚Äôil y en a un. Sinon, il attend. Ce mode d\u0026rsquo;ex√©cution est donc non bloquant.\nEt dans les faits, c\u0026rsquo;est ce que fait la plupart des personnes, serveurs ou non. Quand on fait une t√¢che, et qu\u0026rsquo;on est interrompu par un bug, un appel, un coll√®gue de travail qui pose une question, on est en r√©action.\nAvec cet algorithme, un serveur seul pourra tr√®s bien g√©rer 2 tables.\nüìå Exemples dans la vie r√©elle Les serveurs dans la plupart des restaurants Mon chien quand il entend les croquettes üíª Exemples en informatique Les notifications sur ton smartphone Un arrosage automatique avec capteur d\u0026#39;humidit√© Attention : comme en mode synchrone, s\u0026rsquo;il y a trop de table pour un seul serveur, plusieurs √©v√©nements risquent de s\u0026rsquo;accumuler en attente de traitement.\nMais du coup, comment on fait pour r√©soudre ce probl√®me ?\nOn verra √ßa dans le prochain article.\nConclusion Dans cet article, on a vu ce qu\u0026rsquo;√©taient les modes d\u0026rsquo;ex√©cution synchrone et asynchrone.\nSi tu souhaites continuer cette aventure, tu peux regarder la suite ici: IMMV ‚Äî Section 2 ‚Äî Chapitre 2 ‚Äî Monothread et Multithread, je ne peux pas tout faire en m√™me temps !\n‚Üê Retour √† la section\n‚Üê Retour √† l‚Äôintroduction\n","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/l-execution/sync-async/","summary":"\u003cp\u003eDans le pr√©c√©dent article, \u003ca href=\"../../les-bases/structures-de-controle/\"\u003eIMVV ‚Äî Section 1 ‚Äî Chapitre 3 ‚Äî Structures de contr√¥le et algorithme, apprendre √† r√©fl√©chir\u003c/a\u003e, on a vu les diff√©rentes structures de contr√¥le et les algorithmes.\u003c/p\u003e\n\u003cp\u003eMaintenant on va parler de la mani√®re dont on r√©alise un ensemble de t√¢ches ‚Äî c‚Äôest ce qu‚Äôon appelle en informatique un \u003cstrong\u003emode d‚Äôex√©cution\u003c/strong\u003e. C\u0026rsquo;est applicable aussi bien pour un humain que pour un ordinateur.\u003c/p\u003e\n\u003cp\u003eN\u0026rsquo;oublie pas que les objectifs de ces articles sont :\u003c/p\u003e","title":"IMMV ‚Äî Section 2 ‚Äî Chapitre 1 ‚Äî Synchrone et Asynchrone, ou comment r√©agir au changement"},{"content":"Quand tu prends un ticket pour attendre ton tour, que tu fais la queue √† la caisse, que tu prends l‚Äôassiette du haut de la pile pour mettre la table, ou que tu cliques sur le bouton \u0026lsquo;Retour\u0026rsquo; (‚Üê) du navigateur internet‚Ä¶ Tu manipules sans le savoir des concepts appell√©s en informatique des structures de donn√©es, et les algorithmes associ√©s qui les font vivre.\nDans cet article, on va mettre un peu de clart√© l√†-dedans : pas besoin de coder pour comprendre, on va illustrer tout √ßa avec des situations de la vie courante.\nD√©finitions Avant d‚Äôaller plus loin, quelques d√©finitions simples, histoire de parler le m√™me langage :\nDonn√©e : une donn√©e, c‚Äôest une information num√©rique. √áa peut √™tre un num√©ro de passeport, le nombre de dents d‚Äôune personne, la liste des t√¢ches que tu as encore repouss√©es √† demain, ou ton nombre d‚Äôamis sur Facebook. Structure de donn√©es : imagine une bo√Æte, une √©tag√®re ou un sac √† dos, dans lequel tu ranges tes informations d‚Äôune certaine mani√®re pour mieux les retrouver ou les traiter. C‚Äôest la fa√ßon dont on organise les donn√©es. Algorithme : un algorithme, c‚Äôest une suite d‚Äô√©tapes ou d‚Äôinstructions pour manipuler ces donn√©es. Comme une recette de cuisine, ou une proc√©dure √† suivre pour obtenir un r√©sultat. File et pile : deux mani√®res d‚Äôattendre‚Ä¶ ou de repousser Maintenant qu‚Äôon a les bases, voyons deux structures de donn√©es tr√®s simples mais tr√®s puissantes : la file et la pile. On les retrouve partout dans notre quotidien, souvent sans s‚Äôen rendre compte.\nLa file ‚Äî ou comment attendre son tour (FIFO) Imagine une file d‚Äôattente devant un guichet. Le premier arriv√© est le premier servi. C‚Äôest ce qu‚Äôon appelle en informatique une file (ou queue en anglais), avec une logique FIFO : First In, First Out (premier entr√©, premier sorti).\nD√®s que quelqu‚Äôun est servi, c‚Äôest le suivant dans la file qui avance.\nüéØ C‚Äôest une structure √©quitable : chacun attend selon son ordre d‚Äôarriv√©e.\nüìå Exemples dans la vie r√©elle Faire la queue √† la caisse du magasin La liste des courses (si on lit de haut en bas) üíª Exemples en informatique Les syst√®mes de ticket dans les accueils (le num√©ro est g√©n√©r√© par un programme, et les appels suivent cet ordre) Les commentaires sur une publication Facebook (affich√©s du plus ancien au plus r√©cent) La pile ‚Äî ou comment empiler les priorit√©s (LIFO) Maintenant, imagine une pile de livres que tu dois r√©viser pour un examen. Tu prends celui du haut, tu le lis, puis tu prends celui juste en dessous, et ainsi de suite. Tu lis dans l‚Äôordre inverse de celui dans lequel tu as empil√© les livres. Tu viens de d√©piler ta pile, toujours en commen√ßant par le haut.\nC‚Äôest exactement le principe de la pile (ou stack en anglais), qui suit la logique LIFO : Last In, First Out (dernier entr√©, premier sorti).\nTu vas peut-√™tre me dire :\nOui mais je peux aussi prendre le livre du bas, non‚ÄØ?\nC‚Äôest vrai. Alors prenons un autre exemple, un peu plus r√©aliste :\nImagine que tu tombes sur un article de journal qui parle des nodules polym√©talliques dans les fonds marins de la Polyn√©sie fran√ßaise. Tu n‚Äôy connais pas grand-chose, mais √ßa t‚Äôintrigue. Tu lis l‚Äôarticle, puis tu ouvres une page Wikip√©dia pour comprendre ce qu‚Äôest un nodule polym√©tallique. Sur cette page, tu vois un lien vers les m√©taux rares, puis vers la transition √©nerg√©tique, puis‚Ä¶ tu vois o√π je veux en venir.\nEn lisant ce premier article, tu ne soup√ßonnais pas toute la pile d‚Äôinformations que tu allais explorer. Et tu viens de d√©piler ce savoir, en commen√ßant par la derni√®re page ouverte.\nüéØ Ce n‚Äôest pas une structure √©quitable : ce qui arrive en dernier est trait√© en premier. Mais c‚Äôest tr√®s utile pour remonter dans le temps, ou revenir sur ses pas, exactement comme le bouton \u0026ldquo;retour\u0026rdquo; de ton navigateur.\nüìå Exemples dans la vie r√©elle Les cartons dans un coffre bien rempli Les diff√©rentes strates de terre quand tu creuses dans ton jardin (c\u0026#39;est de la terre empil√©e au cours du temps) üíª Exemples en informatique Le bouton \u0026#39;Retour\u0026#39; (‚Üê) de ton navigateur Les annulations successives (Undo, CTRL\u0026#43;Z) dans un √©diteur de texte Si tu veux conna√Ætre d\u0026rsquo;autres structures de donn√©es, tu peux regarder le prochain article : IMVV ‚Äî Section 1 ‚Äî Chapitre 2 ‚Äî Autres structures de donn√©es, j\u0026rsquo;organise mon bordel\n‚Üê Retour √† la section\n‚Üê Retour √† l‚Äôintroduction\n","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/les-bases/file-et-pile/","summary":"\u003cp\u003eQuand tu prends un ticket pour attendre ton tour, que tu fais la queue √† la caisse, que tu prends l‚Äôassiette du haut de la pile pour mettre la table, ou que tu cliques sur le bouton \u0026lsquo;Retour\u0026rsquo; (‚Üê) du navigateur internet‚Ä¶\nTu manipules sans le savoir des concepts appell√©s en informatique \u003cstrong\u003edes structures de donn√©es\u003c/strong\u003e, et \u003cstrong\u003eles algorithmes\u003c/strong\u003e associ√©s qui les font vivre.\u003c/p\u003e\n\u003cp\u003eDans cet article, on va mettre un peu de clart√© l√†-dedans : pas besoin de coder pour comprendre, on va illustrer tout √ßa avec des situations de la vie courante.\u003c/p\u003e","title":"IMVV ‚Äî Section 1 ‚Äî Chapitre 1 ‚Äî File ou Pile ? L'art de passer avant les autres"},{"content":"√ätre fiu est un art, une vertu. Non, ce n\u0026rsquo;est pas une blague. Tu ne me crois pas ?\n\u0026ldquo;We will encourage you to develop the three great virtues of a programmer: laziness, impatience, and hubris.\u0026rdquo; ‚Äî Larry Wall, Programming perl (1991).\n\u0026ldquo;I choose a lazy person to do a hard job. Because a lazy person will find an easy way to do it.\u0026rdquo; ‚Äî Bill Gates.\nProgrammer une machine pour qu\u0026rsquo;elle fasse le travail √† ta place, c\u0026rsquo;est de la fain√©antise.\nEt les d√©veloppeurs sont des personnes qui ont atteint l\u0026rsquo;apog√©e du fiu. Apr√®s tout, qui passe 2 heures √† automatiser une t√¢che qui prend 2 minutes par jour, √† part quelqu\u0026rsquo;un de vraiment fiu ?\nDans cet article, on verra deux techniques que les d√©veloppeurs utilisent, mais que toi aussi tu utilises sans le savoir.\nM√©mo√Øsation ‚Äî ou comment garder une information dans un coin de la t√™te Supposons que tu sois responsable de la paie dans une petite entreprise. Pour ce mois-ci, tu dois calculer les salaires √† verser √† 2 employ√©s.\nTu sais que tous les deux ont un salaire brut de 200 000 XPF. De plus, ils ont fait un excellent travail, ton patron t\u0026rsquo;a dit de leur rajouter une prime de 50% de leur salaire brut. Enfin, l\u0026rsquo;un d\u0026rsquo;eux a fait des heures suppl√©mentaires, il faut donc lui rajouter 20 000 XPF brut sur sa paie.\nPour le 1er salari√©, tu pars de 200 000, tu rajoutes 50%, soit 100 000, ce qui lui fera 300 000 XPF brut pour ce mois.\nPour le 2√®me salari√©, tu sais que le d√©but du calcul est le m√™me, alors tu r√©utilises le nombre 300 000, et tu rajoutes 20 000 d\u0026rsquo;heures suppl√©mentaires, donc 320 000 bruts.\nSans m√©mo√Øsation, tu aurais recalcul√© 200 000 + 50 %. Mais tu t‚Äôes souvenu que ce calcul avait d√©j√† √©t√© fait, donc tu as directement repris le r√©sultat. Ce que tu viens de faire, c\u0026rsquo;est de la m√©mo√Øsation (memoization en anglais).\nC‚Äôest exactement ce que fait ton navigateur web quand il te propose un r√©sultat de recherche d√©j√† visit√©, ou qu‚Äôun site charge plus vite la 2·µâ fois.\nInstant Dev En informatique, on utilise un tableau ou un tableau associatif pour stocker les r√©sultats interm√©diares, ces structures sont stock√©es dans la RAM. De cette fa√ßon, on peut rapidement r√©cup√©rer le r√©sultat qui nous int√©resse. Attention : En informatique, comme dans la vraie vie, garder des informations de c√¥t√© peut conduire √† une saturation de la m√©moire. C\u0026rsquo;est un des facteurs de burn-out. M√©nagez votre cerveau, il n\u0026rsquo;y a pas de mal √† noter les choses, de plus, vous aurez moins de risque d\u0026rsquo;oublier des informations importantes.\nEager loading et Lazy loading ‚Äî l\u0026rsquo;art d\u0026rsquo;√™tre pr√©par√© √† toute √©ventualit√© Supposons que tu aies invit√© tes amis √† manger √† la maison ce soir. Tu as invit√© 10 personnes, mais tu sais que 5 vont vraiment venir, les autres t\u0026rsquo;ont dit \u0026ldquo;peut-√™tre\u0026rdquo;.\nPour √©viter d\u0026rsquo;√™tre √† court de nourriture, tu as pr√©par√© pour 10 personnes, au pire, ceux qui sont venus repartiront avec quelques plats, et tu termineras le reste durant la semaine.\nLes premiers invit√©s vont arriver, tu n\u0026rsquo;as pas encore pr√©par√© la table. Tu as 2 solutions :\nTout pr√©parer d\u0026rsquo;avance : sortir toutes les assiettes, les verres, les chaises, les couverts, etc. (solution eager loading : tu charges tout d√®s le d√©but).\nAttendre de voir qui arrive : d√®s qu‚Äôun invit√© entre, tu sors une assiette, un verre, une chaise, etc. (solution lazy loading : tu ne charges que ce qui est n√©cessaire, au moment o√π c‚Äôest n√©cessaire).\nMais tu peux aussi exiger des invit√©s qu\u0026rsquo;ils te disent, la veille au plus tard, si oui ou non ils viennent !\nOui, et que se passe-t-il si l\u0026rsquo;un d\u0026rsquo;eux a un emp√™chement ? En mettant tous les couverts, tu as d√©pens√© de l\u0026rsquo;√©nergie pour mettre son couvert, et tu en as re-d√©pens√© pour le ranger. Ce n\u0026rsquo;est pas tr√®s optimis√©.\nSi tous les invit√©s arrivent, tu auras fait plusieurs allers-retours pour mettre les couverts, ce n\u0026rsquo;est pas tr√®s optimis√© non plus\u0026hellip;\nAh, tu mets le doigt sur un point important : les techniques d\u0026rsquo;optimisation doivent √™tre utilis√©es uniquement si on est s√ªr de leur utilit√©.\n\u0026ldquo;Premature optimization is the root of all evil\u0026rdquo; ‚Äî Sir Tony Hoare et Donald Knuth.\nC\u0026rsquo;est un pi√®ge dans lequel tombent plusieurs d√©veloppeurs juniors. Les √©coles sup√©rieures enseignent diff√©rentes techniques d\u0026rsquo;optimisation, on est conditionn√©s √† d√©tecter un probl√®me et √† appliquer imm√©diatement une solution : c\u0026rsquo;est normal.\nAvec l\u0026rsquo;exp√©rience, on apprend qu\u0026rsquo;on a besoin d\u0026rsquo;optimiser uniquement quand une personne se plaint de lenteurs. Et dans ce cas, on cherche o√π se trouve la source du probl√®me, on mesure.\nOk mais\u0026hellip; √ßa me fait bizarre de ne pas pr√©parer une belle table, c\u0026rsquo;est pas un bon accueil.\nDans ce cas, le eager loading a une vraie plus-value. Tu charges tout d\u0026rsquo;un coup pour l\u0026rsquo;effet waow, pour que les personnes se disent que chez toi, on est bien re√ßu. La principale fonctionnalit√© n\u0026rsquo;est pas d\u0026rsquo;optimiser le fait de mettre la table, mais d\u0026rsquo;impressionner tes convives.\nJe finis cette partie avec un exemple informatique : Facebook ne charge pas toutes les publications d√®s le d√©but, seulement une partie.\nQuand tu commences √† scroller, tu vois ces publications. Si tu te rapproches de la fin, Facebook charge les prochaines publications, on appelle √ßa infinite scroll.\nAinsi, Facebook ne prend pas trop de temps √† se charger au d√©but.\nAttends mais\u0026hellip; Dans l\u0026rsquo;article pr√©c√©dent, on parlait des √©crans de chargement des jeux vid√©os, √ßa y ressemble un peu, non ?\nExactement, les √©crans de chargement sont aussi du lazy loading, et pour rejoindre ce qu\u0026rsquo;on disait sur ces √©crans : le lazy loading √©conomise de la m√©moire.\nEnfin, √† ton avis, comment Facebook sait qu\u0026rsquo;il faut charger la suite des publications ?\nEh bien en fait, l\u0026rsquo;application est r√©active, on peut √©crire son algorithme de chargement comme ceci:\nQuand un certain seuil de scroll est atteint (par exemple, 90% du contenu affich√©), alors: Charge la suite du contenu Passe √† autre chose Fin quand Tu l\u0026rsquo;auras remarqu√©, c\u0026rsquo;est ce qu\u0026rsquo;on a vu dans l\u0026rsquo;article IMMV ‚Äî Section 2 ‚Äî Chapitre 1 ‚Äî Synchrone et Asynchrone, ou comment r√©agir au changement.\nConclusion Dans cet article, on a vu diff√©rents m√©canimes d\u0026rsquo;optimisation.\nPlus important encore, si on se rappelle des pr√©c√©dents articles, on a vu qu\u0026rsquo;en informatique, en plus de combiner les structures de donn√©es et les structures de contr√¥le, on pouvait combiner les concepts d\u0026rsquo;optimisation et de modes d\u0026rsquo;ex√©cution.\nLe prochaine article est en cours de r√©daction, on parlera de complexit√©.\n‚Üê Retour √† la section\n‚Üê Retour √† l‚Äôintroduction\n","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/optimisation/memoisation/","summary":"\u003cp\u003e√ätre \u003cem\u003efiu\u003c/em\u003e est un art, une vertu. \u003cstrong\u003eNon, ce n\u0026rsquo;est pas une blague\u003c/strong\u003e. Tu ne me crois pas ?\u003c/p\u003e\n\u003cp\u003e\u0026ldquo;We will encourage you to develop the three great virtues of a programmer: laziness, impatience, and hubris.\u0026rdquo; ‚Äî \u003cem\u003eLarry Wall, Programming perl (1991)\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003e\u0026ldquo;I choose a lazy person to do a hard job. Because a lazy person will find an easy way to do it.\u0026rdquo; ‚Äî \u003cem\u003eBill Gates\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eProgrammer une machine pour qu\u0026rsquo;elle fasse le travail √† ta place, c\u0026rsquo;est de la fain√©antise.\u003c/p\u003e","title":"IMVV ‚Äî Section 3 ‚Äî Chapitre 2 ‚Äî M√©mo√Øsation et Lazy loading, les techniques du fain√©ant ultime"},{"content":"Dans le pr√©c√©dent article, IMMV ‚Äî Section 2 ‚Äî Chapitre 1 ‚Äî Synchrone et Asynchrone, ou comment r√©agir au changement, on a vu les diff√©rents modes d\u0026rsquo;ex√©cution.\nOn s\u0026rsquo;√©tait arr√™t√© sur le probl√®me suivant : Comment faire pour r√©pondre √† la mont√©e en charge, √† l\u0026rsquo;accumulation de t√¢ches ?\nEh bien, dans cet article, on va voir comment on r√©sout ce probl√®me, en informatique comme dans la vraie vie : les m√©canismes sont souvent tr√®s proches.\nPour cela on va continuer avec notre exemple de restaurant. Et on va expliciter diff√©rents termes que j\u0026rsquo;avais regroup√©s en parlant d\u0026rsquo;algorithmes et de programmes.\nN\u0026rsquo;oublie pas que les objectifs de ces articles sont :\nTe donner une meilleure compr√©hension des bases de l‚Äôinformatique, T\u0026rsquo;inspirer pour analyser ou optimiser les situations du quotidien, ou peut-√™tre, qui sait, te donner envie d\u0026rsquo;explorer encore plus loin\u0026hellip; jusqu‚Äô√† en faire ton m√©tier. Le programme ‚Äî l\u0026rsquo;id√©e de restaurant En informatique, quand on parle de programme, on parle uniquement d\u0026rsquo;un ensemble d\u0026rsquo;algorithmes, des t√¢ches qui le composent. Il n\u0026rsquo;est pas encore en train d\u0026rsquo;√™tre ex√©cut√©. Par exemple, Facebook est un programme ‚Äî mais tant que tu ne l‚Äôouvres pas, il ne fait rien.\nEh bien, c\u0026rsquo;est pareil pour un restaurant dans la vie de tous les jours, quand je parle du restaurant √† un ami, je n\u0026rsquo;y suis pas physiquement. Je parle juste du concept de restaurant, de l\u0026rsquo;id√©e que je m\u0026rsquo;en fais.\nLe processus - le restaurant ouvert Si je veux parler du restaurant physiquement ouvert, avec les employ√©s qui s\u0026rsquo;activent, en informatique il faut plut√¥t utiliser le terme processus. C\u0026rsquo;est le programme en cours d\u0026rsquo;ex√©cution.\nUn processus poss√®de son propre contexte d\u0026rsquo;ex√©cution, c\u0026rsquo;est un gros mot pour dire qu\u0026rsquo;il a ses propres ressources, et que personne ne peut lui prendre ses ressources.\nEn effet, quand le restaurant est ouvert, les assiettes qu\u0026rsquo;il utilise sont ses propres assiettes, ses propres ressources. Il n\u0026rsquo;y a pas un autre restaurant qui lui prendrait ses assiettes pendant qu\u0026rsquo;il est ouvert, sinon il risque d\u0026rsquo;avoir des assiettes manquantes.\nPour ex√©cuter un algorithme, un processus est compos√© d\u0026rsquo;un thread principal, et il peut avoir d\u0026rsquo;autres thread.\nLe thread ‚Äî la proc√©dure en cours d\u0026rsquo;ex√©cution du serveur Le thread (fil d\u0026rsquo;ex√©cution en fran√ßais) est ce qu‚Äôon appelle la proc√©dure en train de s\u0026rsquo;ex√©cuter. C‚Äôest un peu comme un serveur qui suit activement une fiche d\u0026rsquo;instructions √† un instant donn√©. Attention, ce n\u0026rsquo;est pas le serveur.\nEn informatique, on dit que le thread est l‚Äôunit√© d‚Äôex√©cution, C‚Äôest la plus petite unit√© qu‚Äôun ordinateur puisse piloter pour ex√©cuter du code. il n‚Äôexiste pas d‚Äôunit√© plus petite qu‚Äôun thread pour ex√©cuter une t√¢che.\nMaintenant qu‚Äôon comprend ce qu‚Äôest un thread ‚Äî une proc√©dure en cours d\u0026rsquo;ex√©cution ‚Äî il faut se demander qui ex√©cute cette proc√©dure.\nLe coeur ‚Äî le serveur On y arrive enfin, dans un ordinateur, le composant physique qui ex√©cute un thread s\u0026rsquo;appelle un coeur (core en anglais). Pour notre restaurant, ce core est le serveur. C\u0026rsquo;est lui, physiquement, qui prend les commandes, sert les plats, etc.\nConcurrence, parall√©lisme, multithread et monothread ‚Äî ou comment servir 2 familles en m√™me temps Un serveur ne peut faire qu\u0026rsquo;une seule chose √† la fois, √† un instant donn√© : quand il prend une commande √† l\u0026rsquo;instant T, il ne peut pas, en m√™me temps, servir des plats.\nPar contre, il pourrait s\u0026rsquo;interrompre pendant les t√¢ches, par exemple, au lieu de prendre toutes les commandes de la famille, d\u0026rsquo;un coup, il peut :\nprendre la commande d\u0026rsquo;un 1er plat aller chercher un plat √† servir servir le plat prendre la commande d\u0026rsquo;un 2√®me plat aller chercher un autre plat √† servir servir le plat etc. Attention: ici nous n\u0026rsquo;avons pas d√©coup√© les actions. C\u0026rsquo;est juste que le serveur a jongl√© entre les 2 t√¢ches \u0026ldquo;prendre la commande\u0026rdquo; et \u0026ldquo;servir les plats\u0026rdquo;. On appelle ce comportement la concurrence, car les 2 t√¢ches sont en concurrence pour √™tre termin√©es.\nDans un ordinateur, les threads sont concurrents, et comme √©nonc√© plus haut, √©tant donn√© qu\u0026rsquo;un processus est compos√© d\u0026rsquo;un thread principal, on dit que les processus sont concurrents.\nDans la vraie vie il y a des situations o√π on ne jongle pas avec les t√¢ches, o√π il faut √™tre concentr√© sur une t√¢che\nTout √† fait, et dans ce cas, s\u0026rsquo;il y a trop de t√¢ches pour une seule personne, on fait intervenir une 2√®me personne, une 3√®me etc.\nDans notre restaurant, avec 2 serveurs, pendant que l\u0026rsquo;un prend les commandes de la famille 1, un autre peut servir les plats de la famille 2. On appelle √ßa le parall√©lisme, les proc√©dures/threads sont ex√©cut√©s en parall√®le.\nEnfin, dans un restaurant, si on ne peut avoir qu\u0026rsquo;un seul serveur qui suit activement une fiche d\u0026rsquo;instructions ‚Äî un seul thread ‚Äî, on dit que le restaurant/le programme est monothread. S\u0026rsquo;il y en a plusieurs, on dit que le restaurant/serveur est multithread.\nDu coup, la solution pour le restaurant est d\u0026rsquo;embaucher plus de serveurs ?\nC\u0026rsquo;est l\u0026rsquo;une des solutions, oui, mais ce n\u0026rsquo;est pas la seule. Il y a globalement 2 chemins pour r√©pondre √† une mont√©e en charge. On peut :\noptimiser les algorithmes pour les rendre plus performants et/ou changer le mode d\u0026rsquo;ex√©cution, ou alors on peut mettre plus de coeurs et faire du multithread. De la m√™me mani√®re, dans la vraie vie, on peut :\nmieux former le serveur et/ou optimiser les proc√©dures qu\u0026rsquo;il doit suivre et/ou le motiver pour qu\u0026rsquo;il travaille plus vite, embaucher plus de serveurs. Dans tous les cas, je ne m\u0026rsquo;avancerai pas pour apprendre √† un restaurateur son m√©tier.\nLe partage de ressources ‚Äî ou comment partager une fourchette Dans le restaurant, on va maintenant se mettre du point de vue d\u0026rsquo;un couple, venu manger en t√™te √† t√™te dans une ambiance cosy, tamis√©e, √† l\u0026rsquo;abri des regards.\nLe serveur leur annonce la mauvaise nouvelle: il y a assez de couverts pour 2, sauf pour la fourchette. S\u0026rsquo;ils souhaitent tout de m√™me manger ici, ils devront se partager la fourchette, et interdiction de manger avec les doigts.\nLe couple discute, et finalement ce n\u0026rsquo;est pas un probl√®me, ils sont l√† pour profiter de l\u0026rsquo;instant.\nUne fois la commande pass√©e et les plats servis, Le couple commence √† manger. Mais comment s‚Äôorganisent-ils ?\nBen ils mangent chacun leur tour, ou alors l\u0026rsquo;un mange d\u0026rsquo;abord, et l\u0026rsquo;autre ensuite ?\nBingo, que l\u0026rsquo;un mange d\u0026rsquo;abord, puis l\u0026rsquo;autre, ou qu\u0026rsquo;ils mangent √† tour de r√¥le, dans tous les cas, ils doivent se partager une ressource : la fourchette. Donc l\u0026rsquo;un prend le contr√¥le de la ressource/fourchette, fait des actions avec cette ressource, puis lib√®re la ressource. L\u0026rsquo;autre peut √† son tour prendre le contr√¥le de la ressource, etc.\nDans un ordinateur, c\u0026rsquo;est pareil, dans un processus, les threads doivent se partager les ressources. De m√™me, les processus doivent se partager les ressources.\nC\u0026rsquo;est pour √ßa que sur un ordinateur, quand tu ouvres un document Word partag√© avec tes coll√®gues, parfois tu as un message du genre \u0026ldquo;le fichier est d√©j√† ouvert par\u0026hellip;\u0026rdquo; car le document Word est une fourchette ressource partag√©e entre ton application Word, et celle de ton coll√®gue.\nElle est bizarre ton explication\u0026hellip;\nJe ne vois pas de quoi tu parles.\nQuoiqu\u0026rsquo;il en soit, tu comprends donc qu\u0026rsquo;en rajoutant plus de threads/cores/personnes, on ne va pas forc√©ment plus vite. Ils doivent se synchroniser pour partager les ressources et parfois attendre.\nInstant Dev En informatique, ce partage de ressource s‚Äôappelle une section critique. Pour √©viter que deux t√¢ches utilisent la ressource en m√™me temps, on utilise des verrous (locks). Conclusion Dans cet article, on a vu diff√©rents termes informatiques qui permettent de comprendre un peu plus comment fonctionne un ordinateur, comment on pouvait r√©pondre √† la mont√©e en charge de diff√©rentes mani√®res, et que finalement, c\u0026rsquo;est tr√®s proche de la vie r√©elle.\nNous avons fini cette section \u0026ldquo;IMMV ‚Äî Section 2 ‚Äî L\u0026rsquo;ex√©cution : comment faire des actions ?\u0026rdquo;.\nDans la prochaine section, IMMV ‚Äî Section 3 ‚Äî L\u0026rsquo;optimisation : comment se faire passer pour un coach de vie, on verra comment optimiser des applications et la vie r√©elle.\n‚Üê Retour √† la section\n‚Üê Retour √† l‚Äôintroduction\n","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/l-execution/threads/","summary":"\u003cp\u003eDans le pr√©c√©dent article, \u003ca href=\"../sync-async/\"\u003eIMMV ‚Äî Section 2 ‚Äî Chapitre 1 ‚Äî Synchrone et Asynchrone, ou comment r√©agir au changement\u003c/a\u003e, on a vu les diff√©rents modes d\u0026rsquo;ex√©cution.\u003c/p\u003e\n\u003cp\u003eOn s\u0026rsquo;√©tait arr√™t√© sur le probl√®me suivant : Comment faire pour r√©pondre √† la mont√©e en charge, √† l\u0026rsquo;accumulation de t√¢ches ?\u003c/p\u003e\n\u003cp\u003eEh bien, dans cet article, on va voir comment on r√©sout ce probl√®me, en informatique \u003cstrong\u003ecomme dans la vraie vie\u003c/strong\u003e : les m√©canismes sont souvent tr√®s proches.\u003c/p\u003e","title":"IMMV ‚Äî Section 2 ‚Äî Chapitre 2 ‚Äî Monothread, Multithread, Parall√©lisme et Concurrence, je ne peux pas tout faire en m√™me temps !"},{"content":"Dans le pr√©c√©dent article IMVV ‚Äî Section 1 ‚Äî Chapitre 1 ‚Äî File ou Pile ? L\u0026rsquo;art de passer avant les autres on a d√©couvert les files et les piles. Cette fois, on va survoler plusieurs autres structures de donn√©es (data structures en anglais) qu\u0026rsquo;on utilise tr√®s souvent en informatique\u0026hellip; et dans la vraie vie.\nN\u0026rsquo;oublie pas que les objectifs de ces articles sont :\nTe donner une meilleure compr√©hension des bases de l‚Äôinformatique, T\u0026rsquo;inspirer pour analyser ou optimiser les situations du quotidien, ou peut-√™tre, qui sait, te donner envie d\u0026rsquo;explorer encore plus loin\u0026hellip; jusqu‚Äô√† en faire ton m√©tier. Le tableau ‚Äî la base de presque tout Tu as peut-√™tre remarqu√© dans le pr√©c√©dent article que la file et la pile se ressemblent beaucoup. En r√©alit√©, on peut les repr√©senter toutes les deux avec la m√™me structure : un tableau.\nEn informatique, le tableau (ou array en anglais) est l‚Äôune des structures les plus simples : on range des √©l√©ments les uns √† la suite des autres, dans un espace de taille fixe, et chaque √©l√©ment est rep√©r√© par sa position (ou index).\nPrenons un exemple simple : un tableau d\u0026rsquo;amis √† inviter pour un anniversaire, mais dans mon carnet d\u0026rsquo;adresses je n\u0026rsquo;ai que 6 places.\nAmis Manutea Vai Purotu Heiarii Reva (vide) index 0 1 2 3 4 5 L‚Äôindex est simplement la position de la personne dans le tableau, ce n\u0026rsquo;est pas un ordre.\nDans la plupart des langages informatiques, l\u0026rsquo;index commence √† 0, et pas √† 1.\nCet index nous permet d\u0026rsquo;acc√©der directement √† Vai, l\u0026rsquo;amie √† l\u0026rsquo;index 2 (ou 3√®me √©l√©ment), pour voir son num√©ro de t√©l√©phone par exemple.\nEt ce tableau peut se comporter diff√©remment selon la mani√®re dont on ajoute et retire les √©l√©ments. Par exemple, on peut le faire fonctionner comme une file ou une pile, simplement en changeant les r√®gles du jeu.\nSi c\u0026rsquo;est une file : On ajoute les amis √† la fin, par exemple, Jean arrive apr√®s Reva : Amis Manutea Vai Purotu Heiarii Reva Jean index 0 1 2 3 4 5 Et on traite depuis le d√©but, on retire Manutea du tableau : Amis Vai Purotu Heiarii Reva Jean (vide) index 0 1 2 3 4 5 Pour une pile : On ajoute les amis au d√©but, Jean arrive avant Manutea : Amis Jean Manutea Vai Purotu Heiarii Reva index 0 1 2 3 4 5 Et on traite toujours depuis le d√©but, on retire Jean du tableau : Amis Manutea Vai Purotu Heiarii Reva (vide) index 0 1 2 3 4 5 Dans les deux cas, on utilise un tableau pour stocker les amis. C‚Äôest la logique d‚Äôajout et de retrait qui transforme ce tableau en pile ou en file.\nüéØ Et c‚Äôest exactement pour √ßa que, lorsqu‚Äôon traite des dossiers empil√©s, il vaut mieux commencer par ceux du bas. Sinon, on inverse l‚Äôordre d‚Äôarriv√©e‚Ä¶ et ce n‚Äôest plus une file d‚Äôattente, mais une injustice organis√©e.\nS\u0026rsquo;il n\u0026rsquo;y a que 6 places, que se passe-t-il si j\u0026rsquo;ai 7 amis ?\nD\u0026rsquo;abord, je te f√©licite d\u0026rsquo;avoir autant d\u0026rsquo;amis. Ensuite, on peut s\u0026rsquo;en sortir, en achetant un carnet d\u0026rsquo;adresse qui a plus de places, et on recopie nos amis dans ce nouveau carnet.\nC\u0026rsquo;est similaire en informatique, on fait un nouveau tableau, plus grand, et on recopie.\nHeureusement, en informatique on a invent√© une autre structure.\nLa liste ‚Äî comme le tableau, mais dynamique La liste (ou list en anglais), c‚Äôest comme un tableau, mais en mieux : la taille n‚Äôest pas fixe.\nTu peux ajouter ou supprimer des √©l√©ments √† tout moment, sans te soucier du nombre de places pr√©vues au d√©part. Et √† tout moment, tu peux demander : ‚ÄúCombien d‚Äô√©l√©ments j‚Äôai dans cette liste ?‚Äù ‚Äî et obtenir une r√©ponse fiable.\nC‚Äôest la version souple du tableau, celle qu‚Äôon trouve dans la majorit√© des langages de programmation modernes.\nRefaisons les exemples de pile et de file, mais cette fois-ci avec des listes.\nSi c\u0026rsquo;est une file : On ajoute les amis √† la fin, par exemple, Jean arrive apr√®s Reva : Amis Manutea Vai Purotu Heiarii Reva Jean index 0 1 2 3 4 5 Nombre d\u0026rsquo;√©l√©ments: 6\nEt on traite depuis le d√©but, on retire Manutea du tableau : Amis Vai Purotu Heiarii Reva Jean index 0 1 2 3 4 Nombre d\u0026rsquo;√©l√©ments: 5\nPour une pile : On ajoute les amis au d√©but, Jean arrive avant Manutea : Amis Jean Manutea Vai Purotu Heiarii Reva index 0 1 2 3 4 5 Nombre d\u0026rsquo;√©l√©ments: 6\nEt on traite toujours depuis le d√©but, on retire Jean du tableau : Amis Manutea Vai Purotu Heiarii Reva index 0 1 2 3 4 Nombre d\u0026rsquo;√©l√©ments: 5\nOn remarque qu\u0026rsquo;il n\u0026rsquo;y a plus la case (vide) et le nombre d\u0026rsquo;√©l√©ments change.\nInstant Dev Pour permettre cette souplesse, la liste est plus gourmande en calculs:\ncalcul √† la vol√©e du nombre d\u0026rsquo;√©l√©ments, r√©allocation de m√©moire. Mais en vrai, √† moins que tu ne codes un satellite, une carte embarqu√©e, ou une console des ann√©es 80, o√π chaque octet compte, il y a peu de raisons d‚Äôutiliser un tableau fixe. Une liste dynamique t\u0026rsquo;√©vitera bien des migraines.\nLe tableau et la liste sont des structures tr√®s basiques et tr√®s puissantes, elles sont les bases de beaucoup d\u0026rsquo;autres structures qu\u0026rsquo;on verra par la suite.\nLe tableau associatif ‚Äî ou comment indexer On avait pris l\u0026rsquo;exemple d\u0026rsquo;un carnet d\u0026rsquo;adresses qu\u0026rsquo;on avait mis dans un tableau ou dans une liste. C\u0026rsquo;est d√©j√† tr√®s bien de pouvoir stocker ta liste d\u0026rsquo;amis, mais si tu as des centaines d\u0026rsquo;amis et que tu veux appeler Vai pour aller √† la mer, tu vas gal√©rer pour chercher dans ce carnet d\u0026rsquo;adresse.\nEn effet, avec les 2 derni√®res structures, tu dois parcourir les √©l√©ments un par un, jusqu\u0026rsquo;√† tomber sur Vai. Tu vas perdre beaucoup de temps √† chercher son num√©ro, √ßa va t\u0026rsquo;√©nerver, tu vas l\u0026rsquo;appeler, lui dire \u0026ldquo;mais quelle id√©e d\u0026rsquo;avoir un pr√©nom qui commence par V!\u0026rdquo;, elle va s\u0026rsquo;√©nerver, vous ne serez plus amis, alors que tu voulais juste aller surfer.\nJe m\u0026rsquo;emporte un peu? Peut-√™tre.\nPour r√©soudre ce probl√®me, en informatique on a invent√© le tableau associatif (ou map en anglais). On utilise le tableau, et on va profiter de l\u0026rsquo;index pour justement indexer les √©l√©ments.\nPour cela, on a besoin de r√©fl√©chir un peu:\nOn sait que l\u0026rsquo;index est une position dans le tableau, donc un nombre On sait que les pr√©noms commencent par une lettre (oui, je suis s√©rieux), on va supposer que c\u0026rsquo;est une lettre de l\u0026rsquo;alphabet, et pas un caract√®re sp√©cial comme *$@ On sait qu\u0026rsquo;il y a 26 lettres dans l\u0026rsquo;alphabet =\u0026gt; Eur√™ka: On peut utiliser la 1√®re lettre du pr√©nom, la transformer en index en utilisant sa position dans l\u0026rsquo;alphabet, et associer le pr√©nom √† cet index. On dit que l\u0026rsquo;index est une cl√© et que le pr√©nom est une valeur par exemple:\nManutea =\u0026gt; M =\u0026gt; M est la 14√®me lettre de l\u0026rsquo;alphabet, donc Manutea sera le 14√®me √©l√©ment. Pour rappel, l\u0026rsquo;index commence √† 0, donc M = index 13. cl√©: 13 valeur: Manutea\nPour Heiarii on aura: cl√©: 7 valeur: Heiarii\nCe qui nous donne:\nAmis (vide) (vide) (vide) (vide) (vide) (vide) (vide) Heiarii (vide) (vide) (vide) (vide) (vide) Manutea (vide) Purotu (vide) Reva (vide) (vide) (vide) Vai (vide) (vide) (vide) (vide) index 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 Avec cette map, on pourra facilement acc√©der aux informations de Vai, puisqu\u0026rsquo;on pourra juste aller directement √† l\u0026rsquo;index 21.\nInstant Dev En vrai, pour calculer l\u0026rsquo;index, on utilise une fonction de hachage (hash en anglais) qui permet de transformer les cl√©s en index. C\u0026rsquo;est pour √ßa qu\u0026rsquo;on appelle √ßa un HashMap en Java. Oui mais moi je n\u0026rsquo;ai pas envie de m\u0026rsquo;emb√™ter √† compter sur mes doigts √† quelle position est la lettre V\u0026hellip;\nTu as raison, dans la vraie vie, dans ton carnet d\u0026rsquo;adresse pour chaque lettre tu as une encoche o√π la lettre y est marqu√©e, et tu notes les informations dans les pages qui correspondent √† cette lettre.\nCarnet d'adresses papier, en rouge les encoches ‚Äî source: Wikim√©dia En informatique c\u0026rsquo;est le m√™me principe, sauf qu\u0026rsquo;on ne peut pas utiliser de lettre comme index, alors on est oblig√© de trouver cette astuce.\nEt en plus, il est nul ton carnet d\u0026rsquo;adresse, comment je fais si j\u0026rsquo;ai 2 amis qui s\u0026rsquo;appellent Vai et Vahine? Je mets Vahine dans la case juste apr√®s? Et si j\u0026rsquo;ai des centaines d\u0026rsquo;amis comme tu le disais au d√©but, je fais comment pour les mettre dans les 26 cases ?\nOk, tranquille, pas de stress.\nEn informatique, on peut combiner les structures, plut√¥t que d\u0026rsquo;associer un pr√©nom √† une lettre, on va associer une liste de pr√©noms √† une lettre. Ci-dessous on r√©√©crit notre map et on ajoute Vahine :\nCl√©s 7 13 15 17 21 ‚Üì ‚Üì ‚Üì ‚Üì ‚Üì Heiarii Manutea Purotu Reva Vai Vahine Comme tu l\u0026rsquo;as remarqu√©, au lieu de mettre directement les pr√©noms dans les cases, il y a des fl√®ches qui pointent vers des listes. On appelle √ßa un pointeur (ou pointer en anglais). c‚Äôest un m√©canisme qui permet √† l‚Äôordinateur de dire \u0026ldquo;Va chercher les donn√©es ailleurs.\u0026rdquo; Plut√¥t que de stocker directement les valeurs, on stocke l‚Äôendroit o√π elles se trouvent.\nC\u0026rsquo;est la plus grande force de l\u0026rsquo;informatique, on peut combiner diff√©rents concepts abstraits pour r√©pondre √† notre besoin.\nL\u0026rsquo;ensemble ‚Äî une structure unique Si comme moi tu fais ta liste de courses durant la semaine en pr√©vision des grandes courses du dimanche, tu as peut-√™tre d√©j√† eu la liste qui ressemble √† :\nlait oeufs pops viande salade oeufs Tu remarques que les oeufs apparaissent 2 fois. On appelle √ßa un doublon.\n√áa peut arriver si lundi tu t\u0026rsquo;es fait une omelette avec les derniers oeufs, tu les as not√©s pour en racheter. Puis que vendredi, tu voulais faire un g√¢teau, mais tu t\u0026rsquo;es souvenu que tu n\u0026rsquo;avais plus d\u0026rsquo;oeufs\u0026hellip; et alors tu les as r√©√©crits.\nC\u0026rsquo;est tr√®s sp√©cifique comme explication\u0026hellip; C\u0026rsquo;est ce qui t\u0026rsquo;es arriv√©, pas vrai?\nTu n\u0026rsquo;as pas de preuve. Cette accusation est fausse.\nBref, la liste et le tableau n\u0026rsquo;ont aucun moyen d\u0026rsquo;emp√™cher la pr√©sence de doublons dans leurs √©l√©ments. C\u0026rsquo;est pour √ßa qu\u0026rsquo;en informatique on a invent√© l\u0026rsquo;ensemble (ou set en anglais), une structure o√π chaque √©l√©ment est unique.\nPar contre, le set n\u0026rsquo;est pas ordonn√© comme le tableau et la liste. Il n\u0026rsquo;y a pas d\u0026rsquo;index permettant d\u0026rsquo;acc√©der directement au 2√®me ou 6√®me √©l√©ment.\nInstant Dev En informatique, pour faire un set, on utilise en fait une map o√π la cl√© est l\u0026rsquo;√©l√©ment. Le calcul de hash nous garantit qu\u0026rsquo;il ne peut pas y avoir de doublon. Et on met une valeur arbitraire dans la valeur associ√©e, comme 1 ou PRESENT.\nSi on veut une structure ordonn√©e sans doublons, on peut :\ncoder une liste avec une fonction d\u0026rsquo;ajout qui rejette les doublons, transformer un set en liste, utiliser une structure sp√©cialis√©e, comme LinkedHashSet en Java üìå Exemples dans la vie r√©elle L\u0026#39;ensemble des ingr√©dients qu‚Äôil te reste dans le frigo L\u0026#39;ensemble des invit√©s √† ton anniversaire üíª Exemples en informatique L\u0026#39;ensemble des num√©ros de passeport en Polyn√©sie fran√ßaise L\u0026#39;ensemble de tes amis Facebook Le graphe ‚Äî ou comment appeler l\u0026rsquo;ami d\u0026rsquo;un ami d\u0026rsquo;un ami Tu pr√©pares ta liste d‚Äôinvit√©s pour ton anniversaire, tu comptes inviter tout ton carnet d\u0026rsquo;adresses.\nEt l√†, tu r√©alises que tu n‚Äôas pas le contact de Paul. Tu l\u0026rsquo;as crois√© en soir√©e et il √©tait cool, tu voudrais l\u0026rsquo;inviter\u0026hellip; mais tu as oubli√© de lui demander son num√©ro.\nHeureusement, tu sais que Purotu le conna√Æt.\nTu l\u0026rsquo;appelles\u0026hellip; zut, elle n\u0026rsquo;a pas son num√©ro. Mais elle te donne le num√©ro de Tiare, une autre amie de Paul. Tu appelles Tiare, tu te pr√©sentes, tu l\u0026rsquo;invite √©galement car tu n\u0026rsquo;es pas un sauvage. Et tu lui demandes le num√©ro de Paul.\nBingo, elle l\u0026rsquo;a, tu appelles Paul et il est chaud pour venir √† ton anniversaire.\nLes liens entre ces personnes peuvent √™tre repr√©sent√©s par un graphe (ou graph en anglais).\nEt ce que tu viens de faire, sans t\u0026rsquo;en rendre compte, c\u0026rsquo;est un parcours de graphe, un algorithme !\n%%{ init: { 'theme': 'base', 'themeVariables': { 'primaryColor': '#ddd', 'primaryTextColor': '#007acc', 'primaryBorderColor': '#007acc', 'lineColor': '#007acc' } } }%% graph TD A[Toi] --- B[Manutea] A --- C[Vai] A --- D[Purotu] A --- E[Heiarii] A --- F[Reva] A --- G[Jean] D --- H[Tiare] H --- I[Paul] Graphe de relation entre les personnes Ce graphe est non orient√©, c\u0026rsquo;est-√†-dire qu\u0026rsquo;il n\u0026rsquo;y a pas de sens entre les √©l√©ments. Chaque case est un noeud, et chaque trait est une ar√™te.\nEffectivement pour √©viter de f√¢cher les personnes, on ne va pas dire \u0026ldquo;Purotu est l\u0026rsquo;ami de Tiare, mais Tiare n\u0026rsquo;est pas l\u0026rsquo;ami de Purotu\u0026rdquo;.\nPar contre, on peut utiliser un graphe orient√© pour repr√©senter les appels que tu as pass√©s.\n%%{ init: { 'theme': 'base', 'themeVariables': { 'primaryColor': '#ddd', 'primaryTextColor': '#007acc', 'primaryBorderColor': '#007acc', 'lineColor': '#007acc' } } }%% graph TD A[Toi] --\u003e B[Manutea] A --\u003e C[Vai] A --\u003e D[Purotu] A --\u003e E[Heiarii] A --\u003e F[Reva] A --\u003e G[Jean] A --\u003e H[Tiare] A --\u003e I[Paul] Graphe des appels que tu as pass√© Ici, chaque case est un noeud, tout comme le graphe non orient√©, mais cette fois-ci, chaque fl√®che est une ar√™te, et donne le sens d\u0026rsquo;appel.\nOn a donc les m√™mes donn√©es, mais on utilise la structure adapt√©e √† ce qu\u0026rsquo;on veut repr√©senter.\nEt c\u0026rsquo;est quoi le parcours de graphe?\nJe suis heureux que tu poses cette question, mais ta question d√©passe le cadre de cet article.\nConclusion On a d√©j√† vu pas mal de choses, je te laisse relire, essayer de combiner les structures entre elles, te renseigner sur internet en cherchant \u0026ldquo;structures de donn√©es\u0026rdquo; ou \u0026ldquo;data structure\u0026rdquo;.\nIl existe beaucoup de structures de donn√©es, celles qui sont pr√©sent√©es dans cet article sont juste les plus basiques, celles qu\u0026rsquo;on apprend dans les premi√®res heures de cours de programmation.\nSi tu souhaites continuer cette aventure, tu peux regarder la suite ici: IMVV ‚Äî Section 1 ‚Äî Chapitre 3 ‚Äî Structures de contr√¥le et algorithme, apprendre √† r√©fl√©chir\n‚Üê Retour √† la section\n‚Üê Retour √† l‚Äôintroduction\n","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/les-bases/structures-de-donnees/","summary":"\u003cp\u003eDans le pr√©c√©dent article \u003ca href=\"../file-et-pile/\"\u003eIMVV ‚Äî Section 1 ‚Äî Chapitre 1 ‚Äî File ou Pile ? L\u0026rsquo;art de passer avant les autres\u003c/a\u003e on a d√©couvert les files et les piles. Cette fois, on va survoler plusieurs autres \u003cstrong\u003estructures de donn√©es\u003c/strong\u003e (\u003cem\u003edata structures\u003c/em\u003e en anglais) qu\u0026rsquo;on utilise tr√®s souvent en informatique\u0026hellip; et dans la vraie vie.\u003c/p\u003e\n\u003cp\u003eN\u0026rsquo;oublie pas que les objectifs de ces articles sont :\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eTe donner une meilleure compr√©hension des bases de l‚Äôinformatique,\u003c/li\u003e\n\u003cli\u003eT\u0026rsquo;inspirer pour analyser ou optimiser les situations du quotidien,\u003c/li\u003e\n\u003cli\u003eou peut-√™tre, qui sait, te donner envie d\u0026rsquo;explorer encore plus loin\u0026hellip; jusqu‚Äô√† en faire ton m√©tier.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"le-tableau--la-base-de-presque-tout\"\u003eLe tableau ‚Äî la base de presque tout\u003c/h2\u003e\n\u003cp\u003eTu as peut-√™tre remarqu√© dans le pr√©c√©dent article que la \u003cstrong\u003efile\u003c/strong\u003e et la \u003cstrong\u003epile\u003c/strong\u003e se ressemblent beaucoup. En r√©alit√©, on peut les repr√©senter toutes les deux avec la m√™me structure : un \u003cstrong\u003etableau\u003c/strong\u003e.\u003c/p\u003e","title":"IMVV ‚Äî Section 1 ‚Äî Chapitre 2 ‚Äî Autres structures de donn√©es, j'organise mon bordel"},{"content":"Dans l\u0026rsquo;article pr√©c√©dent IMVV ‚Äî Section 1 ‚Äî Chapitre 2 ‚Äî Autres structures de donn√©es, j\u0026rsquo;organise mon bordel, on s\u0026rsquo;√©tait arr√™t√© sur ta question :\nEt c\u0026rsquo;est quoi le parcours de graphe?\nDans cet article, on va parler des structures de contr√¥le (control flow statements en anglais), qu\u0026rsquo;on utilise dans des algorithmes (algorithms en anglais).\nAvant d\u0026rsquo;expliquer l\u0026rsquo;algorithme que tu as fait, le parcours de graphe, on doit expliquer les structures de contr√¥le.\nN\u0026rsquo;oublie pas que les objectifs de ces articles sont :\nTe donner une meilleure compr√©hension des bases de l‚Äôinformatique, T\u0026rsquo;inspirer pour analyser ou optimiser les situations du quotidien, ou peut-√™tre, qui sait, te donner envie d\u0026rsquo;explorer encore plus loin\u0026hellip; jusqu‚Äô√† en faire ton m√©tier. Pseudo-code ‚Äî l\u0026rsquo;art de la cuisine Quand tu fais un g√¢teau, tu r√©alises les actions suivantes:\nPr√©chauffer le four Verser la farine dans le saladier Casser les oeufs et mettre le contenu dans le saladier Verser le lait dans le saladier Remuer Verser la pr√©paration dans un moule Mettre le moule au four Attendre 20 minutes Eteindre le four Sortir le moule du four D√©mouler Toute cette suite d\u0026rsquo;√©tapes est ce qu\u0026rsquo;on appelle un algorithme, et la fa√ßon dont on l\u0026rsquo;a √©crit, √ßa s\u0026rsquo;appelle du pseudo-code, parce que √ßa ressemble √† un langage de programmation, mais ce n\u0026rsquo;en est pas un.\nMais pourquoi on appelle √ßa un algorithme? on peut pas juste dire une suite d\u0026rsquo;actions?\nJe te laisse chercher sur internet pourquoi on appelle √ßa un algorithme.\nLa boucle for ‚Äî ou comment √™tre fiu Ton meilleur ami Manutea te demande \u0026ldquo;Comment tu as fait pour inviter toutes ces personnes √† ton anniversaire ?\u0026rdquo;. Laquelle de ces 2 phrases dirais-tu :\nJ\u0026rsquo;ai appel√© Manutea, puis j\u0026rsquo;ai appel√© Vai, puis j\u0026rsquo;ai appel√© Purotu, puis j\u0026rsquo;ai appel√© Heiarii, puis j\u0026rsquo;ai appel√© Reva, puis j\u0026rsquo;ai appel√© Jean, puis j\u0026rsquo;ai appel√© Tiare, puis j\u0026rsquo;ai appel√© Paul J\u0026rsquo;ai pris mon carnet d\u0026rsquo;adresses, puis pour chaque contact, j\u0026rsquo;ai appel√© le num√©ro correspondant La 1√®re phrase est un algorithme sans boucle (loop en anglais) : chaque action est √©crite explicitement.\nLa 2√®me, elle, utilise une boucle ‚Äî tu r√©p√®tes la m√™me action pour chaque contact. Sans forc√©ment y penser, tu utilises aussi une variable : un espace dans ta t√™te pour m√©moriser un num√©ro, que tu remplaces √† chaque nouvel appel.\nCette mani√®re de r√©p√©ter une action avec une variable, c‚Äôest exactement ce qu‚Äôun ordinateur fait quand on lui demande de parcourir une liste.\nSi tu relis bien la 2√®me phrase, tu verras que pour chaque est en gras. En anglais, pour chaque se dit for each, c\u0026rsquo;est pour √ßa qu\u0026rsquo;on l\u0026rsquo;appelle la boucle for dans la plupart des langages.\nSi on essayait d\u0026rsquo;√©crire un algorithme, sous forme de pseudo-code simple pour d√©crire la 2√®me phrase, √ßa donnerait :\nDans mon carnet d\u0026#39;adresses, pour chaque contact: J\u0026#39;ai appel√© le num√©ro correspondant au contact J\u0026#39;ai invit√© l\u0026#39;ami Fin pour \u0026ldquo;Dans mon carnet d\u0026rsquo;adresses, pour chaque contact\u0026rdquo; marque le d√©but de la boucle, et \u0026ldquo;Fin pour\u0026rdquo; marque la fin de la boucle.\nEntre ces 2 lignes, les actions \u0026ldquo;J\u0026rsquo;ai appel√© le num√©ro correspondant au contact\u0026rdquo; et \u0026ldquo;J\u0026rsquo;ai invit√© l\u0026rsquo;ami\u0026rdquo; forment ce qu\u0026rsquo;on appelle un bloc d\u0026rsquo;instructions.\nPar convention, on indente ce bloc ‚Äî on le d√©cale vers la droite ‚Äî pour montrer visuellement qu\u0026rsquo;il est √† l\u0026rsquo;int√©rieur de la boucle.\nOk, et quel est le rapport entre la boucle for et fiu comme marqu√© dans le titre ?\nSi on devait √©crire l\u0026rsquo;algorithme de la 1√®re phrase, √ßa donnerait :\nJ\u0026#39;ai appel√© Manutea J\u0026#39;ai appel√© Vai J\u0026#39;ai appel√© Purotu J\u0026#39;ai appel√© Heiarii J\u0026#39;ai appel√© Reva J\u0026#39;ai appel√© Jean J\u0026#39;ai appel√© Tiare J\u0026#39;ai appel√© Paul Chaque ligne est une action, donc il faut √©crire autant de lignes qu\u0026rsquo;il y a de contacts dans ta liste de contacts. Maintenant, que se passerait-il si tu devais inviter 100 personnes? Tu serais fiu.\nAlors qu\u0026rsquo;avec la boucle, tu n\u0026rsquo;as pas besoin de changer ton algorithme, c\u0026rsquo;est le m√™me, que tu aies 6 contacts ou 100.\nOui mais dans la vraie vie je dois quand m√™me appeler les amis un par un\nCet exemple n‚Äôest pas l√† pour dire que tu vas programmer ton t√©l√©phone ‚Äî mais pour te faire sentir la puissance de la boucle : un seul bloc, quelle que soit la longueur de ta liste.\nDans la vraie vie, tu fais un groupe Facebook avec tous tes amis et tu postes des messages d\u0026rsquo;informations dans le groupe pour organiser, idem pour un groupe SMS. Si t\u0026rsquo;es old school, tu postes un message dans le journal local et viendra qui verra. D\u0026rsquo;ailleurs j\u0026rsquo;en parlerai dans de prochains articles.\nLa boucle while ‚Äî ou comment faire ses devoirs avant d\u0026rsquo;aller jouer Quand tu √©tais plus jeune, on t\u0026rsquo;a s√ªrement d√©j√† dit \u0026ldquo;Fais d\u0026rsquo;abord tes devoirs, ensuite tu peux aller jouer\u0026rdquo;, ou autrement dit \u0026quot;Tant que tu n\u0026rsquo;a pas fini tes devoirs, tu travailles, ensuite tu peux aller jouer\u0026quot;.\nSi on devait √©crire cet algorithme, √ßa donnerait:\nTant que je n\u0026#39;ai pas fini mes devoirs: Je fais mes devoirs Fin tant que Je vais jouer \u0026ldquo;Tant que je n\u0026rsquo;ai pas fini mes devoirs\u0026rdquo; marque le d√©but de la boucle, et \u0026ldquo;Fin tant que\u0026rdquo; marque la fin de la boucle.\nEntre ces 2 lignes, l\u0026rsquo;action \u0026ldquo;Je fais mes devoirs\u0026rdquo; forme le bloc d\u0026rsquo;instructions.\nTu l\u0026rsquo;auras remarqu√©, c\u0026rsquo;est tr√®s similaire √† la boucle for, sauf qu\u0026rsquo;au lieu de parcourir des √©l√©ments, on v√©rifie une condition, et on r√©p√®te la boucle si la condition n\u0026rsquo;est remplie.\nOn appelle √ßa une boucle while, car Tant que se dit while en anglais.\nEnsuite, une fois que les devoirs sont finis, on sort de la boucle, on fait la suite des instructions, donc \u0026ldquo;Je vais jouer\u0026rdquo;. On aurait aussi pu avoir d\u0026rsquo;autres instructions apr√®s la boucle for, c\u0026rsquo;est juste que l\u0026rsquo;exemple ne s\u0026rsquo;y pr√™tait pas.\nMais alors‚Ä¶ pourquoi deux types de boucles si elles font (presque) la m√™me chose ? Pourquoi une boucle for, et une boucle while ?\nEn fait, en fonction du probl√®me qu\u0026rsquo;on veut r√©soudre :\ndans certains cas on pourra compter, et dans ce cas on pr√©f√®rera utiliser une boucle for dans certains cas on ne pourra pas compter, et dans ce cas on pr√©f√®rera utiliser une boucle while Par exemple, pour un enfant qui joue dehors:\nTant qu\u0026#39;il fait beau: Je joue Fin tant que Ici, impossible de compter.\nMais tu commences peut-√™tre √† te rendre compte d\u0026rsquo;une supercherie.\nInstant Dev üí° En r√©alit√©, toutes les boucles for peuvent √™tre r√©√©crites en boucle while.\nLa boucle for n‚Äôest qu‚Äôune boucle while optimis√©e, √©crite pour √™tre plus simple √† lire‚Ä¶ quand on sait compter.\nLes 2 types de boucles sont des instructions d\u0026rsquo;it√©ration, √† la diff√©rence des instructions simples comme \u0026ldquo;Je joue\u0026rdquo;, les instructions d\u0026rsquo;it√©ration permettre d\u0026rsquo;ex√©cuter des blocs d\u0026rsquo;instructions de mani√®re r√©p√©t√©e.\nBravo, tu commences √† r√©fl√©chir comme un d√©veloppeur !\nExplications\nPour rappel:\ndans une liste, l\u0026rsquo;index commence √† 0, dans une liste, le dernier index est √©gal au nombre d\u0026rsquo;√©l√©ments de la liste moins 1 Amis Manutea Vai Purotu Heiarii Reva Jean Tiare Paul index 0 1 2 3 4 5 6 7 Nombre d\u0026rsquo;√©l√©ments: 8\nune variable c\u0026rsquo;est juste un espace m√©moire o√π on stocke une donn√©e (un tableau, une liste, un pr√©nom, un num√©ro de t√©l√©phone) Si on reprend l\u0026rsquo;exemple de la boucle for:\nDans mon carnet d\u0026#39;adresses, pour chaque contact: J\u0026#39;appelle le num√©ro correspondant au contact J\u0026#39;invite l\u0026#39;ami Fin pour Derri√®re, voici plut√¥t ce que fait un ordinateur (de mani√®re simplifi√©e) :\nJe cr√©e une variable \u0026#34;index\u0026#34;, qui vaut 0 Tant que \u0026#34;index\u0026#34; est inf√©rieur au nombre d\u0026#39;√©l√©ments (8) du carnet d\u0026#39;adresses: Je regarde le contact qui se trouve √† l\u0026#39;\u0026#34;index\u0026#34; dans le carnet d\u0026#39;adresses Je r√©cup√®re son num√©ro Je l\u0026#39;invite \u0026#34;index\u0026#34; prend la valeur \u0026#34;index\u0026#34; + 1 Fin tant que Comme tu le vois, c\u0026rsquo;est un peu plus compliqu√©, c\u0026rsquo;est pour √ßa qu\u0026rsquo;on pr√©f√®re utiliser une boucle for quand on peut compter.\nL\u0026rsquo;instruction conditionnelle ‚Äî ou pourquoi il faut respecter le code de la route Juste au-dessus, on parlait de condition dans la boucle while. Mais on n\u0026rsquo;a jamais expliqu√© ce que c\u0026rsquo;√©tait.\nUne condition est une question qu\u0026rsquo;on se pose, et la r√©ponse est soit ‚Äúoui‚Äù, soit ‚Äúnon‚Äù ‚Äî jamais les deux, jamais \u0026ldquo;un peu\u0026rdquo;.\nQuand on √©crit \u0026ldquo;Tant que je n\u0026rsquo;ai pas fini mes devoirs\u0026rdquo;, √† chaque r√©p√©tition on pose la question \u0026ldquo;Est-ce que j\u0026rsquo;ai fini mes devoirs?\u0026rdquo;.\nEn informatique, comme dans la vraie vie, une condition doit √™tre claire.\nOn peut utiliser ce concept pour faire des branchements dans notre code, dans une instruction conditionnelle (conditional statement en anglais).\nPrenons un exemple simple : tu es en voiture, tu approches un feu tricolore. Il est vert.\nQue fais-tu si le feu passe √† l‚Äôorange juste devant toi‚ÄØ?\nVoici un algorithme qui repr√©sente cette situation :\nSi le feu passe au orange, alors: Tu t\u0026#39;arr√™tes Sinon (c\u0026#39;est toujours vert): Tu continues et traverse l\u0026#39;intersection Fin si \u0026ldquo;Si le feu passe au orange,\u0026rdquo; marque le d√©but de l\u0026rsquo;instruction conditionnelle, \u0026ldquo;alors\u0026rdquo; marque la branche du si, \u0026ldquo;Sinon\u0026rdquo; marque la branche du sinon, et \u0026ldquo;Fin si\u0026rdquo; marque la fin de l\u0026rsquo;instruction conditionnelle.\nDe la m√™me mani√®re que pour les boucles, chaque branche est un bloc d\u0026rsquo;instructions. Comme pour les boucles, chaque branche forme un bloc d‚Äôinstructions, qu‚Äôon indente pour bien le rep√©rer.\nPour visualiser, imagine un arbre : chaque fois qu‚Äôune condition est test√©e, tu choisis une branche √† suivre. Le chemin d√©pend de tes r√©ponses.\nRevenons √† notre parcours de graphe Rappels Tu avais appel√© tes amis pour les inviter √† ton anniversaire, et tu avais √©t√© jusqu\u0026rsquo;au bout du monde, en sautant de relations en relations, pour inviter Paul. Tu avais fait ces actions :\nTu comptes inviter tout ton carnet d\u0026#39;adresses. Tu r√©alises que tu n‚Äôas pas le contact de Paul. Tu l\u0026#39;as crois√© en soir√©e et il √©tait cool, tu voudrais l\u0026#39;inviter... mais t\u0026#39;as oubli√© de lui demander son num√©ro. Heureusement, tu sais que Purotu le conna√Æt. Tu l\u0026#39;appelles... zut, elle n\u0026#39;a pas son num√©ro. Mais elle te donne le num√©ro de Tiare, une autre amie de Paul. Tu appelles Tiare, tu te pr√©sentes, tu l\u0026#39;invites √©galement car tu n\u0026#39;es pas un sauvage. Et tu lui demandes le num√©ro de Paul. Bingo, elle l\u0026#39;a, tu appelles Paul et il est chaud pour venir √† ton anniversaire. Ci-dessous se trouve le graphe de relation entre les personnes, un graphe non orient√©.\n%%{ init: { 'theme': 'base', 'themeVariables': { 'primaryColor': '#ddd', 'primaryTextColor': '#007acc', 'primaryBorderColor': '#007acc', 'lineColor': '#007acc' } } }%% graph TD A[Toi] --- B[Manutea] A --- C[Vai] A --- D[Purotu] A --- E[Heiarii] A --- F[Reva] A --- G[Jean] D --- H[Tiare] H --- I[Paul] Graphe de relation entre les personnes En se basant sur ce qu\u0026rsquo;on a appris dans cet article, on va √©crire un algorithme pour repr√©senter les actions que tu as r√©alis√©es pour inviter tes amis :\n# √âtape 1 : inviter tous mes amis directs (les noeuds les plus proches de \u0026#34;Toi\u0026#34; dans le graphe) Je cr√©e une variable \u0026#34;liste d\u0026#39;amis\u0026#34;, contenant tous mes amis directs Je cr√©e une variable \u0026#34;ami\u0026#34;, le contact courant Dans la \u0026#34;liste d\u0026#39;amis\u0026#34;, pour chaque \u0026#34;ami\u0026#34; : J\u0026#39;appelle \u0026#34;ami\u0026#34; Si \u0026#34;ami\u0026#34; r√©pond, alors : Je l\u0026#39;invite √† mon anniversaire Fin si Fin pour # √âtape 2 : retrouver Paul (en parcourant le graphe en largeur) Je cr√©e une variable \u0026#34;file\u0026#34;, initialis√©e avec la \u0026#34;liste d\u0026#39;amis\u0026#34; Je cr√©e une variable \u0026#34;visit√©s\u0026#34;, une liste vide Tant que la \u0026#34;file\u0026#34; n‚Äôest pas vide : Je prends le premier √©l√©ment de la \u0026#34;file\u0026#34;, je le stocke dans \u0026#34;ami\u0026#34; Si \u0026#34;ami\u0026#34; n‚Äôest pas dans \u0026#34;visit√©s\u0026#34;, alors : J‚Äôajoute \u0026#34;ami\u0026#34; √† \u0026#34;visit√©s\u0026#34; J\u0026#39;appelle \u0026#34;ami\u0026#34; Si \u0026#34;ami\u0026#34; r√©pond, alors : Je lui demande s‚Äôil conna√Æt Paul Si \u0026#34;ami\u0026#34; me donne le num√©ro de Paul : Je cr√©e une variable \u0026#34;Paul\u0026#34; J\u0026#39;appelle \u0026#34;Paul\u0026#34; Si \u0026#34;Paul\u0026#34; r√©pond, alors : Je l‚Äôinvite √† mon anniversaire Je termine la recherche Fin si Sinon : Je r√©cup√®re la liste des amis de \u0026#34;ami\u0026#34; Pour chaque \u0026#34;contact\u0026#34; dans cette liste : J‚Äôajoute \u0026#34;contact\u0026#34; √† la \u0026#34;file\u0026#34; Fin pour Fin si Fin si Fin si Fin tant que √Ä premi√®re vue, √ßa a l\u0026rsquo;air compliqu√©. Mais en fait si tu prends le temps de d√©cortiquer, de bien regarder, tu verras que ce sont juste les actions que tu as r√©alis√©s plus haut, mais dans un langage plus proche de ce que fait un ordinateur.\nLa seule chose qu\u0026rsquo;on a fait en plus des concepts de base, c\u0026rsquo;est qu\u0026rsquo;on a combin√© les structures de contr√¥le et les structures de donn√©es, et le tout nous donne notre algorithme de parcours de graphe !\nInstant Dev üí° On a parcouru le graphe en largeur, c\u0026rsquo;est-√†-dire qu\u0026rsquo;on a d\u0026rsquo;abord regard√© les noeuds voisins de notre point de d√©part.\nD\u0026rsquo;autres algorithmes connus et enseign√©s en informatique sont le parcours en profondeur, l\u0026rsquo;algorithme de Dijkstra, A* et Floyd-Warshall, tu peux regarder sur internet si √ßa t\u0026rsquo;int√©resse.\nConclusion Dans cet article on a appris ce que sont :\nLes structures de contr√¥le, Les boucles, Les conditions, Les variables, Les algorithmes. Il existe d\u0026rsquo;autres structures de contr√¥le, des types de variables, et des algorithmes qu\u0026rsquo;on peut r√©utiliser pour r√©pondre √† beaucoup de probl√®mes. Comme d\u0026rsquo;habitude, je te laisse chercher sur internet si tu veux aller plus loin.\nMais le plus important, c\u0026rsquo;est que tu commences √† r√©fl√©chir comme un d√©veloppeur, et √† comprendre le pseudo-code. Dans la vraie vie, si tu as un probl√®me complexe √† r√©soudre, tu peux essayer de l\u0026rsquo;√©crire comme on l\u0026rsquo;a fait pour le parcours de graphe. Prends ton temps et d√©compose le probl√®me.\nNous avons fini cette section \u0026ldquo;IMMV ‚Äî Section 1 ‚Äî Les Bases : structures et contr√¥le\u0026rdquo;, dans cette section, nous avons √©galement vu les structures de donn√©es.\nDans la prochaine section, IMMV ‚Äî Section 2 ‚Äî L\u0026rsquo;ex√©cution : comment faire des actions ?, nous verrons que l\u0026rsquo;ordinateur et l\u0026rsquo;humain font les actions de mani√®re tr√®s similaire.\n‚Üê Retour √† la section\n‚Üê Retour √† l‚Äôintroduction\n","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/les-bases/structures-de-controle/","summary":"\u003cp\u003eDans l\u0026rsquo;article pr√©c√©dent \u003ca href=\"../structures-de-donnees/\"\u003eIMVV ‚Äî Section 1 ‚Äî Chapitre 2 ‚Äî Autres structures de donn√©es, j\u0026rsquo;organise mon bordel\u003c/a\u003e, on s\u0026rsquo;√©tait arr√™t√© sur ta question :\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eEt c\u0026rsquo;est quoi le parcours de graphe?\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eDans cet article, on va parler des \u003cstrong\u003estructures de contr√¥le\u003c/strong\u003e (\u003cem\u003econtrol flow statements\u003c/em\u003e en anglais), qu\u0026rsquo;on utilise dans des \u003cstrong\u003ealgorithmes\u003c/strong\u003e (\u003cem\u003ealgorithms\u003c/em\u003e en anglais).\u003c/p\u003e\n\u003cp\u003eAvant d\u0026rsquo;expliquer l\u0026rsquo;algorithme que tu as fait, le \u003cstrong\u003eparcours de graphe\u003c/strong\u003e, on doit expliquer les structures de contr√¥le.\u003c/p\u003e","title":"IMVV ‚Äî Section 1 ‚Äî Chapitre 3 ‚Äî Structures de contr√¥le et algorithme, apprendre √† r√©fl√©chir"},{"content":"Pr√©c√©demment, on a vu qu\u0026rsquo;en rajoutant des serveurs, on pouvait servir plus de familles. Dans cette section on verra diff√©rents tips permettant d\u0026rsquo;optimiser un programme existant et la vie r√©elle.\nChapitres IMVV ‚Äî Section 3 ‚Äî Chapitre 1 ‚Äî La m√©moire, ou comment √©viter les p√©nuries dans un magasin IMVV ‚Äî Section 3 ‚Äî Chapitre 2 ‚Äî M√©mo√Øsation et Lazy loading, les techniques du fain√©ant ultime ","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/optimisation/optimisation/","summary":"\u003cp\u003ePr√©c√©demment, on a vu qu\u0026rsquo;en rajoutant des serveurs, on pouvait servir plus de familles. Dans cette section on verra diff√©rents tips permettant d\u0026rsquo;optimiser un programme existant et la vie r√©elle.\u003c/p\u003e\n\u003ch1 id=\"chapitres\"\u003eChapitres\u003c/h1\u003e\n\n\n\u003cul\u003e\n  \n\t\t\n\t\n\t\t\n    \t\n      \t\u003cli\u003e\u003ca href=\"/blog.dev/posts/miroir-informatique-vraie-vie/optimisation/memoire/\"\u003eIMVV ‚Äî Section 3 ‚Äî Chapitre 1 ‚Äî La m√©moire, ou comment √©viter les p√©nuries dans un magasin\u003c/a\u003e\u003c/li\u003e\n    \t\n  \t\n\t\n\t\t\n    \t\n      \t\u003cli\u003e\u003ca href=\"/blog.dev/posts/miroir-informatique-vraie-vie/optimisation/memoisation/\"\u003eIMVV ‚Äî Section 3 ‚Äî Chapitre 2 ‚Äî M√©mo√Øsation et Lazy loading, les techniques du fain√©ant ultime\u003c/a\u003e\u003c/li\u003e\n    \t\n  \t\n\t\n\u003c/ul\u003e","title":"IMMV ‚Äî Section 3 ‚Äî L'optimisation : comment se faire passer pour un coach de vie"},{"content":"Dans cette section, nous verrons comment les actions sont ex√©cut√©es, par les ordinateurs et par les personnes. Et on verra quelques pistes pour r√©pondre √† une accumulation de t√¢ches.\nChapitres IMMV ‚Äî Section 2 ‚Äî Chapitre 1 ‚Äî Synchrone et Asynchrone, ou comment r√©agir au changement IMMV ‚Äî Section 2 ‚Äî Chapitre 2 ‚Äî Monothread, Multithread, Parall√©lisme et Concurrence, je ne peux pas tout faire en m√™me temps ! ","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/l-execution/l-execution/","summary":"\u003cp\u003eDans cette section, nous verrons comment les actions sont ex√©cut√©es, par les ordinateurs et par les personnes. Et on verra quelques pistes pour r√©pondre √† une accumulation de t√¢ches.\u003c/p\u003e\n\u003ch1 id=\"chapitres\"\u003eChapitres\u003c/h1\u003e\n\n\n\u003cul\u003e\n  \n\t\t\n\t\n\t\t\n    \t\n      \t\u003cli\u003e\u003ca href=\"/blog.dev/posts/miroir-informatique-vraie-vie/l-execution/sync-async/\"\u003eIMMV ‚Äî Section 2 ‚Äî Chapitre 1 ‚Äî Synchrone et Asynchrone, ou comment r√©agir au changement\u003c/a\u003e\u003c/li\u003e\n    \t\n  \t\n\t\n\t\t\n    \t\n      \t\u003cli\u003e\u003ca href=\"/blog.dev/posts/miroir-informatique-vraie-vie/l-execution/threads/\"\u003eIMMV ‚Äî Section 2 ‚Äî Chapitre 2 ‚Äî Monothread, Multithread, Parall√©lisme et Concurrence, je ne peux pas tout faire en m√™me temps !\u003c/a\u003e\u003c/li\u003e\n    \t\n  \t\n\t\n\u003c/ul\u003e","title":"IMMV ‚Äî Section 2 ‚Äî L'ex√©cution : comment faire des actions ?"},{"content":"Dans cette section, nous verrons les bases permettant de stocker et manipuler des donn√©es.\nChapitres IMVV ‚Äî Section 1 ‚Äî Chapitre 1 ‚Äî File ou Pile ? L\u0026#39;art de passer avant les autres IMVV ‚Äî Section 1 ‚Äî Chapitre 2 ‚Äî Autres structures de donn√©es, j\u0026#39;organise mon bordel IMVV ‚Äî Section 1 ‚Äî Chapitre 3 ‚Äî Structures de contr√¥le et algorithme, apprendre √† r√©fl√©chir ","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/les-bases/les-bases/","summary":"\u003cp\u003eDans cette section, nous verrons les bases permettant de stocker et manipuler des donn√©es.\u003c/p\u003e\n\u003ch1 id=\"chapitres\"\u003eChapitres\u003c/h1\u003e\n\n\n\u003cul\u003e\n  \n\t\t\n\t\n\t\t\n    \t\n      \t\u003cli\u003e\u003ca href=\"/blog.dev/posts/miroir-informatique-vraie-vie/les-bases/file-et-pile/\"\u003eIMVV ‚Äî Section 1 ‚Äî Chapitre 1 ‚Äî File ou Pile ? L\u0026#39;art de passer avant les autres\u003c/a\u003e\u003c/li\u003e\n    \t\n  \t\n\t\n\t\t\n    \t\n      \t\u003cli\u003e\u003ca href=\"/blog.dev/posts/miroir-informatique-vraie-vie/les-bases/structures-de-donnees/\"\u003eIMVV ‚Äî Section 1 ‚Äî Chapitre 2 ‚Äî Autres structures de donn√©es, j\u0026#39;organise mon bordel\u003c/a\u003e\u003c/li\u003e\n    \t\n  \t\n\t\n\t\t\n    \t\n      \t\u003cli\u003e\u003ca href=\"/blog.dev/posts/miroir-informatique-vraie-vie/les-bases/structures-de-controle/\"\u003eIMVV ‚Äî Section 1 ‚Äî Chapitre 3 ‚Äî Structures de contr√¥le et algorithme, apprendre √† r√©fl√©chir\u003c/a\u003e\u003c/li\u003e\n    \t\n  \t\n\t\n\u003c/ul\u003e","title":"IMMV ‚Äî Section 1 ‚Äî Les bases : structures et contr√¥le"},{"content":"\u0026lsquo;Ia ora na,\nL\u0026rsquo;informatique semble souvent obscure pour beaucoup. Quand je dis que je suis ing√©nieur informatique, on me demande r√©guli√®rement : ¬´ Mais tu fais quoi exactement ? ¬ª.\nAvec le temps, j‚Äôai pris l‚Äôhabitude de vulgariser mon m√©tier. Et ce qui fonctionne le mieux, ce sont les exemples concrets tir√©s de la vie quotidienne.\nEn √©cole d\u0026rsquo;ing√©nieur, j\u0026rsquo;apprenais beaucoup plus facilement l\u0026rsquo;informatique en partant de situations r√©elles. √Ä travers cette s√©rie d‚Äôarticles, \u0026ldquo;L‚Äôinformatique, un miroir de la vraie vie\u0026rdquo; (abr√©g√© IMVV), je vais tenter d‚Äôexpliquer des concepts informatiques en m‚Äôappuyant sur des sc√®nes famili√®res du quotidien, sur un ton l√©ger. Parce que finalement, coder un programme ou g√©rer une file d‚Äôattente au magasin, ce n‚Äôest pas si diff√©rent.\nInformations de lecture Avant de lire les articles list√©s en bas de cette page, quelques informations pour vous faciliter la lecture :\nIl y a un mode sombre et un mode clair : En haut de chaque page se trouve une ic√¥ne pour interchanger entre les modes de lecture sombre et clair\nJ\u0026rsquo;utiliserai des apart√©s pour les d√©veloppeurs,\nInstant Dev Ceci est un apart√© pour les d√©veloppeurs, si tu es non d√©veloppeur tu peux lire, mais tu auras peut-√™tre mal √† la t√™te. J\u0026rsquo;utiliserai des interjections de lecteur, J\u0026rsquo;interviens comme si j\u0026rsquo;√©tais toi, lecteur, pour aider l\u0026rsquo;auteur de ce blog √† rendre ces articles dynamiques\nCette s√©rie d\u0026rsquo;articles n\u0026rsquo;est pas un cours d\u0026rsquo;informatique, vous n\u0026rsquo;apprendrez pas √† d√©velopper juste en suivant ces articles. Mot de fin Que tu sois curieux, d√©butant ou simplement en qu√™te de sens dans ce monde num√©rique, cette s√©rie pourrait bien t‚Äôapporter quelque chose.\nTu y trouveras peut-√™tre :\nune meilleure compr√©hension des bases de l‚Äôinformatique, des id√©es pour analyser ou optimiser les situations du quotidien, ou m√™me, qui sait, l‚Äôenvie de plonger plus loin dans ce domaine‚Ä¶ jusqu‚Äô√† en faire ton m√©tier. Bien s√ªr, cette s√©rie n‚Äôexplorera qu‚Äôune infime partie de ce vaste domaine qu‚Äôest l‚Äôinformatique. Apr√®s tout, peut-on vraiment expliquer enti√®rement l\u0026rsquo;informatique\u0026hellip; un domaine qui, justement, est le miroir de la vie* ?\n*: cette analogie est √† prendre avec recul : l‚Äôinformatique ne refl√®te pas toute la complexit√© de la vie.\nLes articles de la s√©rie (En cours de r√©daction) IMMV ‚Äî Section 1 ‚Äî Les bases : structures et contr√¥le IMMV ‚Äî Section 1 ‚Äî Les bases : structures et contr√¥le IMVV ‚Äî Section 1 ‚Äî Chapitre 1 ‚Äî File ou Pile ? L\u0026#39;art de passer avant les autres IMVV ‚Äî Section 1 ‚Äî Chapitre 2 ‚Äî Autres structures de donn√©es, j\u0026#39;organise mon bordel IMVV ‚Äî Section 1 ‚Äî Chapitre 3 ‚Äî Structures de contr√¥le et algorithme, apprendre √† r√©fl√©chir IMMV ‚Äî Section 2 ‚Äî L\u0026#39;ex√©cution : comment faire des actions ? IMMV ‚Äî Section 2 ‚Äî L\u0026#39;ex√©cution : comment faire des actions ? IMMV ‚Äî Section 2 ‚Äî Chapitre 1 ‚Äî Synchrone et Asynchrone, ou comment r√©agir au changement IMMV ‚Äî Section 2 ‚Äî Chapitre 2 ‚Äî Monothread, Multithread, Parall√©lisme et Concurrence, je ne peux pas tout faire en m√™me temps ! IMMV ‚Äî Section 3 ‚Äî L\u0026#39;optimisation : comment se faire passer pour un coach de vie IMMV ‚Äî Section 3 ‚Äî L\u0026#39;optimisation : comment se faire passer pour un coach de vie IMVV ‚Äî Section 3 ‚Äî Chapitre 1 ‚Äî La m√©moire, ou comment √©viter les p√©nuries dans un magasin IMVV ‚Äî Section 3 ‚Äî Chapitre 2 ‚Äî M√©mo√Øsation et Lazy loading, les techniques du fain√©ant ultime ","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/introduction/","summary":"\u003cp\u003e\u0026lsquo;Ia ora na,\u003c/p\u003e\n\u003cp\u003eL\u0026rsquo;informatique semble souvent obscure pour beaucoup. Quand je dis que je suis ing√©nieur informatique, on me demande r√©guli√®rement : ¬´ Mais tu fais quoi exactement ? ¬ª.\u003c/p\u003e\n\u003cp\u003eAvec le temps, j‚Äôai pris l‚Äôhabitude de vulgariser mon m√©tier. Et ce qui fonctionne le mieux, ce sont les exemples concrets tir√©s de la vie quotidienne.\u003c/p\u003e\n\u003cp\u003eEn √©cole d\u0026rsquo;ing√©nieur, j\u0026rsquo;apprenais beaucoup plus facilement l\u0026rsquo;informatique en partant de situations r√©elles.\n√Ä travers cette s√©rie d‚Äôarticles, \u003cstrong\u003e\u0026ldquo;L‚Äôinformatique, un miroir de la vraie vie\u0026rdquo;\u003c/strong\u003e (abr√©g√© \u003cem\u003eIMVV\u003c/em\u003e), je vais tenter d‚Äôexpliquer des concepts informatiques en m‚Äôappuyant sur des sc√®nes famili√®res du quotidien, sur un ton l√©ger.\nParce que finalement, coder un programme ou g√©rer une file d‚Äôattente au magasin, ce n‚Äôest pas si diff√©rent.\u003c/p\u003e","title":"IMMV - Introduction - L'informatique, un miroir de la vraie vie"},{"content":"Introduction Cet article est un aper√ßu tr√®s rapide des moyens de paiement en Polyn√©sie Fran√ßaise.\nUpdate (12/05/2022): suite √† quelques feedback, je me rend compte que cet article est √† destination des d√©veloppeurs de site de e-shopping, des commer√ßants, de mes confr√®res mon√©ticiens. Cet article sera complexe √† lire si vous n\u0026rsquo;avez jamais travaill√© avec un TPE, avec une plateforme de paiement, avec des cartes bancaires.\nDisclaimer: Au moment o√π j\u0026rsquo;√©cris cet article, je travaille √† l\u0026rsquo;Oc√©anienne des Services Bancaires (OSB), Ces articles ne sont pas sponsoris√©s par OSB, et j\u0026rsquo;encourage les gens √† faire des tutoriels pour les solutions des autres fournisseurs de solutions de paiement.\nLes diff√©rents types de carte En Polyn√©sie Fran√ßaise, il est possible de payer avec plusieurs types de cartes.\nCarte Bancaire (anciennement Carte Bleue, co-brand√©es ou non de Visa ou Mastercard), American Express (AMEX), Cartes privatives (Socredo Verte / Gold, Banque de Polyn√©sie Hoa, CCP de Fare Rata, Carte Tiare de la Banque de Tahiti), Union Pay International (UPI), Discover, Japan Credit Bureau (JCB) Les 3 derniers types de cartes sont surtout utilis√©s par les touristes.\nLes cartes privatives composent la majorit√© des cartes d√©tenues par les habitants de la Polyn√©sie Fran√ßaise.\nPourquoi autant de personnes ont une carte privative ? Les cartes privatives sont propos√©es par les diff√©rentes banques locales (√† l\u0026rsquo;exception d\u0026rsquo;OFINA qui √©met exclusivement les cartes AMEX). Il s\u0026rsquo;agit des banques Socredo, Banque de Tahiti, Banque de Polyn√©sie, et Fare Rata.\nLes cartes privatives sont soumises √† des r√©glementations et des frais moins co√ªteux que les cartes internationales.\nEn outre, elles sont uniquement r√©gul√©es par les banques locales contrairement aux cartes bancaires internationales, qui sont non seulement r√©gul√©es par les banques locales, mais aussi par les r√©seaux internationaux (CB, Visa, Mastercard, Union Pay, etc.).\nC\u0026rsquo;est en partie √† cause de ces r√©glementations et frais moins co√ªteux que les clients des banques doivent remplir moins de conditions pour avoir une carte privative. C\u0026rsquo;est pour cela que les cartes privatives sont plus r√©pandues sur le territoire.\nNotes:\nLes r√©seaux peuvent d√©cider d\u0026rsquo;appliquer des amendes voire de d√©sactiver le flux vers un acteur mon√©taire (banque, processeur de paiement, etc.) si celui-ci ne respecte pas la r√©glementation. Cette r√©glementation est mise √† jour r√©guli√®rement.\nPour les cartes privatives, ce sont les banques locales qui imposent leur r√©glementation, par abus de langage, on parle aussi de r√©seau privatif pour d√©signer l\u0026rsquo;ensemble de ces banques.\nCes r√©glementations sont suivies par les banques centrales des pays, par exemple l\u0026rsquo;IEOM en Polyn√©sie Fran√ßaise.\nJ\u0026rsquo;ai inclus la carte Tiare de la Banque de Tahiti dans les cartes privatives car elle a les m√™mes limitations g√©ographiques que celles-ci, et elle fonctionne aussi en m√©tropole, mais il s\u0026rsquo;agit bien d\u0026rsquo;une CB, donc elle est soumise aux r√©glementations CB.\nLes cartes Socredo privatives sont maintenant co-brand√©es UPI, mais il y a bien 2 applications dans la carte, sur le territoire, c\u0026rsquo;est l\u0026rsquo;application privative qui est utilis√©e, √† l\u0026rsquo;international, c\u0026rsquo;est l\u0026rsquo;application UPI qui est utilis√©e.\nFonctionnement des transactions Le sch√©ma √† 4 coins est l\u0026rsquo;un des sch√©mas de r√©f√©rence de la mon√©tique. Il explique les entit√©s qui entrent en jeu dans une transaction.\nLa banque √©mettrice √©met la carte et la fournit au porteur.\nLa banque acqu√©reuse fournit un contrat accepteur au commer√ßant, afin que celui-ci puisse encaisser les paiements avec les cartes, moyennant une commission, en plus des services annexes autour de l\u0026rsquo;encaissement (exemple: relev√© TPE). Les TPE et solutions de paiement en ligne sont des services d\u0026rsquo;encaissement.\nUn syst√®me d\u0026rsquo;acceptation est un logiciel ou un ensemble de logiciels, qui permet d\u0026rsquo;encaisser une carte bancaire, par exemple les TPE et les plateformes de paiement en ligne.\nIl existe 2 modes de fonctionnement pour le d√©roulement d\u0026rsquo;un paiement:\nle mode single message le mode dual message Lorsque vous payez avec votre carte, vous r√©alisez une transaction. Si toutes les r√®gles de gestion sont valid√©es, la transaction est autoris√©e.\nEn single message, la transaction autoris√©e est directement transform√©e en mouvement financier, i.e. un enregistrement est cr√©√© chez la banque acqu√©reuse qui dit \u0026ldquo;M. Client doit 1000 XPF √† M. Commer√ßant\u0026rdquo;.\nEn dual message, la transaction est enregistr√©e sur le TPE, ou sur la plateforme de paiement, puis, tous les jours √† une certaine heure, l\u0026rsquo;ensemble des transactions de la journ√©e sont envoy√©es √† la banque acqu√©reuse sous forme de mouvement financier.\nEn Polyn√©sie Fran√ßaise, le mode dual message est le plus r√©pandu, c\u0026rsquo;est d\u0026rsquo;ailleurs pour √ßa que l\u0026rsquo;on vous demande de ne pas d√©brancher votre TPE, votre internet, votre r√©seau √©lectrique.\nLes cartes et les syst√®mes d\u0026rsquo;acceptation Pour qu\u0026rsquo;un syst√®me d\u0026rsquo;acceptation puisse encaisser une carte, elle doit reconna√Ætre la carte.\nPour reconna√Ætre une carte, on utilise le BIN, qui sont les N premiers chiffres du num√©ro de la carte, N √©tant d√©fini par le r√©seau.\nDe plus, seule une application sp√©cifique √† ce r√©seau peut reconna√Ætre cette carte. Par exemple, pour une transaction avec une carte AMEX sur un TPE, c\u0026rsquo;est uniquement une application TPE AMEX qui pourra la reconna√Ætre, mais seulement si la carte fait partie d\u0026rsquo;une plage de BIN accept√©e par l\u0026rsquo;application.\nNote: Dans un TPE, il peut y avoir plusieurs applications, quand une carte est ins√©r√©e, le TPE demande √† chaque application \u0026ldquo;Peux-tu accepter cette carte?\u0026rdquo;.\nDe la m√™me mani√®re, pour une plateforme de paiement en ligne, celle-ci ne pourra accepter que des cartes qui font partie de ses plages de BIN d√©clar√©es.\nZoom sur le paiement en ligne en Polyn√©sie Fran√ßaise Comme √©nonc√© pr√©c√©demment, les cartes privatives sont majoritaires en Polyn√©sie Fran√ßaise, et elles ne sont pas reconnues √† l\u0026rsquo;√©tranger (sauf pour les cartes Socredo co-brand√©es UPI, comme cit√© pr√©c√©demment) car les BIN privatifs ne sont pas d√©clar√©s dans le monde.\nC\u0026rsquo;est pour cela qu\u0026rsquo;on ne peut pas payer avec une carte privative sur la plupart des plateformes de paiement en ligne (Paypal, Stripe, etc.), qui sont internationales.\nPour rem√©dier √† ce probl√®me, OSB propose Payzen, et la Banque de Tahiti propose SystemPay.\n√Ä mon avis, √† l\u0026rsquo;heure actuelle, c\u0026rsquo;est vers ces solutions que je conseille les commer√ßants d\u0026rsquo;aller, car il serait dommage de se priver des cartes privatives, alors qu\u0026rsquo;elles sont plus nombreuses.\nNotes:\nLes 2 solutions sont en r√©alit√© bas√©es sur les solutions Payzen et SystemPay de Lyra, soci√©t√© situ√©e en France. Certains d\u0026rsquo;entre vous ont d\u0026rsquo;ailleurs peut-√™tre d√©j√† √©t√© confus en recherchant de la documentation technique de ces solutions et se sont perdus entre:\nla documentation Payzen d\u0026rsquo;OSB, la documentation Payzen de Lyra, la documentation SystemPay de la Banque de Tahiti, la documentation SystemPay de Lyra. Je vous conseille de vous focaliser sur les documentations locales, et ensuite de compl√©ter avec les documentations de Lyra.\nConclusion Il existe plusieurs types de cartes.\nLes protocoles de paiement s\u0026rsquo;inscrivent dans un sch√©ma √† 4 coins, il y a plusieurs acteurs qui entrent en jeu.\nIl y a une r√©glementation g√©n√©rale qui englobe tous les types de cartes, et chaque type a √©galement sa r√©glementation sp√©cifique. Les banques sont soumises √† ces r√©glementations, l\u0026rsquo;IEOM et les r√©seaux (VISA, Mastercard, AMEX, etc.) veillent √† ce que les banques respectent ces r√©glementations.\nLa g√©ographie et les accords entre les acteurs sont importants pour comprendre les contraintes des syst√®mes de paiement locaux.\nEn Polyn√©sie Fran√ßaise, la majorit√© des cartes bancaires sont des cartes privatives, pour des raisons √©conomiques et r√©glementaires.\n","permalink":"http://localhost:1313/blog.dev/posts/intro-moyens-paiement/","summary":"\u003ch1 id=\"introduction\"\u003eIntroduction\u003c/h1\u003e\n\u003cp\u003eCet article est un aper√ßu tr√®s rapide des moyens de paiement en Polyn√©sie Fran√ßaise.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eUpdate (12/05/2022): suite √† quelques feedback, je me rend compte que cet article est √† destination des d√©veloppeurs de site de e-shopping, des commer√ßants, de mes confr√®res mon√©ticiens. Cet article sera complexe √† lire si vous n\u0026rsquo;avez jamais travaill√© avec un TPE, avec une plateforme de paiement, avec des cartes bancaires.\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e\u003cstrong\u003eDisclaimer\u003c/strong\u003e: Au moment o√π j\u0026rsquo;√©cris cet article, je travaille √† l\u0026rsquo;Oc√©anienne des Services Bancaires (OSB), Ces articles ne sont pas sponsoris√©s par OSB, et j\u0026rsquo;encourage les gens √† faire des tutoriels pour les solutions des autres fournisseurs de solutions de paiement.\u003c/p\u003e","title":"Introduction aux moyens de paiement en Polyn√©sie Fran√ßaise"},{"content":"Ia\u0026rsquo;orana, bonjour !\nCe post marque le d√©but du blog h√©berg√© sur Github.\nVous trouverez ici de temps en temps des articles de d√©veloppement et des POCs.\nBonne lecture !\n","permalink":"http://localhost:1313/blog.dev/posts/hello-world/","summary":"\u003cp\u003eIa\u0026rsquo;orana, bonjour !\u003c/p\u003e\n\u003cp\u003eCe post marque le d√©but du blog h√©berg√© sur Github.\u003c/p\u003e\n\u003cp\u003eVous trouverez ici de temps en temps des articles de d√©veloppement et des POCs.\u003c/p\u003e\n\u003cp\u003eBonne lecture !\u003c/p\u003e","title":"Hello World"},{"content":"La m√©moire est une ressource au m√™me titre que la fourchette dans le pr√©c√©dent article.\nDans un ordinateur, il existe plusieurs types de m√©moire que les programmes vont pouvoir utiliser en fonction de la mani√®re dont ils veulent traiter les donn√©es.\nIl faut voir la m√©moire comme un endroit o√π on entrepose des donn√©es.\nPour cet article on va parler d\u0026rsquo;un magasin, mais √ßa marche aussi avec un restaurant.\nLa m√©moire cache ‚Äî l\u0026rsquo;armoire r√©frig√©r√©e La m√©moire cache est le stockage le plus rapide qu\u0026rsquo;un programme peut utiliser. Pour un magasin, il s\u0026rsquo;agit des √©tag√®res et des armoires r√©frig√©r√©es qui forment les rayons.\nLes clients (les threads du programme) ont rapidement acc√®s aux viandes qui sont dans les armoires r√©frig√©r√©es, ils n\u0026rsquo;ont qu\u0026rsquo;√† tendre la main. Par contre, on ne peut pas stocker une grande quantit√© de viande dans ces armoires, pour l\u0026rsquo;exemple on va dire une dizaine au maximum.\nSur un ordinateur, cette m√©moire cache se trouve directement dans le processeur sous les noms cache L3, cache L2 et cache L1. On n\u0026rsquo;ira pas dans le d√©tail ici, mais sachez que plus le nombre est proche de 0, et plus le cache est rapide.\nJe prends l\u0026rsquo;exemple de l\u0026rsquo;armoire r√©frig√©r√©e car il y a un m√©canisme physique important dans un ordinateur: la m√©moire cache peut accueillir des donn√©es uniquement si elle est aliment√©e en √©lectricit√©, en cas de coupure de courant, on perd les donn√©es qui s\u0026rsquo;y trouvent.\nDe la m√™me mani√®re, dans un magasin, en cas de coupure de courant, il faut jeter toute la viande qui se trouve dans les armoires r√©frig√©r√©es*.\n*: Oui c\u0026rsquo;est pas tout √† fait le cas, mais en cas de coupure prolong√©e √ßa l\u0026rsquo;est.\nLa m√©moire vive ‚Äî l\u0026rsquo;arri√®re du magasin Au cours d\u0026rsquo;une journ√©e, le magasin souhaite vendre bien plus que dix viandes, c\u0026rsquo;est bien normal. Pour cela, √† l\u0026rsquo;arri√®re du magasin il y a un stock r√©frig√©r√© qui peut en contenir 1000. Un employ√© viendra remplir les rayons au cours de la journ√©e.\nCette action prend du temps, l\u0026rsquo;employ√© doit :\nAller dans le stock r√©frig√©r√© R√©cup√©rer des viandes Amener les viandes dans le rayon Mettre les viandes dans l\u0026#39;armoire r√©frig√©r√©e Pendant tout ce temps, le client ne peut prendre que les viandes qui sont encore dans l\u0026rsquo;armoire, il faut donc bien faire attention √† ce que l\u0026rsquo;employ√© recharge l\u0026rsquo;armoire quand il reste encore un peu de bo√Ætes.\nDans un ordinateur, la m√©moire vive (RAM en anglais pour Random Access Memory), joue le r√¥le du stock r√©frig√©r√© tr√®s rapide qu\u0026rsquo;un programme peut utiliser, mais beaucoup moins rapide que la m√©moire cache, environ 50x √† 100x moins rapide.\nEt tout comme la m√©moire cache, la RAM peut accueillir des donn√©es uniquement si elle est aliment√©e en √©lectricit√©.\nC\u0026rsquo;est pour √ßa qu\u0026rsquo;on appelle √ßa de la m√©moire vive, elle doit √™tre aliment√©e.\nAttends, mais tu dis que la RAM est tr√®s rapide, mais le processus pour recharger la m√©moire cache est lent ? On ne peut pas juste utiliser une grande quantit√© de m√©moire cache?\nLa m√©moire cache co√ªte tr√®s cher, beaucoup plus que la RAM. L\u0026rsquo;√©tat actuel est donc un compromis entre rapidit√© et co√ªt, un probl√®me typique en ing√©nierie.\nLe stockage ‚Äî la ferme en Nouvelle-Z√©lande Le stockage d\u0026rsquo;un ordinateur est compos√© des diff√©rents disques durs (HDD, SDD, etc.). Il s\u0026rsquo;agit d\u0026rsquo;une m√©moire persistante, c\u0026rsquo;est-√†-dire que m√™me en cas de coupure de courant, les donn√©es restent √©crites dans les disques.\nPour notre magasin, de la viande qui reste utilisable m√™me en cas de coupure\u0026hellip; Eh bien ce sont les boeufs vivants √† la ferme.\nTon analogie est d√©go√ªtante\nOui je sais, j\u0026rsquo;ai pas mieux, d√©sol√©. En m√™me temps, je ne peux pas vous dire que de la viande fra√Æche, qui reste longtemps √† l\u0026rsquo;air libre, est encore utilisable.\nEn plus, il y a plein d\u0026rsquo;√©tapes entre un boeuf vivant et un steak dans l\u0026rsquo;armoire !\nTout √† fait, mais c\u0026rsquo;est la meilleure analogie possible pour te faire comprendre pourquoi, en cas de coupure, si tu n\u0026rsquo;as pas sauvegard√© ton fichier Word depuis longtemps, tu perds tes donn√©es. Tant que tu n\u0026rsquo;as pas sauvegard√©, tes modifications restent dans le cache et la RAM.\nEt pourquoi en Nouvelle-Z√©lande ?\nOh, √ßa c\u0026rsquo;est parce qu\u0026rsquo;aller chercher une donn√©e dans un disque, c\u0026rsquo;est tr√®s lent compar√© √† aller la chercher dans la RAM. Si tu as un disque SSD c\u0026rsquo;est 10x plus lent, si tu as un disque HDD, c\u0026rsquo;est 100x plus lent.\nSi tu joues √† des jeux vid√©o un peu gourmands en ressources, tu as s√ªrement remarqu√© des √©crans de chargement plus ou moins longs. C\u0026rsquo;est surtout parce que le programme r√©cup√®re les donn√©es qui sont sur le disque.\nOptimiser la m√©moire ‚Äî pas besoin d\u0026rsquo;√™tre mentaliste Vous l\u0026rsquo;aurez donc compris, un magasin a diff√©rents types de m√©moire √† sa disposition. La mani√®re dont il orchestre les denr√©es √† travers ces diff√©rents composants lui permet d\u0026rsquo;anticiper les variations de stock, et limiter le risque de p√©nurie.\nLorsqu\u0026rsquo;un d√©veloppeur code un programme, il peut aussi anticiper l\u0026rsquo;utilisation des donn√©es et les charger avant d\u0026rsquo;en avoir besoin.\nDans l\u0026rsquo;exemple du jeu vid√©o, pourquoi est-ce que toutes les donn√©es ne sont pas charg√©es d√®s le d√©but? Moi j\u0026rsquo;en ai marre des √©crans de chargement.\nTout d\u0026rsquo;abord, ce chargement se fait du stockage vers la RAM (puis vers le cache), ensuite, si on chargeait toutes les donn√©es d\u0026rsquo;un coup, il y a de fortes chances pour que ta RAM soit satur√©e.\nA priori, le d√©veloppeur ne sait pas si tu as peu ou beaucoup de RAM disponible, et puis, maintenir deux versions du code, un qui charge toutes les donn√©es, et un qui charge via les √©crans de chargement, c\u0026rsquo;est du travail suppl√©mentaire qui n\u0026rsquo;apporte pas grand chose.\nLes √©crans de chargement sont un compromis : plut√¥t que de risquer de crasher ton ordinateur, le d√©veloppeur a cod√© le programme de sorte √† charger uniquement le contenu qui sera utilis√© dans le niveau, pour tous les niveaux.\nConclusion Dans cet article, on a vu les diff√©rentes m√©moires utilis√©es par les programmes. √Ä l\u0026rsquo;image d\u0026rsquo;un magasin qui √©vite les p√©nuries, un d√©veloppeur doit jongler avec ces m√©moires pour que son programme tourne correctement.\nDans le prochain article, IMVV ‚Äî Section 3 ‚Äî Chapitre 2 ‚Äî M√©mo√Øsation et Lazy loading, les technique du fain√©ant ultime, nous verrons des techniques qui feront de toi un bon fain√©ant.\n‚Üê Retour √† la section\n‚Üê Retour √† l‚Äôintroduction\n","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/optimisation/memoire/","summary":"\u003cp\u003eLa m√©moire est une \u003cstrong\u003eressource\u003c/strong\u003e au m√™me titre que la fourchette dans le \u003ca href=\"../../l-execution/threads/\"\u003epr√©c√©dent article\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eDans un ordinateur, il existe plusieurs types de m√©moire que les programmes vont pouvoir utiliser en fonction de la mani√®re dont ils veulent traiter les donn√©es.\u003c/p\u003e\n\u003cp\u003eIl faut voir la m√©moire comme un endroit o√π on entrepose des donn√©es.\u003c/p\u003e\n\u003cp\u003ePour cet article on va parler d\u0026rsquo;un magasin, mais √ßa marche aussi avec un restaurant.\u003c/p\u003e\n\u003ch2 id=\"la-m√©moire-cache--larmoire-r√©frig√©r√©e\"\u003eLa m√©moire cache ‚Äî l\u0026rsquo;armoire r√©frig√©r√©e\u003c/h2\u003e\n\u003cp\u003eLa \u003cstrong\u003em√©moire cache\u003c/strong\u003e est le stockage \u003cstrong\u003ele plus rapide\u003c/strong\u003e qu\u0026rsquo;un programme peut utiliser. Pour un magasin, il s\u0026rsquo;agit des √©tag√®res et des armoires r√©frig√©r√©es qui forment les rayons.\u003c/p\u003e","title":"IMVV ‚Äî Section 3 ‚Äî Chapitre 1 ‚Äî La m√©moire, ou comment √©viter les p√©nuries dans un magasin"},{"content":"Dans le pr√©c√©dent article, IMVV ‚Äî Section 1 ‚Äî Chapitre 3 ‚Äî Structures de contr√¥le et algorithme, apprendre √† r√©fl√©chir, on a vu les diff√©rentes structures de contr√¥le et les algorithmes.\nMaintenant on va parler de la mani√®re dont on r√©alise un ensemble de t√¢ches ‚Äî c‚Äôest ce qu‚Äôon appelle en informatique un mode d‚Äôex√©cution. C\u0026rsquo;est applicable aussi bien pour un humain que pour un ordinateur.\nN\u0026rsquo;oublie pas que les objectifs de ces articles sont :\nTe donner une meilleure compr√©hension des bases de l‚Äôinformatique, T\u0026rsquo;inspirer pour analyser ou optimiser les situations du quotidien, ou peut-√™tre, qui sait, te donner envie d\u0026rsquo;explorer encore plus loin\u0026hellip; jusqu‚Äô√† en faire ton m√©tier. Programme et application ‚Äî c\u0026rsquo;est quoi la diff√©rence ? Un programme informatique est un ensemble d\u0026rsquo;algorithmes. Le mot application veut dire la m√™me chose.\nC‚Äôest juste que application, √ßa sonne plus moderne, m√™me si ce mot existe depuis longtemps.\nMerci le marketing Apple et son App Store. üòÑ\nSynchrone ‚Äî Avoir un serveur d√©di√© √† sa table, quel luxe Prenons l\u0026rsquo;exemple d\u0026rsquo;un restaurant chic. Dans ce restaurant chic, il y a 2 tables. Chaque table a son serveur attitr√©, celui-ci r√©pond uniquement aux besoins de sa table.\nPour la suite de cet exercice de pens√©e, on va dire qu\u0026rsquo;il y a 2 familles (famille 1, famille 2), 2 tables (table 1, table 2), 1 serveur, 1 chef.\nLa s√©quence d\u0026rsquo;actions que le serveur doit faire, l\u0026rsquo;algorithme est :\nSi une famille arrive: Accueillir la famille Installer la famille sur une table libre Prendre la commande Donner la commande au chef R√©cup√©rer les plats Servir les plats √† la famille Faire payer la famille Fin si La famille 1 arrive au restaurant, le serveur les accueille et les installe √† la table 1. Il reste en attente de leur commande, √† proximit√©*.\nQuand la famille 1 est pr√™te, vu que le serveur est √† c√¥t√©, ils passent commande. Le serveur s\u0026rsquo;en va ensuite en cuisine pour donner la commande au chef. Le serveur attend les plats. Le chef pr√©pare les plats.\nUne fois que les plats sont pr√™ts, il les r√©cup√®re et les sert √† la famille 1. La famille 1 paie et s\u0026rsquo;en va, heureuse de l\u0026rsquo;attention port√©e.\n*: A ce moment, la famille 2 arrive au restaurant, ils ne sont pas accueillis, puisque le serveur est en attente de la commande de la famille 1. Alors la famille 2 repart, agac√©e, ils laisseront un mauvais avis sur internet.\nDans cette configuration, le serveur ex√©cute ses t√¢ches de mani√®re synchrone, cela veut dire qu\u0026rsquo;il ex√©cute l\u0026rsquo;algorithme √©tape par √©tape sans interruption. Si une √©tape n√©cessite d\u0026rsquo;attendre, par exemple quand il doit attendre que la famille choisisse sa commande, alors il attend, on dit que le mode synchrone est bloquant. Le serveur va au bout de son algorithme.\nMais c\u0026rsquo;est nul, il y a une famille qui n\u0026rsquo;a pas √©t√© servie\u0026hellip;\nSi on reste dans le mode d\u0026rsquo;ex√©cution synchrone, le probl√®me est qu\u0026rsquo;il n\u0026rsquo;y a pas assez de serveur. S\u0026rsquo;il y avait autant de serveurs de tables et de chefs, il n\u0026rsquo;y aurait aucun souci. Chaque famille aurait √©t√© ravie d\u0026rsquo;avoir un serveur et un chef d√©di√©. Mais on verrait plut√¥t cette disposition dans les restaurants luxueux, qui peuvent se permettre d\u0026rsquo;avoir 100 tables, 100 serveurs et 100 chefs.\nPar d√©faut, les applications sont synchrones, car √† part le probl√®me de ressources, c‚Äôest bien plus simple de faire une t√¢che apr√®s l‚Äôautre, cependant, de nos jours, de plus en plus de syst√®mes sont asynchrones (exemple: navigateurs, certains serveurs applicatifs √† la mode).\nüìå Exemples dans la vie r√©elle Une personne qui suit une proc√©dure critique Pr√©parer une salade üíª Exemples en informatique Un distributeur de billets Une imprimante partag√©e Asynchrone ‚Äî Un serveur pour les gouverner tous ‚Äî Oui c\u0026rsquo;est une r√©f√©rence au Seigneur des Anneaux üòÑ ‚Äî\nReprenons l\u0026rsquo;exemple du restaurant, toujours avec 2 familles (famille 1, famille 2), 2 tables (table 1, table 2), 1 serveur, 1 chef.\nMais cette fois, on change l\u0026rsquo;algorithme :\nQuand une famille arrive, alors : Le serveur les accueille Il les installe √† une table libre Il leur donne un menu Il passe √† autre chose Fin quand Quand une famille appelle le serveur pour commander, alors : Le serveur prend la commande Il la transmet au chef Il passe √† autre chose Fin quand Quand la sonnette en cuisine retentit (plats pr√™ts), alors : Le serveur r√©cup√®re les plats Le serveur sert les plats √† la bonne table Il passe √† autre chose Fin quand Quand une famille veut payer, alors : Le serveur encaisse Il lib√®re la table Il passe √† autre chose Fin quand Cet algorithme est diff√©rent de ceux qu\u0026rsquo;on a vus jusqu\u0026rsquo;√† pr√©sent.\n\u0026ldquo;Quand \u0026hellip;,\u0026rdquo; marque un √©v√©nement, \u0026ldquo;alors\u0026rdquo; introduit le bloc d\u0026rsquo;instructions √† ex√©cuter en r√©action, et \u0026ldquo;Fin quand\u0026rdquo; marque la fin de ce bloc.\nOn dit alors qu\u0026rsquo;on fait de la programmation √©v√©nementielle (ou programmation r√©active) et que l\u0026rsquo;algorithme est asynchrone : il fait de sorte √† r√©agir aux √©v√©nements ext√©rieurs.\nLorsqu‚Äôun √©v√©nement se produit, le serveur y r√©agit imm√©diatement : il ex√©cute les instructions associ√©es, puis passe √† l‚Äô√©v√©nement suivant s‚Äôil y en a un. Sinon, il attend. Ce mode d\u0026rsquo;ex√©cution est donc non bloquant.\nEt dans les faits, c\u0026rsquo;est ce que fait la plupart des personnes, serveurs ou non. Quand on fait une t√¢che, et qu\u0026rsquo;on est interrompu par un bug, un appel, un coll√®gue de travail qui pose une question, on est en r√©action.\nAvec cet algorithme, un serveur seul pourra tr√®s bien g√©rer 2 tables.\nüìå Exemples dans la vie r√©elle Les serveurs dans la plupart des restaurants Mon chien quand il entend les croquettes üíª Exemples en informatique Les notifications sur ton smartphone Un arrosage automatique avec capteur d\u0026#39;humidit√© Attention : comme en mode synchrone, s\u0026rsquo;il y a trop de table pour un seul serveur, plusieurs √©v√©nements risquent de s\u0026rsquo;accumuler en attente de traitement.\nMais du coup, comment on fait pour r√©soudre ce probl√®me ?\nOn verra √ßa dans le prochain article.\nConclusion Dans cet article, on a vu ce qu\u0026rsquo;√©taient les modes d\u0026rsquo;ex√©cution synchrone et asynchrone.\nSi tu souhaites continuer cette aventure, tu peux regarder la suite ici: IMMV ‚Äî Section 2 ‚Äî Chapitre 2 ‚Äî Monothread et Multithread, je ne peux pas tout faire en m√™me temps !\n‚Üê Retour √† la section\n‚Üê Retour √† l‚Äôintroduction\n","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/l-execution/sync-async/","summary":"\u003cp\u003eDans le pr√©c√©dent article, \u003ca href=\"../../les-bases/structures-de-controle/\"\u003eIMVV ‚Äî Section 1 ‚Äî Chapitre 3 ‚Äî Structures de contr√¥le et algorithme, apprendre √† r√©fl√©chir\u003c/a\u003e, on a vu les diff√©rentes structures de contr√¥le et les algorithmes.\u003c/p\u003e\n\u003cp\u003eMaintenant on va parler de la mani√®re dont on r√©alise un ensemble de t√¢ches ‚Äî c‚Äôest ce qu‚Äôon appelle en informatique un \u003cstrong\u003emode d‚Äôex√©cution\u003c/strong\u003e. C\u0026rsquo;est applicable aussi bien pour un humain que pour un ordinateur.\u003c/p\u003e\n\u003cp\u003eN\u0026rsquo;oublie pas que les objectifs de ces articles sont :\u003c/p\u003e","title":"IMMV ‚Äî Section 2 ‚Äî Chapitre 1 ‚Äî Synchrone et Asynchrone, ou comment r√©agir au changement"},{"content":"Quand tu prends un ticket pour attendre ton tour, que tu fais la queue √† la caisse, que tu prends l‚Äôassiette du haut de la pile pour mettre la table, ou que tu cliques sur le bouton \u0026lsquo;Retour\u0026rsquo; (‚Üê) du navigateur internet‚Ä¶ Tu manipules sans le savoir des concepts appell√©s en informatique des structures de donn√©es, et les algorithmes associ√©s qui les font vivre.\nDans cet article, on va mettre un peu de clart√© l√†-dedans : pas besoin de coder pour comprendre, on va illustrer tout √ßa avec des situations de la vie courante.\nD√©finitions Avant d‚Äôaller plus loin, quelques d√©finitions simples, histoire de parler le m√™me langage :\nDonn√©e : une donn√©e, c‚Äôest une information num√©rique. √áa peut √™tre un num√©ro de passeport, le nombre de dents d‚Äôune personne, la liste des t√¢ches que tu as encore repouss√©es √† demain, ou ton nombre d‚Äôamis sur Facebook. Structure de donn√©es : imagine une bo√Æte, une √©tag√®re ou un sac √† dos, dans lequel tu ranges tes informations d‚Äôune certaine mani√®re pour mieux les retrouver ou les traiter. C‚Äôest la fa√ßon dont on organise les donn√©es. Algorithme : un algorithme, c‚Äôest une suite d‚Äô√©tapes ou d‚Äôinstructions pour manipuler ces donn√©es. Comme une recette de cuisine, ou une proc√©dure √† suivre pour obtenir un r√©sultat. File et pile : deux mani√®res d‚Äôattendre‚Ä¶ ou de repousser Maintenant qu‚Äôon a les bases, voyons deux structures de donn√©es tr√®s simples mais tr√®s puissantes : la file et la pile. On les retrouve partout dans notre quotidien, souvent sans s‚Äôen rendre compte.\nLa file ‚Äî ou comment attendre son tour (FIFO) Imagine une file d‚Äôattente devant un guichet. Le premier arriv√© est le premier servi. C‚Äôest ce qu‚Äôon appelle en informatique une file (ou queue en anglais), avec une logique FIFO : First In, First Out (premier entr√©, premier sorti).\nD√®s que quelqu‚Äôun est servi, c‚Äôest le suivant dans la file qui avance.\nüéØ C‚Äôest une structure √©quitable : chacun attend selon son ordre d‚Äôarriv√©e.\nüìå Exemples dans la vie r√©elle Faire la queue √† la caisse du magasin La liste des courses (si on lit de haut en bas) üíª Exemples en informatique Les syst√®mes de ticket dans les accueils (le num√©ro est g√©n√©r√© par un programme, et les appels suivent cet ordre) Les commentaires sur une publication Facebook (affich√©s du plus ancien au plus r√©cent) La pile ‚Äî ou comment empiler les priorit√©s (LIFO) Maintenant, imagine une pile de livres que tu dois r√©viser pour un examen. Tu prends celui du haut, tu le lis, puis tu prends celui juste en dessous, et ainsi de suite. Tu lis dans l‚Äôordre inverse de celui dans lequel tu as empil√© les livres. Tu viens de d√©piler ta pile, toujours en commen√ßant par le haut.\nC‚Äôest exactement le principe de la pile (ou stack en anglais), qui suit la logique LIFO : Last In, First Out (dernier entr√©, premier sorti).\nTu vas peut-√™tre me dire :\nOui mais je peux aussi prendre le livre du bas, non‚ÄØ?\nC‚Äôest vrai. Alors prenons un autre exemple, un peu plus r√©aliste :\nImagine que tu tombes sur un article de journal qui parle des nodules polym√©talliques dans les fonds marins de la Polyn√©sie fran√ßaise. Tu n‚Äôy connais pas grand-chose, mais √ßa t‚Äôintrigue. Tu lis l‚Äôarticle, puis tu ouvres une page Wikip√©dia pour comprendre ce qu‚Äôest un nodule polym√©tallique. Sur cette page, tu vois un lien vers les m√©taux rares, puis vers la transition √©nerg√©tique, puis‚Ä¶ tu vois o√π je veux en venir.\nEn lisant ce premier article, tu ne soup√ßonnais pas toute la pile d‚Äôinformations que tu allais explorer. Et tu viens de d√©piler ce savoir, en commen√ßant par la derni√®re page ouverte.\nüéØ Ce n‚Äôest pas une structure √©quitable : ce qui arrive en dernier est trait√© en premier. Mais c‚Äôest tr√®s utile pour remonter dans le temps, ou revenir sur ses pas, exactement comme le bouton \u0026ldquo;retour\u0026rdquo; de ton navigateur.\nüìå Exemples dans la vie r√©elle Les cartons dans un coffre bien rempli Les diff√©rentes strates de terre quand tu creuses dans ton jardin (c\u0026#39;est de la terre empil√©e au cours du temps) üíª Exemples en informatique Le bouton \u0026#39;Retour\u0026#39; (‚Üê) de ton navigateur Les annulations successives (Undo, CTRL\u0026#43;Z) dans un √©diteur de texte Si tu veux conna√Ætre d\u0026rsquo;autres structures de donn√©es, tu peux regarder le prochain article : IMVV ‚Äî Section 1 ‚Äî Chapitre 2 ‚Äî Autres structures de donn√©es, j\u0026rsquo;organise mon bordel\n‚Üê Retour √† la section\n‚Üê Retour √† l‚Äôintroduction\n","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/les-bases/file-et-pile/","summary":"\u003cp\u003eQuand tu prends un ticket pour attendre ton tour, que tu fais la queue √† la caisse, que tu prends l‚Äôassiette du haut de la pile pour mettre la table, ou que tu cliques sur le bouton \u0026lsquo;Retour\u0026rsquo; (‚Üê) du navigateur internet‚Ä¶\nTu manipules sans le savoir des concepts appell√©s en informatique \u003cstrong\u003edes structures de donn√©es\u003c/strong\u003e, et \u003cstrong\u003eles algorithmes\u003c/strong\u003e associ√©s qui les font vivre.\u003c/p\u003e\n\u003cp\u003eDans cet article, on va mettre un peu de clart√© l√†-dedans : pas besoin de coder pour comprendre, on va illustrer tout √ßa avec des situations de la vie courante.\u003c/p\u003e","title":"IMVV ‚Äî Section 1 ‚Äî Chapitre 1 ‚Äî File ou Pile ? L'art de passer avant les autres"},{"content":"√ätre fiu est un art, une vertu. Non, ce n\u0026rsquo;est pas une blague. Tu ne me crois pas ?\n\u0026ldquo;We will encourage you to develop the three great virtues of a programmer: laziness, impatience, and hubris.\u0026rdquo; ‚Äî Larry Wall, Programming perl (1991).\n\u0026ldquo;I choose a lazy person to do a hard job. Because a lazy person will find an easy way to do it.\u0026rdquo; ‚Äî Bill Gates.\nProgrammer une machine pour qu\u0026rsquo;elle fasse le travail √† ta place, c\u0026rsquo;est de la fain√©antise.\nEt les d√©veloppeurs sont des personnes qui ont atteint l\u0026rsquo;apog√©e du fiu. Apr√®s tout, qui passe 2 heures √† automatiser une t√¢che qui prend 2 minutes par jour, √† part quelqu\u0026rsquo;un de vraiment fiu ?\nDans cet article, on verra deux techniques que les d√©veloppeurs utilisent, mais que toi aussi tu utilises sans le savoir.\nM√©mo√Øsation ‚Äî ou comment garder une information dans un coin de la t√™te Supposons que tu sois responsable de la paie dans une petite entreprise. Pour ce mois-ci, tu dois calculer les salaires √† verser √† 2 employ√©s.\nTu sais que tous les deux ont un salaire brut de 200 000 XPF. De plus, ils ont fait un excellent travail, ton patron t\u0026rsquo;a dit de leur rajouter une prime de 50% de leur salaire brut. Enfin, l\u0026rsquo;un d\u0026rsquo;eux a fait des heures suppl√©mentaires, il faut donc lui rajouter 20 000 XPF brut sur sa paie.\nPour le 1er salari√©, tu pars de 200 000, tu rajoutes 50%, soit 100 000, ce qui lui fera 300 000 XPF brut pour ce mois.\nPour le 2√®me salari√©, tu sais que le d√©but du calcul est le m√™me, alors tu r√©utilises le nombre 300 000, et tu rajoutes 20 000 d\u0026rsquo;heures suppl√©mentaires, donc 320 000 bruts.\nSans m√©mo√Øsation, tu aurais recalcul√© 200 000 + 50 %. Mais tu t‚Äôes souvenu que ce calcul avait d√©j√† √©t√© fait, donc tu as directement repris le r√©sultat. Ce que tu viens de faire, c\u0026rsquo;est de la m√©mo√Øsation (memoization en anglais).\nC‚Äôest exactement ce que fait ton navigateur web quand il te propose un r√©sultat de recherche d√©j√† visit√©, ou qu‚Äôun site charge plus vite la 2·µâ fois.\nInstant Dev En informatique, on utilise un tableau ou un tableau associatif pour stocker les r√©sultats interm√©diares, ces structures sont stock√©es dans la RAM. De cette fa√ßon, on peut rapidement r√©cup√©rer le r√©sultat qui nous int√©resse. Attention : En informatique, comme dans la vraie vie, garder des informations de c√¥t√© peut conduire √† une saturation de la m√©moire. C\u0026rsquo;est un des facteurs de burn-out. M√©nagez votre cerveau, il n\u0026rsquo;y a pas de mal √† noter les choses, de plus, vous aurez moins de risque d\u0026rsquo;oublier des informations importantes.\nEager loading et Lazy loading ‚Äî l\u0026rsquo;art d\u0026rsquo;√™tre pr√©par√© √† toute √©ventualit√© Supposons que tu aies invit√© tes amis √† manger √† la maison ce soir. Tu as invit√© 10 personnes, mais tu sais que 5 vont vraiment venir, les autres t\u0026rsquo;ont dit \u0026ldquo;peut-√™tre\u0026rdquo;.\nPour √©viter d\u0026rsquo;√™tre √† court de nourriture, tu as pr√©par√© pour 10 personnes, au pire, ceux qui sont venus repartiront avec quelques plats, et tu termineras le reste durant la semaine.\nLes premiers invit√©s vont arriver, tu n\u0026rsquo;as pas encore pr√©par√© la table. Tu as 2 solutions :\nTout pr√©parer d\u0026rsquo;avance : sortir toutes les assiettes, les verres, les chaises, les couverts, etc. (solution eager loading : tu charges tout d√®s le d√©but).\nAttendre de voir qui arrive : d√®s qu‚Äôun invit√© entre, tu sors une assiette, un verre, une chaise, etc. (solution lazy loading : tu ne charges que ce qui est n√©cessaire, au moment o√π c‚Äôest n√©cessaire).\nMais tu peux aussi exiger des invit√©s qu\u0026rsquo;ils te disent, la veille au plus tard, si oui ou non ils viennent !\nOui, et que se passe-t-il si l\u0026rsquo;un d\u0026rsquo;eux a un emp√™chement ? En mettant tous les couverts, tu as d√©pens√© de l\u0026rsquo;√©nergie pour mettre son couvert, et tu en as re-d√©pens√© pour le ranger. Ce n\u0026rsquo;est pas tr√®s optimis√©.\nSi tous les invit√©s arrivent, tu auras fait plusieurs allers-retours pour mettre les couverts, ce n\u0026rsquo;est pas tr√®s optimis√© non plus\u0026hellip;\nAh, tu mets le doigt sur un point important : les techniques d\u0026rsquo;optimisation doivent √™tre utilis√©es uniquement si on est s√ªr de leur utilit√©.\n\u0026ldquo;Premature optimization is the root of all evil\u0026rdquo; ‚Äî Sir Tony Hoare et Donald Knuth.\nC\u0026rsquo;est un pi√®ge dans lequel tombent plusieurs d√©veloppeurs juniors. Les √©coles sup√©rieures enseignent diff√©rentes techniques d\u0026rsquo;optimisation, on est conditionn√©s √† d√©tecter un probl√®me et √† appliquer imm√©diatement une solution : c\u0026rsquo;est normal.\nAvec l\u0026rsquo;exp√©rience, on apprend qu\u0026rsquo;on a besoin d\u0026rsquo;optimiser uniquement quand une personne se plaint de lenteurs. Et dans ce cas, on cherche o√π se trouve la source du probl√®me, on mesure.\nOk mais\u0026hellip; √ßa me fait bizarre de ne pas pr√©parer une belle table, c\u0026rsquo;est pas un bon accueil.\nDans ce cas, le eager loading a une vraie plus-value. Tu charges tout d\u0026rsquo;un coup pour l\u0026rsquo;effet waow, pour que les personnes se disent que chez toi, on est bien re√ßu. La principale fonctionnalit√© n\u0026rsquo;est pas d\u0026rsquo;optimiser le fait de mettre la table, mais d\u0026rsquo;impressionner tes convives.\nJe finis cette partie avec un exemple informatique : Facebook ne charge pas toutes les publications d√®s le d√©but, seulement une partie.\nQuand tu commences √† scroller, tu vois ces publications. Si tu te rapproches de la fin, Facebook charge les prochaines publications, on appelle √ßa infinite scroll.\nAinsi, Facebook ne prend pas trop de temps √† se charger au d√©but.\nAttends mais\u0026hellip; Dans l\u0026rsquo;article pr√©c√©dent, on parlait des √©crans de chargement des jeux vid√©os, √ßa y ressemble un peu, non ?\nExactement, les √©crans de chargement sont aussi du lazy loading, et pour rejoindre ce qu\u0026rsquo;on disait sur ces √©crans : le lazy loading √©conomise de la m√©moire.\nEnfin, √† ton avis, comment Facebook sait qu\u0026rsquo;il faut charger la suite des publications ?\nEh bien en fait, l\u0026rsquo;application est r√©active, on peut √©crire son algorithme de chargement comme ceci:\nQuand un certain seuil de scroll est atteint (par exemple, 90% du contenu affich√©), alors: Charge la suite du contenu Passe √† autre chose Fin quand Tu l\u0026rsquo;auras remarqu√©, c\u0026rsquo;est ce qu\u0026rsquo;on a vu dans l\u0026rsquo;article IMMV ‚Äî Section 2 ‚Äî Chapitre 1 ‚Äî Synchrone et Asynchrone, ou comment r√©agir au changement.\nConclusion Dans cet article, on a vu diff√©rents m√©canimes d\u0026rsquo;optimisation.\nPlus important encore, si on se rappelle des pr√©c√©dents articles, on a vu qu\u0026rsquo;en informatique, en plus de combiner les structures de donn√©es et les structures de contr√¥le, on pouvait combiner les concepts d\u0026rsquo;optimisation et de modes d\u0026rsquo;ex√©cution.\nLe prochaine article est en cours de r√©daction, on parlera de complexit√©.\n‚Üê Retour √† la section\n‚Üê Retour √† l‚Äôintroduction\n","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/optimisation/memoisation/","summary":"\u003cp\u003e√ätre \u003cem\u003efiu\u003c/em\u003e est un art, une vertu. \u003cstrong\u003eNon, ce n\u0026rsquo;est pas une blague\u003c/strong\u003e. Tu ne me crois pas ?\u003c/p\u003e\n\u003cp\u003e\u003cem\u003e\u0026ldquo;We will encourage you to develop the three great virtues of a programmer: laziness, impatience, and hubris.\u0026rdquo; ‚Äî Larry Wall, Programming perl (1991)\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003e\u0026ldquo;I choose a lazy person to do a hard job. Because a lazy person will find an easy way to do it.\u0026rdquo; ‚Äî Bill Gates\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eProgrammer une machine pour qu\u0026rsquo;elle fasse le travail √† ta place, c\u0026rsquo;est de la fain√©antise.\u003c/p\u003e","title":"IMVV ‚Äî Section 3 ‚Äî Chapitre 2 ‚Äî M√©mo√Øsation et Lazy loading, les techniques du fain√©ant ultime"},{"content":"Dans le pr√©c√©dent article, IMMV ‚Äî Section 2 ‚Äî Chapitre 1 ‚Äî Synchrone et Asynchrone, ou comment r√©agir au changement, on a vu les diff√©rents modes d\u0026rsquo;ex√©cution.\nOn s\u0026rsquo;√©tait arr√™t√© sur le probl√®me suivant : Comment faire pour r√©pondre √† la mont√©e en charge, √† l\u0026rsquo;accumulation de t√¢ches ?\nEh bien, dans cet article, on va voir comment on r√©sout ce probl√®me, en informatique comme dans la vraie vie : les m√©canismes sont souvent tr√®s proches.\nPour cela on va continuer avec notre exemple de restaurant. Et on va expliciter diff√©rents termes que j\u0026rsquo;avais regroup√©s en parlant d\u0026rsquo;algorithmes et de programmes.\nN\u0026rsquo;oublie pas que les objectifs de ces articles sont :\nTe donner une meilleure compr√©hension des bases de l‚Äôinformatique, T\u0026rsquo;inspirer pour analyser ou optimiser les situations du quotidien, ou peut-√™tre, qui sait, te donner envie d\u0026rsquo;explorer encore plus loin\u0026hellip; jusqu‚Äô√† en faire ton m√©tier. Le programme ‚Äî l\u0026rsquo;id√©e de restaurant En informatique, quand on parle de programme, on parle uniquement d\u0026rsquo;un ensemble d\u0026rsquo;algorithmes, des t√¢ches qui le composent. Il n\u0026rsquo;est pas encore en train d\u0026rsquo;√™tre ex√©cut√©. Par exemple, Facebook est un programme ‚Äî mais tant que tu ne l‚Äôouvres pas, il ne fait rien.\nEh bien, c\u0026rsquo;est pareil pour un restaurant dans la vie de tous les jours, quand je parle du restaurant √† un ami, je n\u0026rsquo;y suis pas physiquement. Je parle juste du concept de restaurant, de l\u0026rsquo;id√©e que je m\u0026rsquo;en fais.\nLe processus - le restaurant ouvert Si je veux parler du restaurant physiquement ouvert, avec les employ√©s qui s\u0026rsquo;activent, en informatique il faut plut√¥t utiliser le terme processus. C\u0026rsquo;est le programme en cours d\u0026rsquo;ex√©cution.\nUn processus poss√®de son propre contexte d\u0026rsquo;ex√©cution, c\u0026rsquo;est un gros mot pour dire qu\u0026rsquo;il a ses propres ressources, et que personne ne peut lui prendre ses ressources.\nEn effet, quand le restaurant est ouvert, les assiettes qu\u0026rsquo;il utilise sont ses propres assiettes, ses propres ressources. Il n\u0026rsquo;y a pas un autre restaurant qui lui prendrait ses assiettes pendant qu\u0026rsquo;il est ouvert, sinon il risque d\u0026rsquo;avoir des assiettes manquantes.\nPour ex√©cuter un algorithme, un processus est compos√© d\u0026rsquo;un thread principal, et il peut avoir d\u0026rsquo;autres thread.\nLe thread ‚Äî la proc√©dure en cours d\u0026rsquo;ex√©cution du serveur Le thread (fil d\u0026rsquo;ex√©cution en fran√ßais) est ce qu‚Äôon appelle la proc√©dure en train de s\u0026rsquo;ex√©cuter. C‚Äôest un peu comme un serveur qui suit activement une fiche d\u0026rsquo;instructions √† un instant donn√©. Attention, ce n\u0026rsquo;est pas le serveur.\nEn informatique, on dit que le thread est l‚Äôunit√© d‚Äôex√©cution, C‚Äôest la plus petite unit√© qu‚Äôun ordinateur puisse piloter pour ex√©cuter du code. il n‚Äôexiste pas d‚Äôunit√© plus petite qu‚Äôun thread pour ex√©cuter une t√¢che.\nMaintenant qu‚Äôon comprend ce qu‚Äôest un thread ‚Äî une proc√©dure en cours d\u0026rsquo;ex√©cution ‚Äî il faut se demander qui ex√©cute cette proc√©dure.\nLe coeur ‚Äî le serveur On y arrive enfin, dans un ordinateur, le composant physique qui ex√©cute un thread s\u0026rsquo;appelle un coeur (core en anglais). Pour notre restaurant, ce core est le serveur. C\u0026rsquo;est lui, physiquement, qui prend les commandes, sert les plats, etc.\nConcurrence, parall√©lisme, multithread et monothread ‚Äî ou comment servir 2 familles en m√™me temps Un serveur ne peut faire qu\u0026rsquo;une seule chose √† la fois, √† un instant donn√© : quand il prend une commande √† l\u0026rsquo;instant T, il ne peut pas, en m√™me temps, servir des plats.\nPar contre, il pourrait s\u0026rsquo;interrompre pendant les t√¢ches, par exemple, au lieu de prendre toutes les commandes de la famille, d\u0026rsquo;un coup, il peut :\nprendre la commande d\u0026rsquo;un 1er plat aller chercher un plat √† servir servir le plat prendre la commande d\u0026rsquo;un 2√®me plat aller chercher un autre plat √† servir servir le plat etc. Attention: ici nous n\u0026rsquo;avons pas d√©coup√© les actions. C\u0026rsquo;est juste que le serveur a jongl√© entre les 2 t√¢ches \u0026ldquo;prendre la commande\u0026rdquo; et \u0026ldquo;servir les plats\u0026rdquo;. On appelle ce comportement la concurrence, car les 2 t√¢ches sont en concurrence pour √™tre termin√©es.\nDans un ordinateur, les threads sont concurrents, et comme √©nonc√© plus haut, √©tant donn√© qu\u0026rsquo;un processus est compos√© d\u0026rsquo;un thread principal, on dit que les processus sont concurrents.\nDans la vraie vie il y a des situations o√π on ne jongle pas avec les t√¢ches, o√π il faut √™tre concentr√© sur une t√¢che\nTout √† fait, et dans ce cas, s\u0026rsquo;il y a trop de t√¢ches pour une seule personne, on fait intervenir une 2√®me personne, une 3√®me etc.\nDans notre restaurant, avec 2 serveurs, pendant que l\u0026rsquo;un prend les commandes de la famille 1, un autre peut servir les plats de la famille 2. On appelle √ßa le parall√©lisme, les proc√©dures/threads sont ex√©cut√©s en parall√®le.\nEnfin, dans un restaurant, si on ne peut avoir qu\u0026rsquo;un seul serveur qui suit activement une fiche d\u0026rsquo;instructions ‚Äî un seul thread ‚Äî, on dit que le restaurant/le programme est monothread. S\u0026rsquo;il y en a plusieurs, on dit que le restaurant/serveur est multithread.\nDu coup, la solution pour le restaurant est d\u0026rsquo;embaucher plus de serveurs ?\nC\u0026rsquo;est l\u0026rsquo;une des solutions, oui, mais ce n\u0026rsquo;est pas la seule. Il y a globalement 2 chemins pour r√©pondre √† une mont√©e en charge. On peut :\noptimiser les algorithmes pour les rendre plus performants et/ou changer le mode d\u0026rsquo;ex√©cution, ou alors on peut mettre plus de coeurs et faire du multithread. De la m√™me mani√®re, dans la vraie vie, on peut :\nmieux former le serveur et/ou optimiser les proc√©dures qu\u0026rsquo;il doit suivre et/ou le motiver pour qu\u0026rsquo;il travaille plus vite, embaucher plus de serveurs. Dans tous les cas, je ne m\u0026rsquo;avancerai pas pour apprendre √† un restaurateur son m√©tier.\nLe partage de ressources ‚Äî ou comment partager une fourchette Dans le restaurant, on va maintenant se mettre du point de vue d\u0026rsquo;un couple, venu manger en t√™te √† t√™te dans une ambiance cosy, tamis√©e, √† l\u0026rsquo;abri des regards.\nLe serveur leur annonce la mauvaise nouvelle: il y a assez de couverts pour 2, sauf pour la fourchette. S\u0026rsquo;ils souhaitent tout de m√™me manger ici, ils devront se partager la fourchette, et interdiction de manger avec les doigts.\nLe couple discute, et finalement ce n\u0026rsquo;est pas un probl√®me, ils sont l√† pour profiter de l\u0026rsquo;instant.\nUne fois la commande pass√©e et les plats servis, Le couple commence √† manger. Mais comment s‚Äôorganisent-ils ?\nBen ils mangent chacun leur tour, ou alors l\u0026rsquo;un mange d\u0026rsquo;abord, et l\u0026rsquo;autre ensuite ?\nBingo, que l\u0026rsquo;un mange d\u0026rsquo;abord, puis l\u0026rsquo;autre, ou qu\u0026rsquo;ils mangent √† tour de r√¥le, dans tous les cas, ils doivent se partager une ressource : la fourchette. Donc l\u0026rsquo;un prend le contr√¥le de la ressource/fourchette, fait des actions avec cette ressource, puis lib√®re la ressource. L\u0026rsquo;autre peut √† son tour prendre le contr√¥le de la ressource, etc.\nDans un ordinateur, c\u0026rsquo;est pareil, dans un processus, les threads doivent se partager les ressources. De m√™me, les processus doivent se partager les ressources.\nC\u0026rsquo;est pour √ßa que sur un ordinateur, quand tu ouvres un document Word partag√© avec tes coll√®gues, parfois tu as un message du genre \u0026ldquo;le fichier est d√©j√† ouvert par\u0026hellip;\u0026rdquo; car le document Word est une fourchette ressource partag√©e entre ton application Word, et celle de ton coll√®gue.\nElle est bizarre ton explication\u0026hellip;\nJe ne vois pas de quoi tu parles.\nQuoiqu\u0026rsquo;il en soit, tu comprends donc qu\u0026rsquo;en rajoutant plus de threads/cores/personnes, on ne va pas forc√©ment plus vite. Ils doivent se synchroniser pour partager les ressources et parfois attendre.\nInstant Dev En informatique, ce partage de ressource s‚Äôappelle une section critique. Pour √©viter que deux t√¢ches utilisent la ressource en m√™me temps, on utilise des verrous (locks). Conclusion Dans cet article, on a vu diff√©rents termes informatiques qui permettent de comprendre un peu plus comment fonctionne un ordinateur, comment on pouvait r√©pondre √† la mont√©e en charge de diff√©rentes mani√®res, et que finalement, c\u0026rsquo;est tr√®s proche de la vie r√©elle.\nNous avons fini cette section \u0026ldquo;IMMV ‚Äî Section 2 ‚Äî L\u0026rsquo;ex√©cution : comment faire des actions ?\u0026rdquo;.\nDans la prochaine section, IMMV ‚Äî Section 3 ‚Äî L\u0026rsquo;optimisation : comment se faire passer pour un coach de vie, on verra comment optimiser des applications et la vie r√©elle.\n‚Üê Retour √† la section\n‚Üê Retour √† l‚Äôintroduction\n","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/l-execution/threads/","summary":"\u003cp\u003eDans le pr√©c√©dent article, \u003ca href=\"../sync-async/\"\u003eIMMV ‚Äî Section 2 ‚Äî Chapitre 1 ‚Äî Synchrone et Asynchrone, ou comment r√©agir au changement\u003c/a\u003e, on a vu les diff√©rents modes d\u0026rsquo;ex√©cution.\u003c/p\u003e\n\u003cp\u003eOn s\u0026rsquo;√©tait arr√™t√© sur le probl√®me suivant : Comment faire pour r√©pondre √† la mont√©e en charge, √† l\u0026rsquo;accumulation de t√¢ches ?\u003c/p\u003e\n\u003cp\u003eEh bien, dans cet article, on va voir comment on r√©sout ce probl√®me, en informatique \u003cstrong\u003ecomme dans la vraie vie\u003c/strong\u003e : les m√©canismes sont souvent tr√®s proches.\u003c/p\u003e","title":"IMMV ‚Äî Section 2 ‚Äî Chapitre 2 ‚Äî Monothread, Multithread, Parall√©lisme et Concurrence, je ne peux pas tout faire en m√™me temps !"},{"content":"Dans le pr√©c√©dent article IMVV ‚Äî Section 1 ‚Äî Chapitre 1 ‚Äî File ou Pile ? L\u0026rsquo;art de passer avant les autres on a d√©couvert les files et les piles. Cette fois, on va survoler plusieurs autres structures de donn√©es (data structures en anglais) qu\u0026rsquo;on utilise tr√®s souvent en informatique\u0026hellip; et dans la vraie vie.\nN\u0026rsquo;oublie pas que les objectifs de ces articles sont :\nTe donner une meilleure compr√©hension des bases de l‚Äôinformatique, T\u0026rsquo;inspirer pour analyser ou optimiser les situations du quotidien, ou peut-√™tre, qui sait, te donner envie d\u0026rsquo;explorer encore plus loin\u0026hellip; jusqu‚Äô√† en faire ton m√©tier. Le tableau ‚Äî la base de presque tout Tu as peut-√™tre remarqu√© dans le pr√©c√©dent article que la file et la pile se ressemblent beaucoup. En r√©alit√©, on peut les repr√©senter toutes les deux avec la m√™me structure : un tableau.\nEn informatique, le tableau (ou array en anglais) est l‚Äôune des structures les plus simples : on range des √©l√©ments les uns √† la suite des autres, dans un espace de taille fixe, et chaque √©l√©ment est rep√©r√© par sa position (ou index).\nPrenons un exemple simple : un tableau d\u0026rsquo;amis √† inviter pour un anniversaire, mais dans mon carnet d\u0026rsquo;adresses je n\u0026rsquo;ai que 6 places.\nAmis Manutea Vai Purotu Heiarii Reva (vide) index 0 1 2 3 4 5 L‚Äôindex est simplement la position de la personne dans le tableau, ce n\u0026rsquo;est pas un ordre.\nDans la plupart des langages informatiques, l\u0026rsquo;index commence √† 0, et pas √† 1.\nCet index nous permet d\u0026rsquo;acc√©der directement √† Vai, l\u0026rsquo;amie √† l\u0026rsquo;index 2 (ou 3√®me √©l√©ment), pour voir son num√©ro de t√©l√©phone par exemple.\nEt ce tableau peut se comporter diff√©remment selon la mani√®re dont on ajoute et retire les √©l√©ments. Par exemple, on peut le faire fonctionner comme une file ou une pile, simplement en changeant les r√®gles du jeu.\nSi c\u0026rsquo;est une file : On ajoute les amis √† la fin, par exemple, Jean arrive apr√®s Reva : Amis Manutea Vai Purotu Heiarii Reva Jean index 0 1 2 3 4 5 Et on traite depuis le d√©but, on retire Manutea du tableau : Amis Vai Purotu Heiarii Reva Jean (vide) index 0 1 2 3 4 5 Pour une pile : On ajoute les amis au d√©but, Jean arrive avant Manutea : Amis Jean Manutea Vai Purotu Heiarii Reva index 0 1 2 3 4 5 Et on traite toujours depuis le d√©but, on retire Jean du tableau : Amis Manutea Vai Purotu Heiarii Reva (vide) index 0 1 2 3 4 5 Dans les deux cas, on utilise un tableau pour stocker les amis. C‚Äôest la logique d‚Äôajout et de retrait qui transforme ce tableau en pile ou en file.\nüéØ Et c‚Äôest exactement pour √ßa que, lorsqu‚Äôon traite des dossiers empil√©s, il vaut mieux commencer par ceux du bas. Sinon, on inverse l‚Äôordre d‚Äôarriv√©e‚Ä¶ et ce n‚Äôest plus une file d‚Äôattente, mais une injustice organis√©e.\nS\u0026rsquo;il n\u0026rsquo;y a que 6 places, que se passe-t-il si j\u0026rsquo;ai 7 amis ?\nD\u0026rsquo;abord, je te f√©licite d\u0026rsquo;avoir autant d\u0026rsquo;amis. Ensuite, on peut s\u0026rsquo;en sortir, en achetant un carnet d\u0026rsquo;adresse qui a plus de places, et on recopie nos amis dans ce nouveau carnet.\nC\u0026rsquo;est similaire en informatique, on fait un nouveau tableau, plus grand, et on recopie.\nHeureusement, en informatique on a invent√© une autre structure.\nLa liste ‚Äî comme le tableau, mais dynamique La liste (ou list en anglais), c‚Äôest comme un tableau, mais en mieux : la taille n‚Äôest pas fixe.\nTu peux ajouter ou supprimer des √©l√©ments √† tout moment, sans te soucier du nombre de places pr√©vues au d√©part. Et √† tout moment, tu peux demander : ‚ÄúCombien d‚Äô√©l√©ments j‚Äôai dans cette liste ?‚Äù ‚Äî et obtenir une r√©ponse fiable.\nC‚Äôest la version souple du tableau, celle qu‚Äôon trouve dans la majorit√© des langages de programmation modernes.\nRefaisons les exemples de pile et de file, mais cette fois-ci avec des listes.\nSi c\u0026rsquo;est une file : On ajoute les amis √† la fin, par exemple, Jean arrive apr√®s Reva : Amis Manutea Vai Purotu Heiarii Reva Jean index 0 1 2 3 4 5 Nombre d\u0026rsquo;√©l√©ments: 6\nEt on traite depuis le d√©but, on retire Manutea du tableau : Amis Vai Purotu Heiarii Reva Jean index 0 1 2 3 4 Nombre d\u0026rsquo;√©l√©ments: 5\nPour une pile : On ajoute les amis au d√©but, Jean arrive avant Manutea : Amis Jean Manutea Vai Purotu Heiarii Reva index 0 1 2 3 4 5 Nombre d\u0026rsquo;√©l√©ments: 6\nEt on traite toujours depuis le d√©but, on retire Jean du tableau : Amis Manutea Vai Purotu Heiarii Reva index 0 1 2 3 4 Nombre d\u0026rsquo;√©l√©ments: 5\nOn remarque qu\u0026rsquo;il n\u0026rsquo;y a plus la case (vide) et le nombre d\u0026rsquo;√©l√©ments change.\nInstant Dev Pour permettre cette souplesse, la liste est plus gourmande en calculs:\ncalcul √† la vol√©e du nombre d\u0026rsquo;√©l√©ments, r√©allocation de m√©moire. Mais en vrai, √† moins que tu ne codes un satellite, une carte embarqu√©e, ou une console des ann√©es 80, o√π chaque octet compte, il y a peu de raisons d‚Äôutiliser un tableau fixe. Une liste dynamique t\u0026rsquo;√©vitera bien des migraines.\nLe tableau et la liste sont des structures tr√®s basiques et tr√®s puissantes, elles sont les bases de beaucoup d\u0026rsquo;autres structures qu\u0026rsquo;on verra par la suite.\nLe tableau associatif ‚Äî ou comment indexer On avait pris l\u0026rsquo;exemple d\u0026rsquo;un carnet d\u0026rsquo;adresses qu\u0026rsquo;on avait mis dans un tableau ou dans une liste. C\u0026rsquo;est d√©j√† tr√®s bien de pouvoir stocker ta liste d\u0026rsquo;amis, mais si tu as des centaines d\u0026rsquo;amis et que tu veux appeler Vai pour aller √† la mer, tu vas gal√©rer pour chercher dans ce carnet d\u0026rsquo;adresse.\nEn effet, avec les 2 derni√®res structures, tu dois parcourir les √©l√©ments un par un, jusqu\u0026rsquo;√† tomber sur Vai. Tu vas perdre beaucoup de temps √† chercher son num√©ro, √ßa va t\u0026rsquo;√©nerver, tu vas l\u0026rsquo;appeler, lui dire \u0026ldquo;mais quelle id√©e d\u0026rsquo;avoir un pr√©nom qui commence par V!\u0026rdquo;, elle va s\u0026rsquo;√©nerver, vous ne serez plus amis, alors que tu voulais juste aller surfer.\nJe m\u0026rsquo;emporte un peu? Peut-√™tre.\nPour r√©soudre ce probl√®me, en informatique on a invent√© le tableau associatif (ou map en anglais). On utilise le tableau, et on va profiter de l\u0026rsquo;index pour justement indexer les √©l√©ments.\nPour cela, on a besoin de r√©fl√©chir un peu:\nOn sait que l\u0026rsquo;index est une position dans le tableau, donc un nombre On sait que les pr√©noms commencent par une lettre (oui, je suis s√©rieux), on va supposer que c\u0026rsquo;est une lettre de l\u0026rsquo;alphabet, et pas un caract√®re sp√©cial comme *$@ On sait qu\u0026rsquo;il y a 26 lettres dans l\u0026rsquo;alphabet =\u0026gt; Eur√™ka: On peut utiliser la 1√®re lettre du pr√©nom, la transformer en index en utilisant sa position dans l\u0026rsquo;alphabet, et associer le pr√©nom √† cet index. On dit que l\u0026rsquo;index est une cl√© et que le pr√©nom est une valeur par exemple:\nManutea =\u0026gt; M =\u0026gt; M est la 14√®me lettre de l\u0026rsquo;alphabet, donc Manutea sera le 14√®me √©l√©ment. Pour rappel, l\u0026rsquo;index commence √† 0, donc M = index 13. cl√©: 13 valeur: Manutea\nPour Heiarii on aura: cl√©: 7 valeur: Heiarii\nCe qui nous donne:\nAmis (vide) (vide) (vide) (vide) (vide) (vide) (vide) Heiarii (vide) (vide) (vide) (vide) (vide) Manutea (vide) Purotu (vide) Reva (vide) (vide) (vide) Vai (vide) (vide) (vide) (vide) index 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 Avec cette map, on pourra facilement acc√©der aux informations de Vai, puisqu\u0026rsquo;on pourra juste aller directement √† l\u0026rsquo;index 21.\nInstant Dev En vrai, pour calculer l\u0026rsquo;index, on utilise une fonction de hachage (hash en anglais) qui permet de transformer les cl√©s en index. C\u0026rsquo;est pour √ßa qu\u0026rsquo;on appelle √ßa un HashMap en Java. Oui mais moi je n\u0026rsquo;ai pas envie de m\u0026rsquo;emb√™ter √† compter sur mes doigts √† quelle position est la lettre V\u0026hellip;\nTu as raison, dans la vraie vie, dans ton carnet d\u0026rsquo;adresse pour chaque lettre tu as une encoche o√π la lettre y est marqu√©e, et tu notes les informations dans les pages qui correspondent √† cette lettre.\nCarnet d'adresses papier, en rouge les encoches ‚Äî source: Wikim√©dia En informatique c\u0026rsquo;est le m√™me principe, sauf qu\u0026rsquo;on ne peut pas utiliser de lettre comme index, alors on est oblig√© de trouver cette astuce.\nEt en plus, il est nul ton carnet d\u0026rsquo;adresse, comment je fais si j\u0026rsquo;ai 2 amis qui s\u0026rsquo;appellent Vai et Vahine? Je mets Vahine dans la case juste apr√®s? Et si j\u0026rsquo;ai des centaines d\u0026rsquo;amis comme tu le disais au d√©but, je fais comment pour les mettre dans les 26 cases ?\nOk, tranquille, pas de stress.\nEn informatique, on peut combiner les structures, plut√¥t que d\u0026rsquo;associer un pr√©nom √† une lettre, on va associer une liste de pr√©noms √† une lettre. Ci-dessous on r√©√©crit notre map et on ajoute Vahine :\nCl√©s 7 13 15 17 21 ‚Üì ‚Üì ‚Üì ‚Üì ‚Üì Heiarii Manutea Purotu Reva Vai Vahine Comme tu l\u0026rsquo;as remarqu√©, au lieu de mettre directement les pr√©noms dans les cases, il y a des fl√®ches qui pointent vers des listes. On appelle √ßa un pointeur (ou pointer en anglais). c‚Äôest un m√©canisme qui permet √† l‚Äôordinateur de dire \u0026ldquo;Va chercher les donn√©es ailleurs.\u0026rdquo; Plut√¥t que de stocker directement les valeurs, on stocke l‚Äôendroit o√π elles se trouvent.\nC\u0026rsquo;est la plus grande force de l\u0026rsquo;informatique, on peut combiner diff√©rents concepts abstraits pour r√©pondre √† notre besoin.\nL\u0026rsquo;ensemble ‚Äî une structure unique Si comme moi tu fais ta liste de courses durant la semaine en pr√©vision des grandes courses du dimanche, tu as peut-√™tre d√©j√† eu la liste qui ressemble √† :\nlait oeufs pops viande salade oeufs Tu remarques que les oeufs apparaissent 2 fois. On appelle √ßa un doublon.\n√áa peut arriver si lundi tu t\u0026rsquo;es fait une omelette avec les derniers oeufs, tu les as not√©s pour en racheter. Puis que vendredi, tu voulais faire un g√¢teau, mais tu t\u0026rsquo;es souvenu que tu n\u0026rsquo;avais plus d\u0026rsquo;oeufs\u0026hellip; et alors tu les as r√©√©crits.\nC\u0026rsquo;est tr√®s sp√©cifique comme explication\u0026hellip; C\u0026rsquo;est ce qui t\u0026rsquo;es arriv√©, pas vrai?\nTu n\u0026rsquo;as pas de preuve. Cette accusation est fausse.\nBref, la liste et le tableau n\u0026rsquo;ont aucun moyen d\u0026rsquo;emp√™cher la pr√©sence de doublons dans leurs √©l√©ments. C\u0026rsquo;est pour √ßa qu\u0026rsquo;en informatique on a invent√© l\u0026rsquo;ensemble (ou set en anglais), une structure o√π chaque √©l√©ment est unique.\nPar contre, le set n\u0026rsquo;est pas ordonn√© comme le tableau et la liste. Il n\u0026rsquo;y a pas d\u0026rsquo;index permettant d\u0026rsquo;acc√©der directement au 2√®me ou 6√®me √©l√©ment.\nInstant Dev En informatique, pour faire un set, on utilise en fait une map o√π la cl√© est l\u0026rsquo;√©l√©ment. Le calcul de hash nous garantit qu\u0026rsquo;il ne peut pas y avoir de doublon. Et on met une valeur arbitraire dans la valeur associ√©e, comme 1 ou PRESENT.\nSi on veut une structure ordonn√©e sans doublons, on peut :\ncoder une liste avec une fonction d\u0026rsquo;ajout qui rejette les doublons, transformer un set en liste, utiliser une structure sp√©cialis√©e, comme LinkedHashSet en Java üìå Exemples dans la vie r√©elle L\u0026#39;ensemble des ingr√©dients qu‚Äôil te reste dans le frigo L\u0026#39;ensemble des invit√©s √† ton anniversaire üíª Exemples en informatique L\u0026#39;ensemble des num√©ros de passeport en Polyn√©sie fran√ßaise L\u0026#39;ensemble de tes amis Facebook Le graphe ‚Äî ou comment appeler l\u0026rsquo;ami d\u0026rsquo;un ami d\u0026rsquo;un ami Tu pr√©pares ta liste d‚Äôinvit√©s pour ton anniversaire, tu comptes inviter tout ton carnet d\u0026rsquo;adresses.\nEt l√†, tu r√©alises que tu n‚Äôas pas le contact de Paul. Tu l\u0026rsquo;as crois√© en soir√©e et il √©tait cool, tu voudrais l\u0026rsquo;inviter\u0026hellip; mais tu as oubli√© de lui demander son num√©ro.\nHeureusement, tu sais que Purotu le conna√Æt.\nTu l\u0026rsquo;appelles\u0026hellip; zut, elle n\u0026rsquo;a pas son num√©ro. Mais elle te donne le num√©ro de Tiare, une autre amie de Paul. Tu appelles Tiare, tu te pr√©sentes, tu l\u0026rsquo;invite √©galement car tu n\u0026rsquo;es pas un sauvage. Et tu lui demandes le num√©ro de Paul.\nBingo, elle l\u0026rsquo;a, tu appelles Paul et il est chaud pour venir √† ton anniversaire.\nLes liens entre ces personnes peuvent √™tre repr√©sent√©s par un graphe (ou graph en anglais).\nEt ce que tu viens de faire, sans t\u0026rsquo;en rendre compte, c\u0026rsquo;est un parcours de graphe, un algorithme !\n%%{ init: { 'theme': 'base', 'themeVariables': { 'primaryColor': '#ddd', 'primaryTextColor': '#007acc', 'primaryBorderColor': '#007acc', 'lineColor': '#007acc' } } }%% graph TD A[Toi] --- B[Manutea] A --- C[Vai] A --- D[Purotu] A --- E[Heiarii] A --- F[Reva] A --- G[Jean] D --- H[Tiare] H --- I[Paul] Graphe de relation entre les personnes Ce graphe est non orient√©, c\u0026rsquo;est-√†-dire qu\u0026rsquo;il n\u0026rsquo;y a pas de sens entre les √©l√©ments. Chaque case est un noeud, et chaque trait est une ar√™te.\nEffectivement pour √©viter de f√¢cher les personnes, on ne va pas dire \u0026ldquo;Purotu est l\u0026rsquo;ami de Tiare, mais Tiare n\u0026rsquo;est pas l\u0026rsquo;ami de Purotu\u0026rdquo;.\nPar contre, on peut utiliser un graphe orient√© pour repr√©senter les appels que tu as pass√©s.\n%%{ init: { 'theme': 'base', 'themeVariables': { 'primaryColor': '#ddd', 'primaryTextColor': '#007acc', 'primaryBorderColor': '#007acc', 'lineColor': '#007acc' } } }%% graph TD A[Toi] --\u003e B[Manutea] A --\u003e C[Vai] A --\u003e D[Purotu] A --\u003e E[Heiarii] A --\u003e F[Reva] A --\u003e G[Jean] A --\u003e H[Tiare] A --\u003e I[Paul] Graphe des appels que tu as pass√© Ici, chaque case est un noeud, tout comme le graphe non orient√©, mais cette fois-ci, chaque fl√®che est une ar√™te, et donne le sens d\u0026rsquo;appel.\nOn a donc les m√™mes donn√©es, mais on utilise la structure adapt√©e √† ce qu\u0026rsquo;on veut repr√©senter.\nEt c\u0026rsquo;est quoi le parcours de graphe?\nJe suis heureux que tu poses cette question, mais ta question d√©passe le cadre de cet article.\nConclusion On a d√©j√† vu pas mal de choses, je te laisse relire, essayer de combiner les structures entre elles, te renseigner sur internet en cherchant \u0026ldquo;structures de donn√©es\u0026rdquo; ou \u0026ldquo;data structure\u0026rdquo;.\nIl existe beaucoup de structures de donn√©es, celles qui sont pr√©sent√©es dans cet article sont juste les plus basiques, celles qu\u0026rsquo;on apprend dans les premi√®res heures de cours de programmation.\nSi tu souhaites continuer cette aventure, tu peux regarder la suite ici: IMVV ‚Äî Section 1 ‚Äî Chapitre 3 ‚Äî Structures de contr√¥le et algorithme, apprendre √† r√©fl√©chir\n‚Üê Retour √† la section\n‚Üê Retour √† l‚Äôintroduction\n","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/les-bases/structures-de-donnees/","summary":"\u003cp\u003eDans le pr√©c√©dent article \u003ca href=\"../file-et-pile/\"\u003eIMVV ‚Äî Section 1 ‚Äî Chapitre 1 ‚Äî File ou Pile ? L\u0026rsquo;art de passer avant les autres\u003c/a\u003e on a d√©couvert les files et les piles. Cette fois, on va survoler plusieurs autres \u003cstrong\u003estructures de donn√©es\u003c/strong\u003e (\u003cem\u003edata structures\u003c/em\u003e en anglais) qu\u0026rsquo;on utilise tr√®s souvent en informatique\u0026hellip; et dans la vraie vie.\u003c/p\u003e\n\u003cp\u003eN\u0026rsquo;oublie pas que les objectifs de ces articles sont :\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eTe donner une meilleure compr√©hension des bases de l‚Äôinformatique,\u003c/li\u003e\n\u003cli\u003eT\u0026rsquo;inspirer pour analyser ou optimiser les situations du quotidien,\u003c/li\u003e\n\u003cli\u003eou peut-√™tre, qui sait, te donner envie d\u0026rsquo;explorer encore plus loin\u0026hellip; jusqu‚Äô√† en faire ton m√©tier.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"le-tableau--la-base-de-presque-tout\"\u003eLe tableau ‚Äî la base de presque tout\u003c/h2\u003e\n\u003cp\u003eTu as peut-√™tre remarqu√© dans le pr√©c√©dent article que la \u003cstrong\u003efile\u003c/strong\u003e et la \u003cstrong\u003epile\u003c/strong\u003e se ressemblent beaucoup. En r√©alit√©, on peut les repr√©senter toutes les deux avec la m√™me structure : un \u003cstrong\u003etableau\u003c/strong\u003e.\u003c/p\u003e","title":"IMVV ‚Äî Section 1 ‚Äî Chapitre 2 ‚Äî Autres structures de donn√©es, j'organise mon bordel"},{"content":"Dans l\u0026rsquo;article pr√©c√©dent IMVV ‚Äî Section 1 ‚Äî Chapitre 2 ‚Äî Autres structures de donn√©es, j\u0026rsquo;organise mon bordel, on s\u0026rsquo;√©tait arr√™t√© sur ta question :\nEt c\u0026rsquo;est quoi le parcours de graphe?\nDans cet article, on va parler des structures de contr√¥le (control flow statements en anglais), qu\u0026rsquo;on utilise dans des algorithmes (algorithms en anglais).\nAvant d\u0026rsquo;expliquer l\u0026rsquo;algorithme que tu as fait, le parcours de graphe, on doit expliquer les structures de contr√¥le.\nN\u0026rsquo;oublie pas que les objectifs de ces articles sont :\nTe donner une meilleure compr√©hension des bases de l‚Äôinformatique, T\u0026rsquo;inspirer pour analyser ou optimiser les situations du quotidien, ou peut-√™tre, qui sait, te donner envie d\u0026rsquo;explorer encore plus loin\u0026hellip; jusqu‚Äô√† en faire ton m√©tier. Pseudo-code ‚Äî l\u0026rsquo;art de la cuisine Quand tu fais un g√¢teau, tu r√©alises les actions suivantes:\nPr√©chauffer le four Verser la farine dans le saladier Casser les oeufs et mettre le contenu dans le saladier Verser le lait dans le saladier Remuer Verser la pr√©paration dans un moule Mettre le moule au four Attendre 20 minutes Eteindre le four Sortir le moule du four D√©mouler Toute cette suite d\u0026rsquo;√©tapes est ce qu\u0026rsquo;on appelle un algorithme, et la fa√ßon dont on l\u0026rsquo;a √©crit, √ßa s\u0026rsquo;appelle du pseudo-code, parce que √ßa ressemble √† un langage de programmation, mais ce n\u0026rsquo;en est pas un.\nMais pourquoi on appelle √ßa un algorithme? on peut pas juste dire une suite d\u0026rsquo;actions?\nJe te laisse chercher sur internet pourquoi on appelle √ßa un algorithme.\nLa boucle for ‚Äî ou comment √™tre fiu Ton meilleur ami Manutea te demande \u0026ldquo;Comment tu as fait pour inviter toutes ces personnes √† ton anniversaire ?\u0026rdquo;. Laquelle de ces 2 phrases dirais-tu :\nJ\u0026rsquo;ai appel√© Manutea, puis j\u0026rsquo;ai appel√© Vai, puis j\u0026rsquo;ai appel√© Purotu, puis j\u0026rsquo;ai appel√© Heiarii, puis j\u0026rsquo;ai appel√© Reva, puis j\u0026rsquo;ai appel√© Jean, puis j\u0026rsquo;ai appel√© Tiare, puis j\u0026rsquo;ai appel√© Paul J\u0026rsquo;ai pris mon carnet d\u0026rsquo;adresses, puis pour chaque contact, j\u0026rsquo;ai appel√© le num√©ro correspondant La 1√®re phrase est un algorithme sans boucle (loop en anglais) : chaque action est √©crite explicitement.\nLa 2√®me, elle, utilise une boucle ‚Äî tu r√©p√®tes la m√™me action pour chaque contact. Sans forc√©ment y penser, tu utilises aussi une variable : un espace dans ta t√™te pour m√©moriser un num√©ro, que tu remplaces √† chaque nouvel appel.\nCette mani√®re de r√©p√©ter une action avec une variable, c‚Äôest exactement ce qu‚Äôun ordinateur fait quand on lui demande de parcourir une liste.\nSi tu relis bien la 2√®me phrase, tu verras que pour chaque est en gras. En anglais, pour chaque se dit for each, c\u0026rsquo;est pour √ßa qu\u0026rsquo;on l\u0026rsquo;appelle la boucle for dans la plupart des langages.\nSi on essayait d\u0026rsquo;√©crire un algorithme, sous forme de pseudo-code simple pour d√©crire la 2√®me phrase, √ßa donnerait :\nDans mon carnet d\u0026#39;adresses, pour chaque contact: J\u0026#39;ai appel√© le num√©ro correspondant au contact J\u0026#39;ai invit√© l\u0026#39;ami Fin pour \u0026ldquo;Dans mon carnet d\u0026rsquo;adresses, pour chaque contact\u0026rdquo; marque le d√©but de la boucle, et \u0026ldquo;Fin pour\u0026rdquo; marque la fin de la boucle.\nEntre ces 2 lignes, les actions \u0026ldquo;J\u0026rsquo;ai appel√© le num√©ro correspondant au contact\u0026rdquo; et \u0026ldquo;J\u0026rsquo;ai invit√© l\u0026rsquo;ami\u0026rdquo; forment ce qu\u0026rsquo;on appelle un bloc d\u0026rsquo;instructions.\nPar convention, on indente ce bloc ‚Äî on le d√©cale vers la droite ‚Äî pour montrer visuellement qu\u0026rsquo;il est √† l\u0026rsquo;int√©rieur de la boucle.\nOk, et quel est le rapport entre la boucle for et fiu comme marqu√© dans le titre ?\nSi on devait √©crire l\u0026rsquo;algorithme de la 1√®re phrase, √ßa donnerait :\nJ\u0026#39;ai appel√© Manutea J\u0026#39;ai appel√© Vai J\u0026#39;ai appel√© Purotu J\u0026#39;ai appel√© Heiarii J\u0026#39;ai appel√© Reva J\u0026#39;ai appel√© Jean J\u0026#39;ai appel√© Tiare J\u0026#39;ai appel√© Paul Chaque ligne est une action, donc il faut √©crire autant de lignes qu\u0026rsquo;il y a de contacts dans ta liste de contacts. Maintenant, que se passerait-il si tu devais inviter 100 personnes? Tu serais fiu.\nAlors qu\u0026rsquo;avec la boucle, tu n\u0026rsquo;as pas besoin de changer ton algorithme, c\u0026rsquo;est le m√™me, que tu aies 6 contacts ou 100.\nOui mais dans la vraie vie je dois quand m√™me appeler les amis un par un\nCet exemple n‚Äôest pas l√† pour dire que tu vas programmer ton t√©l√©phone ‚Äî mais pour te faire sentir la puissance de la boucle : un seul bloc, quelle que soit la longueur de ta liste.\nDans la vraie vie, tu fais un groupe Facebook avec tous tes amis et tu postes des messages d\u0026rsquo;informations dans le groupe pour organiser, idem pour un groupe SMS. Si t\u0026rsquo;es old school, tu postes un message dans le journal local et viendra qui verra. D\u0026rsquo;ailleurs j\u0026rsquo;en parlerai dans de prochains articles.\nLa boucle while ‚Äî ou comment faire ses devoirs avant d\u0026rsquo;aller jouer Quand tu √©tais plus jeune, on t\u0026rsquo;a s√ªrement d√©j√† dit \u0026ldquo;Fais d\u0026rsquo;abord tes devoirs, ensuite tu peux aller jouer\u0026rdquo;, ou autrement dit \u0026quot;Tant que tu n\u0026rsquo;a pas fini tes devoirs, tu travailles, ensuite tu peux aller jouer\u0026quot;.\nSi on devait √©crire cet algorithme, √ßa donnerait:\nTant que je n\u0026#39;ai pas fini mes devoirs: Je fais mes devoirs Fin tant que Je vais jouer \u0026ldquo;Tant que je n\u0026rsquo;ai pas fini mes devoirs\u0026rdquo; marque le d√©but de la boucle, et \u0026ldquo;Fin tant que\u0026rdquo; marque la fin de la boucle.\nEntre ces 2 lignes, l\u0026rsquo;action \u0026ldquo;Je fais mes devoirs\u0026rdquo; forme le bloc d\u0026rsquo;instructions.\nTu l\u0026rsquo;auras remarqu√©, c\u0026rsquo;est tr√®s similaire √† la boucle for, sauf qu\u0026rsquo;au lieu de parcourir des √©l√©ments, on v√©rifie une condition, et on r√©p√®te la boucle si la condition n\u0026rsquo;est remplie.\nOn appelle √ßa une boucle while, car Tant que se dit while en anglais.\nEnsuite, une fois que les devoirs sont finis, on sort de la boucle, on fait la suite des instructions, donc \u0026ldquo;Je vais jouer\u0026rdquo;. On aurait aussi pu avoir d\u0026rsquo;autres instructions apr√®s la boucle for, c\u0026rsquo;est juste que l\u0026rsquo;exemple ne s\u0026rsquo;y pr√™tait pas.\nMais alors‚Ä¶ pourquoi deux types de boucles si elles font (presque) la m√™me chose ? Pourquoi une boucle for, et une boucle while ?\nEn fait, en fonction du probl√®me qu\u0026rsquo;on veut r√©soudre :\ndans certains cas on pourra compter, et dans ce cas on pr√©f√®rera utiliser une boucle for dans certains cas on ne pourra pas compter, et dans ce cas on pr√©f√®rera utiliser une boucle while Par exemple, pour un enfant qui joue dehors:\nTant qu\u0026#39;il fait beau: Je joue Fin tant que Ici, impossible de compter.\nMais tu commences peut-√™tre √† te rendre compte d\u0026rsquo;une supercherie.\nInstant Dev üí° En r√©alit√©, toutes les boucles for peuvent √™tre r√©√©crites en boucle while.\nLa boucle for n‚Äôest qu‚Äôune boucle while optimis√©e, √©crite pour √™tre plus simple √† lire‚Ä¶ quand on sait compter.\nLes 2 types de boucles sont des instructions d\u0026rsquo;it√©ration, √† la diff√©rence des instructions simples comme \u0026ldquo;Je joue\u0026rdquo;, les instructions d\u0026rsquo;it√©ration permettre d\u0026rsquo;ex√©cuter des blocs d\u0026rsquo;instructions de mani√®re r√©p√©t√©e.\nBravo, tu commences √† r√©fl√©chir comme un d√©veloppeur !\nExplications\nPour rappel:\ndans une liste, l\u0026rsquo;index commence √† 0, dans une liste, le dernier index est √©gal au nombre d\u0026rsquo;√©l√©ments de la liste moins 1 Amis Manutea Vai Purotu Heiarii Reva Jean Tiare Paul index 0 1 2 3 4 5 6 7 Nombre d\u0026rsquo;√©l√©ments: 8\nune variable c\u0026rsquo;est juste un espace m√©moire o√π on stocke une donn√©e (un tableau, une liste, un pr√©nom, un num√©ro de t√©l√©phone) Si on reprend l\u0026rsquo;exemple de la boucle for:\nDans mon carnet d\u0026#39;adresses, pour chaque contact: J\u0026#39;appelle le num√©ro correspondant au contact J\u0026#39;invite l\u0026#39;ami Fin pour Derri√®re, voici plut√¥t ce que fait un ordinateur (de mani√®re simplifi√©e) :\nJe cr√©e une variable \u0026#34;index\u0026#34;, qui vaut 0 Tant que \u0026#34;index\u0026#34; est inf√©rieur au nombre d\u0026#39;√©l√©ments (8) du carnet d\u0026#39;adresses: Je regarde le contact qui se trouve √† l\u0026#39;\u0026#34;index\u0026#34; dans le carnet d\u0026#39;adresses Je r√©cup√®re son num√©ro Je l\u0026#39;invite \u0026#34;index\u0026#34; prend la valeur \u0026#34;index\u0026#34; + 1 Fin tant que Comme tu le vois, c\u0026rsquo;est un peu plus compliqu√©, c\u0026rsquo;est pour √ßa qu\u0026rsquo;on pr√©f√®re utiliser une boucle for quand on peut compter.\nL\u0026rsquo;instruction conditionnelle ‚Äî ou pourquoi il faut respecter le code de la route Juste au-dessus, on parlait de condition dans la boucle while. Mais on n\u0026rsquo;a jamais expliqu√© ce que c\u0026rsquo;√©tait.\nUne condition est une question qu\u0026rsquo;on se pose, et la r√©ponse est soit ‚Äúoui‚Äù, soit ‚Äúnon‚Äù ‚Äî jamais les deux, jamais \u0026ldquo;un peu\u0026rdquo;.\nQuand on √©crit \u0026ldquo;Tant que je n\u0026rsquo;ai pas fini mes devoirs\u0026rdquo;, √† chaque r√©p√©tition on pose la question \u0026ldquo;Est-ce que j\u0026rsquo;ai fini mes devoirs?\u0026rdquo;.\nEn informatique, comme dans la vraie vie, une condition doit √™tre claire.\nOn peut utiliser ce concept pour faire des branchements dans notre code, dans une instruction conditionnelle (conditional statement en anglais).\nPrenons un exemple simple : tu es en voiture, tu approches un feu tricolore. Il est vert.\nQue fais-tu si le feu passe √† l‚Äôorange juste devant toi‚ÄØ?\nVoici un algorithme qui repr√©sente cette situation :\nSi le feu passe au orange, alors: Tu t\u0026#39;arr√™tes Sinon (c\u0026#39;est toujours vert): Tu continues et traverse l\u0026#39;intersection Fin si \u0026ldquo;Si le feu passe au orange,\u0026rdquo; marque le d√©but de l\u0026rsquo;instruction conditionnelle, \u0026ldquo;alors\u0026rdquo; marque la branche du si, \u0026ldquo;Sinon\u0026rdquo; marque la branche du sinon, et \u0026ldquo;Fin si\u0026rdquo; marque la fin de l\u0026rsquo;instruction conditionnelle.\nDe la m√™me mani√®re que pour les boucles, chaque branche est un bloc d\u0026rsquo;instructions. Comme pour les boucles, chaque branche forme un bloc d‚Äôinstructions, qu‚Äôon indente pour bien le rep√©rer.\nPour visualiser, imagine un arbre : chaque fois qu‚Äôune condition est test√©e, tu choisis une branche √† suivre. Le chemin d√©pend de tes r√©ponses.\nRevenons √† notre parcours de graphe Rappels Tu avais appel√© tes amis pour les inviter √† ton anniversaire, et tu avais √©t√© jusqu\u0026rsquo;au bout du monde, en sautant de relations en relations, pour inviter Paul. Tu avais fait ces actions :\nTu comptes inviter tout ton carnet d\u0026#39;adresses. Tu r√©alises que tu n‚Äôas pas le contact de Paul. Tu l\u0026#39;as crois√© en soir√©e et il √©tait cool, tu voudrais l\u0026#39;inviter... mais t\u0026#39;as oubli√© de lui demander son num√©ro. Heureusement, tu sais que Purotu le conna√Æt. Tu l\u0026#39;appelles... zut, elle n\u0026#39;a pas son num√©ro. Mais elle te donne le num√©ro de Tiare, une autre amie de Paul. Tu appelles Tiare, tu te pr√©sentes, tu l\u0026#39;invites √©galement car tu n\u0026#39;es pas un sauvage. Et tu lui demandes le num√©ro de Paul. Bingo, elle l\u0026#39;a, tu appelles Paul et il est chaud pour venir √† ton anniversaire. Ci-dessous se trouve le graphe de relation entre les personnes, un graphe non orient√©.\n%%{ init: { 'theme': 'base', 'themeVariables': { 'primaryColor': '#ddd', 'primaryTextColor': '#007acc', 'primaryBorderColor': '#007acc', 'lineColor': '#007acc' } } }%% graph TD A[Toi] --- B[Manutea] A --- C[Vai] A --- D[Purotu] A --- E[Heiarii] A --- F[Reva] A --- G[Jean] D --- H[Tiare] H --- I[Paul] Graphe de relation entre les personnes En se basant sur ce qu\u0026rsquo;on a appris dans cet article, on va √©crire un algorithme pour repr√©senter les actions que tu as r√©alis√©es pour inviter tes amis :\n# √âtape 1 : inviter tous mes amis directs (les noeuds les plus proches de \u0026#34;Toi\u0026#34; dans le graphe) Je cr√©e une variable \u0026#34;liste d\u0026#39;amis\u0026#34;, contenant tous mes amis directs Je cr√©e une variable \u0026#34;ami\u0026#34;, le contact courant Dans la \u0026#34;liste d\u0026#39;amis\u0026#34;, pour chaque \u0026#34;ami\u0026#34; : J\u0026#39;appelle \u0026#34;ami\u0026#34; Si \u0026#34;ami\u0026#34; r√©pond, alors : Je l\u0026#39;invite √† mon anniversaire Fin si Fin pour # √âtape 2 : retrouver Paul (en parcourant le graphe en largeur) Je cr√©e une variable \u0026#34;file\u0026#34;, initialis√©e avec la \u0026#34;liste d\u0026#39;amis\u0026#34; Je cr√©e une variable \u0026#34;visit√©s\u0026#34;, une liste vide Tant que la \u0026#34;file\u0026#34; n‚Äôest pas vide : Je prends le premier √©l√©ment de la \u0026#34;file\u0026#34;, je le stocke dans \u0026#34;ami\u0026#34; Si \u0026#34;ami\u0026#34; n‚Äôest pas dans \u0026#34;visit√©s\u0026#34;, alors : J‚Äôajoute \u0026#34;ami\u0026#34; √† \u0026#34;visit√©s\u0026#34; J\u0026#39;appelle \u0026#34;ami\u0026#34; Si \u0026#34;ami\u0026#34; r√©pond, alors : Je lui demande s‚Äôil conna√Æt Paul Si \u0026#34;ami\u0026#34; me donne le num√©ro de Paul : Je cr√©e une variable \u0026#34;Paul\u0026#34; J\u0026#39;appelle \u0026#34;Paul\u0026#34; Si \u0026#34;Paul\u0026#34; r√©pond, alors : Je l‚Äôinvite √† mon anniversaire Je termine la recherche Fin si Sinon : Je r√©cup√®re la liste des amis de \u0026#34;ami\u0026#34; Pour chaque \u0026#34;contact\u0026#34; dans cette liste : J‚Äôajoute \u0026#34;contact\u0026#34; √† la \u0026#34;file\u0026#34; Fin pour Fin si Fin si Fin si Fin tant que √Ä premi√®re vue, √ßa a l\u0026rsquo;air compliqu√©. Mais en fait si tu prends le temps de d√©cortiquer, de bien regarder, tu verras que ce sont juste les actions que tu as r√©alis√©s plus haut, mais dans un langage plus proche de ce que fait un ordinateur.\nLa seule chose qu\u0026rsquo;on a fait en plus des concepts de base, c\u0026rsquo;est qu\u0026rsquo;on a combin√© les structures de contr√¥le et les structures de donn√©es, et le tout nous donne notre algorithme de parcours de graphe !\nInstant Dev üí° On a parcouru le graphe en largeur, c\u0026rsquo;est-√†-dire qu\u0026rsquo;on a d\u0026rsquo;abord regard√© les noeuds voisins de notre point de d√©part.\nD\u0026rsquo;autres algorithmes connus et enseign√©s en informatique sont le parcours en profondeur, l\u0026rsquo;algorithme de Dijkstra, A* et Floyd-Warshall, tu peux regarder sur internet si √ßa t\u0026rsquo;int√©resse.\nConclusion Dans cet article on a appris ce que sont :\nLes structures de contr√¥le, Les boucles, Les conditions, Les variables, Les algorithmes. Il existe d\u0026rsquo;autres structures de contr√¥le, des types de variables, et des algorithmes qu\u0026rsquo;on peut r√©utiliser pour r√©pondre √† beaucoup de probl√®mes. Comme d\u0026rsquo;habitude, je te laisse chercher sur internet si tu veux aller plus loin.\nMais le plus important, c\u0026rsquo;est que tu commences √† r√©fl√©chir comme un d√©veloppeur, et √† comprendre le pseudo-code. Dans la vraie vie, si tu as un probl√®me complexe √† r√©soudre, tu peux essayer de l\u0026rsquo;√©crire comme on l\u0026rsquo;a fait pour le parcours de graphe. Prends ton temps et d√©compose le probl√®me.\nNous avons fini cette section \u0026ldquo;IMMV ‚Äî Section 1 ‚Äî Les Bases : structures et contr√¥le\u0026rdquo;, dans cette section, nous avons √©galement vu les structures de donn√©es.\nDans la prochaine section, IMMV ‚Äî Section 2 ‚Äî L\u0026rsquo;ex√©cution : comment faire des actions ?, nous verrons que l\u0026rsquo;ordinateur et l\u0026rsquo;humain font les actions de mani√®re tr√®s similaire.\n‚Üê Retour √† la section\n‚Üê Retour √† l‚Äôintroduction\n","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/les-bases/structures-de-controle/","summary":"\u003cp\u003eDans l\u0026rsquo;article pr√©c√©dent \u003ca href=\"../structures-de-donnees/\"\u003eIMVV ‚Äî Section 1 ‚Äî Chapitre 2 ‚Äî Autres structures de donn√©es, j\u0026rsquo;organise mon bordel\u003c/a\u003e, on s\u0026rsquo;√©tait arr√™t√© sur ta question :\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eEt c\u0026rsquo;est quoi le parcours de graphe?\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eDans cet article, on va parler des \u003cstrong\u003estructures de contr√¥le\u003c/strong\u003e (\u003cem\u003econtrol flow statements\u003c/em\u003e en anglais), qu\u0026rsquo;on utilise dans des \u003cstrong\u003ealgorithmes\u003c/strong\u003e (\u003cem\u003ealgorithms\u003c/em\u003e en anglais).\u003c/p\u003e\n\u003cp\u003eAvant d\u0026rsquo;expliquer l\u0026rsquo;algorithme que tu as fait, le \u003cstrong\u003eparcours de graphe\u003c/strong\u003e, on doit expliquer les structures de contr√¥le.\u003c/p\u003e","title":"IMVV ‚Äî Section 1 ‚Äî Chapitre 3 ‚Äî Structures de contr√¥le et algorithme, apprendre √† r√©fl√©chir"},{"content":"Pr√©c√©demment, on a vu qu\u0026rsquo;en rajoutant des serveurs, on pouvait servir plus de familles. Dans cette section on verra diff√©rents tips permettant d\u0026rsquo;optimiser un programme existant et la vie r√©elle.\nChapitres IMVV ‚Äî Section 3 ‚Äî Chapitre 1 ‚Äî La m√©moire, ou comment √©viter les p√©nuries dans un magasin IMVV ‚Äî Section 3 ‚Äî Chapitre 2 ‚Äî M√©mo√Øsation et Lazy loading, les techniques du fain√©ant ultime ","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/optimisation/optimisation/","summary":"\u003cp\u003ePr√©c√©demment, on a vu qu\u0026rsquo;en rajoutant des serveurs, on pouvait servir plus de familles. Dans cette section on verra diff√©rents tips permettant d\u0026rsquo;optimiser un programme existant et la vie r√©elle.\u003c/p\u003e\n\u003ch1 id=\"chapitres\"\u003eChapitres\u003c/h1\u003e\n\n\n\u003cul\u003e\n  \n\t\t\n\t\n\t\t\n    \t\n      \t\u003cli\u003e\u003ca href=\"/blog.dev/posts/miroir-informatique-vraie-vie/optimisation/memoire/\"\u003eIMVV ‚Äî Section 3 ‚Äî Chapitre 1 ‚Äî La m√©moire, ou comment √©viter les p√©nuries dans un magasin\u003c/a\u003e\u003c/li\u003e\n    \t\n  \t\n\t\n\t\t\n    \t\n      \t\u003cli\u003e\u003ca href=\"/blog.dev/posts/miroir-informatique-vraie-vie/optimisation/memoisation/\"\u003eIMVV ‚Äî Section 3 ‚Äî Chapitre 2 ‚Äî M√©mo√Øsation et Lazy loading, les techniques du fain√©ant ultime\u003c/a\u003e\u003c/li\u003e\n    \t\n  \t\n\t\n\u003c/ul\u003e","title":"IMMV ‚Äî Section 3 ‚Äî L'optimisation : comment se faire passer pour un coach de vie"},{"content":"Dans cette section, nous verrons comment les actions sont ex√©cut√©es, par les ordinateurs et par les personnes. Et on verra quelques pistes pour r√©pondre √† une accumulation de t√¢ches.\nChapitres IMMV ‚Äî Section 2 ‚Äî Chapitre 1 ‚Äî Synchrone et Asynchrone, ou comment r√©agir au changement IMMV ‚Äî Section 2 ‚Äî Chapitre 2 ‚Äî Monothread, Multithread, Parall√©lisme et Concurrence, je ne peux pas tout faire en m√™me temps ! ","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/l-execution/l-execution/","summary":"\u003cp\u003eDans cette section, nous verrons comment les actions sont ex√©cut√©es, par les ordinateurs et par les personnes. Et on verra quelques pistes pour r√©pondre √† une accumulation de t√¢ches.\u003c/p\u003e\n\u003ch1 id=\"chapitres\"\u003eChapitres\u003c/h1\u003e\n\n\n\u003cul\u003e\n  \n\t\t\n\t\n\t\t\n    \t\n      \t\u003cli\u003e\u003ca href=\"/blog.dev/posts/miroir-informatique-vraie-vie/l-execution/sync-async/\"\u003eIMMV ‚Äî Section 2 ‚Äî Chapitre 1 ‚Äî Synchrone et Asynchrone, ou comment r√©agir au changement\u003c/a\u003e\u003c/li\u003e\n    \t\n  \t\n\t\n\t\t\n    \t\n      \t\u003cli\u003e\u003ca href=\"/blog.dev/posts/miroir-informatique-vraie-vie/l-execution/threads/\"\u003eIMMV ‚Äî Section 2 ‚Äî Chapitre 2 ‚Äî Monothread, Multithread, Parall√©lisme et Concurrence, je ne peux pas tout faire en m√™me temps !\u003c/a\u003e\u003c/li\u003e\n    \t\n  \t\n\t\n\u003c/ul\u003e","title":"IMMV ‚Äî Section 2 ‚Äî L'ex√©cution : comment faire des actions ?"},{"content":"Dans cette section, nous verrons les bases permettant de stocker et manipuler des donn√©es.\nChapitres IMVV ‚Äî Section 1 ‚Äî Chapitre 1 ‚Äî File ou Pile ? L\u0026#39;art de passer avant les autres IMVV ‚Äî Section 1 ‚Äî Chapitre 2 ‚Äî Autres structures de donn√©es, j\u0026#39;organise mon bordel IMVV ‚Äî Section 1 ‚Äî Chapitre 3 ‚Äî Structures de contr√¥le et algorithme, apprendre √† r√©fl√©chir ","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/les-bases/les-bases/","summary":"\u003cp\u003eDans cette section, nous verrons les bases permettant de stocker et manipuler des donn√©es.\u003c/p\u003e\n\u003ch1 id=\"chapitres\"\u003eChapitres\u003c/h1\u003e\n\n\n\u003cul\u003e\n  \n\t\t\n\t\n\t\t\n    \t\n      \t\u003cli\u003e\u003ca href=\"/blog.dev/posts/miroir-informatique-vraie-vie/les-bases/file-et-pile/\"\u003eIMVV ‚Äî Section 1 ‚Äî Chapitre 1 ‚Äî File ou Pile ? L\u0026#39;art de passer avant les autres\u003c/a\u003e\u003c/li\u003e\n    \t\n  \t\n\t\n\t\t\n    \t\n      \t\u003cli\u003e\u003ca href=\"/blog.dev/posts/miroir-informatique-vraie-vie/les-bases/structures-de-donnees/\"\u003eIMVV ‚Äî Section 1 ‚Äî Chapitre 2 ‚Äî Autres structures de donn√©es, j\u0026#39;organise mon bordel\u003c/a\u003e\u003c/li\u003e\n    \t\n  \t\n\t\n\t\t\n    \t\n      \t\u003cli\u003e\u003ca href=\"/blog.dev/posts/miroir-informatique-vraie-vie/les-bases/structures-de-controle/\"\u003eIMVV ‚Äî Section 1 ‚Äî Chapitre 3 ‚Äî Structures de contr√¥le et algorithme, apprendre √† r√©fl√©chir\u003c/a\u003e\u003c/li\u003e\n    \t\n  \t\n\t\n\u003c/ul\u003e","title":"IMMV ‚Äî Section 1 ‚Äî Les bases : structures et contr√¥le"},{"content":"\u0026lsquo;Ia ora na,\nL\u0026rsquo;informatique semble souvent obscure pour beaucoup. Quand je dis que je suis ing√©nieur informatique, on me demande r√©guli√®rement : ¬´ Mais tu fais quoi exactement ? ¬ª.\nAvec le temps, j‚Äôai pris l‚Äôhabitude de vulgariser mon m√©tier. Et ce qui fonctionne le mieux, ce sont les exemples concrets tir√©s de la vie quotidienne.\nEn √©cole d\u0026rsquo;ing√©nieur, j\u0026rsquo;apprenais beaucoup plus facilement l\u0026rsquo;informatique en partant de situations r√©elles. √Ä travers cette s√©rie d‚Äôarticles, \u0026ldquo;L‚Äôinformatique, un miroir de la vraie vie\u0026rdquo; (abr√©g√© IMVV), je vais tenter d‚Äôexpliquer des concepts informatiques en m‚Äôappuyant sur des sc√®nes famili√®res du quotidien, sur un ton l√©ger. Parce que finalement, coder un programme ou g√©rer une file d‚Äôattente au magasin, ce n‚Äôest pas si diff√©rent.\nInformations de lecture Avant de lire les articles list√©s en bas de cette page, quelques informations pour vous faciliter la lecture :\nIl y a un mode sombre et un mode clair : En haut de chaque page se trouve une ic√¥ne pour interchanger entre les modes de lecture sombre et clair\nJ\u0026rsquo;utiliserai des apart√©s pour les d√©veloppeurs,\nInstant Dev Ceci est un apart√© pour les d√©veloppeurs, si tu es non d√©veloppeur tu peux lire, mais tu auras peut-√™tre mal √† la t√™te. J\u0026rsquo;utiliserai des interjections de lecteur, J\u0026rsquo;interviens comme si j\u0026rsquo;√©tais toi, lecteur, pour aider l\u0026rsquo;auteur de ce blog √† rendre ces articles dynamiques\nCette s√©rie d\u0026rsquo;articles n\u0026rsquo;est pas un cours d\u0026rsquo;informatique, vous n\u0026rsquo;apprendrez pas √† d√©velopper juste en suivant ces articles. Mot de fin Que tu sois curieux, d√©butant ou simplement en qu√™te de sens dans ce monde num√©rique, cette s√©rie pourrait bien t‚Äôapporter quelque chose.\nTu y trouveras peut-√™tre :\nune meilleure compr√©hension des bases de l‚Äôinformatique, des id√©es pour analyser ou optimiser les situations du quotidien, ou m√™me, qui sait, l‚Äôenvie de plonger plus loin dans ce domaine‚Ä¶ jusqu‚Äô√† en faire ton m√©tier. Bien s√ªr, cette s√©rie n‚Äôexplorera qu‚Äôune infime partie de ce vaste domaine qu‚Äôest l‚Äôinformatique. Apr√®s tout, peut-on vraiment expliquer enti√®rement l\u0026rsquo;informatique\u0026hellip; un domaine qui, justement, est le miroir de la vie* ?\n*: cette analogie est √† prendre avec recul : l‚Äôinformatique ne refl√®te pas toute la complexit√© de la vie.\nLes articles de la s√©rie (En cours de r√©daction) IMMV ‚Äî Section 1 ‚Äî Les bases : structures et contr√¥le IMMV ‚Äî Section 1 ‚Äî Les bases : structures et contr√¥le IMVV ‚Äî Section 1 ‚Äî Chapitre 1 ‚Äî File ou Pile ? L\u0026#39;art de passer avant les autres IMVV ‚Äî Section 1 ‚Äî Chapitre 2 ‚Äî Autres structures de donn√©es, j\u0026#39;organise mon bordel IMVV ‚Äî Section 1 ‚Äî Chapitre 3 ‚Äî Structures de contr√¥le et algorithme, apprendre √† r√©fl√©chir IMMV ‚Äî Section 2 ‚Äî L\u0026#39;ex√©cution : comment faire des actions ? IMMV ‚Äî Section 2 ‚Äî L\u0026#39;ex√©cution : comment faire des actions ? IMMV ‚Äî Section 2 ‚Äî Chapitre 1 ‚Äî Synchrone et Asynchrone, ou comment r√©agir au changement IMMV ‚Äî Section 2 ‚Äî Chapitre 2 ‚Äî Monothread, Multithread, Parall√©lisme et Concurrence, je ne peux pas tout faire en m√™me temps ! IMMV ‚Äî Section 3 ‚Äî L\u0026#39;optimisation : comment se faire passer pour un coach de vie IMMV ‚Äî Section 3 ‚Äî L\u0026#39;optimisation : comment se faire passer pour un coach de vie IMVV ‚Äî Section 3 ‚Äî Chapitre 1 ‚Äî La m√©moire, ou comment √©viter les p√©nuries dans un magasin IMVV ‚Äî Section 3 ‚Äî Chapitre 2 ‚Äî M√©mo√Øsation et Lazy loading, les techniques du fain√©ant ultime ","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/introduction/","summary":"\u003cp\u003e\u0026lsquo;Ia ora na,\u003c/p\u003e\n\u003cp\u003eL\u0026rsquo;informatique semble souvent obscure pour beaucoup. Quand je dis que je suis ing√©nieur informatique, on me demande r√©guli√®rement : ¬´ Mais tu fais quoi exactement ? ¬ª.\u003c/p\u003e\n\u003cp\u003eAvec le temps, j‚Äôai pris l‚Äôhabitude de vulgariser mon m√©tier. Et ce qui fonctionne le mieux, ce sont les exemples concrets tir√©s de la vie quotidienne.\u003c/p\u003e\n\u003cp\u003eEn √©cole d\u0026rsquo;ing√©nieur, j\u0026rsquo;apprenais beaucoup plus facilement l\u0026rsquo;informatique en partant de situations r√©elles.\n√Ä travers cette s√©rie d‚Äôarticles, \u003cstrong\u003e\u0026ldquo;L‚Äôinformatique, un miroir de la vraie vie\u0026rdquo;\u003c/strong\u003e (abr√©g√© \u003cem\u003eIMVV\u003c/em\u003e), je vais tenter d‚Äôexpliquer des concepts informatiques en m‚Äôappuyant sur des sc√®nes famili√®res du quotidien, sur un ton l√©ger.\nParce que finalement, coder un programme ou g√©rer une file d‚Äôattente au magasin, ce n‚Äôest pas si diff√©rent.\u003c/p\u003e","title":"IMMV - Introduction - L'informatique, un miroir de la vraie vie"},{"content":"Introduction Cet article est un aper√ßu tr√®s rapide des moyens de paiement en Polyn√©sie Fran√ßaise.\nUpdate (12/05/2022): suite √† quelques feedback, je me rend compte que cet article est √† destination des d√©veloppeurs de site de e-shopping, des commer√ßants, de mes confr√®res mon√©ticiens. Cet article sera complexe √† lire si vous n\u0026rsquo;avez jamais travaill√© avec un TPE, avec une plateforme de paiement, avec des cartes bancaires.\nDisclaimer: Au moment o√π j\u0026rsquo;√©cris cet article, je travaille √† l\u0026rsquo;Oc√©anienne des Services Bancaires (OSB), Ces articles ne sont pas sponsoris√©s par OSB, et j\u0026rsquo;encourage les gens √† faire des tutoriels pour les solutions des autres fournisseurs de solutions de paiement.\nLes diff√©rents types de carte En Polyn√©sie Fran√ßaise, il est possible de payer avec plusieurs types de cartes.\nCarte Bancaire (anciennement Carte Bleue, co-brand√©es ou non de Visa ou Mastercard), American Express (AMEX), Cartes privatives (Socredo Verte / Gold, Banque de Polyn√©sie Hoa, CCP de Fare Rata, Carte Tiare de la Banque de Tahiti), Union Pay International (UPI), Discover, Japan Credit Bureau (JCB) Les 3 derniers types de cartes sont surtout utilis√©s par les touristes.\nLes cartes privatives composent la majorit√© des cartes d√©tenues par les habitants de la Polyn√©sie Fran√ßaise.\nPourquoi autant de personnes ont une carte privative ? Les cartes privatives sont propos√©es par les diff√©rentes banques locales (√† l\u0026rsquo;exception d\u0026rsquo;OFINA qui √©met exclusivement les cartes AMEX). Il s\u0026rsquo;agit des banques Socredo, Banque de Tahiti, Banque de Polyn√©sie, et Fare Rata.\nLes cartes privatives sont soumises √† des r√©glementations et des frais moins co√ªteux que les cartes internationales.\nEn outre, elles sont uniquement r√©gul√©es par les banques locales contrairement aux cartes bancaires internationales, qui sont non seulement r√©gul√©es par les banques locales, mais aussi par les r√©seaux internationaux (CB, Visa, Mastercard, Union Pay, etc.).\nC\u0026rsquo;est en partie √† cause de ces r√©glementations et frais moins co√ªteux que les clients des banques doivent remplir moins de conditions pour avoir une carte privative. C\u0026rsquo;est pour cela que les cartes privatives sont plus r√©pandues sur le territoire.\nNotes:\nLes r√©seaux peuvent d√©cider d\u0026rsquo;appliquer des amendes voire de d√©sactiver le flux vers un acteur mon√©taire (banque, processeur de paiement, etc.) si celui-ci ne respecte pas la r√©glementation. Cette r√©glementation est mise √† jour r√©guli√®rement.\nPour les cartes privatives, ce sont les banques locales qui imposent leur r√©glementation, par abus de langage, on parle aussi de r√©seau privatif pour d√©signer l\u0026rsquo;ensemble de ces banques.\nCes r√©glementations sont suivies par les banques centrales des pays, par exemple l\u0026rsquo;IEOM en Polyn√©sie Fran√ßaise.\nJ\u0026rsquo;ai inclus la carte Tiare de la Banque de Tahiti dans les cartes privatives car elle a les m√™mes limitations g√©ographiques que celles-ci, et elle fonctionne aussi en m√©tropole, mais il s\u0026rsquo;agit bien d\u0026rsquo;une CB, donc elle est soumise aux r√©glementations CB.\nLes cartes Socredo privatives sont maintenant co-brand√©es UPI, mais il y a bien 2 applications dans la carte, sur le territoire, c\u0026rsquo;est l\u0026rsquo;application privative qui est utilis√©e, √† l\u0026rsquo;international, c\u0026rsquo;est l\u0026rsquo;application UPI qui est utilis√©e.\nFonctionnement des transactions Le sch√©ma √† 4 coins est l\u0026rsquo;un des sch√©mas de r√©f√©rence de la mon√©tique. Il explique les entit√©s qui entrent en jeu dans une transaction.\nLa banque √©mettrice √©met la carte et la fournit au porteur.\nLa banque acqu√©reuse fournit un contrat accepteur au commer√ßant, afin que celui-ci puisse encaisser les paiements avec les cartes, moyennant une commission, en plus des services annexes autour de l\u0026rsquo;encaissement (exemple: relev√© TPE). Les TPE et solutions de paiement en ligne sont des services d\u0026rsquo;encaissement.\nUn syst√®me d\u0026rsquo;acceptation est un logiciel ou un ensemble de logiciels, qui permet d\u0026rsquo;encaisser une carte bancaire, par exemple les TPE et les plateformes de paiement en ligne.\nIl existe 2 modes de fonctionnement pour le d√©roulement d\u0026rsquo;un paiement:\nle mode single message le mode dual message Lorsque vous payez avec votre carte, vous r√©alisez une transaction. Si toutes les r√®gles de gestion sont valid√©es, la transaction est autoris√©e.\nEn single message, la transaction autoris√©e est directement transform√©e en mouvement financier, i.e. un enregistrement est cr√©√© chez la banque acqu√©reuse qui dit \u0026ldquo;M. Client doit 1000 XPF √† M. Commer√ßant\u0026rdquo;.\nEn dual message, la transaction est enregistr√©e sur le TPE, ou sur la plateforme de paiement, puis, tous les jours √† une certaine heure, l\u0026rsquo;ensemble des transactions de la journ√©e sont envoy√©es √† la banque acqu√©reuse sous forme de mouvement financier.\nEn Polyn√©sie Fran√ßaise, le mode dual message est le plus r√©pandu, c\u0026rsquo;est d\u0026rsquo;ailleurs pour √ßa que l\u0026rsquo;on vous demande de ne pas d√©brancher votre TPE, votre internet, votre r√©seau √©lectrique.\nLes cartes et les syst√®mes d\u0026rsquo;acceptation Pour qu\u0026rsquo;un syst√®me d\u0026rsquo;acceptation puisse encaisser une carte, elle doit reconna√Ætre la carte.\nPour reconna√Ætre une carte, on utilise le BIN, qui sont les N premiers chiffres du num√©ro de la carte, N √©tant d√©fini par le r√©seau.\nDe plus, seule une application sp√©cifique √† ce r√©seau peut reconna√Ætre cette carte. Par exemple, pour une transaction avec une carte AMEX sur un TPE, c\u0026rsquo;est uniquement une application TPE AMEX qui pourra la reconna√Ætre, mais seulement si la carte fait partie d\u0026rsquo;une plage de BIN accept√©e par l\u0026rsquo;application.\nNote: Dans un TPE, il peut y avoir plusieurs applications, quand une carte est ins√©r√©e, le TPE demande √† chaque application \u0026ldquo;Peux-tu accepter cette carte?\u0026rdquo;.\nDe la m√™me mani√®re, pour une plateforme de paiement en ligne, celle-ci ne pourra accepter que des cartes qui font partie de ses plages de BIN d√©clar√©es.\nZoom sur le paiement en ligne en Polyn√©sie Fran√ßaise Comme √©nonc√© pr√©c√©demment, les cartes privatives sont majoritaires en Polyn√©sie Fran√ßaise, et elles ne sont pas reconnues √† l\u0026rsquo;√©tranger (sauf pour les cartes Socredo co-brand√©es UPI, comme cit√© pr√©c√©demment) car les BIN privatifs ne sont pas d√©clar√©s dans le monde.\nC\u0026rsquo;est pour cela qu\u0026rsquo;on ne peut pas payer avec une carte privative sur la plupart des plateformes de paiement en ligne (Paypal, Stripe, etc.), qui sont internationales.\nPour rem√©dier √† ce probl√®me, OSB propose Payzen, et la Banque de Tahiti propose SystemPay.\n√Ä mon avis, √† l\u0026rsquo;heure actuelle, c\u0026rsquo;est vers ces solutions que je conseille les commer√ßants d\u0026rsquo;aller, car il serait dommage de se priver des cartes privatives, alors qu\u0026rsquo;elles sont plus nombreuses.\nNotes:\nLes 2 solutions sont en r√©alit√© bas√©es sur les solutions Payzen et SystemPay de Lyra, soci√©t√© situ√©e en France. Certains d\u0026rsquo;entre vous ont d\u0026rsquo;ailleurs peut-√™tre d√©j√† √©t√© confus en recherchant de la documentation technique de ces solutions et se sont perdus entre:\nla documentation Payzen d\u0026rsquo;OSB, la documentation Payzen de Lyra, la documentation SystemPay de la Banque de Tahiti, la documentation SystemPay de Lyra. Je vous conseille de vous focaliser sur les documentations locales, et ensuite de compl√©ter avec les documentations de Lyra.\nConclusion Il existe plusieurs types de cartes.\nLes protocoles de paiement s\u0026rsquo;inscrivent dans un sch√©ma √† 4 coins, il y a plusieurs acteurs qui entrent en jeu.\nIl y a une r√©glementation g√©n√©rale qui englobe tous les types de cartes, et chaque type a √©galement sa r√©glementation sp√©cifique. Les banques sont soumises √† ces r√©glementations, l\u0026rsquo;IEOM et les r√©seaux (VISA, Mastercard, AMEX, etc.) veillent √† ce que les banques respectent ces r√©glementations.\nLa g√©ographie et les accords entre les acteurs sont importants pour comprendre les contraintes des syst√®mes de paiement locaux.\nEn Polyn√©sie Fran√ßaise, la majorit√© des cartes bancaires sont des cartes privatives, pour des raisons √©conomiques et r√©glementaires.\n","permalink":"http://localhost:1313/blog.dev/posts/intro-moyens-paiement/","summary":"\u003ch1 id=\"introduction\"\u003eIntroduction\u003c/h1\u003e\n\u003cp\u003eCet article est un aper√ßu tr√®s rapide des moyens de paiement en Polyn√©sie Fran√ßaise.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eUpdate (12/05/2022): suite √† quelques feedback, je me rend compte que cet article est √† destination des d√©veloppeurs de site de e-shopping, des commer√ßants, de mes confr√®res mon√©ticiens. Cet article sera complexe √† lire si vous n\u0026rsquo;avez jamais travaill√© avec un TPE, avec une plateforme de paiement, avec des cartes bancaires.\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e\u003cstrong\u003eDisclaimer\u003c/strong\u003e: Au moment o√π j\u0026rsquo;√©cris cet article, je travaille √† l\u0026rsquo;Oc√©anienne des Services Bancaires (OSB), Ces articles ne sont pas sponsoris√©s par OSB, et j\u0026rsquo;encourage les gens √† faire des tutoriels pour les solutions des autres fournisseurs de solutions de paiement.\u003c/p\u003e","title":"Introduction aux moyens de paiement en Polyn√©sie Fran√ßaise"},{"content":"Ia\u0026rsquo;orana, bonjour !\nCe post marque le d√©but du blog h√©berg√© sur Github.\nVous trouverez ici de temps en temps des articles de d√©veloppement et des POCs.\nBonne lecture !\n","permalink":"http://localhost:1313/blog.dev/posts/hello-world/","summary":"\u003cp\u003eIa\u0026rsquo;orana, bonjour !\u003c/p\u003e\n\u003cp\u003eCe post marque le d√©but du blog h√©berg√© sur Github.\u003c/p\u003e\n\u003cp\u003eVous trouverez ici de temps en temps des articles de d√©veloppement et des POCs.\u003c/p\u003e\n\u003cp\u003eBonne lecture !\u003c/p\u003e","title":"Hello World"},{"content":"La m√©moire est une ressource au m√™me titre que la fourchette dans le pr√©c√©dent article.\nDans un ordinateur, il existe plusieurs types de m√©moire que les programmes vont pouvoir utiliser en fonction de la mani√®re dont ils veulent traiter les donn√©es.\nIl faut voir la m√©moire comme un endroit o√π on entrepose des donn√©es.\nPour cet article on va parler d\u0026rsquo;un magasin, mais √ßa marche aussi avec un restaurant.\nLa m√©moire cache ‚Äî l\u0026rsquo;armoire r√©frig√©r√©e La m√©moire cache est le stockage le plus rapide qu\u0026rsquo;un programme peut utiliser. Pour un magasin, il s\u0026rsquo;agit des √©tag√®res et des armoires r√©frig√©r√©es qui forment les rayons.\nLes clients (les threads du programme) ont rapidement acc√®s aux viandes qui sont dans les armoires r√©frig√©r√©es, ils n\u0026rsquo;ont qu\u0026rsquo;√† tendre la main. Par contre, on ne peut pas stocker une grande quantit√© de viande dans ces armoires, pour l\u0026rsquo;exemple on va dire une dizaine au maximum.\nSur un ordinateur, cette m√©moire cache se trouve directement dans le processeur sous les noms cache L3, cache L2 et cache L1. On n\u0026rsquo;ira pas dans le d√©tail ici, mais sachez que plus le nombre est proche de 0, et plus le cache est rapide.\nJe prends l\u0026rsquo;exemple de l\u0026rsquo;armoire r√©frig√©r√©e car il y a un m√©canisme physique important dans un ordinateur: la m√©moire cache peut accueillir des donn√©es uniquement si elle est aliment√©e en √©lectricit√©, en cas de coupure de courant, on perd les donn√©es qui s\u0026rsquo;y trouvent.\nDe la m√™me mani√®re, dans un magasin, en cas de coupure de courant, il faut jeter toute la viande qui se trouve dans les armoires r√©frig√©r√©es*.\n*: Oui c\u0026rsquo;est pas tout √† fait le cas, mais en cas de coupure prolong√©e √ßa l\u0026rsquo;est.\nLa m√©moire vive ‚Äî l\u0026rsquo;arri√®re du magasin Au cours d\u0026rsquo;une journ√©e, le magasin souhaite vendre bien plus que dix viandes, c\u0026rsquo;est bien normal. Pour cela, √† l\u0026rsquo;arri√®re du magasin il y a un stock r√©frig√©r√© qui peut en contenir 1000. Un employ√© viendra remplir les rayons au cours de la journ√©e.\nCette action prend du temps, l\u0026rsquo;employ√© doit :\nAller dans le stock r√©frig√©r√© R√©cup√©rer des viandes Amener les viandes dans le rayon Mettre les viandes dans l\u0026#39;armoire r√©frig√©r√©e Pendant tout ce temps, le client ne peut prendre que les viandes qui sont encore dans l\u0026rsquo;armoire, il faut donc bien faire attention √† ce que l\u0026rsquo;employ√© recharge l\u0026rsquo;armoire quand il reste encore un peu de bo√Ætes.\nDans un ordinateur, la m√©moire vive (RAM en anglais pour Random Access Memory), joue le r√¥le du stock r√©frig√©r√© tr√®s rapide qu\u0026rsquo;un programme peut utiliser, mais beaucoup moins rapide que la m√©moire cache, environ 50x √† 100x moins rapide.\nEt tout comme la m√©moire cache, la RAM peut accueillir des donn√©es uniquement si elle est aliment√©e en √©lectricit√©.\nC\u0026rsquo;est pour √ßa qu\u0026rsquo;on appelle √ßa de la m√©moire vive, elle doit √™tre aliment√©e.\nAttends, mais tu dis que la RAM est tr√®s rapide, mais le processus pour recharger la m√©moire cache est lent ? On ne peut pas juste utiliser une grande quantit√© de m√©moire cache?\nLa m√©moire cache co√ªte tr√®s cher, beaucoup plus que la RAM. L\u0026rsquo;√©tat actuel est donc un compromis entre rapidit√© et co√ªt, un probl√®me typique en ing√©nierie.\nLe stockage ‚Äî la ferme en Nouvelle-Z√©lande Le stockage d\u0026rsquo;un ordinateur est compos√© des diff√©rents disques durs (HDD, SDD, etc.). Il s\u0026rsquo;agit d\u0026rsquo;une m√©moire persistante, c\u0026rsquo;est-√†-dire que m√™me en cas de coupure de courant, les donn√©es restent √©crites dans les disques.\nPour notre magasin, de la viande qui reste utilisable m√™me en cas de coupure\u0026hellip; Eh bien ce sont les boeufs vivants √† la ferme.\nTon analogie est d√©go√ªtante\nOui je sais, j\u0026rsquo;ai pas mieux, d√©sol√©. En m√™me temps, je ne peux pas vous dire que de la viande fra√Æche, qui reste longtemps √† l\u0026rsquo;air libre, est encore utilisable.\nEn plus, il y a plein d\u0026rsquo;√©tapes entre un boeuf vivant et un steak dans l\u0026rsquo;armoire !\nTout √† fait, mais c\u0026rsquo;est la meilleure analogie possible pour te faire comprendre pourquoi, en cas de coupure, si tu n\u0026rsquo;as pas sauvegard√© ton fichier Word depuis longtemps, tu perds tes donn√©es. Tant que tu n\u0026rsquo;as pas sauvegard√©, tes modifications restent dans le cache et la RAM.\nEt pourquoi en Nouvelle-Z√©lande ?\nOh, √ßa c\u0026rsquo;est parce qu\u0026rsquo;aller chercher une donn√©e dans un disque, c\u0026rsquo;est tr√®s lent compar√© √† aller la chercher dans la RAM. Si tu as un disque SSD c\u0026rsquo;est 10x plus lent, si tu as un disque HDD, c\u0026rsquo;est 100x plus lent.\nSi tu joues √† des jeux vid√©o un peu gourmands en ressources, tu as s√ªrement remarqu√© des √©crans de chargement plus ou moins longs. C\u0026rsquo;est surtout parce que le programme r√©cup√®re les donn√©es qui sont sur le disque.\nOptimiser la m√©moire ‚Äî pas besoin d\u0026rsquo;√™tre mentaliste Vous l\u0026rsquo;aurez donc compris, un magasin a diff√©rents types de m√©moire √† sa disposition. La mani√®re dont il orchestre les denr√©es √† travers ces diff√©rents composants lui permet d\u0026rsquo;anticiper les variations de stock, et limiter le risque de p√©nurie.\nLorsqu\u0026rsquo;un d√©veloppeur code un programme, il peut aussi anticiper l\u0026rsquo;utilisation des donn√©es et les charger avant d\u0026rsquo;en avoir besoin.\nDans l\u0026rsquo;exemple du jeu vid√©o, pourquoi est-ce que toutes les donn√©es ne sont pas charg√©es d√®s le d√©but? Moi j\u0026rsquo;en ai marre des √©crans de chargement.\nTout d\u0026rsquo;abord, ce chargement se fait du stockage vers la RAM (puis vers le cache), ensuite, si on chargeait toutes les donn√©es d\u0026rsquo;un coup, il y a de fortes chances pour que ta RAM soit satur√©e.\nA priori, le d√©veloppeur ne sait pas si tu as peu ou beaucoup de RAM disponible, et puis, maintenir deux versions du code, un qui charge toutes les donn√©es, et un qui charge via les √©crans de chargement, c\u0026rsquo;est du travail suppl√©mentaire qui n\u0026rsquo;apporte pas grand chose.\nLes √©crans de chargement sont un compromis : plut√¥t que de risquer de crasher ton ordinateur, le d√©veloppeur a cod√© le programme de sorte √† charger uniquement le contenu qui sera utilis√© dans le niveau, pour tous les niveaux.\nConclusion Dans cet article, on a vu les diff√©rentes m√©moires utilis√©es par les programmes. √Ä l\u0026rsquo;image d\u0026rsquo;un magasin qui √©vite les p√©nuries, un d√©veloppeur doit jongler avec ces m√©moires pour que son programme tourne correctement.\nDans le prochain article, IMVV ‚Äî Section 3 ‚Äî Chapitre 2 ‚Äî M√©mo√Øsation et Lazy loading, les technique du fain√©ant ultime, nous verrons des techniques qui feront de toi un bon fain√©ant.\n‚Üê Retour √† la section\n‚Üê Retour √† l‚Äôintroduction\n","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/optimisation/memoire/","summary":"\u003cp\u003eLa m√©moire est une \u003cstrong\u003eressource\u003c/strong\u003e au m√™me titre que la fourchette dans le \u003ca href=\"../../l-execution/threads/\"\u003epr√©c√©dent article\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eDans un ordinateur, il existe plusieurs types de m√©moire que les programmes vont pouvoir utiliser en fonction de la mani√®re dont ils veulent traiter les donn√©es.\u003c/p\u003e\n\u003cp\u003eIl faut voir la m√©moire comme un endroit o√π on entrepose des donn√©es.\u003c/p\u003e\n\u003cp\u003ePour cet article on va parler d\u0026rsquo;un magasin, mais √ßa marche aussi avec un restaurant.\u003c/p\u003e\n\u003ch2 id=\"la-m√©moire-cache--larmoire-r√©frig√©r√©e\"\u003eLa m√©moire cache ‚Äî l\u0026rsquo;armoire r√©frig√©r√©e\u003c/h2\u003e\n\u003cp\u003eLa \u003cstrong\u003em√©moire cache\u003c/strong\u003e est le stockage \u003cstrong\u003ele plus rapide\u003c/strong\u003e qu\u0026rsquo;un programme peut utiliser. Pour un magasin, il s\u0026rsquo;agit des √©tag√®res et des armoires r√©frig√©r√©es qui forment les rayons.\u003c/p\u003e","title":"IMVV ‚Äî Section 3 ‚Äî Chapitre 1 ‚Äî La m√©moire, ou comment √©viter les p√©nuries dans un magasin"},{"content":"Dans le pr√©c√©dent article, IMVV ‚Äî Section 1 ‚Äî Chapitre 3 ‚Äî Structures de contr√¥le et algorithme, apprendre √† r√©fl√©chir, on a vu les diff√©rentes structures de contr√¥le et les algorithmes.\nMaintenant on va parler de la mani√®re dont on r√©alise un ensemble de t√¢ches ‚Äî c‚Äôest ce qu‚Äôon appelle en informatique un mode d‚Äôex√©cution. C\u0026rsquo;est applicable aussi bien pour un humain que pour un ordinateur.\nN\u0026rsquo;oublie pas que les objectifs de ces articles sont :\nTe donner une meilleure compr√©hension des bases de l‚Äôinformatique, T\u0026rsquo;inspirer pour analyser ou optimiser les situations du quotidien, ou peut-√™tre, qui sait, te donner envie d\u0026rsquo;explorer encore plus loin\u0026hellip; jusqu‚Äô√† en faire ton m√©tier. Programme et application ‚Äî c\u0026rsquo;est quoi la diff√©rence ? Un programme informatique est un ensemble d\u0026rsquo;algorithmes. Le mot application veut dire la m√™me chose.\nC‚Äôest juste que application, √ßa sonne plus moderne, m√™me si ce mot existe depuis longtemps.\nMerci le marketing Apple et son App Store. üòÑ\nSynchrone ‚Äî Avoir un serveur d√©di√© √† sa table, quel luxe Prenons l\u0026rsquo;exemple d\u0026rsquo;un restaurant chic. Dans ce restaurant chic, il y a 2 tables. Chaque table a son serveur attitr√©, celui-ci r√©pond uniquement aux besoins de sa table.\nPour la suite de cet exercice de pens√©e, on va dire qu\u0026rsquo;il y a 2 familles (famille 1, famille 2), 2 tables (table 1, table 2), 1 serveur, 1 chef.\nLa s√©quence d\u0026rsquo;actions que le serveur doit faire, l\u0026rsquo;algorithme est :\nSi une famille arrive: Accueillir la famille Installer la famille sur une table libre Prendre la commande Donner la commande au chef R√©cup√©rer les plats Servir les plats √† la famille Faire payer la famille Fin si La famille 1 arrive au restaurant, le serveur les accueille et les installe √† la table 1. Il reste en attente de leur commande, √† proximit√©*.\nQuand la famille 1 est pr√™te, vu que le serveur est √† c√¥t√©, ils passent commande. Le serveur s\u0026rsquo;en va ensuite en cuisine pour donner la commande au chef. Le serveur attend les plats. Le chef pr√©pare les plats.\nUne fois que les plats sont pr√™ts, il les r√©cup√®re et les sert √† la famille 1. La famille 1 paie et s\u0026rsquo;en va, heureuse de l\u0026rsquo;attention port√©e.\n*: A ce moment, la famille 2 arrive au restaurant, ils ne sont pas accueillis, puisque le serveur est en attente de la commande de la famille 1. Alors la famille 2 repart, agac√©e, ils laisseront un mauvais avis sur internet.\nDans cette configuration, le serveur ex√©cute ses t√¢ches de mani√®re synchrone, cela veut dire qu\u0026rsquo;il ex√©cute l\u0026rsquo;algorithme √©tape par √©tape sans interruption. Si une √©tape n√©cessite d\u0026rsquo;attendre, par exemple quand il doit attendre que la famille choisisse sa commande, alors il attend, on dit que le mode synchrone est bloquant. Le serveur va au bout de son algorithme.\nMais c\u0026rsquo;est nul, il y a une famille qui n\u0026rsquo;a pas √©t√© servie\u0026hellip;\nSi on reste dans le mode d\u0026rsquo;ex√©cution synchrone, le probl√®me est qu\u0026rsquo;il n\u0026rsquo;y a pas assez de serveur. S\u0026rsquo;il y avait autant de serveurs de tables et de chefs, il n\u0026rsquo;y aurait aucun souci. Chaque famille aurait √©t√© ravie d\u0026rsquo;avoir un serveur et un chef d√©di√©. Mais on verrait plut√¥t cette disposition dans les restaurants luxueux, qui peuvent se permettre d\u0026rsquo;avoir 100 tables, 100 serveurs et 100 chefs.\nPar d√©faut, les applications sont synchrones, car √† part le probl√®me de ressources, c‚Äôest bien plus simple de faire une t√¢che apr√®s l‚Äôautre, cependant, de nos jours, de plus en plus de syst√®mes sont asynchrones (exemple: navigateurs, certains serveurs applicatifs √† la mode).\nüìå Exemples dans la vie r√©elle Une personne qui suit une proc√©dure critique Pr√©parer une salade üíª Exemples en informatique Un distributeur de billets Une imprimante partag√©e Asynchrone ‚Äî Un serveur pour les gouverner tous ‚Äî Oui c\u0026rsquo;est une r√©f√©rence au Seigneur des Anneaux üòÑ ‚Äî\nReprenons l\u0026rsquo;exemple du restaurant, toujours avec 2 familles (famille 1, famille 2), 2 tables (table 1, table 2), 1 serveur, 1 chef.\nMais cette fois, on change l\u0026rsquo;algorithme :\nQuand une famille arrive, alors : Le serveur les accueille Il les installe √† une table libre Il leur donne un menu Il passe √† autre chose Fin quand Quand une famille appelle le serveur pour commander, alors : Le serveur prend la commande Il la transmet au chef Il passe √† autre chose Fin quand Quand la sonnette en cuisine retentit (plats pr√™ts), alors : Le serveur r√©cup√®re les plats Le serveur sert les plats √† la bonne table Il passe √† autre chose Fin quand Quand une famille veut payer, alors : Le serveur encaisse Il lib√®re la table Il passe √† autre chose Fin quand Cet algorithme est diff√©rent de ceux qu\u0026rsquo;on a vus jusqu\u0026rsquo;√† pr√©sent.\n\u0026ldquo;Quand \u0026hellip;,\u0026rdquo; marque un √©v√©nement, \u0026ldquo;alors\u0026rdquo; introduit le bloc d\u0026rsquo;instructions √† ex√©cuter en r√©action, et \u0026ldquo;Fin quand\u0026rdquo; marque la fin de ce bloc.\nOn dit alors qu\u0026rsquo;on fait de la programmation √©v√©nementielle (ou programmation r√©active) et que l\u0026rsquo;algorithme est asynchrone : il fait de sorte √† r√©agir aux √©v√©nements ext√©rieurs.\nLorsqu‚Äôun √©v√©nement se produit, le serveur y r√©agit imm√©diatement : il ex√©cute les instructions associ√©es, puis passe √† l‚Äô√©v√©nement suivant s‚Äôil y en a un. Sinon, il attend. Ce mode d\u0026rsquo;ex√©cution est donc non bloquant.\nEt dans les faits, c\u0026rsquo;est ce que fait la plupart des personnes, serveurs ou non. Quand on fait une t√¢che, et qu\u0026rsquo;on est interrompu par un bug, un appel, un coll√®gue de travail qui pose une question, on est en r√©action.\nAvec cet algorithme, un serveur seul pourra tr√®s bien g√©rer 2 tables.\nüìå Exemples dans la vie r√©elle Les serveurs dans la plupart des restaurants Mon chien quand il entend les croquettes üíª Exemples en informatique Les notifications sur ton smartphone Un arrosage automatique avec capteur d\u0026#39;humidit√© Attention : comme en mode synchrone, s\u0026rsquo;il y a trop de table pour un seul serveur, plusieurs √©v√©nements risquent de s\u0026rsquo;accumuler en attente de traitement.\nMais du coup, comment on fait pour r√©soudre ce probl√®me ?\nOn verra √ßa dans le prochain article.\nConclusion Dans cet article, on a vu ce qu\u0026rsquo;√©taient les modes d\u0026rsquo;ex√©cution synchrone et asynchrone.\nSi tu souhaites continuer cette aventure, tu peux regarder la suite ici: IMMV ‚Äî Section 2 ‚Äî Chapitre 2 ‚Äî Monothread et Multithread, je ne peux pas tout faire en m√™me temps !\n‚Üê Retour √† la section\n‚Üê Retour √† l‚Äôintroduction\n","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/l-execution/sync-async/","summary":"\u003cp\u003eDans le pr√©c√©dent article, \u003ca href=\"../../les-bases/structures-de-controle/\"\u003eIMVV ‚Äî Section 1 ‚Äî Chapitre 3 ‚Äî Structures de contr√¥le et algorithme, apprendre √† r√©fl√©chir\u003c/a\u003e, on a vu les diff√©rentes structures de contr√¥le et les algorithmes.\u003c/p\u003e\n\u003cp\u003eMaintenant on va parler de la mani√®re dont on r√©alise un ensemble de t√¢ches ‚Äî c‚Äôest ce qu‚Äôon appelle en informatique un \u003cstrong\u003emode d‚Äôex√©cution\u003c/strong\u003e. C\u0026rsquo;est applicable aussi bien pour un humain que pour un ordinateur.\u003c/p\u003e\n\u003cp\u003eN\u0026rsquo;oublie pas que les objectifs de ces articles sont :\u003c/p\u003e","title":"IMMV ‚Äî Section 2 ‚Äî Chapitre 1 ‚Äî Synchrone et Asynchrone, ou comment r√©agir au changement"},{"content":"Quand tu prends un ticket pour attendre ton tour, que tu fais la queue √† la caisse, que tu prends l‚Äôassiette du haut de la pile pour mettre la table, ou que tu cliques sur le bouton \u0026lsquo;Retour\u0026rsquo; (‚Üê) du navigateur internet‚Ä¶ Tu manipules sans le savoir des concepts appell√©s en informatique des structures de donn√©es, et les algorithmes associ√©s qui les font vivre.\nDans cet article, on va mettre un peu de clart√© l√†-dedans : pas besoin de coder pour comprendre, on va illustrer tout √ßa avec des situations de la vie courante.\nD√©finitions Avant d‚Äôaller plus loin, quelques d√©finitions simples, histoire de parler le m√™me langage :\nDonn√©e : une donn√©e, c‚Äôest une information num√©rique. √áa peut √™tre un num√©ro de passeport, le nombre de dents d‚Äôune personne, la liste des t√¢ches que tu as encore repouss√©es √† demain, ou ton nombre d‚Äôamis sur Facebook. Structure de donn√©es : imagine une bo√Æte, une √©tag√®re ou un sac √† dos, dans lequel tu ranges tes informations d‚Äôune certaine mani√®re pour mieux les retrouver ou les traiter. C‚Äôest la fa√ßon dont on organise les donn√©es. Algorithme : un algorithme, c‚Äôest une suite d‚Äô√©tapes ou d‚Äôinstructions pour manipuler ces donn√©es. Comme une recette de cuisine, ou une proc√©dure √† suivre pour obtenir un r√©sultat. File et pile : deux mani√®res d‚Äôattendre‚Ä¶ ou de repousser Maintenant qu‚Äôon a les bases, voyons deux structures de donn√©es tr√®s simples mais tr√®s puissantes : la file et la pile. On les retrouve partout dans notre quotidien, souvent sans s‚Äôen rendre compte.\nLa file ‚Äî ou comment attendre son tour (FIFO) Imagine une file d‚Äôattente devant un guichet. Le premier arriv√© est le premier servi. C‚Äôest ce qu‚Äôon appelle en informatique une file (ou queue en anglais), avec une logique FIFO : First In, First Out (premier entr√©, premier sorti).\nD√®s que quelqu‚Äôun est servi, c‚Äôest le suivant dans la file qui avance.\nüéØ C‚Äôest une structure √©quitable : chacun attend selon son ordre d‚Äôarriv√©e.\nüìå Exemples dans la vie r√©elle Faire la queue √† la caisse du magasin La liste des courses (si on lit de haut en bas) üíª Exemples en informatique Les syst√®mes de ticket dans les accueils (le num√©ro est g√©n√©r√© par un programme, et les appels suivent cet ordre) Les commentaires sur une publication Facebook (affich√©s du plus ancien au plus r√©cent) La pile ‚Äî ou comment empiler les priorit√©s (LIFO) Maintenant, imagine une pile de livres que tu dois r√©viser pour un examen. Tu prends celui du haut, tu le lis, puis tu prends celui juste en dessous, et ainsi de suite. Tu lis dans l‚Äôordre inverse de celui dans lequel tu as empil√© les livres. Tu viens de d√©piler ta pile, toujours en commen√ßant par le haut.\nC‚Äôest exactement le principe de la pile (ou stack en anglais), qui suit la logique LIFO : Last In, First Out (dernier entr√©, premier sorti).\nTu vas peut-√™tre me dire :\nOui mais je peux aussi prendre le livre du bas, non‚ÄØ?\nC‚Äôest vrai. Alors prenons un autre exemple, un peu plus r√©aliste :\nImagine que tu tombes sur un article de journal qui parle des nodules polym√©talliques dans les fonds marins de la Polyn√©sie fran√ßaise. Tu n‚Äôy connais pas grand-chose, mais √ßa t‚Äôintrigue. Tu lis l‚Äôarticle, puis tu ouvres une page Wikip√©dia pour comprendre ce qu‚Äôest un nodule polym√©tallique. Sur cette page, tu vois un lien vers les m√©taux rares, puis vers la transition √©nerg√©tique, puis‚Ä¶ tu vois o√π je veux en venir.\nEn lisant ce premier article, tu ne soup√ßonnais pas toute la pile d‚Äôinformations que tu allais explorer. Et tu viens de d√©piler ce savoir, en commen√ßant par la derni√®re page ouverte.\nüéØ Ce n‚Äôest pas une structure √©quitable : ce qui arrive en dernier est trait√© en premier. Mais c‚Äôest tr√®s utile pour remonter dans le temps, ou revenir sur ses pas, exactement comme le bouton \u0026ldquo;retour\u0026rdquo; de ton navigateur.\nüìå Exemples dans la vie r√©elle Les cartons dans un coffre bien rempli Les diff√©rentes strates de terre quand tu creuses dans ton jardin (c\u0026#39;est de la terre empil√©e au cours du temps) üíª Exemples en informatique Le bouton \u0026#39;Retour\u0026#39; (‚Üê) de ton navigateur Les annulations successives (Undo, CTRL\u0026#43;Z) dans un √©diteur de texte Si tu veux conna√Ætre d\u0026rsquo;autres structures de donn√©es, tu peux regarder le prochain article : IMVV ‚Äî Section 1 ‚Äî Chapitre 2 ‚Äî Autres structures de donn√©es, j\u0026rsquo;organise mon bordel\n‚Üê Retour √† la section\n‚Üê Retour √† l‚Äôintroduction\n","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/les-bases/file-et-pile/","summary":"\u003cp\u003eQuand tu prends un ticket pour attendre ton tour, que tu fais la queue √† la caisse, que tu prends l‚Äôassiette du haut de la pile pour mettre la table, ou que tu cliques sur le bouton \u0026lsquo;Retour\u0026rsquo; (‚Üê) du navigateur internet‚Ä¶\nTu manipules sans le savoir des concepts appell√©s en informatique \u003cstrong\u003edes structures de donn√©es\u003c/strong\u003e, et \u003cstrong\u003eles algorithmes\u003c/strong\u003e associ√©s qui les font vivre.\u003c/p\u003e\n\u003cp\u003eDans cet article, on va mettre un peu de clart√© l√†-dedans : pas besoin de coder pour comprendre, on va illustrer tout √ßa avec des situations de la vie courante.\u003c/p\u003e","title":"IMVV ‚Äî Section 1 ‚Äî Chapitre 1 ‚Äî File ou Pile ? L'art de passer avant les autres"},{"content":"√ätre fiu est un art, une vertu. Non, ce n\u0026rsquo;est pas une blague. Tu ne me crois pas ?\n\u0026ldquo;We will encourage you to develop the three great virtues of a programmer: laziness, impatience, and hubris.\u0026rdquo; ‚Äî Larry Wall, Programming perl (1991).\n\u0026ldquo;I choose a lazy person to do a hard job. Because a lazy person will find an easy way to do it.\u0026rdquo; ‚Äî Bill Gates.\nProgrammer une machine pour qu\u0026rsquo;elle fasse le travail √† ta place, c\u0026rsquo;est de la fain√©antise.\nEt les d√©veloppeurs sont des personnes qui ont atteint l\u0026rsquo;apog√©e du fiu. Apr√®s tout, qui passe 2 heures √† automatiser une t√¢che qui prend 2 minutes par jour, √† part quelqu\u0026rsquo;un de vraiment fiu ?\nDans cet article, on verra deux techniques que les d√©veloppeurs utilisent, mais que toi aussi tu utilises sans le savoir.\nM√©mo√Øsation ‚Äî ou comment garder une information dans un coin de la t√™te Supposons que tu sois responsable de la paie dans une petite entreprise. Pour ce mois-ci, tu dois calculer les salaires √† verser √† 2 employ√©s.\nTu sais que tous les deux ont un salaire brut de 200 000 XPF. De plus, ils ont fait un excellent travail, ton patron t\u0026rsquo;a dit de leur rajouter une prime de 50% de leur salaire brut. Enfin, l\u0026rsquo;un d\u0026rsquo;eux a fait des heures suppl√©mentaires, il faut donc lui rajouter 20 000 XPF brut sur sa paie.\nPour le 1er salari√©, tu pars de 200 000, tu rajoutes 50%, soit 100 000, ce qui lui fera 300 000 XPF brut pour ce mois.\nPour le 2√®me salari√©, tu sais que le d√©but du calcul est le m√™me, alors tu r√©utilises le nombre 300 000, et tu rajoutes 20 000 d\u0026rsquo;heures suppl√©mentaires, donc 320 000 bruts.\nSans m√©mo√Øsation, tu aurais recalcul√© 200 000 + 50 %. Mais tu t‚Äôes souvenu que ce calcul avait d√©j√† √©t√© fait, donc tu as directement repris le r√©sultat. Ce que tu viens de faire, c\u0026rsquo;est de la m√©mo√Øsation (memoization en anglais).\nC‚Äôest exactement ce que fait ton navigateur web quand il te propose un r√©sultat de recherche d√©j√† visit√©, ou qu‚Äôun site charge plus vite la 2·µâ fois.\nInstant Dev En informatique, on utilise un tableau ou un tableau associatif pour stocker les r√©sultats interm√©diares, ces structures sont stock√©es dans la RAM. De cette fa√ßon, on peut rapidement r√©cup√©rer le r√©sultat qui nous int√©resse. Attention : En informatique, comme dans la vraie vie, garder des informations de c√¥t√© peut conduire √† une saturation de la m√©moire. C\u0026rsquo;est un des facteurs de burn-out. M√©nagez votre cerveau, il n\u0026rsquo;y a pas de mal √† noter les choses, de plus, vous aurez moins de risque d\u0026rsquo;oublier des informations importantes.\nEager loading et Lazy loading ‚Äî l\u0026rsquo;art d\u0026rsquo;√™tre pr√©par√© √† toute √©ventualit√© Supposons que tu aies invit√© tes amis √† manger √† la maison ce soir. Tu as invit√© 10 personnes, mais tu sais que 5 vont vraiment venir, les autres t\u0026rsquo;ont dit \u0026ldquo;peut-√™tre\u0026rdquo;.\nPour √©viter d\u0026rsquo;√™tre √† court de nourriture, tu as pr√©par√© pour 10 personnes, au pire, ceux qui sont venus repartiront avec quelques plats, et tu termineras le reste durant la semaine.\nLes premiers invit√©s vont arriver, tu n\u0026rsquo;as pas encore pr√©par√© la table. Tu as 2 solutions :\nTout pr√©parer d\u0026rsquo;avance : sortir toutes les assiettes, les verres, les chaises, les couverts, etc. (solution eager loading : tu charges tout d√®s le d√©but).\nAttendre de voir qui arrive : d√®s qu‚Äôun invit√© entre, tu sors une assiette, un verre, une chaise, etc. (solution lazy loading : tu ne charges que ce qui est n√©cessaire, au moment o√π c‚Äôest n√©cessaire).\nMais tu peux aussi exiger des invit√©s qu\u0026rsquo;ils te disent, la veille au plus tard, si oui ou non ils viennent !\nOui, et que se passe-t-il si l\u0026rsquo;un d\u0026rsquo;eux a un emp√™chement ? En mettant tous les couverts, tu as d√©pens√© de l\u0026rsquo;√©nergie pour mettre son couvert, et tu en as re-d√©pens√© pour le ranger. Ce n\u0026rsquo;est pas tr√®s optimis√©.\nSi tous les invit√©s arrivent, tu auras fait plusieurs allers-retours pour mettre les couverts, ce n\u0026rsquo;est pas tr√®s optimis√© non plus\u0026hellip;\nAh, tu mets le doigt sur un point important : les techniques d\u0026rsquo;optimisation doivent √™tre utilis√©es uniquement si on est s√ªr de leur utilit√©.\n\u0026ldquo;Premature optimization is the root of all evil\u0026rdquo; ‚Äî Sir Tony Hoare et Donald Knuth.\nC\u0026rsquo;est un pi√®ge dans lequel tombent plusieurs d√©veloppeurs juniors. Les √©coles sup√©rieures enseignent diff√©rentes techniques d\u0026rsquo;optimisation, on est conditionn√©s √† d√©tecter un probl√®me et √† appliquer imm√©diatement une solution : c\u0026rsquo;est normal.\nAvec l\u0026rsquo;exp√©rience, on apprend qu\u0026rsquo;on a besoin d\u0026rsquo;optimiser uniquement quand une personne se plaint de lenteurs. Et dans ce cas, on cherche o√π se trouve la source du probl√®me, on mesure.\nOk mais\u0026hellip; √ßa me fait bizarre de ne pas pr√©parer une belle table, c\u0026rsquo;est pas un bon accueil.\nDans ce cas, le eager loading a une vraie plus-value. Tu charges tout d\u0026rsquo;un coup pour l\u0026rsquo;effet waow, pour que les personnes se disent que chez toi, on est bien re√ßu. La principale fonctionnalit√© n\u0026rsquo;est pas d\u0026rsquo;optimiser le fait de mettre la table, mais d\u0026rsquo;impressionner tes convives.\nJe finis cette partie avec un exemple informatique : Facebook ne charge pas toutes les publications d√®s le d√©but, seulement une partie.\nQuand tu commences √† scroller, tu vois ces publications. Si tu te rapproches de la fin, Facebook charge les prochaines publications, on appelle √ßa infinite scroll.\nAinsi, Facebook ne prend pas trop de temps √† se charger au d√©but.\nAttends mais\u0026hellip; Dans l\u0026rsquo;article pr√©c√©dent, on parlait des √©crans de chargement des jeux vid√©os, √ßa y ressemble un peu, non ?\nExactement, les √©crans de chargement sont aussi du lazy loading, et pour rejoindre ce qu\u0026rsquo;on disait sur ces √©crans : le lazy loading √©conomise de la m√©moire.\nEnfin, √† ton avis, comment Facebook sait qu\u0026rsquo;il faut charger la suite des publications ?\nEh bien en fait, l\u0026rsquo;application est r√©active, on peut √©crire son algorithme de chargement comme ceci:\nQuand un certain seuil de scroll est atteint (par exemple, 90% du contenu affich√©), alors: Charge la suite du contenu Passe √† autre chose Fin quand Tu l\u0026rsquo;auras remarqu√©, c\u0026rsquo;est ce qu\u0026rsquo;on a vu dans l\u0026rsquo;article IMMV ‚Äî Section 2 ‚Äî Chapitre 1 ‚Äî Synchrone et Asynchrone, ou comment r√©agir au changement.\nConclusion Dans cet article, on a vu diff√©rents m√©canimes d\u0026rsquo;optimisation.\nPlus important encore, si on se rappelle des pr√©c√©dents articles, on a vu qu\u0026rsquo;en informatique, en plus de combiner les structures de donn√©es et les structures de contr√¥le, on pouvait combiner les concepts d\u0026rsquo;optimisation et de modes d\u0026rsquo;ex√©cution.\nLe prochaine article est en cours de r√©daction, on parlera de complexit√©.\n‚Üê Retour √† la section\n‚Üê Retour √† l‚Äôintroduction\n","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/optimisation/memoisation/","summary":"\u003cp\u003e√ätre \u003cem\u003efiu\u003c/em\u003e est un art, une vertu. \u003cstrong\u003eNon, ce n\u0026rsquo;est pas une blague\u003c/strong\u003e. Tu ne me crois pas ?\u003c/p\u003e\n\u003cp\u003e\u003cem\u003e\u0026ldquo;We will encourage you to develop the three great virtues of a programmer: laziness, impatience, and hubris.\u0026rdquo; ‚Äî Larry Wall, Programming perl (1991)\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003e\u0026ldquo;I choose a lazy person to do a hard job. Because a lazy person will find an easy way to do it.\u0026rdquo; ‚Äî Bill Gates\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eProgrammer une machine pour qu\u0026rsquo;elle fasse le travail √† ta place, c\u0026rsquo;est de la fain√©antise.\u003c/p\u003e","title":"IMVV ‚Äî Section 3 ‚Äî Chapitre 2 ‚Äî M√©mo√Øsation et Lazy loading, les techniques du fain√©ant ultime"},{"content":"Dans le pr√©c√©dent article, IMMV ‚Äî Section 2 ‚Äî Chapitre 1 ‚Äî Synchrone et Asynchrone, ou comment r√©agir au changement, on a vu les diff√©rents modes d\u0026rsquo;ex√©cution.\nOn s\u0026rsquo;√©tait arr√™t√© sur le probl√®me suivant : Comment faire pour r√©pondre √† la mont√©e en charge, √† l\u0026rsquo;accumulation de t√¢ches ?\nEh bien, dans cet article, on va voir comment on r√©sout ce probl√®me, en informatique comme dans la vraie vie : les m√©canismes sont souvent tr√®s proches.\nPour cela on va continuer avec notre exemple de restaurant. Et on va expliciter diff√©rents termes que j\u0026rsquo;avais regroup√©s en parlant d\u0026rsquo;algorithmes et de programmes.\nN\u0026rsquo;oublie pas que les objectifs de ces articles sont :\nTe donner une meilleure compr√©hension des bases de l‚Äôinformatique, T\u0026rsquo;inspirer pour analyser ou optimiser les situations du quotidien, ou peut-√™tre, qui sait, te donner envie d\u0026rsquo;explorer encore plus loin\u0026hellip; jusqu‚Äô√† en faire ton m√©tier. Le programme ‚Äî l\u0026rsquo;id√©e de restaurant En informatique, quand on parle de programme, on parle uniquement d\u0026rsquo;un ensemble d\u0026rsquo;algorithmes, des t√¢ches qui le composent. Il n\u0026rsquo;est pas encore en train d\u0026rsquo;√™tre ex√©cut√©. Par exemple, Facebook est un programme ‚Äî mais tant que tu ne l‚Äôouvres pas, il ne fait rien.\nEh bien, c\u0026rsquo;est pareil pour un restaurant dans la vie de tous les jours, quand je parle du restaurant √† un ami, je n\u0026rsquo;y suis pas physiquement. Je parle juste du concept de restaurant, de l\u0026rsquo;id√©e que je m\u0026rsquo;en fais.\nLe processus - le restaurant ouvert Si je veux parler du restaurant physiquement ouvert, avec les employ√©s qui s\u0026rsquo;activent, en informatique il faut plut√¥t utiliser le terme processus. C\u0026rsquo;est le programme en cours d\u0026rsquo;ex√©cution.\nUn processus poss√®de son propre contexte d\u0026rsquo;ex√©cution, c\u0026rsquo;est un gros mot pour dire qu\u0026rsquo;il a ses propres ressources, et que personne ne peut lui prendre ses ressources.\nEn effet, quand le restaurant est ouvert, les assiettes qu\u0026rsquo;il utilise sont ses propres assiettes, ses propres ressources. Il n\u0026rsquo;y a pas un autre restaurant qui lui prendrait ses assiettes pendant qu\u0026rsquo;il est ouvert, sinon il risque d\u0026rsquo;avoir des assiettes manquantes.\nPour ex√©cuter un algorithme, un processus est compos√© d\u0026rsquo;un thread principal, et il peut avoir d\u0026rsquo;autres thread.\nLe thread ‚Äî la proc√©dure en cours d\u0026rsquo;ex√©cution du serveur Le thread (fil d\u0026rsquo;ex√©cution en fran√ßais) est ce qu‚Äôon appelle la proc√©dure en train de s\u0026rsquo;ex√©cuter. C‚Äôest un peu comme un serveur qui suit activement une fiche d\u0026rsquo;instructions √† un instant donn√©. Attention, ce n\u0026rsquo;est pas le serveur.\nEn informatique, on dit que le thread est l‚Äôunit√© d‚Äôex√©cution, C‚Äôest la plus petite unit√© qu‚Äôun ordinateur puisse piloter pour ex√©cuter du code. il n‚Äôexiste pas d‚Äôunit√© plus petite qu‚Äôun thread pour ex√©cuter une t√¢che.\nMaintenant qu‚Äôon comprend ce qu‚Äôest un thread ‚Äî une proc√©dure en cours d\u0026rsquo;ex√©cution ‚Äî il faut se demander qui ex√©cute cette proc√©dure.\nLe coeur ‚Äî le serveur On y arrive enfin, dans un ordinateur, le composant physique qui ex√©cute un thread s\u0026rsquo;appelle un coeur (core en anglais). Pour notre restaurant, ce core est le serveur. C\u0026rsquo;est lui, physiquement, qui prend les commandes, sert les plats, etc.\nConcurrence, parall√©lisme, multithread et monothread ‚Äî ou comment servir 2 familles en m√™me temps Un serveur ne peut faire qu\u0026rsquo;une seule chose √† la fois, √† un instant donn√© : quand il prend une commande √† l\u0026rsquo;instant T, il ne peut pas, en m√™me temps, servir des plats.\nPar contre, il pourrait s\u0026rsquo;interrompre pendant les t√¢ches, par exemple, au lieu de prendre toutes les commandes de la famille, d\u0026rsquo;un coup, il peut :\nprendre la commande d\u0026rsquo;un 1er plat aller chercher un plat √† servir servir le plat prendre la commande d\u0026rsquo;un 2√®me plat aller chercher un autre plat √† servir servir le plat etc. Attention: ici nous n\u0026rsquo;avons pas d√©coup√© les actions. C\u0026rsquo;est juste que le serveur a jongl√© entre les 2 t√¢ches \u0026ldquo;prendre la commande\u0026rdquo; et \u0026ldquo;servir les plats\u0026rdquo;. On appelle ce comportement la concurrence, car les 2 t√¢ches sont en concurrence pour √™tre termin√©es.\nDans un ordinateur, les threads sont concurrents, et comme √©nonc√© plus haut, √©tant donn√© qu\u0026rsquo;un processus est compos√© d\u0026rsquo;un thread principal, on dit que les processus sont concurrents.\nDans la vraie vie il y a des situations o√π on ne jongle pas avec les t√¢ches, o√π il faut √™tre concentr√© sur une t√¢che\nTout √† fait, et dans ce cas, s\u0026rsquo;il y a trop de t√¢ches pour une seule personne, on fait intervenir une 2√®me personne, une 3√®me etc.\nDans notre restaurant, avec 2 serveurs, pendant que l\u0026rsquo;un prend les commandes de la famille 1, un autre peut servir les plats de la famille 2. On appelle √ßa le parall√©lisme, les proc√©dures/threads sont ex√©cut√©s en parall√®le.\nEnfin, dans un restaurant, si on ne peut avoir qu\u0026rsquo;un seul serveur qui suit activement une fiche d\u0026rsquo;instructions ‚Äî un seul thread ‚Äî, on dit que le restaurant/le programme est monothread. S\u0026rsquo;il y en a plusieurs, on dit que le restaurant/serveur est multithread.\nDu coup, la solution pour le restaurant est d\u0026rsquo;embaucher plus de serveurs ?\nC\u0026rsquo;est l\u0026rsquo;une des solutions, oui, mais ce n\u0026rsquo;est pas la seule. Il y a globalement 2 chemins pour r√©pondre √† une mont√©e en charge. On peut :\noptimiser les algorithmes pour les rendre plus performants et/ou changer le mode d\u0026rsquo;ex√©cution, ou alors on peut mettre plus de coeurs et faire du multithread. De la m√™me mani√®re, dans la vraie vie, on peut :\nmieux former le serveur et/ou optimiser les proc√©dures qu\u0026rsquo;il doit suivre et/ou le motiver pour qu\u0026rsquo;il travaille plus vite, embaucher plus de serveurs. Dans tous les cas, je ne m\u0026rsquo;avancerai pas pour apprendre √† un restaurateur son m√©tier.\nLe partage de ressources ‚Äî ou comment partager une fourchette Dans le restaurant, on va maintenant se mettre du point de vue d\u0026rsquo;un couple, venu manger en t√™te √† t√™te dans une ambiance cosy, tamis√©e, √† l\u0026rsquo;abri des regards.\nLe serveur leur annonce la mauvaise nouvelle: il y a assez de couverts pour 2, sauf pour la fourchette. S\u0026rsquo;ils souhaitent tout de m√™me manger ici, ils devront se partager la fourchette, et interdiction de manger avec les doigts.\nLe couple discute, et finalement ce n\u0026rsquo;est pas un probl√®me, ils sont l√† pour profiter de l\u0026rsquo;instant.\nUne fois la commande pass√©e et les plats servis, Le couple commence √† manger. Mais comment s‚Äôorganisent-ils ?\nBen ils mangent chacun leur tour, ou alors l\u0026rsquo;un mange d\u0026rsquo;abord, et l\u0026rsquo;autre ensuite ?\nBingo, que l\u0026rsquo;un mange d\u0026rsquo;abord, puis l\u0026rsquo;autre, ou qu\u0026rsquo;ils mangent √† tour de r√¥le, dans tous les cas, ils doivent se partager une ressource : la fourchette. Donc l\u0026rsquo;un prend le contr√¥le de la ressource/fourchette, fait des actions avec cette ressource, puis lib√®re la ressource. L\u0026rsquo;autre peut √† son tour prendre le contr√¥le de la ressource, etc.\nDans un ordinateur, c\u0026rsquo;est pareil, dans un processus, les threads doivent se partager les ressources. De m√™me, les processus doivent se partager les ressources.\nC\u0026rsquo;est pour √ßa que sur un ordinateur, quand tu ouvres un document Word partag√© avec tes coll√®gues, parfois tu as un message du genre \u0026ldquo;le fichier est d√©j√† ouvert par\u0026hellip;\u0026rdquo; car le document Word est une fourchette ressource partag√©e entre ton application Word, et celle de ton coll√®gue.\nElle est bizarre ton explication\u0026hellip;\nJe ne vois pas de quoi tu parles.\nQuoiqu\u0026rsquo;il en soit, tu comprends donc qu\u0026rsquo;en rajoutant plus de threads/cores/personnes, on ne va pas forc√©ment plus vite. Ils doivent se synchroniser pour partager les ressources et parfois attendre.\nInstant Dev En informatique, ce partage de ressource s‚Äôappelle une section critique. Pour √©viter que deux t√¢ches utilisent la ressource en m√™me temps, on utilise des verrous (locks). Conclusion Dans cet article, on a vu diff√©rents termes informatiques qui permettent de comprendre un peu plus comment fonctionne un ordinateur, comment on pouvait r√©pondre √† la mont√©e en charge de diff√©rentes mani√®res, et que finalement, c\u0026rsquo;est tr√®s proche de la vie r√©elle.\nNous avons fini cette section \u0026ldquo;IMMV ‚Äî Section 2 ‚Äî L\u0026rsquo;ex√©cution : comment faire des actions ?\u0026rdquo;.\nDans la prochaine section, IMMV ‚Äî Section 3 ‚Äî L\u0026rsquo;optimisation : comment se faire passer pour un coach de vie, on verra comment optimiser des applications et la vie r√©elle.\n‚Üê Retour √† la section\n‚Üê Retour √† l‚Äôintroduction\n","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/l-execution/threads/","summary":"\u003cp\u003eDans le pr√©c√©dent article, \u003ca href=\"../sync-async/\"\u003eIMMV ‚Äî Section 2 ‚Äî Chapitre 1 ‚Äî Synchrone et Asynchrone, ou comment r√©agir au changement\u003c/a\u003e, on a vu les diff√©rents modes d\u0026rsquo;ex√©cution.\u003c/p\u003e\n\u003cp\u003eOn s\u0026rsquo;√©tait arr√™t√© sur le probl√®me suivant : Comment faire pour r√©pondre √† la mont√©e en charge, √† l\u0026rsquo;accumulation de t√¢ches ?\u003c/p\u003e\n\u003cp\u003eEh bien, dans cet article, on va voir comment on r√©sout ce probl√®me, en informatique \u003cstrong\u003ecomme dans la vraie vie\u003c/strong\u003e : les m√©canismes sont souvent tr√®s proches.\u003c/p\u003e","title":"IMMV ‚Äî Section 2 ‚Äî Chapitre 2 ‚Äî Monothread, Multithread, Parall√©lisme et Concurrence, je ne peux pas tout faire en m√™me temps !"},{"content":"Dans le pr√©c√©dent article IMVV ‚Äî Section 1 ‚Äî Chapitre 1 ‚Äî File ou Pile ? L\u0026rsquo;art de passer avant les autres on a d√©couvert les files et les piles. Cette fois, on va survoler plusieurs autres structures de donn√©es (data structures en anglais) qu\u0026rsquo;on utilise tr√®s souvent en informatique\u0026hellip; et dans la vraie vie.\nN\u0026rsquo;oublie pas que les objectifs de ces articles sont :\nTe donner une meilleure compr√©hension des bases de l‚Äôinformatique, T\u0026rsquo;inspirer pour analyser ou optimiser les situations du quotidien, ou peut-√™tre, qui sait, te donner envie d\u0026rsquo;explorer encore plus loin\u0026hellip; jusqu‚Äô√† en faire ton m√©tier. Le tableau ‚Äî la base de presque tout Tu as peut-√™tre remarqu√© dans le pr√©c√©dent article que la file et la pile se ressemblent beaucoup. En r√©alit√©, on peut les repr√©senter toutes les deux avec la m√™me structure : un tableau.\nEn informatique, le tableau (ou array en anglais) est l‚Äôune des structures les plus simples : on range des √©l√©ments les uns √† la suite des autres, dans un espace de taille fixe, et chaque √©l√©ment est rep√©r√© par sa position (ou index).\nPrenons un exemple simple : un tableau d\u0026rsquo;amis √† inviter pour un anniversaire, mais dans mon carnet d\u0026rsquo;adresses je n\u0026rsquo;ai que 6 places.\nAmis Manutea Vai Purotu Heiarii Reva (vide) index 0 1 2 3 4 5 L‚Äôindex est simplement la position de la personne dans le tableau, ce n\u0026rsquo;est pas un ordre.\nDans la plupart des langages informatiques, l\u0026rsquo;index commence √† 0, et pas √† 1.\nCet index nous permet d\u0026rsquo;acc√©der directement √† Vai, l\u0026rsquo;amie √† l\u0026rsquo;index 2 (ou 3√®me √©l√©ment), pour voir son num√©ro de t√©l√©phone par exemple.\nEt ce tableau peut se comporter diff√©remment selon la mani√®re dont on ajoute et retire les √©l√©ments. Par exemple, on peut le faire fonctionner comme une file ou une pile, simplement en changeant les r√®gles du jeu.\nSi c\u0026rsquo;est une file : On ajoute les amis √† la fin, par exemple, Jean arrive apr√®s Reva : Amis Manutea Vai Purotu Heiarii Reva Jean index 0 1 2 3 4 5 Et on traite depuis le d√©but, on retire Manutea du tableau : Amis Vai Purotu Heiarii Reva Jean (vide) index 0 1 2 3 4 5 Pour une pile : On ajoute les amis au d√©but, Jean arrive avant Manutea : Amis Jean Manutea Vai Purotu Heiarii Reva index 0 1 2 3 4 5 Et on traite toujours depuis le d√©but, on retire Jean du tableau : Amis Manutea Vai Purotu Heiarii Reva (vide) index 0 1 2 3 4 5 Dans les deux cas, on utilise un tableau pour stocker les amis. C‚Äôest la logique d‚Äôajout et de retrait qui transforme ce tableau en pile ou en file.\nüéØ Et c‚Äôest exactement pour √ßa que, lorsqu‚Äôon traite des dossiers empil√©s, il vaut mieux commencer par ceux du bas. Sinon, on inverse l‚Äôordre d‚Äôarriv√©e‚Ä¶ et ce n‚Äôest plus une file d‚Äôattente, mais une injustice organis√©e.\nS\u0026rsquo;il n\u0026rsquo;y a que 6 places, que se passe-t-il si j\u0026rsquo;ai 7 amis ?\nD\u0026rsquo;abord, je te f√©licite d\u0026rsquo;avoir autant d\u0026rsquo;amis. Ensuite, on peut s\u0026rsquo;en sortir, en achetant un carnet d\u0026rsquo;adresse qui a plus de places, et on recopie nos amis dans ce nouveau carnet.\nC\u0026rsquo;est similaire en informatique, on fait un nouveau tableau, plus grand, et on recopie.\nHeureusement, en informatique on a invent√© une autre structure.\nLa liste ‚Äî comme le tableau, mais dynamique La liste (ou list en anglais), c‚Äôest comme un tableau, mais en mieux : la taille n‚Äôest pas fixe.\nTu peux ajouter ou supprimer des √©l√©ments √† tout moment, sans te soucier du nombre de places pr√©vues au d√©part. Et √† tout moment, tu peux demander : ‚ÄúCombien d‚Äô√©l√©ments j‚Äôai dans cette liste ?‚Äù ‚Äî et obtenir une r√©ponse fiable.\nC‚Äôest la version souple du tableau, celle qu‚Äôon trouve dans la majorit√© des langages de programmation modernes.\nRefaisons les exemples de pile et de file, mais cette fois-ci avec des listes.\nSi c\u0026rsquo;est une file : On ajoute les amis √† la fin, par exemple, Jean arrive apr√®s Reva : Amis Manutea Vai Purotu Heiarii Reva Jean index 0 1 2 3 4 5 Nombre d\u0026rsquo;√©l√©ments: 6\nEt on traite depuis le d√©but, on retire Manutea du tableau : Amis Vai Purotu Heiarii Reva Jean index 0 1 2 3 4 Nombre d\u0026rsquo;√©l√©ments: 5\nPour une pile : On ajoute les amis au d√©but, Jean arrive avant Manutea : Amis Jean Manutea Vai Purotu Heiarii Reva index 0 1 2 3 4 5 Nombre d\u0026rsquo;√©l√©ments: 6\nEt on traite toujours depuis le d√©but, on retire Jean du tableau : Amis Manutea Vai Purotu Heiarii Reva index 0 1 2 3 4 Nombre d\u0026rsquo;√©l√©ments: 5\nOn remarque qu\u0026rsquo;il n\u0026rsquo;y a plus la case (vide) et le nombre d\u0026rsquo;√©l√©ments change.\nInstant Dev Pour permettre cette souplesse, la liste est plus gourmande en calculs:\ncalcul √† la vol√©e du nombre d\u0026rsquo;√©l√©ments, r√©allocation de m√©moire. Mais en vrai, √† moins que tu ne codes un satellite, une carte embarqu√©e, ou une console des ann√©es 80, o√π chaque octet compte, il y a peu de raisons d‚Äôutiliser un tableau fixe. Une liste dynamique t\u0026rsquo;√©vitera bien des migraines.\nLe tableau et la liste sont des structures tr√®s basiques et tr√®s puissantes, elles sont les bases de beaucoup d\u0026rsquo;autres structures qu\u0026rsquo;on verra par la suite.\nLe tableau associatif ‚Äî ou comment indexer On avait pris l\u0026rsquo;exemple d\u0026rsquo;un carnet d\u0026rsquo;adresses qu\u0026rsquo;on avait mis dans un tableau ou dans une liste. C\u0026rsquo;est d√©j√† tr√®s bien de pouvoir stocker ta liste d\u0026rsquo;amis, mais si tu as des centaines d\u0026rsquo;amis et que tu veux appeler Vai pour aller √† la mer, tu vas gal√©rer pour chercher dans ce carnet d\u0026rsquo;adresse.\nEn effet, avec les 2 derni√®res structures, tu dois parcourir les √©l√©ments un par un, jusqu\u0026rsquo;√† tomber sur Vai. Tu vas perdre beaucoup de temps √† chercher son num√©ro, √ßa va t\u0026rsquo;√©nerver, tu vas l\u0026rsquo;appeler, lui dire \u0026ldquo;mais quelle id√©e d\u0026rsquo;avoir un pr√©nom qui commence par V!\u0026rdquo;, elle va s\u0026rsquo;√©nerver, vous ne serez plus amis, alors que tu voulais juste aller surfer.\nJe m\u0026rsquo;emporte un peu? Peut-√™tre.\nPour r√©soudre ce probl√®me, en informatique on a invent√© le tableau associatif (ou map en anglais). On utilise le tableau, et on va profiter de l\u0026rsquo;index pour justement indexer les √©l√©ments.\nPour cela, on a besoin de r√©fl√©chir un peu:\nOn sait que l\u0026rsquo;index est une position dans le tableau, donc un nombre On sait que les pr√©noms commencent par une lettre (oui, je suis s√©rieux), on va supposer que c\u0026rsquo;est une lettre de l\u0026rsquo;alphabet, et pas un caract√®re sp√©cial comme *$@ On sait qu\u0026rsquo;il y a 26 lettres dans l\u0026rsquo;alphabet =\u0026gt; Eur√™ka: On peut utiliser la 1√®re lettre du pr√©nom, la transformer en index en utilisant sa position dans l\u0026rsquo;alphabet, et associer le pr√©nom √† cet index. On dit que l\u0026rsquo;index est une cl√© et que le pr√©nom est une valeur par exemple:\nManutea =\u0026gt; M =\u0026gt; M est la 14√®me lettre de l\u0026rsquo;alphabet, donc Manutea sera le 14√®me √©l√©ment. Pour rappel, l\u0026rsquo;index commence √† 0, donc M = index 13. cl√©: 13 valeur: Manutea\nPour Heiarii on aura: cl√©: 7 valeur: Heiarii\nCe qui nous donne:\nAmis (vide) (vide) (vide) (vide) (vide) (vide) (vide) Heiarii (vide) (vide) (vide) (vide) (vide) Manutea (vide) Purotu (vide) Reva (vide) (vide) (vide) Vai (vide) (vide) (vide) (vide) index 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 Avec cette map, on pourra facilement acc√©der aux informations de Vai, puisqu\u0026rsquo;on pourra juste aller directement √† l\u0026rsquo;index 21.\nInstant Dev En vrai, pour calculer l\u0026rsquo;index, on utilise une fonction de hachage (hash en anglais) qui permet de transformer les cl√©s en index. C\u0026rsquo;est pour √ßa qu\u0026rsquo;on appelle √ßa un HashMap en Java. Oui mais moi je n\u0026rsquo;ai pas envie de m\u0026rsquo;emb√™ter √† compter sur mes doigts √† quelle position est la lettre V\u0026hellip;\nTu as raison, dans la vraie vie, dans ton carnet d\u0026rsquo;adresse pour chaque lettre tu as une encoche o√π la lettre y est marqu√©e, et tu notes les informations dans les pages qui correspondent √† cette lettre.\nCarnet d'adresses papier, en rouge les encoches ‚Äî source: Wikim√©dia En informatique c\u0026rsquo;est le m√™me principe, sauf qu\u0026rsquo;on ne peut pas utiliser de lettre comme index, alors on est oblig√© de trouver cette astuce.\nEt en plus, il est nul ton carnet d\u0026rsquo;adresse, comment je fais si j\u0026rsquo;ai 2 amis qui s\u0026rsquo;appellent Vai et Vahine? Je mets Vahine dans la case juste apr√®s? Et si j\u0026rsquo;ai des centaines d\u0026rsquo;amis comme tu le disais au d√©but, je fais comment pour les mettre dans les 26 cases ?\nOk, tranquille, pas de stress.\nEn informatique, on peut combiner les structures, plut√¥t que d\u0026rsquo;associer un pr√©nom √† une lettre, on va associer une liste de pr√©noms √† une lettre. Ci-dessous on r√©√©crit notre map et on ajoute Vahine :\nCl√©s 7 13 15 17 21 ‚Üì ‚Üì ‚Üì ‚Üì ‚Üì Heiarii Manutea Purotu Reva Vai Vahine Comme tu l\u0026rsquo;as remarqu√©, au lieu de mettre directement les pr√©noms dans les cases, il y a des fl√®ches qui pointent vers des listes. On appelle √ßa un pointeur (ou pointer en anglais). c‚Äôest un m√©canisme qui permet √† l‚Äôordinateur de dire \u0026ldquo;Va chercher les donn√©es ailleurs.\u0026rdquo; Plut√¥t que de stocker directement les valeurs, on stocke l‚Äôendroit o√π elles se trouvent.\nC\u0026rsquo;est la plus grande force de l\u0026rsquo;informatique, on peut combiner diff√©rents concepts abstraits pour r√©pondre √† notre besoin.\nL\u0026rsquo;ensemble ‚Äî une structure unique Si comme moi tu fais ta liste de courses durant la semaine en pr√©vision des grandes courses du dimanche, tu as peut-√™tre d√©j√† eu la liste qui ressemble √† :\nlait oeufs pops viande salade oeufs Tu remarques que les oeufs apparaissent 2 fois. On appelle √ßa un doublon.\n√áa peut arriver si lundi tu t\u0026rsquo;es fait une omelette avec les derniers oeufs, tu les as not√©s pour en racheter. Puis que vendredi, tu voulais faire un g√¢teau, mais tu t\u0026rsquo;es souvenu que tu n\u0026rsquo;avais plus d\u0026rsquo;oeufs\u0026hellip; et alors tu les as r√©√©crits.\nC\u0026rsquo;est tr√®s sp√©cifique comme explication\u0026hellip; C\u0026rsquo;est ce qui t\u0026rsquo;es arriv√©, pas vrai?\nTu n\u0026rsquo;as pas de preuve. Cette accusation est fausse.\nBref, la liste et le tableau n\u0026rsquo;ont aucun moyen d\u0026rsquo;emp√™cher la pr√©sence de doublons dans leurs √©l√©ments. C\u0026rsquo;est pour √ßa qu\u0026rsquo;en informatique on a invent√© l\u0026rsquo;ensemble (ou set en anglais), une structure o√π chaque √©l√©ment est unique.\nPar contre, le set n\u0026rsquo;est pas ordonn√© comme le tableau et la liste. Il n\u0026rsquo;y a pas d\u0026rsquo;index permettant d\u0026rsquo;acc√©der directement au 2√®me ou 6√®me √©l√©ment.\nInstant Dev En informatique, pour faire un set, on utilise en fait une map o√π la cl√© est l\u0026rsquo;√©l√©ment. Le calcul de hash nous garantit qu\u0026rsquo;il ne peut pas y avoir de doublon. Et on met une valeur arbitraire dans la valeur associ√©e, comme 1 ou PRESENT.\nSi on veut une structure ordonn√©e sans doublons, on peut :\ncoder une liste avec une fonction d\u0026rsquo;ajout qui rejette les doublons, transformer un set en liste, utiliser une structure sp√©cialis√©e, comme LinkedHashSet en Java üìå Exemples dans la vie r√©elle L\u0026#39;ensemble des ingr√©dients qu‚Äôil te reste dans le frigo L\u0026#39;ensemble des invit√©s √† ton anniversaire üíª Exemples en informatique L\u0026#39;ensemble des num√©ros de passeport en Polyn√©sie fran√ßaise L\u0026#39;ensemble de tes amis Facebook Le graphe ‚Äî ou comment appeler l\u0026rsquo;ami d\u0026rsquo;un ami d\u0026rsquo;un ami Tu pr√©pares ta liste d‚Äôinvit√©s pour ton anniversaire, tu comptes inviter tout ton carnet d\u0026rsquo;adresses.\nEt l√†, tu r√©alises que tu n‚Äôas pas le contact de Paul. Tu l\u0026rsquo;as crois√© en soir√©e et il √©tait cool, tu voudrais l\u0026rsquo;inviter\u0026hellip; mais tu as oubli√© de lui demander son num√©ro.\nHeureusement, tu sais que Purotu le conna√Æt.\nTu l\u0026rsquo;appelles\u0026hellip; zut, elle n\u0026rsquo;a pas son num√©ro. Mais elle te donne le num√©ro de Tiare, une autre amie de Paul. Tu appelles Tiare, tu te pr√©sentes, tu l\u0026rsquo;invite √©galement car tu n\u0026rsquo;es pas un sauvage. Et tu lui demandes le num√©ro de Paul.\nBingo, elle l\u0026rsquo;a, tu appelles Paul et il est chaud pour venir √† ton anniversaire.\nLes liens entre ces personnes peuvent √™tre repr√©sent√©s par un graphe (ou graph en anglais).\nEt ce que tu viens de faire, sans t\u0026rsquo;en rendre compte, c\u0026rsquo;est un parcours de graphe, un algorithme !\n%%{ init: { 'theme': 'base', 'themeVariables': { 'primaryColor': '#ddd', 'primaryTextColor': '#007acc', 'primaryBorderColor': '#007acc', 'lineColor': '#007acc' } } }%% graph TD A[Toi] --- B[Manutea] A --- C[Vai] A --- D[Purotu] A --- E[Heiarii] A --- F[Reva] A --- G[Jean] D --- H[Tiare] H --- I[Paul] Graphe de relation entre les personnes Ce graphe est non orient√©, c\u0026rsquo;est-√†-dire qu\u0026rsquo;il n\u0026rsquo;y a pas de sens entre les √©l√©ments. Chaque case est un noeud, et chaque trait est une ar√™te.\nEffectivement pour √©viter de f√¢cher les personnes, on ne va pas dire \u0026ldquo;Purotu est l\u0026rsquo;ami de Tiare, mais Tiare n\u0026rsquo;est pas l\u0026rsquo;ami de Purotu\u0026rdquo;.\nPar contre, on peut utiliser un graphe orient√© pour repr√©senter les appels que tu as pass√©s.\n%%{ init: { 'theme': 'base', 'themeVariables': { 'primaryColor': '#ddd', 'primaryTextColor': '#007acc', 'primaryBorderColor': '#007acc', 'lineColor': '#007acc' } } }%% graph TD A[Toi] --\u003e B[Manutea] A --\u003e C[Vai] A --\u003e D[Purotu] A --\u003e E[Heiarii] A --\u003e F[Reva] A --\u003e G[Jean] A --\u003e H[Tiare] A --\u003e I[Paul] Graphe des appels que tu as pass√© Ici, chaque case est un noeud, tout comme le graphe non orient√©, mais cette fois-ci, chaque fl√®che est une ar√™te, et donne le sens d\u0026rsquo;appel.\nOn a donc les m√™mes donn√©es, mais on utilise la structure adapt√©e √† ce qu\u0026rsquo;on veut repr√©senter.\nEt c\u0026rsquo;est quoi le parcours de graphe?\nJe suis heureux que tu poses cette question, mais ta question d√©passe le cadre de cet article.\nConclusion On a d√©j√† vu pas mal de choses, je te laisse relire, essayer de combiner les structures entre elles, te renseigner sur internet en cherchant \u0026ldquo;structures de donn√©es\u0026rdquo; ou \u0026ldquo;data structure\u0026rdquo;.\nIl existe beaucoup de structures de donn√©es, celles qui sont pr√©sent√©es dans cet article sont juste les plus basiques, celles qu\u0026rsquo;on apprend dans les premi√®res heures de cours de programmation.\nSi tu souhaites continuer cette aventure, tu peux regarder la suite ici: IMVV ‚Äî Section 1 ‚Äî Chapitre 3 ‚Äî Structures de contr√¥le et algorithme, apprendre √† r√©fl√©chir\n‚Üê Retour √† la section\n‚Üê Retour √† l‚Äôintroduction\n","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/les-bases/structures-de-donnees/","summary":"\u003cp\u003eDans le pr√©c√©dent article \u003ca href=\"../file-et-pile/\"\u003eIMVV ‚Äî Section 1 ‚Äî Chapitre 1 ‚Äî File ou Pile ? L\u0026rsquo;art de passer avant les autres\u003c/a\u003e on a d√©couvert les files et les piles. Cette fois, on va survoler plusieurs autres \u003cstrong\u003estructures de donn√©es\u003c/strong\u003e (\u003cem\u003edata structures\u003c/em\u003e en anglais) qu\u0026rsquo;on utilise tr√®s souvent en informatique\u0026hellip; et dans la vraie vie.\u003c/p\u003e\n\u003cp\u003eN\u0026rsquo;oublie pas que les objectifs de ces articles sont :\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eTe donner une meilleure compr√©hension des bases de l‚Äôinformatique,\u003c/li\u003e\n\u003cli\u003eT\u0026rsquo;inspirer pour analyser ou optimiser les situations du quotidien,\u003c/li\u003e\n\u003cli\u003eou peut-√™tre, qui sait, te donner envie d\u0026rsquo;explorer encore plus loin\u0026hellip; jusqu‚Äô√† en faire ton m√©tier.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"le-tableau--la-base-de-presque-tout\"\u003eLe tableau ‚Äî la base de presque tout\u003c/h2\u003e\n\u003cp\u003eTu as peut-√™tre remarqu√© dans le pr√©c√©dent article que la \u003cstrong\u003efile\u003c/strong\u003e et la \u003cstrong\u003epile\u003c/strong\u003e se ressemblent beaucoup. En r√©alit√©, on peut les repr√©senter toutes les deux avec la m√™me structure : un \u003cstrong\u003etableau\u003c/strong\u003e.\u003c/p\u003e","title":"IMVV ‚Äî Section 1 ‚Äî Chapitre 2 ‚Äî Autres structures de donn√©es, j'organise mon bordel"},{"content":"Dans l\u0026rsquo;article pr√©c√©dent IMVV ‚Äî Section 1 ‚Äî Chapitre 2 ‚Äî Autres structures de donn√©es, j\u0026rsquo;organise mon bordel, on s\u0026rsquo;√©tait arr√™t√© sur ta question :\nEt c\u0026rsquo;est quoi le parcours de graphe?\nDans cet article, on va parler des structures de contr√¥le (control flow statements en anglais), qu\u0026rsquo;on utilise dans des algorithmes (algorithms en anglais).\nAvant d\u0026rsquo;expliquer l\u0026rsquo;algorithme que tu as fait, le parcours de graphe, on doit expliquer les structures de contr√¥le.\nN\u0026rsquo;oublie pas que les objectifs de ces articles sont :\nTe donner une meilleure compr√©hension des bases de l‚Äôinformatique, T\u0026rsquo;inspirer pour analyser ou optimiser les situations du quotidien, ou peut-√™tre, qui sait, te donner envie d\u0026rsquo;explorer encore plus loin\u0026hellip; jusqu‚Äô√† en faire ton m√©tier. Pseudo-code ‚Äî l\u0026rsquo;art de la cuisine Quand tu fais un g√¢teau, tu r√©alises les actions suivantes:\nPr√©chauffer le four Verser la farine dans le saladier Casser les oeufs et mettre le contenu dans le saladier Verser le lait dans le saladier Remuer Verser la pr√©paration dans un moule Mettre le moule au four Attendre 20 minutes Eteindre le four Sortir le moule du four D√©mouler Toute cette suite d\u0026rsquo;√©tapes est ce qu\u0026rsquo;on appelle un algorithme, et la fa√ßon dont on l\u0026rsquo;a √©crit, √ßa s\u0026rsquo;appelle du pseudo-code, parce que √ßa ressemble √† un langage de programmation, mais ce n\u0026rsquo;en est pas un.\nMais pourquoi on appelle √ßa un algorithme? on peut pas juste dire une suite d\u0026rsquo;actions?\nJe te laisse chercher sur internet pourquoi on appelle √ßa un algorithme.\nLa boucle for ‚Äî ou comment √™tre fiu Ton meilleur ami Manutea te demande \u0026ldquo;Comment tu as fait pour inviter toutes ces personnes √† ton anniversaire ?\u0026rdquo;. Laquelle de ces 2 phrases dirais-tu :\nJ\u0026rsquo;ai appel√© Manutea, puis j\u0026rsquo;ai appel√© Vai, puis j\u0026rsquo;ai appel√© Purotu, puis j\u0026rsquo;ai appel√© Heiarii, puis j\u0026rsquo;ai appel√© Reva, puis j\u0026rsquo;ai appel√© Jean, puis j\u0026rsquo;ai appel√© Tiare, puis j\u0026rsquo;ai appel√© Paul J\u0026rsquo;ai pris mon carnet d\u0026rsquo;adresses, puis pour chaque contact, j\u0026rsquo;ai appel√© le num√©ro correspondant La 1√®re phrase est un algorithme sans boucle (loop en anglais) : chaque action est √©crite explicitement.\nLa 2√®me, elle, utilise une boucle ‚Äî tu r√©p√®tes la m√™me action pour chaque contact. Sans forc√©ment y penser, tu utilises aussi une variable : un espace dans ta t√™te pour m√©moriser un num√©ro, que tu remplaces √† chaque nouvel appel.\nCette mani√®re de r√©p√©ter une action avec une variable, c‚Äôest exactement ce qu‚Äôun ordinateur fait quand on lui demande de parcourir une liste.\nSi tu relis bien la 2√®me phrase, tu verras que pour chaque est en gras. En anglais, pour chaque se dit for each, c\u0026rsquo;est pour √ßa qu\u0026rsquo;on l\u0026rsquo;appelle la boucle for dans la plupart des langages.\nSi on essayait d\u0026rsquo;√©crire un algorithme, sous forme de pseudo-code simple pour d√©crire la 2√®me phrase, √ßa donnerait :\nDans mon carnet d\u0026#39;adresses, pour chaque contact: J\u0026#39;ai appel√© le num√©ro correspondant au contact J\u0026#39;ai invit√© l\u0026#39;ami Fin pour \u0026ldquo;Dans mon carnet d\u0026rsquo;adresses, pour chaque contact\u0026rdquo; marque le d√©but de la boucle, et \u0026ldquo;Fin pour\u0026rdquo; marque la fin de la boucle.\nEntre ces 2 lignes, les actions \u0026ldquo;J\u0026rsquo;ai appel√© le num√©ro correspondant au contact\u0026rdquo; et \u0026ldquo;J\u0026rsquo;ai invit√© l\u0026rsquo;ami\u0026rdquo; forment ce qu\u0026rsquo;on appelle un bloc d\u0026rsquo;instructions.\nPar convention, on indente ce bloc ‚Äî on le d√©cale vers la droite ‚Äî pour montrer visuellement qu\u0026rsquo;il est √† l\u0026rsquo;int√©rieur de la boucle.\nOk, et quel est le rapport entre la boucle for et fiu comme marqu√© dans le titre ?\nSi on devait √©crire l\u0026rsquo;algorithme de la 1√®re phrase, √ßa donnerait :\nJ\u0026#39;ai appel√© Manutea J\u0026#39;ai appel√© Vai J\u0026#39;ai appel√© Purotu J\u0026#39;ai appel√© Heiarii J\u0026#39;ai appel√© Reva J\u0026#39;ai appel√© Jean J\u0026#39;ai appel√© Tiare J\u0026#39;ai appel√© Paul Chaque ligne est une action, donc il faut √©crire autant de lignes qu\u0026rsquo;il y a de contacts dans ta liste de contacts. Maintenant, que se passerait-il si tu devais inviter 100 personnes? Tu serais fiu.\nAlors qu\u0026rsquo;avec la boucle, tu n\u0026rsquo;as pas besoin de changer ton algorithme, c\u0026rsquo;est le m√™me, que tu aies 6 contacts ou 100.\nOui mais dans la vraie vie je dois quand m√™me appeler les amis un par un\nCet exemple n‚Äôest pas l√† pour dire que tu vas programmer ton t√©l√©phone ‚Äî mais pour te faire sentir la puissance de la boucle : un seul bloc, quelle que soit la longueur de ta liste.\nDans la vraie vie, tu fais un groupe Facebook avec tous tes amis et tu postes des messages d\u0026rsquo;informations dans le groupe pour organiser, idem pour un groupe SMS. Si t\u0026rsquo;es old school, tu postes un message dans le journal local et viendra qui verra. D\u0026rsquo;ailleurs j\u0026rsquo;en parlerai dans de prochains articles.\nLa boucle while ‚Äî ou comment faire ses devoirs avant d\u0026rsquo;aller jouer Quand tu √©tais plus jeune, on t\u0026rsquo;a s√ªrement d√©j√† dit \u0026ldquo;Fais d\u0026rsquo;abord tes devoirs, ensuite tu peux aller jouer\u0026rdquo;, ou autrement dit \u0026quot;Tant que tu n\u0026rsquo;a pas fini tes devoirs, tu travailles, ensuite tu peux aller jouer\u0026quot;.\nSi on devait √©crire cet algorithme, √ßa donnerait:\nTant que je n\u0026#39;ai pas fini mes devoirs: Je fais mes devoirs Fin tant que Je vais jouer \u0026ldquo;Tant que je n\u0026rsquo;ai pas fini mes devoirs\u0026rdquo; marque le d√©but de la boucle, et \u0026ldquo;Fin tant que\u0026rdquo; marque la fin de la boucle.\nEntre ces 2 lignes, l\u0026rsquo;action \u0026ldquo;Je fais mes devoirs\u0026rdquo; forme le bloc d\u0026rsquo;instructions.\nTu l\u0026rsquo;auras remarqu√©, c\u0026rsquo;est tr√®s similaire √† la boucle for, sauf qu\u0026rsquo;au lieu de parcourir des √©l√©ments, on v√©rifie une condition, et on r√©p√®te la boucle si la condition n\u0026rsquo;est remplie.\nOn appelle √ßa une boucle while, car Tant que se dit while en anglais.\nEnsuite, une fois que les devoirs sont finis, on sort de la boucle, on fait la suite des instructions, donc \u0026ldquo;Je vais jouer\u0026rdquo;. On aurait aussi pu avoir d\u0026rsquo;autres instructions apr√®s la boucle for, c\u0026rsquo;est juste que l\u0026rsquo;exemple ne s\u0026rsquo;y pr√™tait pas.\nMais alors‚Ä¶ pourquoi deux types de boucles si elles font (presque) la m√™me chose ? Pourquoi une boucle for, et une boucle while ?\nEn fait, en fonction du probl√®me qu\u0026rsquo;on veut r√©soudre :\ndans certains cas on pourra compter, et dans ce cas on pr√©f√®rera utiliser une boucle for dans certains cas on ne pourra pas compter, et dans ce cas on pr√©f√®rera utiliser une boucle while Par exemple, pour un enfant qui joue dehors:\nTant qu\u0026#39;il fait beau: Je joue Fin tant que Ici, impossible de compter.\nMais tu commences peut-√™tre √† te rendre compte d\u0026rsquo;une supercherie.\nInstant Dev üí° En r√©alit√©, toutes les boucles for peuvent √™tre r√©√©crites en boucle while.\nLa boucle for n‚Äôest qu‚Äôune boucle while optimis√©e, √©crite pour √™tre plus simple √† lire‚Ä¶ quand on sait compter.\nLes 2 types de boucles sont des instructions d\u0026rsquo;it√©ration, √† la diff√©rence des instructions simples comme \u0026ldquo;Je joue\u0026rdquo;, les instructions d\u0026rsquo;it√©ration permettre d\u0026rsquo;ex√©cuter des blocs d\u0026rsquo;instructions de mani√®re r√©p√©t√©e.\nBravo, tu commences √† r√©fl√©chir comme un d√©veloppeur !\nExplications\nPour rappel:\ndans une liste, l\u0026rsquo;index commence √† 0, dans une liste, le dernier index est √©gal au nombre d\u0026rsquo;√©l√©ments de la liste moins 1 Amis Manutea Vai Purotu Heiarii Reva Jean Tiare Paul index 0 1 2 3 4 5 6 7 Nombre d\u0026rsquo;√©l√©ments: 8\nune variable c\u0026rsquo;est juste un espace m√©moire o√π on stocke une donn√©e (un tableau, une liste, un pr√©nom, un num√©ro de t√©l√©phone) Si on reprend l\u0026rsquo;exemple de la boucle for:\nDans mon carnet d\u0026#39;adresses, pour chaque contact: J\u0026#39;appelle le num√©ro correspondant au contact J\u0026#39;invite l\u0026#39;ami Fin pour Derri√®re, voici plut√¥t ce que fait un ordinateur (de mani√®re simplifi√©e) :\nJe cr√©e une variable \u0026#34;index\u0026#34;, qui vaut 0 Tant que \u0026#34;index\u0026#34; est inf√©rieur au nombre d\u0026#39;√©l√©ments (8) du carnet d\u0026#39;adresses: Je regarde le contact qui se trouve √† l\u0026#39;\u0026#34;index\u0026#34; dans le carnet d\u0026#39;adresses Je r√©cup√®re son num√©ro Je l\u0026#39;invite \u0026#34;index\u0026#34; prend la valeur \u0026#34;index\u0026#34; + 1 Fin tant que Comme tu le vois, c\u0026rsquo;est un peu plus compliqu√©, c\u0026rsquo;est pour √ßa qu\u0026rsquo;on pr√©f√®re utiliser une boucle for quand on peut compter.\nL\u0026rsquo;instruction conditionnelle ‚Äî ou pourquoi il faut respecter le code de la route Juste au-dessus, on parlait de condition dans la boucle while. Mais on n\u0026rsquo;a jamais expliqu√© ce que c\u0026rsquo;√©tait.\nUne condition est une question qu\u0026rsquo;on se pose, et la r√©ponse est soit ‚Äúoui‚Äù, soit ‚Äúnon‚Äù ‚Äî jamais les deux, jamais \u0026ldquo;un peu\u0026rdquo;.\nQuand on √©crit \u0026ldquo;Tant que je n\u0026rsquo;ai pas fini mes devoirs\u0026rdquo;, √† chaque r√©p√©tition on pose la question \u0026ldquo;Est-ce que j\u0026rsquo;ai fini mes devoirs?\u0026rdquo;.\nEn informatique, comme dans la vraie vie, une condition doit √™tre claire.\nOn peut utiliser ce concept pour faire des branchements dans notre code, dans une instruction conditionnelle (conditional statement en anglais).\nPrenons un exemple simple : tu es en voiture, tu approches un feu tricolore. Il est vert.\nQue fais-tu si le feu passe √† l‚Äôorange juste devant toi‚ÄØ?\nVoici un algorithme qui repr√©sente cette situation :\nSi le feu passe au orange, alors: Tu t\u0026#39;arr√™tes Sinon (c\u0026#39;est toujours vert): Tu continues et traverse l\u0026#39;intersection Fin si \u0026ldquo;Si le feu passe au orange,\u0026rdquo; marque le d√©but de l\u0026rsquo;instruction conditionnelle, \u0026ldquo;alors\u0026rdquo; marque la branche du si, \u0026ldquo;Sinon\u0026rdquo; marque la branche du sinon, et \u0026ldquo;Fin si\u0026rdquo; marque la fin de l\u0026rsquo;instruction conditionnelle.\nDe la m√™me mani√®re que pour les boucles, chaque branche est un bloc d\u0026rsquo;instructions. Comme pour les boucles, chaque branche forme un bloc d‚Äôinstructions, qu‚Äôon indente pour bien le rep√©rer.\nPour visualiser, imagine un arbre : chaque fois qu‚Äôune condition est test√©e, tu choisis une branche √† suivre. Le chemin d√©pend de tes r√©ponses.\nRevenons √† notre parcours de graphe Rappels Tu avais appel√© tes amis pour les inviter √† ton anniversaire, et tu avais √©t√© jusqu\u0026rsquo;au bout du monde, en sautant de relations en relations, pour inviter Paul. Tu avais fait ces actions :\nTu comptes inviter tout ton carnet d\u0026#39;adresses. Tu r√©alises que tu n‚Äôas pas le contact de Paul. Tu l\u0026#39;as crois√© en soir√©e et il √©tait cool, tu voudrais l\u0026#39;inviter... mais t\u0026#39;as oubli√© de lui demander son num√©ro. Heureusement, tu sais que Purotu le conna√Æt. Tu l\u0026#39;appelles... zut, elle n\u0026#39;a pas son num√©ro. Mais elle te donne le num√©ro de Tiare, une autre amie de Paul. Tu appelles Tiare, tu te pr√©sentes, tu l\u0026#39;invites √©galement car tu n\u0026#39;es pas un sauvage. Et tu lui demandes le num√©ro de Paul. Bingo, elle l\u0026#39;a, tu appelles Paul et il est chaud pour venir √† ton anniversaire. Ci-dessous se trouve le graphe de relation entre les personnes, un graphe non orient√©.\n%%{ init: { 'theme': 'base', 'themeVariables': { 'primaryColor': '#ddd', 'primaryTextColor': '#007acc', 'primaryBorderColor': '#007acc', 'lineColor': '#007acc' } } }%% graph TD A[Toi] --- B[Manutea] A --- C[Vai] A --- D[Purotu] A --- E[Heiarii] A --- F[Reva] A --- G[Jean] D --- H[Tiare] H --- I[Paul] Graphe de relation entre les personnes En se basant sur ce qu\u0026rsquo;on a appris dans cet article, on va √©crire un algorithme pour repr√©senter les actions que tu as r√©alis√©es pour inviter tes amis :\n# √âtape 1 : inviter tous mes amis directs (les noeuds les plus proches de \u0026#34;Toi\u0026#34; dans le graphe) Je cr√©e une variable \u0026#34;liste d\u0026#39;amis\u0026#34;, contenant tous mes amis directs Je cr√©e une variable \u0026#34;ami\u0026#34;, le contact courant Dans la \u0026#34;liste d\u0026#39;amis\u0026#34;, pour chaque \u0026#34;ami\u0026#34; : J\u0026#39;appelle \u0026#34;ami\u0026#34; Si \u0026#34;ami\u0026#34; r√©pond, alors : Je l\u0026#39;invite √† mon anniversaire Fin si Fin pour # √âtape 2 : retrouver Paul (en parcourant le graphe en largeur) Je cr√©e une variable \u0026#34;file\u0026#34;, initialis√©e avec la \u0026#34;liste d\u0026#39;amis\u0026#34; Je cr√©e une variable \u0026#34;visit√©s\u0026#34;, une liste vide Tant que la \u0026#34;file\u0026#34; n‚Äôest pas vide : Je prends le premier √©l√©ment de la \u0026#34;file\u0026#34;, je le stocke dans \u0026#34;ami\u0026#34; Si \u0026#34;ami\u0026#34; n‚Äôest pas dans \u0026#34;visit√©s\u0026#34;, alors : J‚Äôajoute \u0026#34;ami\u0026#34; √† \u0026#34;visit√©s\u0026#34; J\u0026#39;appelle \u0026#34;ami\u0026#34; Si \u0026#34;ami\u0026#34; r√©pond, alors : Je lui demande s‚Äôil conna√Æt Paul Si \u0026#34;ami\u0026#34; me donne le num√©ro de Paul : Je cr√©e une variable \u0026#34;Paul\u0026#34; J\u0026#39;appelle \u0026#34;Paul\u0026#34; Si \u0026#34;Paul\u0026#34; r√©pond, alors : Je l‚Äôinvite √† mon anniversaire Je termine la recherche Fin si Sinon : Je r√©cup√®re la liste des amis de \u0026#34;ami\u0026#34; Pour chaque \u0026#34;contact\u0026#34; dans cette liste : J‚Äôajoute \u0026#34;contact\u0026#34; √† la \u0026#34;file\u0026#34; Fin pour Fin si Fin si Fin si Fin tant que √Ä premi√®re vue, √ßa a l\u0026rsquo;air compliqu√©. Mais en fait si tu prends le temps de d√©cortiquer, de bien regarder, tu verras que ce sont juste les actions que tu as r√©alis√©s plus haut, mais dans un langage plus proche de ce que fait un ordinateur.\nLa seule chose qu\u0026rsquo;on a fait en plus des concepts de base, c\u0026rsquo;est qu\u0026rsquo;on a combin√© les structures de contr√¥le et les structures de donn√©es, et le tout nous donne notre algorithme de parcours de graphe !\nInstant Dev üí° On a parcouru le graphe en largeur, c\u0026rsquo;est-√†-dire qu\u0026rsquo;on a d\u0026rsquo;abord regard√© les noeuds voisins de notre point de d√©part.\nD\u0026rsquo;autres algorithmes connus et enseign√©s en informatique sont le parcours en profondeur, l\u0026rsquo;algorithme de Dijkstra, A* et Floyd-Warshall, tu peux regarder sur internet si √ßa t\u0026rsquo;int√©resse.\nConclusion Dans cet article on a appris ce que sont :\nLes structures de contr√¥le, Les boucles, Les conditions, Les variables, Les algorithmes. Il existe d\u0026rsquo;autres structures de contr√¥le, des types de variables, et des algorithmes qu\u0026rsquo;on peut r√©utiliser pour r√©pondre √† beaucoup de probl√®mes. Comme d\u0026rsquo;habitude, je te laisse chercher sur internet si tu veux aller plus loin.\nMais le plus important, c\u0026rsquo;est que tu commences √† r√©fl√©chir comme un d√©veloppeur, et √† comprendre le pseudo-code. Dans la vraie vie, si tu as un probl√®me complexe √† r√©soudre, tu peux essayer de l\u0026rsquo;√©crire comme on l\u0026rsquo;a fait pour le parcours de graphe. Prends ton temps et d√©compose le probl√®me.\nNous avons fini cette section \u0026ldquo;IMMV ‚Äî Section 1 ‚Äî Les Bases : structures et contr√¥le\u0026rdquo;, dans cette section, nous avons √©galement vu les structures de donn√©es.\nDans la prochaine section, IMMV ‚Äî Section 2 ‚Äî L\u0026rsquo;ex√©cution : comment faire des actions ?, nous verrons que l\u0026rsquo;ordinateur et l\u0026rsquo;humain font les actions de mani√®re tr√®s similaire.\n‚Üê Retour √† la section\n‚Üê Retour √† l‚Äôintroduction\n","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/les-bases/structures-de-controle/","summary":"\u003cp\u003eDans l\u0026rsquo;article pr√©c√©dent \u003ca href=\"../structures-de-donnees/\"\u003eIMVV ‚Äî Section 1 ‚Äî Chapitre 2 ‚Äî Autres structures de donn√©es, j\u0026rsquo;organise mon bordel\u003c/a\u003e, on s\u0026rsquo;√©tait arr√™t√© sur ta question :\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eEt c\u0026rsquo;est quoi le parcours de graphe?\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eDans cet article, on va parler des \u003cstrong\u003estructures de contr√¥le\u003c/strong\u003e (\u003cem\u003econtrol flow statements\u003c/em\u003e en anglais), qu\u0026rsquo;on utilise dans des \u003cstrong\u003ealgorithmes\u003c/strong\u003e (\u003cem\u003ealgorithms\u003c/em\u003e en anglais).\u003c/p\u003e\n\u003cp\u003eAvant d\u0026rsquo;expliquer l\u0026rsquo;algorithme que tu as fait, le \u003cstrong\u003eparcours de graphe\u003c/strong\u003e, on doit expliquer les structures de contr√¥le.\u003c/p\u003e","title":"IMVV ‚Äî Section 1 ‚Äî Chapitre 3 ‚Äî Structures de contr√¥le et algorithme, apprendre √† r√©fl√©chir"},{"content":"Pr√©c√©demment, on a vu qu\u0026rsquo;en rajoutant des serveurs, on pouvait servir plus de familles. Dans cette section on verra diff√©rents tips permettant d\u0026rsquo;optimiser un programme existant et la vie r√©elle.\nChapitres IMVV ‚Äî Section 3 ‚Äî Chapitre 1 ‚Äî La m√©moire, ou comment √©viter les p√©nuries dans un magasin IMVV ‚Äî Section 3 ‚Äî Chapitre 2 ‚Äî M√©mo√Øsation et Lazy loading, les techniques du fain√©ant ultime ","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/optimisation/optimisation/","summary":"\u003cp\u003ePr√©c√©demment, on a vu qu\u0026rsquo;en rajoutant des serveurs, on pouvait servir plus de familles. Dans cette section on verra diff√©rents tips permettant d\u0026rsquo;optimiser un programme existant et la vie r√©elle.\u003c/p\u003e\n\u003ch1 id=\"chapitres\"\u003eChapitres\u003c/h1\u003e\n\n\n\u003cul\u003e\n  \n\t\t\n\t\n\t\t\n    \t\n      \t\u003cli\u003e\u003ca href=\"/blog.dev/posts/miroir-informatique-vraie-vie/optimisation/memoire/\"\u003eIMVV ‚Äî Section 3 ‚Äî Chapitre 1 ‚Äî La m√©moire, ou comment √©viter les p√©nuries dans un magasin\u003c/a\u003e\u003c/li\u003e\n    \t\n  \t\n\t\n\t\t\n    \t\n      \t\u003cli\u003e\u003ca href=\"/blog.dev/posts/miroir-informatique-vraie-vie/optimisation/memoisation/\"\u003eIMVV ‚Äî Section 3 ‚Äî Chapitre 2 ‚Äî M√©mo√Øsation et Lazy loading, les techniques du fain√©ant ultime\u003c/a\u003e\u003c/li\u003e\n    \t\n  \t\n\t\n\u003c/ul\u003e","title":"IMMV ‚Äî Section 3 ‚Äî L'optimisation : comment se faire passer pour un coach de vie"},{"content":"Dans cette section, nous verrons comment les actions sont ex√©cut√©es, par les ordinateurs et par les personnes. Et on verra quelques pistes pour r√©pondre √† une accumulation de t√¢ches.\nChapitres IMMV ‚Äî Section 2 ‚Äî Chapitre 1 ‚Äî Synchrone et Asynchrone, ou comment r√©agir au changement IMMV ‚Äî Section 2 ‚Äî Chapitre 2 ‚Äî Monothread, Multithread, Parall√©lisme et Concurrence, je ne peux pas tout faire en m√™me temps ! ","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/l-execution/l-execution/","summary":"\u003cp\u003eDans cette section, nous verrons comment les actions sont ex√©cut√©es, par les ordinateurs et par les personnes. Et on verra quelques pistes pour r√©pondre √† une accumulation de t√¢ches.\u003c/p\u003e\n\u003ch1 id=\"chapitres\"\u003eChapitres\u003c/h1\u003e\n\n\n\u003cul\u003e\n  \n\t\t\n\t\n\t\t\n    \t\n      \t\u003cli\u003e\u003ca href=\"/blog.dev/posts/miroir-informatique-vraie-vie/l-execution/sync-async/\"\u003eIMMV ‚Äî Section 2 ‚Äî Chapitre 1 ‚Äî Synchrone et Asynchrone, ou comment r√©agir au changement\u003c/a\u003e\u003c/li\u003e\n    \t\n  \t\n\t\n\t\t\n    \t\n      \t\u003cli\u003e\u003ca href=\"/blog.dev/posts/miroir-informatique-vraie-vie/l-execution/threads/\"\u003eIMMV ‚Äî Section 2 ‚Äî Chapitre 2 ‚Äî Monothread, Multithread, Parall√©lisme et Concurrence, je ne peux pas tout faire en m√™me temps !\u003c/a\u003e\u003c/li\u003e\n    \t\n  \t\n\t\n\u003c/ul\u003e","title":"IMMV ‚Äî Section 2 ‚Äî L'ex√©cution : comment faire des actions ?"},{"content":"Dans cette section, nous verrons les bases permettant de stocker et manipuler des donn√©es.\nChapitres IMVV ‚Äî Section 1 ‚Äî Chapitre 1 ‚Äî File ou Pile ? L\u0026#39;art de passer avant les autres IMVV ‚Äî Section 1 ‚Äî Chapitre 2 ‚Äî Autres structures de donn√©es, j\u0026#39;organise mon bordel IMVV ‚Äî Section 1 ‚Äî Chapitre 3 ‚Äî Structures de contr√¥le et algorithme, apprendre √† r√©fl√©chir ","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/les-bases/les-bases/","summary":"\u003cp\u003eDans cette section, nous verrons les bases permettant de stocker et manipuler des donn√©es.\u003c/p\u003e\n\u003ch1 id=\"chapitres\"\u003eChapitres\u003c/h1\u003e\n\n\n\u003cul\u003e\n  \n\t\t\n\t\n\t\t\n    \t\n      \t\u003cli\u003e\u003ca href=\"/blog.dev/posts/miroir-informatique-vraie-vie/les-bases/file-et-pile/\"\u003eIMVV ‚Äî Section 1 ‚Äî Chapitre 1 ‚Äî File ou Pile ? L\u0026#39;art de passer avant les autres\u003c/a\u003e\u003c/li\u003e\n    \t\n  \t\n\t\n\t\t\n    \t\n      \t\u003cli\u003e\u003ca href=\"/blog.dev/posts/miroir-informatique-vraie-vie/les-bases/structures-de-donnees/\"\u003eIMVV ‚Äî Section 1 ‚Äî Chapitre 2 ‚Äî Autres structures de donn√©es, j\u0026#39;organise mon bordel\u003c/a\u003e\u003c/li\u003e\n    \t\n  \t\n\t\n\t\t\n    \t\n      \t\u003cli\u003e\u003ca href=\"/blog.dev/posts/miroir-informatique-vraie-vie/les-bases/structures-de-controle/\"\u003eIMVV ‚Äî Section 1 ‚Äî Chapitre 3 ‚Äî Structures de contr√¥le et algorithme, apprendre √† r√©fl√©chir\u003c/a\u003e\u003c/li\u003e\n    \t\n  \t\n\t\n\u003c/ul\u003e","title":"IMMV ‚Äî Section 1 ‚Äî Les bases : structures et contr√¥le"},{"content":"\u0026lsquo;Ia ora na,\nL\u0026rsquo;informatique semble souvent obscure pour beaucoup. Quand je dis que je suis ing√©nieur informatique, on me demande r√©guli√®rement : ¬´ Mais tu fais quoi exactement ? ¬ª.\nAvec le temps, j‚Äôai pris l‚Äôhabitude de vulgariser mon m√©tier. Et ce qui fonctionne le mieux, ce sont les exemples concrets tir√©s de la vie quotidienne.\nEn √©cole d\u0026rsquo;ing√©nieur, j\u0026rsquo;apprenais beaucoup plus facilement l\u0026rsquo;informatique en partant de situations r√©elles. √Ä travers cette s√©rie d‚Äôarticles, \u0026ldquo;L‚Äôinformatique, un miroir de la vraie vie\u0026rdquo; (abr√©g√© IMVV), je vais tenter d‚Äôexpliquer des concepts informatiques en m‚Äôappuyant sur des sc√®nes famili√®res du quotidien, sur un ton l√©ger. Parce que finalement, coder un programme ou g√©rer une file d‚Äôattente au magasin, ce n‚Äôest pas si diff√©rent.\nInformations de lecture Avant de lire les articles list√©s en bas de cette page, quelques informations pour vous faciliter la lecture :\nIl y a un mode sombre et un mode clair : En haut de chaque page se trouve une ic√¥ne pour interchanger entre les modes de lecture sombre et clair\nJ\u0026rsquo;utiliserai des apart√©s pour les d√©veloppeurs,\nInstant Dev Ceci est un apart√© pour les d√©veloppeurs, si tu es non d√©veloppeur tu peux lire, mais tu auras peut-√™tre mal √† la t√™te. J\u0026rsquo;utiliserai des interjections de lecteur, J\u0026rsquo;interviens comme si j\u0026rsquo;√©tais toi, lecteur, pour aider l\u0026rsquo;auteur de ce blog √† rendre ces articles dynamiques\nCette s√©rie d\u0026rsquo;articles n\u0026rsquo;est pas un cours d\u0026rsquo;informatique, vous n\u0026rsquo;apprendrez pas √† d√©velopper juste en suivant ces articles. Mot de fin Que tu sois curieux, d√©butant ou simplement en qu√™te de sens dans ce monde num√©rique, cette s√©rie pourrait bien t‚Äôapporter quelque chose.\nTu y trouveras peut-√™tre :\nune meilleure compr√©hension des bases de l‚Äôinformatique, des id√©es pour analyser ou optimiser les situations du quotidien, ou m√™me, qui sait, l‚Äôenvie de plonger plus loin dans ce domaine‚Ä¶ jusqu‚Äô√† en faire ton m√©tier. Bien s√ªr, cette s√©rie n‚Äôexplorera qu‚Äôune infime partie de ce vaste domaine qu‚Äôest l‚Äôinformatique. Apr√®s tout, peut-on vraiment expliquer enti√®rement l\u0026rsquo;informatique\u0026hellip; un domaine qui, justement, est le miroir de la vie* ?\n*: cette analogie est √† prendre avec recul : l‚Äôinformatique ne refl√®te pas toute la complexit√© de la vie.\nLes articles de la s√©rie (En cours de r√©daction) IMMV ‚Äî Section 1 ‚Äî Les bases : structures et contr√¥le IMMV ‚Äî Section 1 ‚Äî Les bases : structures et contr√¥le IMVV ‚Äî Section 1 ‚Äî Chapitre 1 ‚Äî File ou Pile ? L\u0026#39;art de passer avant les autres IMVV ‚Äî Section 1 ‚Äî Chapitre 2 ‚Äî Autres structures de donn√©es, j\u0026#39;organise mon bordel IMVV ‚Äî Section 1 ‚Äî Chapitre 3 ‚Äî Structures de contr√¥le et algorithme, apprendre √† r√©fl√©chir IMMV ‚Äî Section 2 ‚Äî L\u0026#39;ex√©cution : comment faire des actions ? IMMV ‚Äî Section 2 ‚Äî L\u0026#39;ex√©cution : comment faire des actions ? IMMV ‚Äî Section 2 ‚Äî Chapitre 1 ‚Äî Synchrone et Asynchrone, ou comment r√©agir au changement IMMV ‚Äî Section 2 ‚Äî Chapitre 2 ‚Äî Monothread, Multithread, Parall√©lisme et Concurrence, je ne peux pas tout faire en m√™me temps ! IMMV ‚Äî Section 3 ‚Äî L\u0026#39;optimisation : comment se faire passer pour un coach de vie IMMV ‚Äî Section 3 ‚Äî L\u0026#39;optimisation : comment se faire passer pour un coach de vie IMVV ‚Äî Section 3 ‚Äî Chapitre 1 ‚Äî La m√©moire, ou comment √©viter les p√©nuries dans un magasin IMVV ‚Äî Section 3 ‚Äî Chapitre 2 ‚Äî M√©mo√Øsation et Lazy loading, les techniques du fain√©ant ultime ","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/introduction/","summary":"\u003cp\u003e\u0026lsquo;Ia ora na,\u003c/p\u003e\n\u003cp\u003eL\u0026rsquo;informatique semble souvent obscure pour beaucoup. Quand je dis que je suis ing√©nieur informatique, on me demande r√©guli√®rement : ¬´ Mais tu fais quoi exactement ? ¬ª.\u003c/p\u003e\n\u003cp\u003eAvec le temps, j‚Äôai pris l‚Äôhabitude de vulgariser mon m√©tier. Et ce qui fonctionne le mieux, ce sont les exemples concrets tir√©s de la vie quotidienne.\u003c/p\u003e\n\u003cp\u003eEn √©cole d\u0026rsquo;ing√©nieur, j\u0026rsquo;apprenais beaucoup plus facilement l\u0026rsquo;informatique en partant de situations r√©elles.\n√Ä travers cette s√©rie d‚Äôarticles, \u003cstrong\u003e\u0026ldquo;L‚Äôinformatique, un miroir de la vraie vie\u0026rdquo;\u003c/strong\u003e (abr√©g√© \u003cem\u003eIMVV\u003c/em\u003e), je vais tenter d‚Äôexpliquer des concepts informatiques en m‚Äôappuyant sur des sc√®nes famili√®res du quotidien, sur un ton l√©ger.\nParce que finalement, coder un programme ou g√©rer une file d‚Äôattente au magasin, ce n‚Äôest pas si diff√©rent.\u003c/p\u003e","title":"IMMV - Introduction - L'informatique, un miroir de la vraie vie"},{"content":"Introduction Cet article est un aper√ßu tr√®s rapide des moyens de paiement en Polyn√©sie Fran√ßaise.\nUpdate (12/05/2022): suite √† quelques feedback, je me rend compte que cet article est √† destination des d√©veloppeurs de site de e-shopping, des commer√ßants, de mes confr√®res mon√©ticiens. Cet article sera complexe √† lire si vous n\u0026rsquo;avez jamais travaill√© avec un TPE, avec une plateforme de paiement, avec des cartes bancaires.\nDisclaimer: Au moment o√π j\u0026rsquo;√©cris cet article, je travaille √† l\u0026rsquo;Oc√©anienne des Services Bancaires (OSB), Ces articles ne sont pas sponsoris√©s par OSB, et j\u0026rsquo;encourage les gens √† faire des tutoriels pour les solutions des autres fournisseurs de solutions de paiement.\nLes diff√©rents types de carte En Polyn√©sie Fran√ßaise, il est possible de payer avec plusieurs types de cartes.\nCarte Bancaire (anciennement Carte Bleue, co-brand√©es ou non de Visa ou Mastercard), American Express (AMEX), Cartes privatives (Socredo Verte / Gold, Banque de Polyn√©sie Hoa, CCP de Fare Rata, Carte Tiare de la Banque de Tahiti), Union Pay International (UPI), Discover, Japan Credit Bureau (JCB) Les 3 derniers types de cartes sont surtout utilis√©s par les touristes.\nLes cartes privatives composent la majorit√© des cartes d√©tenues par les habitants de la Polyn√©sie Fran√ßaise.\nPourquoi autant de personnes ont une carte privative ? Les cartes privatives sont propos√©es par les diff√©rentes banques locales (√† l\u0026rsquo;exception d\u0026rsquo;OFINA qui √©met exclusivement les cartes AMEX). Il s\u0026rsquo;agit des banques Socredo, Banque de Tahiti, Banque de Polyn√©sie, et Fare Rata.\nLes cartes privatives sont soumises √† des r√©glementations et des frais moins co√ªteux que les cartes internationales.\nEn outre, elles sont uniquement r√©gul√©es par les banques locales contrairement aux cartes bancaires internationales, qui sont non seulement r√©gul√©es par les banques locales, mais aussi par les r√©seaux internationaux (CB, Visa, Mastercard, Union Pay, etc.).\nC\u0026rsquo;est en partie √† cause de ces r√©glementations et frais moins co√ªteux que les clients des banques doivent remplir moins de conditions pour avoir une carte privative. C\u0026rsquo;est pour cela que les cartes privatives sont plus r√©pandues sur le territoire.\nNotes:\nLes r√©seaux peuvent d√©cider d\u0026rsquo;appliquer des amendes voire de d√©sactiver le flux vers un acteur mon√©taire (banque, processeur de paiement, etc.) si celui-ci ne respecte pas la r√©glementation. Cette r√©glementation est mise √† jour r√©guli√®rement.\nPour les cartes privatives, ce sont les banques locales qui imposent leur r√©glementation, par abus de langage, on parle aussi de r√©seau privatif pour d√©signer l\u0026rsquo;ensemble de ces banques.\nCes r√©glementations sont suivies par les banques centrales des pays, par exemple l\u0026rsquo;IEOM en Polyn√©sie Fran√ßaise.\nJ\u0026rsquo;ai inclus la carte Tiare de la Banque de Tahiti dans les cartes privatives car elle a les m√™mes limitations g√©ographiques que celles-ci, et elle fonctionne aussi en m√©tropole, mais il s\u0026rsquo;agit bien d\u0026rsquo;une CB, donc elle est soumise aux r√©glementations CB.\nLes cartes Socredo privatives sont maintenant co-brand√©es UPI, mais il y a bien 2 applications dans la carte, sur le territoire, c\u0026rsquo;est l\u0026rsquo;application privative qui est utilis√©e, √† l\u0026rsquo;international, c\u0026rsquo;est l\u0026rsquo;application UPI qui est utilis√©e.\nFonctionnement des transactions Le sch√©ma √† 4 coins est l\u0026rsquo;un des sch√©mas de r√©f√©rence de la mon√©tique. Il explique les entit√©s qui entrent en jeu dans une transaction.\nLa banque √©mettrice √©met la carte et la fournit au porteur.\nLa banque acqu√©reuse fournit un contrat accepteur au commer√ßant, afin que celui-ci puisse encaisser les paiements avec les cartes, moyennant une commission, en plus des services annexes autour de l\u0026rsquo;encaissement (exemple: relev√© TPE). Les TPE et solutions de paiement en ligne sont des services d\u0026rsquo;encaissement.\nUn syst√®me d\u0026rsquo;acceptation est un logiciel ou un ensemble de logiciels, qui permet d\u0026rsquo;encaisser une carte bancaire, par exemple les TPE et les plateformes de paiement en ligne.\nIl existe 2 modes de fonctionnement pour le d√©roulement d\u0026rsquo;un paiement:\nle mode single message le mode dual message Lorsque vous payez avec votre carte, vous r√©alisez une transaction. Si toutes les r√®gles de gestion sont valid√©es, la transaction est autoris√©e.\nEn single message, la transaction autoris√©e est directement transform√©e en mouvement financier, i.e. un enregistrement est cr√©√© chez la banque acqu√©reuse qui dit \u0026ldquo;M. Client doit 1000 XPF √† M. Commer√ßant\u0026rdquo;.\nEn dual message, la transaction est enregistr√©e sur le TPE, ou sur la plateforme de paiement, puis, tous les jours √† une certaine heure, l\u0026rsquo;ensemble des transactions de la journ√©e sont envoy√©es √† la banque acqu√©reuse sous forme de mouvement financier.\nEn Polyn√©sie Fran√ßaise, le mode dual message est le plus r√©pandu, c\u0026rsquo;est d\u0026rsquo;ailleurs pour √ßa que l\u0026rsquo;on vous demande de ne pas d√©brancher votre TPE, votre internet, votre r√©seau √©lectrique.\nLes cartes et les syst√®mes d\u0026rsquo;acceptation Pour qu\u0026rsquo;un syst√®me d\u0026rsquo;acceptation puisse encaisser une carte, elle doit reconna√Ætre la carte.\nPour reconna√Ætre une carte, on utilise le BIN, qui sont les N premiers chiffres du num√©ro de la carte, N √©tant d√©fini par le r√©seau.\nDe plus, seule une application sp√©cifique √† ce r√©seau peut reconna√Ætre cette carte. Par exemple, pour une transaction avec une carte AMEX sur un TPE, c\u0026rsquo;est uniquement une application TPE AMEX qui pourra la reconna√Ætre, mais seulement si la carte fait partie d\u0026rsquo;une plage de BIN accept√©e par l\u0026rsquo;application.\nNote: Dans un TPE, il peut y avoir plusieurs applications, quand une carte est ins√©r√©e, le TPE demande √† chaque application \u0026ldquo;Peux-tu accepter cette carte?\u0026rdquo;.\nDe la m√™me mani√®re, pour une plateforme de paiement en ligne, celle-ci ne pourra accepter que des cartes qui font partie de ses plages de BIN d√©clar√©es.\nZoom sur le paiement en ligne en Polyn√©sie Fran√ßaise Comme √©nonc√© pr√©c√©demment, les cartes privatives sont majoritaires en Polyn√©sie Fran√ßaise, et elles ne sont pas reconnues √† l\u0026rsquo;√©tranger (sauf pour les cartes Socredo co-brand√©es UPI, comme cit√© pr√©c√©demment) car les BIN privatifs ne sont pas d√©clar√©s dans le monde.\nC\u0026rsquo;est pour cela qu\u0026rsquo;on ne peut pas payer avec une carte privative sur la plupart des plateformes de paiement en ligne (Paypal, Stripe, etc.), qui sont internationales.\nPour rem√©dier √† ce probl√®me, OSB propose Payzen, et la Banque de Tahiti propose SystemPay.\n√Ä mon avis, √† l\u0026rsquo;heure actuelle, c\u0026rsquo;est vers ces solutions que je conseille les commer√ßants d\u0026rsquo;aller, car il serait dommage de se priver des cartes privatives, alors qu\u0026rsquo;elles sont plus nombreuses.\nNotes:\nLes 2 solutions sont en r√©alit√© bas√©es sur les solutions Payzen et SystemPay de Lyra, soci√©t√© situ√©e en France. Certains d\u0026rsquo;entre vous ont d\u0026rsquo;ailleurs peut-√™tre d√©j√† √©t√© confus en recherchant de la documentation technique de ces solutions et se sont perdus entre:\nla documentation Payzen d\u0026rsquo;OSB, la documentation Payzen de Lyra, la documentation SystemPay de la Banque de Tahiti, la documentation SystemPay de Lyra. Je vous conseille de vous focaliser sur les documentations locales, et ensuite de compl√©ter avec les documentations de Lyra.\nConclusion Il existe plusieurs types de cartes.\nLes protocoles de paiement s\u0026rsquo;inscrivent dans un sch√©ma √† 4 coins, il y a plusieurs acteurs qui entrent en jeu.\nIl y a une r√©glementation g√©n√©rale qui englobe tous les types de cartes, et chaque type a √©galement sa r√©glementation sp√©cifique. Les banques sont soumises √† ces r√©glementations, l\u0026rsquo;IEOM et les r√©seaux (VISA, Mastercard, AMEX, etc.) veillent √† ce que les banques respectent ces r√©glementations.\nLa g√©ographie et les accords entre les acteurs sont importants pour comprendre les contraintes des syst√®mes de paiement locaux.\nEn Polyn√©sie Fran√ßaise, la majorit√© des cartes bancaires sont des cartes privatives, pour des raisons √©conomiques et r√©glementaires.\n","permalink":"http://localhost:1313/blog.dev/posts/intro-moyens-paiement/","summary":"\u003ch1 id=\"introduction\"\u003eIntroduction\u003c/h1\u003e\n\u003cp\u003eCet article est un aper√ßu tr√®s rapide des moyens de paiement en Polyn√©sie Fran√ßaise.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eUpdate (12/05/2022): suite √† quelques feedback, je me rend compte que cet article est √† destination des d√©veloppeurs de site de e-shopping, des commer√ßants, de mes confr√®res mon√©ticiens. Cet article sera complexe √† lire si vous n\u0026rsquo;avez jamais travaill√© avec un TPE, avec une plateforme de paiement, avec des cartes bancaires.\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e\u003cstrong\u003eDisclaimer\u003c/strong\u003e: Au moment o√π j\u0026rsquo;√©cris cet article, je travaille √† l\u0026rsquo;Oc√©anienne des Services Bancaires (OSB), Ces articles ne sont pas sponsoris√©s par OSB, et j\u0026rsquo;encourage les gens √† faire des tutoriels pour les solutions des autres fournisseurs de solutions de paiement.\u003c/p\u003e","title":"Introduction aux moyens de paiement en Polyn√©sie Fran√ßaise"},{"content":"Ia\u0026rsquo;orana, bonjour !\nCe post marque le d√©but du blog h√©berg√© sur Github.\nVous trouverez ici de temps en temps des articles de d√©veloppement et des POCs.\nBonne lecture !\n","permalink":"http://localhost:1313/blog.dev/posts/hello-world/","summary":"\u003cp\u003eIa\u0026rsquo;orana, bonjour !\u003c/p\u003e\n\u003cp\u003eCe post marque le d√©but du blog h√©berg√© sur Github.\u003c/p\u003e\n\u003cp\u003eVous trouverez ici de temps en temps des articles de d√©veloppement et des POCs.\u003c/p\u003e\n\u003cp\u003eBonne lecture !\u003c/p\u003e","title":"Hello World"},{"content":"La m√©moire est une ressource au m√™me titre que la fourchette dans le pr√©c√©dent article.\nDans un ordinateur, il existe plusieurs types de m√©moire que les programmes vont pouvoir utiliser en fonction de la mani√®re dont ils veulent traiter les donn√©es.\nIl faut voir la m√©moire comme un endroit o√π on entrepose des donn√©es.\nPour cet article on va parler d\u0026rsquo;un magasin, mais √ßa marche aussi avec un restaurant.\nLa m√©moire cache ‚Äî l\u0026rsquo;armoire r√©frig√©r√©e La m√©moire cache est le stockage le plus rapide qu\u0026rsquo;un programme peut utiliser. Pour un magasin, il s\u0026rsquo;agit des √©tag√®res et des armoires r√©frig√©r√©es qui forment les rayons.\nLes clients (les threads du programme) ont rapidement acc√®s aux viandes qui sont dans les armoires r√©frig√©r√©es, ils n\u0026rsquo;ont qu\u0026rsquo;√† tendre la main. Par contre, on ne peut pas stocker une grande quantit√© de viande dans ces armoires, pour l\u0026rsquo;exemple on va dire une dizaine au maximum.\nSur un ordinateur, cette m√©moire cache se trouve directement dans le processeur sous les noms cache L3, cache L2 et cache L1. On n\u0026rsquo;ira pas dans le d√©tail ici, mais sachez que plus le nombre est proche de 0, et plus le cache est rapide.\nJe prends l\u0026rsquo;exemple de l\u0026rsquo;armoire r√©frig√©r√©e car il y a un m√©canisme physique important dans un ordinateur: la m√©moire cache peut accueillir des donn√©es uniquement si elle est aliment√©e en √©lectricit√©, en cas de coupure de courant, on perd les donn√©es qui s\u0026rsquo;y trouvent.\nDe la m√™me mani√®re, dans un magasin, en cas de coupure de courant, il faut jeter toute la viande qui se trouve dans les armoires r√©frig√©r√©es*.\n*: Oui c\u0026rsquo;est pas tout √† fait le cas, mais en cas de coupure prolong√©e √ßa l\u0026rsquo;est.\nLa m√©moire vive ‚Äî l\u0026rsquo;arri√®re du magasin Au cours d\u0026rsquo;une journ√©e, le magasin souhaite vendre bien plus que dix viandes, c\u0026rsquo;est bien normal. Pour cela, √† l\u0026rsquo;arri√®re du magasin il y a un stock r√©frig√©r√© qui peut en contenir 1000. Un employ√© viendra remplir les rayons au cours de la journ√©e.\nCette action prend du temps, l\u0026rsquo;employ√© doit :\nAller dans le stock r√©frig√©r√© R√©cup√©rer des viandes Amener les viandes dans le rayon Mettre les viandes dans l\u0026#39;armoire r√©frig√©r√©e Pendant tout ce temps, le client ne peut prendre que les viandes qui sont encore dans l\u0026rsquo;armoire, il faut donc bien faire attention √† ce que l\u0026rsquo;employ√© recharge l\u0026rsquo;armoire quand il reste encore un peu de bo√Ætes.\nDans un ordinateur, la m√©moire vive (RAM en anglais pour Random Access Memory), joue le r√¥le du stock r√©frig√©r√© tr√®s rapide qu\u0026rsquo;un programme peut utiliser, mais beaucoup moins rapide que la m√©moire cache, environ 50x √† 100x moins rapide.\nEt tout comme la m√©moire cache, la RAM peut accueillir des donn√©es uniquement si elle est aliment√©e en √©lectricit√©.\nC\u0026rsquo;est pour √ßa qu\u0026rsquo;on appelle √ßa de la m√©moire vive, elle doit √™tre aliment√©e.\nAttends, mais tu dis que la RAM est tr√®s rapide, mais le processus pour recharger la m√©moire cache est lent ? On ne peut pas juste utiliser une grande quantit√© de m√©moire cache?\nLa m√©moire cache co√ªte tr√®s cher, beaucoup plus que la RAM. L\u0026rsquo;√©tat actuel est donc un compromis entre rapidit√© et co√ªt, un probl√®me typique en ing√©nierie.\nLe stockage ‚Äî la ferme en Nouvelle-Z√©lande Le stockage d\u0026rsquo;un ordinateur est compos√© des diff√©rents disques durs (HDD, SDD, etc.). Il s\u0026rsquo;agit d\u0026rsquo;une m√©moire persistante, c\u0026rsquo;est-√†-dire que m√™me en cas de coupure de courant, les donn√©es restent √©crites dans les disques.\nPour notre magasin, de la viande qui reste utilisable m√™me en cas de coupure\u0026hellip; Eh bien ce sont les boeufs vivants √† la ferme.\nTon analogie est d√©go√ªtante\nOui je sais, j\u0026rsquo;ai pas mieux, d√©sol√©. En m√™me temps, je ne peux pas vous dire que de la viande fra√Æche, qui reste longtemps √† l\u0026rsquo;air libre, est encore utilisable.\nEn plus, il y a plein d\u0026rsquo;√©tapes entre un boeuf vivant et un steak dans l\u0026rsquo;armoire !\nTout √† fait, mais c\u0026rsquo;est la meilleure analogie possible pour te faire comprendre pourquoi, en cas de coupure, si tu n\u0026rsquo;as pas sauvegard√© ton fichier Word depuis longtemps, tu perds tes donn√©es. Tant que tu n\u0026rsquo;as pas sauvegard√©, tes modifications restent dans le cache et la RAM.\nEt pourquoi en Nouvelle-Z√©lande ?\nOh, √ßa c\u0026rsquo;est parce qu\u0026rsquo;aller chercher une donn√©e dans un disque, c\u0026rsquo;est tr√®s lent compar√© √† aller la chercher dans la RAM. Si tu as un disque SSD c\u0026rsquo;est 10x plus lent, si tu as un disque HDD, c\u0026rsquo;est 100x plus lent.\nSi tu joues √† des jeux vid√©o un peu gourmands en ressources, tu as s√ªrement remarqu√© des √©crans de chargement plus ou moins longs. C\u0026rsquo;est surtout parce que le programme r√©cup√®re les donn√©es qui sont sur le disque.\nOptimiser la m√©moire ‚Äî pas besoin d\u0026rsquo;√™tre mentaliste Vous l\u0026rsquo;aurez donc compris, un magasin a diff√©rents types de m√©moire √† sa disposition. La mani√®re dont il orchestre les denr√©es √† travers ces diff√©rents composants lui permet d\u0026rsquo;anticiper les variations de stock, et limiter le risque de p√©nurie.\nLorsqu\u0026rsquo;un d√©veloppeur code un programme, il peut aussi anticiper l\u0026rsquo;utilisation des donn√©es et les charger avant d\u0026rsquo;en avoir besoin.\nDans l\u0026rsquo;exemple du jeu vid√©o, pourquoi est-ce que toutes les donn√©es ne sont pas charg√©es d√®s le d√©but? Moi j\u0026rsquo;en ai marre des √©crans de chargement.\nTout d\u0026rsquo;abord, ce chargement se fait du stockage vers la RAM (puis vers le cache), ensuite, si on chargeait toutes les donn√©es d\u0026rsquo;un coup, il y a de fortes chances pour que ta RAM soit satur√©e.\nA priori, le d√©veloppeur ne sait pas si tu as peu ou beaucoup de RAM disponible, et puis, maintenir deux versions du code, un qui charge toutes les donn√©es, et un qui charge via les √©crans de chargement, c\u0026rsquo;est du travail suppl√©mentaire qui n\u0026rsquo;apporte pas grand chose.\nLes √©crans de chargement sont un compromis : plut√¥t que de risquer de crasher ton ordinateur, le d√©veloppeur a cod√© le programme de sorte √† charger uniquement le contenu qui sera utilis√© dans le niveau, pour tous les niveaux.\nConclusion Dans cet article, on a vu les diff√©rentes m√©moires utilis√©es par les programmes. √Ä l\u0026rsquo;image d\u0026rsquo;un magasin qui √©vite les p√©nuries, un d√©veloppeur doit jongler avec ces m√©moires pour que son programme tourne correctement.\nDans le prochain article, IMVV ‚Äî Section 3 ‚Äî Chapitre 2 ‚Äî M√©mo√Øsation et Lazy loading, les technique du fain√©ant ultime, nous verrons des techniques qui feront de toi un bon fain√©ant.\n‚Üê Retour √† la section\n‚Üê Retour √† l‚Äôintroduction\n","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/optimisation/memoire/","summary":"\u003cp\u003eLa m√©moire est une \u003cstrong\u003eressource\u003c/strong\u003e au m√™me titre que la fourchette dans le \u003ca href=\"../../l-execution/threads/\"\u003epr√©c√©dent article\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eDans un ordinateur, il existe plusieurs types de m√©moire que les programmes vont pouvoir utiliser en fonction de la mani√®re dont ils veulent traiter les donn√©es.\u003c/p\u003e\n\u003cp\u003eIl faut voir la m√©moire comme un endroit o√π on entrepose des donn√©es.\u003c/p\u003e\n\u003cp\u003ePour cet article on va parler d\u0026rsquo;un magasin, mais √ßa marche aussi avec un restaurant.\u003c/p\u003e\n\u003ch2 id=\"la-m√©moire-cache--larmoire-r√©frig√©r√©e\"\u003eLa m√©moire cache ‚Äî l\u0026rsquo;armoire r√©frig√©r√©e\u003c/h2\u003e\n\u003cp\u003eLa \u003cstrong\u003em√©moire cache\u003c/strong\u003e est le stockage \u003cstrong\u003ele plus rapide\u003c/strong\u003e qu\u0026rsquo;un programme peut utiliser. Pour un magasin, il s\u0026rsquo;agit des √©tag√®res et des armoires r√©frig√©r√©es qui forment les rayons.\u003c/p\u003e","title":"IMVV ‚Äî Section 3 ‚Äî Chapitre 1 ‚Äî La m√©moire, ou comment √©viter les p√©nuries dans un magasin"},{"content":"Dans le pr√©c√©dent article, IMVV ‚Äî Section 1 ‚Äî Chapitre 3 ‚Äî Structures de contr√¥le et algorithme, apprendre √† r√©fl√©chir, on a vu les diff√©rentes structures de contr√¥le et les algorithmes.\nMaintenant on va parler de la mani√®re dont on r√©alise un ensemble de t√¢ches ‚Äî c‚Äôest ce qu‚Äôon appelle en informatique un mode d‚Äôex√©cution. C\u0026rsquo;est applicable aussi bien pour un humain que pour un ordinateur.\nN\u0026rsquo;oublie pas que les objectifs de ces articles sont :\nTe donner une meilleure compr√©hension des bases de l‚Äôinformatique, T\u0026rsquo;inspirer pour analyser ou optimiser les situations du quotidien, ou peut-√™tre, qui sait, te donner envie d\u0026rsquo;explorer encore plus loin\u0026hellip; jusqu‚Äô√† en faire ton m√©tier. Programme et application ‚Äî c\u0026rsquo;est quoi la diff√©rence ? Un programme informatique est un ensemble d\u0026rsquo;algorithmes. Le mot application veut dire la m√™me chose.\nC‚Äôest juste que application, √ßa sonne plus moderne, m√™me si ce mot existe depuis longtemps.\nMerci le marketing Apple et son App Store. üòÑ\nSynchrone ‚Äî Avoir un serveur d√©di√© √† sa table, quel luxe Prenons l\u0026rsquo;exemple d\u0026rsquo;un restaurant chic. Dans ce restaurant chic, il y a 2 tables. Chaque table a son serveur attitr√©, celui-ci r√©pond uniquement aux besoins de sa table.\nPour la suite de cet exercice de pens√©e, on va dire qu\u0026rsquo;il y a 2 familles (famille 1, famille 2), 2 tables (table 1, table 2), 1 serveur, 1 chef.\nLa s√©quence d\u0026rsquo;actions que le serveur doit faire, l\u0026rsquo;algorithme est :\nSi une famille arrive: Accueillir la famille Installer la famille sur une table libre Prendre la commande Donner la commande au chef R√©cup√©rer les plats Servir les plats √† la famille Faire payer la famille Fin si La famille 1 arrive au restaurant, le serveur les accueille et les installe √† la table 1. Il reste en attente de leur commande, √† proximit√©*.\nQuand la famille 1 est pr√™te, vu que le serveur est √† c√¥t√©, ils passent commande. Le serveur s\u0026rsquo;en va ensuite en cuisine pour donner la commande au chef. Le serveur attend les plats. Le chef pr√©pare les plats.\nUne fois que les plats sont pr√™ts, il les r√©cup√®re et les sert √† la famille 1. La famille 1 paie et s\u0026rsquo;en va, heureuse de l\u0026rsquo;attention port√©e.\n*: A ce moment, la famille 2 arrive au restaurant, ils ne sont pas accueillis, puisque le serveur est en attente de la commande de la famille 1. Alors la famille 2 repart, agac√©e, ils laisseront un mauvais avis sur internet.\nDans cette configuration, le serveur ex√©cute ses t√¢ches de mani√®re synchrone, cela veut dire qu\u0026rsquo;il ex√©cute l\u0026rsquo;algorithme √©tape par √©tape sans interruption. Si une √©tape n√©cessite d\u0026rsquo;attendre, par exemple quand il doit attendre que la famille choisisse sa commande, alors il attend, on dit que le mode synchrone est bloquant. Le serveur va au bout de son algorithme.\nMais c\u0026rsquo;est nul, il y a une famille qui n\u0026rsquo;a pas √©t√© servie\u0026hellip;\nSi on reste dans le mode d\u0026rsquo;ex√©cution synchrone, le probl√®me est qu\u0026rsquo;il n\u0026rsquo;y a pas assez de serveur. S\u0026rsquo;il y avait autant de serveurs de tables et de chefs, il n\u0026rsquo;y aurait aucun souci. Chaque famille aurait √©t√© ravie d\u0026rsquo;avoir un serveur et un chef d√©di√©. Mais on verrait plut√¥t cette disposition dans les restaurants luxueux, qui peuvent se permettre d\u0026rsquo;avoir 100 tables, 100 serveurs et 100 chefs.\nPar d√©faut, les applications sont synchrones, car √† part le probl√®me de ressources, c‚Äôest bien plus simple de faire une t√¢che apr√®s l‚Äôautre, cependant, de nos jours, de plus en plus de syst√®mes sont asynchrones (exemple: navigateurs, certains serveurs applicatifs √† la mode).\nüìå Exemples dans la vie r√©elle Une personne qui suit une proc√©dure critique Pr√©parer une salade üíª Exemples en informatique Un distributeur de billets Une imprimante partag√©e Asynchrone ‚Äî Un serveur pour les gouverner tous ‚Äî Oui c\u0026rsquo;est une r√©f√©rence au Seigneur des Anneaux üòÑ ‚Äî\nReprenons l\u0026rsquo;exemple du restaurant, toujours avec 2 familles (famille 1, famille 2), 2 tables (table 1, table 2), 1 serveur, 1 chef.\nMais cette fois, on change l\u0026rsquo;algorithme :\nQuand une famille arrive, alors : Le serveur les accueille Il les installe √† une table libre Il leur donne un menu Il passe √† autre chose Fin quand Quand une famille appelle le serveur pour commander, alors : Le serveur prend la commande Il la transmet au chef Il passe √† autre chose Fin quand Quand la sonnette en cuisine retentit (plats pr√™ts), alors : Le serveur r√©cup√®re les plats Le serveur sert les plats √† la bonne table Il passe √† autre chose Fin quand Quand une famille veut payer, alors : Le serveur encaisse Il lib√®re la table Il passe √† autre chose Fin quand Cet algorithme est diff√©rent de ceux qu\u0026rsquo;on a vus jusqu\u0026rsquo;√† pr√©sent.\n\u0026ldquo;Quand \u0026hellip;,\u0026rdquo; marque un √©v√©nement, \u0026ldquo;alors\u0026rdquo; introduit le bloc d\u0026rsquo;instructions √† ex√©cuter en r√©action, et \u0026ldquo;Fin quand\u0026rdquo; marque la fin de ce bloc.\nOn dit alors qu\u0026rsquo;on fait de la programmation √©v√©nementielle (ou programmation r√©active) et que l\u0026rsquo;algorithme est asynchrone : il fait de sorte √† r√©agir aux √©v√©nements ext√©rieurs.\nLorsqu‚Äôun √©v√©nement se produit, le serveur y r√©agit imm√©diatement : il ex√©cute les instructions associ√©es, puis passe √† l‚Äô√©v√©nement suivant s‚Äôil y en a un. Sinon, il attend. Ce mode d\u0026rsquo;ex√©cution est donc non bloquant.\nEt dans les faits, c\u0026rsquo;est ce que fait la plupart des personnes, serveurs ou non. Quand on fait une t√¢che, et qu\u0026rsquo;on est interrompu par un bug, un appel, un coll√®gue de travail qui pose une question, on est en r√©action.\nAvec cet algorithme, un serveur seul pourra tr√®s bien g√©rer 2 tables.\nüìå Exemples dans la vie r√©elle Les serveurs dans la plupart des restaurants Mon chien quand il entend les croquettes üíª Exemples en informatique Les notifications sur ton smartphone Un arrosage automatique avec capteur d\u0026#39;humidit√© Attention : comme en mode synchrone, s\u0026rsquo;il y a trop de table pour un seul serveur, plusieurs √©v√©nements risquent de s\u0026rsquo;accumuler en attente de traitement.\nMais du coup, comment on fait pour r√©soudre ce probl√®me ?\nOn verra √ßa dans le prochain article.\nConclusion Dans cet article, on a vu ce qu\u0026rsquo;√©taient les modes d\u0026rsquo;ex√©cution synchrone et asynchrone.\nSi tu souhaites continuer cette aventure, tu peux regarder la suite ici: IMMV ‚Äî Section 2 ‚Äî Chapitre 2 ‚Äî Monothread et Multithread, je ne peux pas tout faire en m√™me temps !\n‚Üê Retour √† la section\n‚Üê Retour √† l‚Äôintroduction\n","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/l-execution/sync-async/","summary":"\u003cp\u003eDans le pr√©c√©dent article, \u003ca href=\"../../les-bases/structures-de-controle/\"\u003eIMVV ‚Äî Section 1 ‚Äî Chapitre 3 ‚Äî Structures de contr√¥le et algorithme, apprendre √† r√©fl√©chir\u003c/a\u003e, on a vu les diff√©rentes structures de contr√¥le et les algorithmes.\u003c/p\u003e\n\u003cp\u003eMaintenant on va parler de la mani√®re dont on r√©alise un ensemble de t√¢ches ‚Äî c‚Äôest ce qu‚Äôon appelle en informatique un \u003cstrong\u003emode d‚Äôex√©cution\u003c/strong\u003e. C\u0026rsquo;est applicable aussi bien pour un humain que pour un ordinateur.\u003c/p\u003e\n\u003cp\u003eN\u0026rsquo;oublie pas que les objectifs de ces articles sont :\u003c/p\u003e","title":"IMMV ‚Äî Section 2 ‚Äî Chapitre 1 ‚Äî Synchrone et Asynchrone, ou comment r√©agir au changement"},{"content":"Quand tu prends un ticket pour attendre ton tour, que tu fais la queue √† la caisse, que tu prends l‚Äôassiette du haut de la pile pour mettre la table, ou que tu cliques sur le bouton \u0026lsquo;Retour\u0026rsquo; (‚Üê) du navigateur internet‚Ä¶ Tu manipules sans le savoir des concepts appell√©s en informatique des structures de donn√©es, et les algorithmes associ√©s qui les font vivre.\nDans cet article, on va mettre un peu de clart√© l√†-dedans : pas besoin de coder pour comprendre, on va illustrer tout √ßa avec des situations de la vie courante.\nD√©finitions Avant d‚Äôaller plus loin, quelques d√©finitions simples, histoire de parler le m√™me langage :\nDonn√©e : une donn√©e, c‚Äôest une information num√©rique. √áa peut √™tre un num√©ro de passeport, le nombre de dents d‚Äôune personne, la liste des t√¢ches que tu as encore repouss√©es √† demain, ou ton nombre d‚Äôamis sur Facebook. Structure de donn√©es : imagine une bo√Æte, une √©tag√®re ou un sac √† dos, dans lequel tu ranges tes informations d‚Äôune certaine mani√®re pour mieux les retrouver ou les traiter. C‚Äôest la fa√ßon dont on organise les donn√©es. Algorithme : un algorithme, c‚Äôest une suite d‚Äô√©tapes ou d‚Äôinstructions pour manipuler ces donn√©es. Comme une recette de cuisine, ou une proc√©dure √† suivre pour obtenir un r√©sultat. File et pile : deux mani√®res d‚Äôattendre‚Ä¶ ou de repousser Maintenant qu‚Äôon a les bases, voyons deux structures de donn√©es tr√®s simples mais tr√®s puissantes : la file et la pile. On les retrouve partout dans notre quotidien, souvent sans s‚Äôen rendre compte.\nLa file ‚Äî ou comment attendre son tour (FIFO) Imagine une file d‚Äôattente devant un guichet. Le premier arriv√© est le premier servi. C‚Äôest ce qu‚Äôon appelle en informatique une file (ou queue en anglais), avec une logique FIFO : First In, First Out (premier entr√©, premier sorti).\nD√®s que quelqu‚Äôun est servi, c‚Äôest le suivant dans la file qui avance.\nüéØ C‚Äôest une structure √©quitable : chacun attend selon son ordre d‚Äôarriv√©e.\nüìå Exemples dans la vie r√©elle Faire la queue √† la caisse du magasin La liste des courses (si on lit de haut en bas) üíª Exemples en informatique Les syst√®mes de ticket dans les accueils (le num√©ro est g√©n√©r√© par un programme, et les appels suivent cet ordre) Les commentaires sur une publication Facebook (affich√©s du plus ancien au plus r√©cent) La pile ‚Äî ou comment empiler les priorit√©s (LIFO) Maintenant, imagine une pile de livres que tu dois r√©viser pour un examen. Tu prends celui du haut, tu le lis, puis tu prends celui juste en dessous, et ainsi de suite. Tu lis dans l‚Äôordre inverse de celui dans lequel tu as empil√© les livres. Tu viens de d√©piler ta pile, toujours en commen√ßant par le haut.\nC‚Äôest exactement le principe de la pile (ou stack en anglais), qui suit la logique LIFO : Last In, First Out (dernier entr√©, premier sorti).\nTu vas peut-√™tre me dire :\nOui mais je peux aussi prendre le livre du bas, non‚ÄØ?\nC‚Äôest vrai. Alors prenons un autre exemple, un peu plus r√©aliste :\nImagine que tu tombes sur un article de journal qui parle des nodules polym√©talliques dans les fonds marins de la Polyn√©sie fran√ßaise. Tu n‚Äôy connais pas grand-chose, mais √ßa t‚Äôintrigue. Tu lis l‚Äôarticle, puis tu ouvres une page Wikip√©dia pour comprendre ce qu‚Äôest un nodule polym√©tallique. Sur cette page, tu vois un lien vers les m√©taux rares, puis vers la transition √©nerg√©tique, puis‚Ä¶ tu vois o√π je veux en venir.\nEn lisant ce premier article, tu ne soup√ßonnais pas toute la pile d‚Äôinformations que tu allais explorer. Et tu viens de d√©piler ce savoir, en commen√ßant par la derni√®re page ouverte.\nüéØ Ce n‚Äôest pas une structure √©quitable : ce qui arrive en dernier est trait√© en premier. Mais c‚Äôest tr√®s utile pour remonter dans le temps, ou revenir sur ses pas, exactement comme le bouton \u0026ldquo;retour\u0026rdquo; de ton navigateur.\nüìå Exemples dans la vie r√©elle Les cartons dans un coffre bien rempli Les diff√©rentes strates de terre quand tu creuses dans ton jardin (c\u0026#39;est de la terre empil√©e au cours du temps) üíª Exemples en informatique Le bouton \u0026#39;Retour\u0026#39; (‚Üê) de ton navigateur Les annulations successives (Undo, CTRL\u0026#43;Z) dans un √©diteur de texte Si tu veux conna√Ætre d\u0026rsquo;autres structures de donn√©es, tu peux regarder le prochain article : IMVV ‚Äî Section 1 ‚Äî Chapitre 2 ‚Äî Autres structures de donn√©es, j\u0026rsquo;organise mon bordel\n‚Üê Retour √† la section\n‚Üê Retour √† l‚Äôintroduction\n","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/les-bases/file-et-pile/","summary":"\u003cp\u003eQuand tu prends un ticket pour attendre ton tour, que tu fais la queue √† la caisse, que tu prends l‚Äôassiette du haut de la pile pour mettre la table, ou que tu cliques sur le bouton \u0026lsquo;Retour\u0026rsquo; (‚Üê) du navigateur internet‚Ä¶\nTu manipules sans le savoir des concepts appell√©s en informatique \u003cstrong\u003edes structures de donn√©es\u003c/strong\u003e, et \u003cstrong\u003eles algorithmes\u003c/strong\u003e associ√©s qui les font vivre.\u003c/p\u003e\n\u003cp\u003eDans cet article, on va mettre un peu de clart√© l√†-dedans : pas besoin de coder pour comprendre, on va illustrer tout √ßa avec des situations de la vie courante.\u003c/p\u003e","title":"IMVV ‚Äî Section 1 ‚Äî Chapitre 1 ‚Äî File ou Pile ? L'art de passer avant les autres"},{"content":"√ätre fiu est un art, une vertu. Non, ce n\u0026rsquo;est pas une blague. Tu ne me crois pas ?\n\u0026ldquo;We will encourage you to develop the three great virtues of a programmer: laziness, impatience, and hubris.\u0026rdquo; ‚Äî Larry Wall, Programming perl (1991).\n\u0026ldquo;I choose a lazy person to do a hard job. Because a lazy person will find an easy way to do it.\u0026rdquo; ‚Äî Bill Gates.\nProgrammer une machine pour qu\u0026rsquo;elle fasse le travail √† ta place, c\u0026rsquo;est de la fain√©antise.\nEt les d√©veloppeurs sont des personnes qui ont atteint l\u0026rsquo;apog√©e du fiu. Apr√®s tout, qui passe 2 heures √† automatiser une t√¢che qui prend 2 minutes par jour, √† part quelqu\u0026rsquo;un de vraiment fiu ?\nDans cet article, on verra deux techniques que les d√©veloppeurs utilisent, mais que toi aussi tu utilises sans le savoir.\nM√©mo√Øsation ‚Äî ou comment garder une information dans un coin de la t√™te Supposons que tu sois responsable de la paie dans une petite entreprise. Pour ce mois-ci, tu dois calculer les salaires √† verser √† 2 employ√©s.\nTu sais que tous les deux ont un salaire brut de 200 000 XPF. De plus, ils ont fait un excellent travail, ton patron t\u0026rsquo;a dit de leur rajouter une prime de 50% de leur salaire brut. Enfin, l\u0026rsquo;un d\u0026rsquo;eux a fait des heures suppl√©mentaires, il faut donc lui rajouter 20 000 XPF brut sur sa paie.\nPour le 1er salari√©, tu pars de 200 000, tu rajoutes 50%, soit 100 000, ce qui lui fera 300 000 XPF brut pour ce mois.\nPour le 2√®me salari√©, tu sais que le d√©but du calcul est le m√™me, alors tu r√©utilises le nombre 300 000, et tu rajoutes 20 000 d\u0026rsquo;heures suppl√©mentaires, donc 320 000 bruts.\nMais tu t‚Äôes souvenu que le calcul 200 000 + 50 % avait d√©j√† √©t√© fait, donc tu as directement repris le r√©sultat. Ce que tu viens de faire, c\u0026rsquo;est de la m√©mo√Øsation (memoization en anglais).\nC‚Äôest exactement ce que fait ton navigateur web quand il te propose un r√©sultat de recherche d√©j√† visit√©, ou qu‚Äôun site charge plus vite la 2·µâ fois.\nInstant Dev En informatique, on utilise un tableau ou un tableau associatif pour stocker les r√©sultats interm√©diares, ces structures sont stock√©es dans la RAM. De cette fa√ßon, on peut rapidement r√©cup√©rer le r√©sultat qui nous int√©resse. Attention : En informatique, comme dans la vraie vie, garder des informations de c√¥t√© peut conduire √† une saturation de la m√©moire. C\u0026rsquo;est un des facteurs de burn-out. M√©nagez votre cerveau, il n\u0026rsquo;y a pas de mal √† noter les choses, de plus, vous aurez moins de risque d\u0026rsquo;oublier des informations importantes.\nEager loading et Lazy loading ‚Äî l\u0026rsquo;art d\u0026rsquo;√™tre pr√©par√© √† toute √©ventualit√© Supposons que tu aies invit√© tes amis √† manger √† la maison ce soir. Tu as invit√© 10 personnes, mais tu sais que 5 vont vraiment venir, les autres t\u0026rsquo;ont dit \u0026ldquo;peut-√™tre\u0026rdquo;.\nPour √©viter d\u0026rsquo;√™tre √† court de nourriture, tu as pr√©par√© pour 10 personnes, au pire, ceux qui sont venus repartiront avec quelques plats, et tu termineras le reste durant la semaine.\nLes premiers invit√©s vont arriver, tu n\u0026rsquo;as pas encore pr√©par√© la table. Tu as 2 solutions :\nTout pr√©parer d\u0026rsquo;avance : sortir toutes les assiettes, les verres, les chaises, les couverts, etc. (solution eager loading : tu charges tout d√®s le d√©but).\nAttendre de voir qui arrive : d√®s qu‚Äôun invit√© entre, tu sors une assiette, un verre, une chaise, etc. (solution lazy loading : tu ne charges que ce qui est n√©cessaire, au moment o√π c‚Äôest n√©cessaire).\nMais tu peux aussi exiger des invit√©s qu\u0026rsquo;ils te disent, la veille au plus tard, si oui ou non ils viennent !\nOui, et que se passe-t-il si l\u0026rsquo;un d\u0026rsquo;eux a un emp√™chement ? En mettant tous les couverts, tu as d√©pens√© de l\u0026rsquo;√©nergie pour mettre son couvert, et tu en as re-d√©pens√© pour le ranger. Ce n\u0026rsquo;est pas tr√®s optimis√©.\nSi tous les invit√©s arrivent, tu auras fait plusieurs allers-retours pour mettre les couverts, ce n\u0026rsquo;est pas tr√®s optimis√© non plus\u0026hellip;\nAh, tu mets le doigt sur un point important : les techniques d\u0026rsquo;optimisation doivent √™tre utilis√©es uniquement si on est s√ªr de leur utilit√©.\n\u0026ldquo;Premature optimization is the root of all evil\u0026rdquo; ‚Äî Sir Tony Hoare et Donald Knuth.\nC\u0026rsquo;est un pi√®ge dans lequel tombent plusieurs d√©veloppeurs juniors. Les √©coles sup√©rieures enseignent diff√©rentes techniques d\u0026rsquo;optimisation, on est conditionn√©s √† d√©tecter un probl√®me et √† appliquer imm√©diatement une solution : c\u0026rsquo;est normal.\nAvec l\u0026rsquo;exp√©rience, on apprend qu\u0026rsquo;on a besoin d\u0026rsquo;optimiser uniquement quand une personne se plaint de lenteurs. Et dans ce cas, on cherche o√π se trouve la source du probl√®me, on mesure.\nOk mais\u0026hellip; √ßa me fait bizarre de ne pas pr√©parer une belle table, c\u0026rsquo;est pas un bon accueil.\nDans ce cas, le eager loading a une vraie plus-value. Tu charges tout d\u0026rsquo;un coup pour l\u0026rsquo;effet waow, pour que les personnes se disent que chez toi, on est bien re√ßu. La principale fonctionnalit√© n\u0026rsquo;est pas d\u0026rsquo;optimiser le fait de mettre la table, mais d\u0026rsquo;impressionner tes convives.\nJe finis cette partie avec un exemple informatique : Facebook ne charge pas toutes les publications d√®s le d√©but, seulement une partie.\nQuand tu commences √† scroller, tu vois ces publications. Si tu te rapproches de la fin, Facebook charge les prochaines publications, on appelle √ßa infinite scroll.\nAinsi, Facebook ne prend pas trop de temps √† se charger au d√©but.\nAttends mais\u0026hellip; Dans l\u0026rsquo;article pr√©c√©dent, on parlait des √©crans de chargement des jeux vid√©os, √ßa y ressemble un peu, non ?\nExactement, les √©crans de chargement sont aussi du lazy loading, et pour rejoindre ce qu\u0026rsquo;on disait sur ces √©crans : le lazy loading √©conomise de la m√©moire.\nEnfin, √† ton avis, comment Facebook sait qu\u0026rsquo;il faut charger la suite des publications ?\nEh bien en fait, l\u0026rsquo;application est r√©active, on peut √©crire son algorithme de chargement comme ceci:\nQuand un certain seuil de scroll est atteint (par exemple, 90% du contenu affich√©), alors: Charge la suite du contenu Passe √† autre chose Fin quand Tu l\u0026rsquo;auras remarqu√©, c\u0026rsquo;est ce qu\u0026rsquo;on a vu dans l\u0026rsquo;article IMMV ‚Äî Section 2 ‚Äî Chapitre 1 ‚Äî Synchrone et Asynchrone, ou comment r√©agir au changement.\nConclusion Dans cet article, on a vu diff√©rents m√©canimes d\u0026rsquo;optimisation.\nPlus important encore, si on se rappelle des pr√©c√©dents articles, on a vu qu\u0026rsquo;en informatique, en plus de combiner les structures de donn√©es et les structures de contr√¥le, on pouvait combiner les concepts d\u0026rsquo;optimisation et de modes d\u0026rsquo;ex√©cution.\nLe prochaine article est en cours de r√©daction, on parlera de complexit√©.\n‚Üê Retour √† la section\n‚Üê Retour √† l‚Äôintroduction\n","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/optimisation/memoisation/","summary":"\u003cp\u003e√ätre \u003cem\u003efiu\u003c/em\u003e est un art, une vertu. \u003cstrong\u003eNon, ce n\u0026rsquo;est pas une blague\u003c/strong\u003e. Tu ne me crois pas ?\u003c/p\u003e\n\u003cp\u003e\u003cem\u003e\u0026ldquo;We will encourage you to develop the three great virtues of a programmer: laziness, impatience, and hubris.\u0026rdquo; ‚Äî Larry Wall, Programming perl (1991)\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003e\u0026ldquo;I choose a lazy person to do a hard job. Because a lazy person will find an easy way to do it.\u0026rdquo; ‚Äî Bill Gates\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eProgrammer une machine pour qu\u0026rsquo;elle fasse le travail √† ta place, c\u0026rsquo;est de la fain√©antise.\u003c/p\u003e","title":"IMVV ‚Äî Section 3 ‚Äî Chapitre 2 ‚Äî M√©mo√Øsation et Lazy loading, les techniques du fain√©ant ultime"},{"content":"Dans le pr√©c√©dent article, IMMV ‚Äî Section 2 ‚Äî Chapitre 1 ‚Äî Synchrone et Asynchrone, ou comment r√©agir au changement, on a vu les diff√©rents modes d\u0026rsquo;ex√©cution.\nOn s\u0026rsquo;√©tait arr√™t√© sur le probl√®me suivant : Comment faire pour r√©pondre √† la mont√©e en charge, √† l\u0026rsquo;accumulation de t√¢ches ?\nEh bien, dans cet article, on va voir comment on r√©sout ce probl√®me, en informatique comme dans la vraie vie : les m√©canismes sont souvent tr√®s proches.\nPour cela on va continuer avec notre exemple de restaurant. Et on va expliciter diff√©rents termes que j\u0026rsquo;avais regroup√©s en parlant d\u0026rsquo;algorithmes et de programmes.\nN\u0026rsquo;oublie pas que les objectifs de ces articles sont :\nTe donner une meilleure compr√©hension des bases de l‚Äôinformatique, T\u0026rsquo;inspirer pour analyser ou optimiser les situations du quotidien, ou peut-√™tre, qui sait, te donner envie d\u0026rsquo;explorer encore plus loin\u0026hellip; jusqu‚Äô√† en faire ton m√©tier. Le programme ‚Äî l\u0026rsquo;id√©e de restaurant En informatique, quand on parle de programme, on parle uniquement d\u0026rsquo;un ensemble d\u0026rsquo;algorithmes, des t√¢ches qui le composent. Il n\u0026rsquo;est pas encore en train d\u0026rsquo;√™tre ex√©cut√©. Par exemple, Facebook est un programme ‚Äî mais tant que tu ne l‚Äôouvres pas, il ne fait rien.\nEh bien, c\u0026rsquo;est pareil pour un restaurant dans la vie de tous les jours, quand je parle du restaurant √† un ami, je n\u0026rsquo;y suis pas physiquement. Je parle juste du concept de restaurant, de l\u0026rsquo;id√©e que je m\u0026rsquo;en fais.\nLe processus - le restaurant ouvert Si je veux parler du restaurant physiquement ouvert, avec les employ√©s qui s\u0026rsquo;activent, en informatique il faut plut√¥t utiliser le terme processus. C\u0026rsquo;est le programme en cours d\u0026rsquo;ex√©cution.\nUn processus poss√®de son propre contexte d\u0026rsquo;ex√©cution, c\u0026rsquo;est un gros mot pour dire qu\u0026rsquo;il a ses propres ressources, et que personne ne peut lui prendre ses ressources.\nEn effet, quand le restaurant est ouvert, les assiettes qu\u0026rsquo;il utilise sont ses propres assiettes, ses propres ressources. Il n\u0026rsquo;y a pas un autre restaurant qui lui prendrait ses assiettes pendant qu\u0026rsquo;il est ouvert, sinon il risque d\u0026rsquo;avoir des assiettes manquantes.\nPour ex√©cuter un algorithme, un processus est compos√© d\u0026rsquo;un thread principal, et il peut avoir d\u0026rsquo;autres thread.\nLe thread ‚Äî la proc√©dure en cours d\u0026rsquo;ex√©cution du serveur Le thread (fil d\u0026rsquo;ex√©cution en fran√ßais) est ce qu‚Äôon appelle la proc√©dure en train de s\u0026rsquo;ex√©cuter. C‚Äôest un peu comme un serveur qui suit activement une fiche d\u0026rsquo;instructions √† un instant donn√©. Attention, ce n\u0026rsquo;est pas le serveur.\nEn informatique, on dit que le thread est l‚Äôunit√© d‚Äôex√©cution, C‚Äôest la plus petite unit√© qu‚Äôun ordinateur puisse piloter pour ex√©cuter du code. il n‚Äôexiste pas d‚Äôunit√© plus petite qu‚Äôun thread pour ex√©cuter une t√¢che.\nMaintenant qu‚Äôon comprend ce qu‚Äôest un thread ‚Äî une proc√©dure en cours d\u0026rsquo;ex√©cution ‚Äî il faut se demander qui ex√©cute cette proc√©dure.\nLe coeur ‚Äî le serveur On y arrive enfin, dans un ordinateur, le composant physique qui ex√©cute un thread s\u0026rsquo;appelle un coeur (core en anglais). Pour notre restaurant, ce core est le serveur. C\u0026rsquo;est lui, physiquement, qui prend les commandes, sert les plats, etc.\nConcurrence, parall√©lisme, multithread et monothread ‚Äî ou comment servir 2 familles en m√™me temps Un serveur ne peut faire qu\u0026rsquo;une seule chose √† la fois, √† un instant donn√© : quand il prend une commande √† l\u0026rsquo;instant T, il ne peut pas, en m√™me temps, servir des plats.\nPar contre, il pourrait s\u0026rsquo;interrompre pendant les t√¢ches, par exemple, au lieu de prendre toutes les commandes de la famille, d\u0026rsquo;un coup, il peut :\nprendre la commande d\u0026rsquo;un 1er plat aller chercher un plat √† servir servir le plat prendre la commande d\u0026rsquo;un 2√®me plat aller chercher un autre plat √† servir servir le plat etc. Attention: ici nous n\u0026rsquo;avons pas d√©coup√© les actions. C\u0026rsquo;est juste que le serveur a jongl√© entre les 2 t√¢ches \u0026ldquo;prendre la commande\u0026rdquo; et \u0026ldquo;servir les plats\u0026rdquo;. On appelle ce comportement la concurrence, car les 2 t√¢ches sont en concurrence pour √™tre termin√©es.\nDans un ordinateur, les threads sont concurrents, et comme √©nonc√© plus haut, √©tant donn√© qu\u0026rsquo;un processus est compos√© d\u0026rsquo;un thread principal, on dit que les processus sont concurrents.\nDans la vraie vie il y a des situations o√π on ne jongle pas avec les t√¢ches, o√π il faut √™tre concentr√© sur une t√¢che\nTout √† fait, et dans ce cas, s\u0026rsquo;il y a trop de t√¢ches pour une seule personne, on fait intervenir une 2√®me personne, une 3√®me etc.\nDans notre restaurant, avec 2 serveurs, pendant que l\u0026rsquo;un prend les commandes de la famille 1, un autre peut servir les plats de la famille 2. On appelle √ßa le parall√©lisme, les proc√©dures/threads sont ex√©cut√©s en parall√®le.\nEnfin, dans un restaurant, si on ne peut avoir qu\u0026rsquo;un seul serveur qui suit activement une fiche d\u0026rsquo;instructions ‚Äî un seul thread ‚Äî, on dit que le restaurant/le programme est monothread. S\u0026rsquo;il y en a plusieurs, on dit que le restaurant/serveur est multithread.\nDu coup, la solution pour le restaurant est d\u0026rsquo;embaucher plus de serveurs ?\nC\u0026rsquo;est l\u0026rsquo;une des solutions, oui, mais ce n\u0026rsquo;est pas la seule. Il y a globalement 2 chemins pour r√©pondre √† une mont√©e en charge. On peut :\noptimiser les algorithmes pour les rendre plus performants et/ou changer le mode d\u0026rsquo;ex√©cution, ou alors on peut mettre plus de coeurs et faire du multithread. De la m√™me mani√®re, dans la vraie vie, on peut :\nmieux former le serveur et/ou optimiser les proc√©dures qu\u0026rsquo;il doit suivre et/ou le motiver pour qu\u0026rsquo;il travaille plus vite, embaucher plus de serveurs. Dans tous les cas, je ne m\u0026rsquo;avancerai pas pour apprendre √† un restaurateur son m√©tier.\nLe partage de ressources ‚Äî ou comment partager une fourchette Dans le restaurant, on va maintenant se mettre du point de vue d\u0026rsquo;un couple, venu manger en t√™te √† t√™te dans une ambiance cosy, tamis√©e, √† l\u0026rsquo;abri des regards.\nLe serveur leur annonce la mauvaise nouvelle: il y a assez de couverts pour 2, sauf pour la fourchette. S\u0026rsquo;ils souhaitent tout de m√™me manger ici, ils devront se partager la fourchette, et interdiction de manger avec les doigts.\nLe couple discute, et finalement ce n\u0026rsquo;est pas un probl√®me, ils sont l√† pour profiter de l\u0026rsquo;instant.\nUne fois la commande pass√©e et les plats servis, Le couple commence √† manger. Mais comment s‚Äôorganisent-ils ?\nBen ils mangent chacun leur tour, ou alors l\u0026rsquo;un mange d\u0026rsquo;abord, et l\u0026rsquo;autre ensuite ?\nBingo, que l\u0026rsquo;un mange d\u0026rsquo;abord, puis l\u0026rsquo;autre, ou qu\u0026rsquo;ils mangent √† tour de r√¥le, dans tous les cas, ils doivent se partager une ressource : la fourchette. Donc l\u0026rsquo;un prend le contr√¥le de la ressource/fourchette, fait des actions avec cette ressource, puis lib√®re la ressource. L\u0026rsquo;autre peut √† son tour prendre le contr√¥le de la ressource, etc.\nDans un ordinateur, c\u0026rsquo;est pareil, dans un processus, les threads doivent se partager les ressources. De m√™me, les processus doivent se partager les ressources.\nC\u0026rsquo;est pour √ßa que sur un ordinateur, quand tu ouvres un document Word partag√© avec tes coll√®gues, parfois tu as un message du genre \u0026ldquo;le fichier est d√©j√† ouvert par\u0026hellip;\u0026rdquo; car le document Word est une fourchette ressource partag√©e entre ton application Word, et celle de ton coll√®gue.\nElle est bizarre ton explication\u0026hellip;\nJe ne vois pas de quoi tu parles.\nQuoiqu\u0026rsquo;il en soit, tu comprends donc qu\u0026rsquo;en rajoutant plus de threads/cores/personnes, on ne va pas forc√©ment plus vite. Ils doivent se synchroniser pour partager les ressources et parfois attendre.\nInstant Dev En informatique, ce partage de ressource s‚Äôappelle une section critique. Pour √©viter que deux t√¢ches utilisent la ressource en m√™me temps, on utilise des verrous (locks). Conclusion Dans cet article, on a vu diff√©rents termes informatiques qui permettent de comprendre un peu plus comment fonctionne un ordinateur, comment on pouvait r√©pondre √† la mont√©e en charge de diff√©rentes mani√®res, et que finalement, c\u0026rsquo;est tr√®s proche de la vie r√©elle.\nNous avons fini cette section \u0026ldquo;IMMV ‚Äî Section 2 ‚Äî L\u0026rsquo;ex√©cution : comment faire des actions ?\u0026rdquo;.\nDans la prochaine section, IMMV ‚Äî Section 3 ‚Äî L\u0026rsquo;optimisation : comment se faire passer pour un coach de vie, on verra comment optimiser des applications et la vie r√©elle.\n‚Üê Retour √† la section\n‚Üê Retour √† l‚Äôintroduction\n","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/l-execution/threads/","summary":"\u003cp\u003eDans le pr√©c√©dent article, \u003ca href=\"../sync-async/\"\u003eIMMV ‚Äî Section 2 ‚Äî Chapitre 1 ‚Äî Synchrone et Asynchrone, ou comment r√©agir au changement\u003c/a\u003e, on a vu les diff√©rents modes d\u0026rsquo;ex√©cution.\u003c/p\u003e\n\u003cp\u003eOn s\u0026rsquo;√©tait arr√™t√© sur le probl√®me suivant : Comment faire pour r√©pondre √† la mont√©e en charge, √† l\u0026rsquo;accumulation de t√¢ches ?\u003c/p\u003e\n\u003cp\u003eEh bien, dans cet article, on va voir comment on r√©sout ce probl√®me, en informatique \u003cstrong\u003ecomme dans la vraie vie\u003c/strong\u003e : les m√©canismes sont souvent tr√®s proches.\u003c/p\u003e","title":"IMMV ‚Äî Section 2 ‚Äî Chapitre 2 ‚Äî Monothread, Multithread, Parall√©lisme et Concurrence, je ne peux pas tout faire en m√™me temps !"},{"content":"Dans le pr√©c√©dent article IMVV ‚Äî Section 1 ‚Äî Chapitre 1 ‚Äî File ou Pile ? L\u0026rsquo;art de passer avant les autres on a d√©couvert les files et les piles. Cette fois, on va survoler plusieurs autres structures de donn√©es (data structures en anglais) qu\u0026rsquo;on utilise tr√®s souvent en informatique\u0026hellip; et dans la vraie vie.\nN\u0026rsquo;oublie pas que les objectifs de ces articles sont :\nTe donner une meilleure compr√©hension des bases de l‚Äôinformatique, T\u0026rsquo;inspirer pour analyser ou optimiser les situations du quotidien, ou peut-√™tre, qui sait, te donner envie d\u0026rsquo;explorer encore plus loin\u0026hellip; jusqu‚Äô√† en faire ton m√©tier. Le tableau ‚Äî la base de presque tout Tu as peut-√™tre remarqu√© dans le pr√©c√©dent article que la file et la pile se ressemblent beaucoup. En r√©alit√©, on peut les repr√©senter toutes les deux avec la m√™me structure : un tableau.\nEn informatique, le tableau (ou array en anglais) est l‚Äôune des structures les plus simples : on range des √©l√©ments les uns √† la suite des autres, dans un espace de taille fixe, et chaque √©l√©ment est rep√©r√© par sa position (ou index).\nPrenons un exemple simple : un tableau d\u0026rsquo;amis √† inviter pour un anniversaire, mais dans mon carnet d\u0026rsquo;adresses je n\u0026rsquo;ai que 6 places.\nAmis Manutea Vai Purotu Heiarii Reva (vide) index 0 1 2 3 4 5 L‚Äôindex est simplement la position de la personne dans le tableau, ce n\u0026rsquo;est pas un ordre.\nDans la plupart des langages informatiques, l\u0026rsquo;index commence √† 0, et pas √† 1.\nCet index nous permet d\u0026rsquo;acc√©der directement √† Vai, l\u0026rsquo;amie √† l\u0026rsquo;index 2 (ou 3√®me √©l√©ment), pour voir son num√©ro de t√©l√©phone par exemple.\nEt ce tableau peut se comporter diff√©remment selon la mani√®re dont on ajoute et retire les √©l√©ments. Par exemple, on peut le faire fonctionner comme une file ou une pile, simplement en changeant les r√®gles du jeu.\nSi c\u0026rsquo;est une file : On ajoute les amis √† la fin, par exemple, Jean arrive apr√®s Reva : Amis Manutea Vai Purotu Heiarii Reva Jean index 0 1 2 3 4 5 Et on traite depuis le d√©but, on retire Manutea du tableau : Amis Vai Purotu Heiarii Reva Jean (vide) index 0 1 2 3 4 5 Pour une pile : On ajoute les amis au d√©but, Jean arrive avant Manutea : Amis Jean Manutea Vai Purotu Heiarii Reva index 0 1 2 3 4 5 Et on traite toujours depuis le d√©but, on retire Jean du tableau : Amis Manutea Vai Purotu Heiarii Reva (vide) index 0 1 2 3 4 5 Dans les deux cas, on utilise un tableau pour stocker les amis. C‚Äôest la logique d‚Äôajout et de retrait qui transforme ce tableau en pile ou en file.\nüéØ Et c‚Äôest exactement pour √ßa que, lorsqu‚Äôon traite des dossiers empil√©s, il vaut mieux commencer par ceux du bas. Sinon, on inverse l‚Äôordre d‚Äôarriv√©e‚Ä¶ et ce n‚Äôest plus une file d‚Äôattente, mais une injustice organis√©e.\nS\u0026rsquo;il n\u0026rsquo;y a que 6 places, que se passe-t-il si j\u0026rsquo;ai 7 amis ?\nD\u0026rsquo;abord, je te f√©licite d\u0026rsquo;avoir autant d\u0026rsquo;amis. Ensuite, on peut s\u0026rsquo;en sortir, en achetant un carnet d\u0026rsquo;adresse qui a plus de places, et on recopie nos amis dans ce nouveau carnet.\nC\u0026rsquo;est similaire en informatique, on fait un nouveau tableau, plus grand, et on recopie.\nHeureusement, en informatique on a invent√© une autre structure.\nLa liste ‚Äî comme le tableau, mais dynamique La liste (ou list en anglais), c‚Äôest comme un tableau, mais en mieux : la taille n‚Äôest pas fixe.\nTu peux ajouter ou supprimer des √©l√©ments √† tout moment, sans te soucier du nombre de places pr√©vues au d√©part. Et √† tout moment, tu peux demander : ‚ÄúCombien d‚Äô√©l√©ments j‚Äôai dans cette liste ?‚Äù ‚Äî et obtenir une r√©ponse fiable.\nC‚Äôest la version souple du tableau, celle qu‚Äôon trouve dans la majorit√© des langages de programmation modernes.\nRefaisons les exemples de pile et de file, mais cette fois-ci avec des listes.\nSi c\u0026rsquo;est une file : On ajoute les amis √† la fin, par exemple, Jean arrive apr√®s Reva : Amis Manutea Vai Purotu Heiarii Reva Jean index 0 1 2 3 4 5 Nombre d\u0026rsquo;√©l√©ments: 6\nEt on traite depuis le d√©but, on retire Manutea du tableau : Amis Vai Purotu Heiarii Reva Jean index 0 1 2 3 4 Nombre d\u0026rsquo;√©l√©ments: 5\nPour une pile : On ajoute les amis au d√©but, Jean arrive avant Manutea : Amis Jean Manutea Vai Purotu Heiarii Reva index 0 1 2 3 4 5 Nombre d\u0026rsquo;√©l√©ments: 6\nEt on traite toujours depuis le d√©but, on retire Jean du tableau : Amis Manutea Vai Purotu Heiarii Reva index 0 1 2 3 4 Nombre d\u0026rsquo;√©l√©ments: 5\nOn remarque qu\u0026rsquo;il n\u0026rsquo;y a plus la case (vide) et le nombre d\u0026rsquo;√©l√©ments change.\nInstant Dev Pour permettre cette souplesse, la liste est plus gourmande en calculs:\ncalcul √† la vol√©e du nombre d\u0026rsquo;√©l√©ments, r√©allocation de m√©moire. Mais en vrai, √† moins que tu ne codes un satellite, une carte embarqu√©e, ou une console des ann√©es 80, o√π chaque octet compte, il y a peu de raisons d‚Äôutiliser un tableau fixe. Une liste dynamique t\u0026rsquo;√©vitera bien des migraines.\nLe tableau et la liste sont des structures tr√®s basiques et tr√®s puissantes, elles sont les bases de beaucoup d\u0026rsquo;autres structures qu\u0026rsquo;on verra par la suite.\nLe tableau associatif ‚Äî ou comment indexer On avait pris l\u0026rsquo;exemple d\u0026rsquo;un carnet d\u0026rsquo;adresses qu\u0026rsquo;on avait mis dans un tableau ou dans une liste. C\u0026rsquo;est d√©j√† tr√®s bien de pouvoir stocker ta liste d\u0026rsquo;amis, mais si tu as des centaines d\u0026rsquo;amis et que tu veux appeler Vai pour aller √† la mer, tu vas gal√©rer pour chercher dans ce carnet d\u0026rsquo;adresse.\nEn effet, avec les 2 derni√®res structures, tu dois parcourir les √©l√©ments un par un, jusqu\u0026rsquo;√† tomber sur Vai. Tu vas perdre beaucoup de temps √† chercher son num√©ro, √ßa va t\u0026rsquo;√©nerver, tu vas l\u0026rsquo;appeler, lui dire \u0026ldquo;mais quelle id√©e d\u0026rsquo;avoir un pr√©nom qui commence par V!\u0026rdquo;, elle va s\u0026rsquo;√©nerver, vous ne serez plus amis, alors que tu voulais juste aller surfer.\nJe m\u0026rsquo;emporte un peu? Peut-√™tre.\nPour r√©soudre ce probl√®me, en informatique on a invent√© le tableau associatif (ou map en anglais). On utilise le tableau, et on va profiter de l\u0026rsquo;index pour justement indexer les √©l√©ments.\nPour cela, on a besoin de r√©fl√©chir un peu:\nOn sait que l\u0026rsquo;index est une position dans le tableau, donc un nombre On sait que les pr√©noms commencent par une lettre (oui, je suis s√©rieux), on va supposer que c\u0026rsquo;est une lettre de l\u0026rsquo;alphabet, et pas un caract√®re sp√©cial comme *$@ On sait qu\u0026rsquo;il y a 26 lettres dans l\u0026rsquo;alphabet =\u0026gt; Eur√™ka: On peut utiliser la 1√®re lettre du pr√©nom, la transformer en index en utilisant sa position dans l\u0026rsquo;alphabet, et associer le pr√©nom √† cet index. On dit que l\u0026rsquo;index est une cl√© et que le pr√©nom est une valeur par exemple:\nManutea =\u0026gt; M =\u0026gt; M est la 14√®me lettre de l\u0026rsquo;alphabet, donc Manutea sera le 14√®me √©l√©ment. Pour rappel, l\u0026rsquo;index commence √† 0, donc M = index 13. cl√©: 13 valeur: Manutea\nPour Heiarii on aura: cl√©: 7 valeur: Heiarii\nCe qui nous donne:\nAmis (vide) (vide) (vide) (vide) (vide) (vide) (vide) Heiarii (vide) (vide) (vide) (vide) (vide) Manutea (vide) Purotu (vide) Reva (vide) (vide) (vide) Vai (vide) (vide) (vide) (vide) index 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 Avec cette map, on pourra facilement acc√©der aux informations de Vai, puisqu\u0026rsquo;on pourra juste aller directement √† l\u0026rsquo;index 21.\nInstant Dev En vrai, pour calculer l\u0026rsquo;index, on utilise une fonction de hachage (hash en anglais) qui permet de transformer les cl√©s en index. C\u0026rsquo;est pour √ßa qu\u0026rsquo;on appelle √ßa un HashMap en Java. Oui mais moi je n\u0026rsquo;ai pas envie de m\u0026rsquo;emb√™ter √† compter sur mes doigts √† quelle position est la lettre V\u0026hellip;\nTu as raison, dans la vraie vie, dans ton carnet d\u0026rsquo;adresse pour chaque lettre tu as une encoche o√π la lettre y est marqu√©e, et tu notes les informations dans les pages qui correspondent √† cette lettre.\nCarnet d'adresses papier, en rouge les encoches ‚Äî source: Wikim√©dia En informatique c\u0026rsquo;est le m√™me principe, sauf qu\u0026rsquo;on ne peut pas utiliser de lettre comme index, alors on est oblig√© de trouver cette astuce.\nEt en plus, il est nul ton carnet d\u0026rsquo;adresse, comment je fais si j\u0026rsquo;ai 2 amis qui s\u0026rsquo;appellent Vai et Vahine? Je mets Vahine dans la case juste apr√®s? Et si j\u0026rsquo;ai des centaines d\u0026rsquo;amis comme tu le disais au d√©but, je fais comment pour les mettre dans les 26 cases ?\nOk, tranquille, pas de stress.\nEn informatique, on peut combiner les structures, plut√¥t que d\u0026rsquo;associer un pr√©nom √† une lettre, on va associer une liste de pr√©noms √† une lettre. Ci-dessous on r√©√©crit notre map et on ajoute Vahine :\nCl√©s 7 13 15 17 21 ‚Üì ‚Üì ‚Üì ‚Üì ‚Üì Heiarii Manutea Purotu Reva Vai Vahine Comme tu l\u0026rsquo;as remarqu√©, au lieu de mettre directement les pr√©noms dans les cases, il y a des fl√®ches qui pointent vers des listes. On appelle √ßa un pointeur (ou pointer en anglais). c‚Äôest un m√©canisme qui permet √† l‚Äôordinateur de dire \u0026ldquo;Va chercher les donn√©es ailleurs.\u0026rdquo; Plut√¥t que de stocker directement les valeurs, on stocke l‚Äôendroit o√π elles se trouvent.\nC\u0026rsquo;est la plus grande force de l\u0026rsquo;informatique, on peut combiner diff√©rents concepts abstraits pour r√©pondre √† notre besoin.\nL\u0026rsquo;ensemble ‚Äî une structure unique Si comme moi tu fais ta liste de courses durant la semaine en pr√©vision des grandes courses du dimanche, tu as peut-√™tre d√©j√† eu la liste qui ressemble √† :\nlait oeufs pops viande salade oeufs Tu remarques que les oeufs apparaissent 2 fois. On appelle √ßa un doublon.\n√áa peut arriver si lundi tu t\u0026rsquo;es fait une omelette avec les derniers oeufs, tu les as not√©s pour en racheter. Puis que vendredi, tu voulais faire un g√¢teau, mais tu t\u0026rsquo;es souvenu que tu n\u0026rsquo;avais plus d\u0026rsquo;oeufs\u0026hellip; et alors tu les as r√©√©crits.\nC\u0026rsquo;est tr√®s sp√©cifique comme explication\u0026hellip; C\u0026rsquo;est ce qui t\u0026rsquo;es arriv√©, pas vrai?\nTu n\u0026rsquo;as pas de preuve. Cette accusation est fausse.\nBref, la liste et le tableau n\u0026rsquo;ont aucun moyen d\u0026rsquo;emp√™cher la pr√©sence de doublons dans leurs √©l√©ments. C\u0026rsquo;est pour √ßa qu\u0026rsquo;en informatique on a invent√© l\u0026rsquo;ensemble (ou set en anglais), une structure o√π chaque √©l√©ment est unique.\nPar contre, le set n\u0026rsquo;est pas ordonn√© comme le tableau et la liste. Il n\u0026rsquo;y a pas d\u0026rsquo;index permettant d\u0026rsquo;acc√©der directement au 2√®me ou 6√®me √©l√©ment.\nInstant Dev En informatique, pour faire un set, on utilise en fait une map o√π la cl√© est l\u0026rsquo;√©l√©ment. Le calcul de hash nous garantit qu\u0026rsquo;il ne peut pas y avoir de doublon. Et on met une valeur arbitraire dans la valeur associ√©e, comme 1 ou PRESENT.\nSi on veut une structure ordonn√©e sans doublons, on peut :\ncoder une liste avec une fonction d\u0026rsquo;ajout qui rejette les doublons, transformer un set en liste, utiliser une structure sp√©cialis√©e, comme LinkedHashSet en Java üìå Exemples dans la vie r√©elle L\u0026#39;ensemble des ingr√©dients qu‚Äôil te reste dans le frigo L\u0026#39;ensemble des invit√©s √† ton anniversaire üíª Exemples en informatique L\u0026#39;ensemble des num√©ros de passeport en Polyn√©sie fran√ßaise L\u0026#39;ensemble de tes amis Facebook Le graphe ‚Äî ou comment appeler l\u0026rsquo;ami d\u0026rsquo;un ami d\u0026rsquo;un ami Tu pr√©pares ta liste d‚Äôinvit√©s pour ton anniversaire, tu comptes inviter tout ton carnet d\u0026rsquo;adresses.\nEt l√†, tu r√©alises que tu n‚Äôas pas le contact de Paul. Tu l\u0026rsquo;as crois√© en soir√©e et il √©tait cool, tu voudrais l\u0026rsquo;inviter\u0026hellip; mais tu as oubli√© de lui demander son num√©ro.\nHeureusement, tu sais que Purotu le conna√Æt.\nTu l\u0026rsquo;appelles\u0026hellip; zut, elle n\u0026rsquo;a pas son num√©ro. Mais elle te donne le num√©ro de Tiare, une autre amie de Paul. Tu appelles Tiare, tu te pr√©sentes, tu l\u0026rsquo;invite √©galement car tu n\u0026rsquo;es pas un sauvage. Et tu lui demandes le num√©ro de Paul.\nBingo, elle l\u0026rsquo;a, tu appelles Paul et il est chaud pour venir √† ton anniversaire.\nLes liens entre ces personnes peuvent √™tre repr√©sent√©s par un graphe (ou graph en anglais).\nEt ce que tu viens de faire, sans t\u0026rsquo;en rendre compte, c\u0026rsquo;est un parcours de graphe, un algorithme !\n%%{ init: { 'theme': 'base', 'themeVariables': { 'primaryColor': '#ddd', 'primaryTextColor': '#007acc', 'primaryBorderColor': '#007acc', 'lineColor': '#007acc' } } }%% graph TD A[Toi] --- B[Manutea] A --- C[Vai] A --- D[Purotu] A --- E[Heiarii] A --- F[Reva] A --- G[Jean] D --- H[Tiare] H --- I[Paul] Graphe de relation entre les personnes Ce graphe est non orient√©, c\u0026rsquo;est-√†-dire qu\u0026rsquo;il n\u0026rsquo;y a pas de sens entre les √©l√©ments. Chaque case est un noeud, et chaque trait est une ar√™te.\nEffectivement pour √©viter de f√¢cher les personnes, on ne va pas dire \u0026ldquo;Purotu est l\u0026rsquo;ami de Tiare, mais Tiare n\u0026rsquo;est pas l\u0026rsquo;ami de Purotu\u0026rdquo;.\nPar contre, on peut utiliser un graphe orient√© pour repr√©senter les appels que tu as pass√©s.\n%%{ init: { 'theme': 'base', 'themeVariables': { 'primaryColor': '#ddd', 'primaryTextColor': '#007acc', 'primaryBorderColor': '#007acc', 'lineColor': '#007acc' } } }%% graph TD A[Toi] --\u003e B[Manutea] A --\u003e C[Vai] A --\u003e D[Purotu] A --\u003e E[Heiarii] A --\u003e F[Reva] A --\u003e G[Jean] A --\u003e H[Tiare] A --\u003e I[Paul] Graphe des appels que tu as pass√© Ici, chaque case est un noeud, tout comme le graphe non orient√©, mais cette fois-ci, chaque fl√®che est une ar√™te, et donne le sens d\u0026rsquo;appel.\nOn a donc les m√™mes donn√©es, mais on utilise la structure adapt√©e √† ce qu\u0026rsquo;on veut repr√©senter.\nEt c\u0026rsquo;est quoi le parcours de graphe?\nJe suis heureux que tu poses cette question, mais ta question d√©passe le cadre de cet article.\nConclusion On a d√©j√† vu pas mal de choses, je te laisse relire, essayer de combiner les structures entre elles, te renseigner sur internet en cherchant \u0026ldquo;structures de donn√©es\u0026rdquo; ou \u0026ldquo;data structure\u0026rdquo;.\nIl existe beaucoup de structures de donn√©es, celles qui sont pr√©sent√©es dans cet article sont juste les plus basiques, celles qu\u0026rsquo;on apprend dans les premi√®res heures de cours de programmation.\nSi tu souhaites continuer cette aventure, tu peux regarder la suite ici: IMVV ‚Äî Section 1 ‚Äî Chapitre 3 ‚Äî Structures de contr√¥le et algorithme, apprendre √† r√©fl√©chir\n‚Üê Retour √† la section\n‚Üê Retour √† l‚Äôintroduction\n","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/les-bases/structures-de-donnees/","summary":"\u003cp\u003eDans le pr√©c√©dent article \u003ca href=\"../file-et-pile/\"\u003eIMVV ‚Äî Section 1 ‚Äî Chapitre 1 ‚Äî File ou Pile ? L\u0026rsquo;art de passer avant les autres\u003c/a\u003e on a d√©couvert les files et les piles. Cette fois, on va survoler plusieurs autres \u003cstrong\u003estructures de donn√©es\u003c/strong\u003e (\u003cem\u003edata structures\u003c/em\u003e en anglais) qu\u0026rsquo;on utilise tr√®s souvent en informatique\u0026hellip; et dans la vraie vie.\u003c/p\u003e\n\u003cp\u003eN\u0026rsquo;oublie pas que les objectifs de ces articles sont :\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eTe donner une meilleure compr√©hension des bases de l‚Äôinformatique,\u003c/li\u003e\n\u003cli\u003eT\u0026rsquo;inspirer pour analyser ou optimiser les situations du quotidien,\u003c/li\u003e\n\u003cli\u003eou peut-√™tre, qui sait, te donner envie d\u0026rsquo;explorer encore plus loin\u0026hellip; jusqu‚Äô√† en faire ton m√©tier.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"le-tableau--la-base-de-presque-tout\"\u003eLe tableau ‚Äî la base de presque tout\u003c/h2\u003e\n\u003cp\u003eTu as peut-√™tre remarqu√© dans le pr√©c√©dent article que la \u003cstrong\u003efile\u003c/strong\u003e et la \u003cstrong\u003epile\u003c/strong\u003e se ressemblent beaucoup. En r√©alit√©, on peut les repr√©senter toutes les deux avec la m√™me structure : un \u003cstrong\u003etableau\u003c/strong\u003e.\u003c/p\u003e","title":"IMVV ‚Äî Section 1 ‚Äî Chapitre 2 ‚Äî Autres structures de donn√©es, j'organise mon bordel"},{"content":"Dans l\u0026rsquo;article pr√©c√©dent IMVV ‚Äî Section 1 ‚Äî Chapitre 2 ‚Äî Autres structures de donn√©es, j\u0026rsquo;organise mon bordel, on s\u0026rsquo;√©tait arr√™t√© sur ta question :\nEt c\u0026rsquo;est quoi le parcours de graphe?\nDans cet article, on va parler des structures de contr√¥le (control flow statements en anglais), qu\u0026rsquo;on utilise dans des algorithmes (algorithms en anglais).\nAvant d\u0026rsquo;expliquer l\u0026rsquo;algorithme que tu as fait, le parcours de graphe, on doit expliquer les structures de contr√¥le.\nN\u0026rsquo;oublie pas que les objectifs de ces articles sont :\nTe donner une meilleure compr√©hension des bases de l‚Äôinformatique, T\u0026rsquo;inspirer pour analyser ou optimiser les situations du quotidien, ou peut-√™tre, qui sait, te donner envie d\u0026rsquo;explorer encore plus loin\u0026hellip; jusqu‚Äô√† en faire ton m√©tier. Pseudo-code ‚Äî l\u0026rsquo;art de la cuisine Quand tu fais un g√¢teau, tu r√©alises les actions suivantes:\nPr√©chauffer le four Verser la farine dans le saladier Casser les oeufs et mettre le contenu dans le saladier Verser le lait dans le saladier Remuer Verser la pr√©paration dans un moule Mettre le moule au four Attendre 20 minutes Eteindre le four Sortir le moule du four D√©mouler Toute cette suite d\u0026rsquo;√©tapes est ce qu\u0026rsquo;on appelle un algorithme, et la fa√ßon dont on l\u0026rsquo;a √©crit, √ßa s\u0026rsquo;appelle du pseudo-code, parce que √ßa ressemble √† un langage de programmation, mais ce n\u0026rsquo;en est pas un.\nMais pourquoi on appelle √ßa un algorithme? on peut pas juste dire une suite d\u0026rsquo;actions?\nJe te laisse chercher sur internet pourquoi on appelle √ßa un algorithme.\nLa boucle for ‚Äî ou comment √™tre fiu Ton meilleur ami Manutea te demande \u0026ldquo;Comment tu as fait pour inviter toutes ces personnes √† ton anniversaire ?\u0026rdquo;. Laquelle de ces 2 phrases dirais-tu :\nJ\u0026rsquo;ai appel√© Manutea, puis j\u0026rsquo;ai appel√© Vai, puis j\u0026rsquo;ai appel√© Purotu, puis j\u0026rsquo;ai appel√© Heiarii, puis j\u0026rsquo;ai appel√© Reva, puis j\u0026rsquo;ai appel√© Jean, puis j\u0026rsquo;ai appel√© Tiare, puis j\u0026rsquo;ai appel√© Paul J\u0026rsquo;ai pris mon carnet d\u0026rsquo;adresses, puis pour chaque contact, j\u0026rsquo;ai appel√© le num√©ro correspondant La 1√®re phrase est un algorithme sans boucle (loop en anglais) : chaque action est √©crite explicitement.\nLa 2√®me, elle, utilise une boucle ‚Äî tu r√©p√®tes la m√™me action pour chaque contact. Sans forc√©ment y penser, tu utilises aussi une variable : un espace dans ta t√™te pour m√©moriser un num√©ro, que tu remplaces √† chaque nouvel appel.\nCette mani√®re de r√©p√©ter une action avec une variable, c‚Äôest exactement ce qu‚Äôun ordinateur fait quand on lui demande de parcourir une liste.\nSi tu relis bien la 2√®me phrase, tu verras que pour chaque est en gras. En anglais, pour chaque se dit for each, c\u0026rsquo;est pour √ßa qu\u0026rsquo;on l\u0026rsquo;appelle la boucle for dans la plupart des langages.\nSi on essayait d\u0026rsquo;√©crire un algorithme, sous forme de pseudo-code simple pour d√©crire la 2√®me phrase, √ßa donnerait :\nDans mon carnet d\u0026#39;adresses, pour chaque contact: J\u0026#39;ai appel√© le num√©ro correspondant au contact J\u0026#39;ai invit√© l\u0026#39;ami Fin pour \u0026ldquo;Dans mon carnet d\u0026rsquo;adresses, pour chaque contact\u0026rdquo; marque le d√©but de la boucle, et \u0026ldquo;Fin pour\u0026rdquo; marque la fin de la boucle.\nEntre ces 2 lignes, les actions \u0026ldquo;J\u0026rsquo;ai appel√© le num√©ro correspondant au contact\u0026rdquo; et \u0026ldquo;J\u0026rsquo;ai invit√© l\u0026rsquo;ami\u0026rdquo; forment ce qu\u0026rsquo;on appelle un bloc d\u0026rsquo;instructions.\nPar convention, on indente ce bloc ‚Äî on le d√©cale vers la droite ‚Äî pour montrer visuellement qu\u0026rsquo;il est √† l\u0026rsquo;int√©rieur de la boucle.\nOk, et quel est le rapport entre la boucle for et fiu comme marqu√© dans le titre ?\nSi on devait √©crire l\u0026rsquo;algorithme de la 1√®re phrase, √ßa donnerait :\nJ\u0026#39;ai appel√© Manutea J\u0026#39;ai appel√© Vai J\u0026#39;ai appel√© Purotu J\u0026#39;ai appel√© Heiarii J\u0026#39;ai appel√© Reva J\u0026#39;ai appel√© Jean J\u0026#39;ai appel√© Tiare J\u0026#39;ai appel√© Paul Chaque ligne est une action, donc il faut √©crire autant de lignes qu\u0026rsquo;il y a de contacts dans ta liste de contacts. Maintenant, que se passerait-il si tu devais inviter 100 personnes? Tu serais fiu.\nAlors qu\u0026rsquo;avec la boucle, tu n\u0026rsquo;as pas besoin de changer ton algorithme, c\u0026rsquo;est le m√™me, que tu aies 6 contacts ou 100.\nOui mais dans la vraie vie je dois quand m√™me appeler les amis un par un\nCet exemple n‚Äôest pas l√† pour dire que tu vas programmer ton t√©l√©phone ‚Äî mais pour te faire sentir la puissance de la boucle : un seul bloc, quelle que soit la longueur de ta liste.\nDans la vraie vie, tu fais un groupe Facebook avec tous tes amis et tu postes des messages d\u0026rsquo;informations dans le groupe pour organiser, idem pour un groupe SMS. Si t\u0026rsquo;es old school, tu postes un message dans le journal local et viendra qui verra. D\u0026rsquo;ailleurs j\u0026rsquo;en parlerai dans de prochains articles.\nLa boucle while ‚Äî ou comment faire ses devoirs avant d\u0026rsquo;aller jouer Quand tu √©tais plus jeune, on t\u0026rsquo;a s√ªrement d√©j√† dit \u0026ldquo;Fais d\u0026rsquo;abord tes devoirs, ensuite tu peux aller jouer\u0026rdquo;, ou autrement dit \u0026quot;Tant que tu n\u0026rsquo;a pas fini tes devoirs, tu travailles, ensuite tu peux aller jouer\u0026quot;.\nSi on devait √©crire cet algorithme, √ßa donnerait:\nTant que je n\u0026#39;ai pas fini mes devoirs: Je fais mes devoirs Fin tant que Je vais jouer \u0026ldquo;Tant que je n\u0026rsquo;ai pas fini mes devoirs\u0026rdquo; marque le d√©but de la boucle, et \u0026ldquo;Fin tant que\u0026rdquo; marque la fin de la boucle.\nEntre ces 2 lignes, l\u0026rsquo;action \u0026ldquo;Je fais mes devoirs\u0026rdquo; forme le bloc d\u0026rsquo;instructions.\nTu l\u0026rsquo;auras remarqu√©, c\u0026rsquo;est tr√®s similaire √† la boucle for, sauf qu\u0026rsquo;au lieu de parcourir des √©l√©ments, on v√©rifie une condition, et on r√©p√®te la boucle si la condition n\u0026rsquo;est remplie.\nOn appelle √ßa une boucle while, car Tant que se dit while en anglais.\nEnsuite, une fois que les devoirs sont finis, on sort de la boucle, on fait la suite des instructions, donc \u0026ldquo;Je vais jouer\u0026rdquo;. On aurait aussi pu avoir d\u0026rsquo;autres instructions apr√®s la boucle for, c\u0026rsquo;est juste que l\u0026rsquo;exemple ne s\u0026rsquo;y pr√™tait pas.\nMais alors‚Ä¶ pourquoi deux types de boucles si elles font (presque) la m√™me chose ? Pourquoi une boucle for, et une boucle while ?\nEn fait, en fonction du probl√®me qu\u0026rsquo;on veut r√©soudre :\ndans certains cas on pourra compter, et dans ce cas on pr√©f√®rera utiliser une boucle for dans certains cas on ne pourra pas compter, et dans ce cas on pr√©f√®rera utiliser une boucle while Par exemple, pour un enfant qui joue dehors:\nTant qu\u0026#39;il fait beau: Je joue Fin tant que Ici, impossible de compter.\nMais tu commences peut-√™tre √† te rendre compte d\u0026rsquo;une supercherie.\nInstant Dev üí° En r√©alit√©, toutes les boucles for peuvent √™tre r√©√©crites en boucle while.\nLa boucle for n‚Äôest qu‚Äôune boucle while optimis√©e, √©crite pour √™tre plus simple √† lire‚Ä¶ quand on sait compter.\nLes 2 types de boucles sont des instructions d\u0026rsquo;it√©ration, √† la diff√©rence des instructions simples comme \u0026ldquo;Je joue\u0026rdquo;, les instructions d\u0026rsquo;it√©ration permettre d\u0026rsquo;ex√©cuter des blocs d\u0026rsquo;instructions de mani√®re r√©p√©t√©e.\nBravo, tu commences √† r√©fl√©chir comme un d√©veloppeur !\nExplications\nPour rappel:\ndans une liste, l\u0026rsquo;index commence √† 0, dans une liste, le dernier index est √©gal au nombre d\u0026rsquo;√©l√©ments de la liste moins 1 Amis Manutea Vai Purotu Heiarii Reva Jean Tiare Paul index 0 1 2 3 4 5 6 7 Nombre d\u0026rsquo;√©l√©ments: 8\nune variable c\u0026rsquo;est juste un espace m√©moire o√π on stocke une donn√©e (un tableau, une liste, un pr√©nom, un num√©ro de t√©l√©phone) Si on reprend l\u0026rsquo;exemple de la boucle for:\nDans mon carnet d\u0026#39;adresses, pour chaque contact: J\u0026#39;appelle le num√©ro correspondant au contact J\u0026#39;invite l\u0026#39;ami Fin pour Derri√®re, voici plut√¥t ce que fait un ordinateur (de mani√®re simplifi√©e) :\nJe cr√©e une variable \u0026#34;index\u0026#34;, qui vaut 0 Tant que \u0026#34;index\u0026#34; est inf√©rieur au nombre d\u0026#39;√©l√©ments (8) du carnet d\u0026#39;adresses: Je regarde le contact qui se trouve √† l\u0026#39;\u0026#34;index\u0026#34; dans le carnet d\u0026#39;adresses Je r√©cup√®re son num√©ro Je l\u0026#39;invite \u0026#34;index\u0026#34; prend la valeur \u0026#34;index\u0026#34; + 1 Fin tant que Comme tu le vois, c\u0026rsquo;est un peu plus compliqu√©, c\u0026rsquo;est pour √ßa qu\u0026rsquo;on pr√©f√®re utiliser une boucle for quand on peut compter.\nL\u0026rsquo;instruction conditionnelle ‚Äî ou pourquoi il faut respecter le code de la route Juste au-dessus, on parlait de condition dans la boucle while. Mais on n\u0026rsquo;a jamais expliqu√© ce que c\u0026rsquo;√©tait.\nUne condition est une question qu\u0026rsquo;on se pose, et la r√©ponse est soit ‚Äúoui‚Äù, soit ‚Äúnon‚Äù ‚Äî jamais les deux, jamais \u0026ldquo;un peu\u0026rdquo;.\nQuand on √©crit \u0026ldquo;Tant que je n\u0026rsquo;ai pas fini mes devoirs\u0026rdquo;, √† chaque r√©p√©tition on pose la question \u0026ldquo;Est-ce que j\u0026rsquo;ai fini mes devoirs?\u0026rdquo;.\nEn informatique, comme dans la vraie vie, une condition doit √™tre claire.\nOn peut utiliser ce concept pour faire des branchements dans notre code, dans une instruction conditionnelle (conditional statement en anglais).\nPrenons un exemple simple : tu es en voiture, tu approches un feu tricolore. Il est vert.\nQue fais-tu si le feu passe √† l‚Äôorange juste devant toi‚ÄØ?\nVoici un algorithme qui repr√©sente cette situation :\nSi le feu passe au orange, alors: Tu t\u0026#39;arr√™tes Sinon (c\u0026#39;est toujours vert): Tu continues et traverse l\u0026#39;intersection Fin si \u0026ldquo;Si le feu passe au orange,\u0026rdquo; marque le d√©but de l\u0026rsquo;instruction conditionnelle, \u0026ldquo;alors\u0026rdquo; marque la branche du si, \u0026ldquo;Sinon\u0026rdquo; marque la branche du sinon, et \u0026ldquo;Fin si\u0026rdquo; marque la fin de l\u0026rsquo;instruction conditionnelle.\nDe la m√™me mani√®re que pour les boucles, chaque branche est un bloc d\u0026rsquo;instructions. Comme pour les boucles, chaque branche forme un bloc d‚Äôinstructions, qu‚Äôon indente pour bien le rep√©rer.\nPour visualiser, imagine un arbre : chaque fois qu‚Äôune condition est test√©e, tu choisis une branche √† suivre. Le chemin d√©pend de tes r√©ponses.\nRevenons √† notre parcours de graphe Rappels Tu avais appel√© tes amis pour les inviter √† ton anniversaire, et tu avais √©t√© jusqu\u0026rsquo;au bout du monde, en sautant de relations en relations, pour inviter Paul. Tu avais fait ces actions :\nTu comptes inviter tout ton carnet d\u0026#39;adresses. Tu r√©alises que tu n‚Äôas pas le contact de Paul. Tu l\u0026#39;as crois√© en soir√©e et il √©tait cool, tu voudrais l\u0026#39;inviter... mais t\u0026#39;as oubli√© de lui demander son num√©ro. Heureusement, tu sais que Purotu le conna√Æt. Tu l\u0026#39;appelles... zut, elle n\u0026#39;a pas son num√©ro. Mais elle te donne le num√©ro de Tiare, une autre amie de Paul. Tu appelles Tiare, tu te pr√©sentes, tu l\u0026#39;invites √©galement car tu n\u0026#39;es pas un sauvage. Et tu lui demandes le num√©ro de Paul. Bingo, elle l\u0026#39;a, tu appelles Paul et il est chaud pour venir √† ton anniversaire. Ci-dessous se trouve le graphe de relation entre les personnes, un graphe non orient√©.\n%%{ init: { 'theme': 'base', 'themeVariables': { 'primaryColor': '#ddd', 'primaryTextColor': '#007acc', 'primaryBorderColor': '#007acc', 'lineColor': '#007acc' } } }%% graph TD A[Toi] --- B[Manutea] A --- C[Vai] A --- D[Purotu] A --- E[Heiarii] A --- F[Reva] A --- G[Jean] D --- H[Tiare] H --- I[Paul] Graphe de relation entre les personnes En se basant sur ce qu\u0026rsquo;on a appris dans cet article, on va √©crire un algorithme pour repr√©senter les actions que tu as r√©alis√©es pour inviter tes amis :\n# √âtape 1 : inviter tous mes amis directs (les noeuds les plus proches de \u0026#34;Toi\u0026#34; dans le graphe) Je cr√©e une variable \u0026#34;liste d\u0026#39;amis\u0026#34;, contenant tous mes amis directs Je cr√©e une variable \u0026#34;ami\u0026#34;, le contact courant Dans la \u0026#34;liste d\u0026#39;amis\u0026#34;, pour chaque \u0026#34;ami\u0026#34; : J\u0026#39;appelle \u0026#34;ami\u0026#34; Si \u0026#34;ami\u0026#34; r√©pond, alors : Je l\u0026#39;invite √† mon anniversaire Fin si Fin pour # √âtape 2 : retrouver Paul (en parcourant le graphe en largeur) Je cr√©e une variable \u0026#34;file\u0026#34;, initialis√©e avec la \u0026#34;liste d\u0026#39;amis\u0026#34; Je cr√©e une variable \u0026#34;visit√©s\u0026#34;, une liste vide Tant que la \u0026#34;file\u0026#34; n‚Äôest pas vide : Je prends le premier √©l√©ment de la \u0026#34;file\u0026#34;, je le stocke dans \u0026#34;ami\u0026#34; Si \u0026#34;ami\u0026#34; n‚Äôest pas dans \u0026#34;visit√©s\u0026#34;, alors : J‚Äôajoute \u0026#34;ami\u0026#34; √† \u0026#34;visit√©s\u0026#34; J\u0026#39;appelle \u0026#34;ami\u0026#34; Si \u0026#34;ami\u0026#34; r√©pond, alors : Je lui demande s‚Äôil conna√Æt Paul Si \u0026#34;ami\u0026#34; me donne le num√©ro de Paul : Je cr√©e une variable \u0026#34;Paul\u0026#34; J\u0026#39;appelle \u0026#34;Paul\u0026#34; Si \u0026#34;Paul\u0026#34; r√©pond, alors : Je l‚Äôinvite √† mon anniversaire Je termine la recherche Fin si Sinon : Je r√©cup√®re la liste des amis de \u0026#34;ami\u0026#34; Pour chaque \u0026#34;contact\u0026#34; dans cette liste : J‚Äôajoute \u0026#34;contact\u0026#34; √† la \u0026#34;file\u0026#34; Fin pour Fin si Fin si Fin si Fin tant que √Ä premi√®re vue, √ßa a l\u0026rsquo;air compliqu√©. Mais en fait si tu prends le temps de d√©cortiquer, de bien regarder, tu verras que ce sont juste les actions que tu as r√©alis√©s plus haut, mais dans un langage plus proche de ce que fait un ordinateur.\nLa seule chose qu\u0026rsquo;on a fait en plus des concepts de base, c\u0026rsquo;est qu\u0026rsquo;on a combin√© les structures de contr√¥le et les structures de donn√©es, et le tout nous donne notre algorithme de parcours de graphe !\nInstant Dev üí° On a parcouru le graphe en largeur, c\u0026rsquo;est-√†-dire qu\u0026rsquo;on a d\u0026rsquo;abord regard√© les noeuds voisins de notre point de d√©part.\nD\u0026rsquo;autres algorithmes connus et enseign√©s en informatique sont le parcours en profondeur, l\u0026rsquo;algorithme de Dijkstra, A* et Floyd-Warshall, tu peux regarder sur internet si √ßa t\u0026rsquo;int√©resse.\nConclusion Dans cet article on a appris ce que sont :\nLes structures de contr√¥le, Les boucles, Les conditions, Les variables, Les algorithmes. Il existe d\u0026rsquo;autres structures de contr√¥le, des types de variables, et des algorithmes qu\u0026rsquo;on peut r√©utiliser pour r√©pondre √† beaucoup de probl√®mes. Comme d\u0026rsquo;habitude, je te laisse chercher sur internet si tu veux aller plus loin.\nMais le plus important, c\u0026rsquo;est que tu commences √† r√©fl√©chir comme un d√©veloppeur, et √† comprendre le pseudo-code. Dans la vraie vie, si tu as un probl√®me complexe √† r√©soudre, tu peux essayer de l\u0026rsquo;√©crire comme on l\u0026rsquo;a fait pour le parcours de graphe. Prends ton temps et d√©compose le probl√®me.\nNous avons fini cette section \u0026ldquo;IMMV ‚Äî Section 1 ‚Äî Les Bases : structures et contr√¥le\u0026rdquo;, dans cette section, nous avons √©galement vu les structures de donn√©es.\nDans la prochaine section, IMMV ‚Äî Section 2 ‚Äî L\u0026rsquo;ex√©cution : comment faire des actions ?, nous verrons que l\u0026rsquo;ordinateur et l\u0026rsquo;humain font les actions de mani√®re tr√®s similaire.\n‚Üê Retour √† la section\n‚Üê Retour √† l‚Äôintroduction\n","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/les-bases/structures-de-controle/","summary":"\u003cp\u003eDans l\u0026rsquo;article pr√©c√©dent \u003ca href=\"../structures-de-donnees/\"\u003eIMVV ‚Äî Section 1 ‚Äî Chapitre 2 ‚Äî Autres structures de donn√©es, j\u0026rsquo;organise mon bordel\u003c/a\u003e, on s\u0026rsquo;√©tait arr√™t√© sur ta question :\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eEt c\u0026rsquo;est quoi le parcours de graphe?\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eDans cet article, on va parler des \u003cstrong\u003estructures de contr√¥le\u003c/strong\u003e (\u003cem\u003econtrol flow statements\u003c/em\u003e en anglais), qu\u0026rsquo;on utilise dans des \u003cstrong\u003ealgorithmes\u003c/strong\u003e (\u003cem\u003ealgorithms\u003c/em\u003e en anglais).\u003c/p\u003e\n\u003cp\u003eAvant d\u0026rsquo;expliquer l\u0026rsquo;algorithme que tu as fait, le \u003cstrong\u003eparcours de graphe\u003c/strong\u003e, on doit expliquer les structures de contr√¥le.\u003c/p\u003e","title":"IMVV ‚Äî Section 1 ‚Äî Chapitre 3 ‚Äî Structures de contr√¥le et algorithme, apprendre √† r√©fl√©chir"},{"content":"Pr√©c√©demment, on a vu qu\u0026rsquo;en rajoutant des serveurs, on pouvait servir plus de familles. Dans cette section on verra diff√©rents tips permettant d\u0026rsquo;optimiser un programme existant et la vie r√©elle.\nChapitres IMVV ‚Äî Section 3 ‚Äî Chapitre 1 ‚Äî La m√©moire, ou comment √©viter les p√©nuries dans un magasin IMVV ‚Äî Section 3 ‚Äî Chapitre 2 ‚Äî M√©mo√Øsation et Lazy loading, les techniques du fain√©ant ultime ","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/optimisation/optimisation/","summary":"\u003cp\u003ePr√©c√©demment, on a vu qu\u0026rsquo;en rajoutant des serveurs, on pouvait servir plus de familles. Dans cette section on verra diff√©rents tips permettant d\u0026rsquo;optimiser un programme existant et la vie r√©elle.\u003c/p\u003e\n\u003ch1 id=\"chapitres\"\u003eChapitres\u003c/h1\u003e\n\n\n\u003cul\u003e\n  \n\t\t\n\t\n\t\t\n    \t\n      \t\u003cli\u003e\u003ca href=\"/blog.dev/posts/miroir-informatique-vraie-vie/optimisation/memoire/\"\u003eIMVV ‚Äî Section 3 ‚Äî Chapitre 1 ‚Äî La m√©moire, ou comment √©viter les p√©nuries dans un magasin\u003c/a\u003e\u003c/li\u003e\n    \t\n  \t\n\t\n\t\t\n    \t\n      \t\u003cli\u003e\u003ca href=\"/blog.dev/posts/miroir-informatique-vraie-vie/optimisation/memoisation/\"\u003eIMVV ‚Äî Section 3 ‚Äî Chapitre 2 ‚Äî M√©mo√Øsation et Lazy loading, les techniques du fain√©ant ultime\u003c/a\u003e\u003c/li\u003e\n    \t\n  \t\n\t\n\u003c/ul\u003e","title":"IMMV ‚Äî Section 3 ‚Äî L'optimisation : comment se faire passer pour un coach de vie"},{"content":"Dans cette section, nous verrons comment les actions sont ex√©cut√©es, par les ordinateurs et par les personnes. Et on verra quelques pistes pour r√©pondre √† une accumulation de t√¢ches.\nChapitres IMMV ‚Äî Section 2 ‚Äî Chapitre 1 ‚Äî Synchrone et Asynchrone, ou comment r√©agir au changement IMMV ‚Äî Section 2 ‚Äî Chapitre 2 ‚Äî Monothread, Multithread, Parall√©lisme et Concurrence, je ne peux pas tout faire en m√™me temps ! ","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/l-execution/l-execution/","summary":"\u003cp\u003eDans cette section, nous verrons comment les actions sont ex√©cut√©es, par les ordinateurs et par les personnes. Et on verra quelques pistes pour r√©pondre √† une accumulation de t√¢ches.\u003c/p\u003e\n\u003ch1 id=\"chapitres\"\u003eChapitres\u003c/h1\u003e\n\n\n\u003cul\u003e\n  \n\t\t\n\t\n\t\t\n    \t\n      \t\u003cli\u003e\u003ca href=\"/blog.dev/posts/miroir-informatique-vraie-vie/l-execution/sync-async/\"\u003eIMMV ‚Äî Section 2 ‚Äî Chapitre 1 ‚Äî Synchrone et Asynchrone, ou comment r√©agir au changement\u003c/a\u003e\u003c/li\u003e\n    \t\n  \t\n\t\n\t\t\n    \t\n      \t\u003cli\u003e\u003ca href=\"/blog.dev/posts/miroir-informatique-vraie-vie/l-execution/threads/\"\u003eIMMV ‚Äî Section 2 ‚Äî Chapitre 2 ‚Äî Monothread, Multithread, Parall√©lisme et Concurrence, je ne peux pas tout faire en m√™me temps !\u003c/a\u003e\u003c/li\u003e\n    \t\n  \t\n\t\n\u003c/ul\u003e","title":"IMMV ‚Äî Section 2 ‚Äî L'ex√©cution : comment faire des actions ?"},{"content":"Dans cette section, nous verrons les bases permettant de stocker et manipuler des donn√©es.\nChapitres IMVV ‚Äî Section 1 ‚Äî Chapitre 1 ‚Äî File ou Pile ? L\u0026#39;art de passer avant les autres IMVV ‚Äî Section 1 ‚Äî Chapitre 2 ‚Äî Autres structures de donn√©es, j\u0026#39;organise mon bordel IMVV ‚Äî Section 1 ‚Äî Chapitre 3 ‚Äî Structures de contr√¥le et algorithme, apprendre √† r√©fl√©chir ","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/les-bases/les-bases/","summary":"\u003cp\u003eDans cette section, nous verrons les bases permettant de stocker et manipuler des donn√©es.\u003c/p\u003e\n\u003ch1 id=\"chapitres\"\u003eChapitres\u003c/h1\u003e\n\n\n\u003cul\u003e\n  \n\t\t\n\t\n\t\t\n    \t\n      \t\u003cli\u003e\u003ca href=\"/blog.dev/posts/miroir-informatique-vraie-vie/les-bases/file-et-pile/\"\u003eIMVV ‚Äî Section 1 ‚Äî Chapitre 1 ‚Äî File ou Pile ? L\u0026#39;art de passer avant les autres\u003c/a\u003e\u003c/li\u003e\n    \t\n  \t\n\t\n\t\t\n    \t\n      \t\u003cli\u003e\u003ca href=\"/blog.dev/posts/miroir-informatique-vraie-vie/les-bases/structures-de-donnees/\"\u003eIMVV ‚Äî Section 1 ‚Äî Chapitre 2 ‚Äî Autres structures de donn√©es, j\u0026#39;organise mon bordel\u003c/a\u003e\u003c/li\u003e\n    \t\n  \t\n\t\n\t\t\n    \t\n      \t\u003cli\u003e\u003ca href=\"/blog.dev/posts/miroir-informatique-vraie-vie/les-bases/structures-de-controle/\"\u003eIMVV ‚Äî Section 1 ‚Äî Chapitre 3 ‚Äî Structures de contr√¥le et algorithme, apprendre √† r√©fl√©chir\u003c/a\u003e\u003c/li\u003e\n    \t\n  \t\n\t\n\u003c/ul\u003e","title":"IMMV ‚Äî Section 1 ‚Äî Les bases : structures et contr√¥le"},{"content":"\u0026lsquo;Ia ora na,\nL\u0026rsquo;informatique semble souvent obscure pour beaucoup. Quand je dis que je suis ing√©nieur informatique, on me demande r√©guli√®rement : ¬´ Mais tu fais quoi exactement ? ¬ª.\nAvec le temps, j‚Äôai pris l‚Äôhabitude de vulgariser mon m√©tier. Et ce qui fonctionne le mieux, ce sont les exemples concrets tir√©s de la vie quotidienne.\nEn √©cole d\u0026rsquo;ing√©nieur, j\u0026rsquo;apprenais beaucoup plus facilement l\u0026rsquo;informatique en partant de situations r√©elles. √Ä travers cette s√©rie d‚Äôarticles, \u0026ldquo;L‚Äôinformatique, un miroir de la vraie vie\u0026rdquo; (abr√©g√© IMVV), je vais tenter d‚Äôexpliquer des concepts informatiques en m‚Äôappuyant sur des sc√®nes famili√®res du quotidien, sur un ton l√©ger. Parce que finalement, coder un programme ou g√©rer une file d‚Äôattente au magasin, ce n‚Äôest pas si diff√©rent.\nInformations de lecture Avant de lire les articles list√©s en bas de cette page, quelques informations pour vous faciliter la lecture :\nIl y a un mode sombre et un mode clair : En haut de chaque page se trouve une ic√¥ne pour interchanger entre les modes de lecture sombre et clair\nJ\u0026rsquo;utiliserai des apart√©s pour les d√©veloppeurs,\nInstant Dev Ceci est un apart√© pour les d√©veloppeurs, si tu es non d√©veloppeur tu peux lire, mais tu auras peut-√™tre mal √† la t√™te. J\u0026rsquo;utiliserai des interjections de lecteur, J\u0026rsquo;interviens comme si j\u0026rsquo;√©tais toi, lecteur, pour aider l\u0026rsquo;auteur de ce blog √† rendre ces articles dynamiques\nCette s√©rie d\u0026rsquo;articles n\u0026rsquo;est pas un cours d\u0026rsquo;informatique, vous n\u0026rsquo;apprendrez pas √† d√©velopper juste en suivant ces articles. Mot de fin Que tu sois curieux, d√©butant ou simplement en qu√™te de sens dans ce monde num√©rique, cette s√©rie pourrait bien t‚Äôapporter quelque chose.\nTu y trouveras peut-√™tre :\nune meilleure compr√©hension des bases de l‚Äôinformatique, des id√©es pour analyser ou optimiser les situations du quotidien, ou m√™me, qui sait, l‚Äôenvie de plonger plus loin dans ce domaine‚Ä¶ jusqu‚Äô√† en faire ton m√©tier. Bien s√ªr, cette s√©rie n‚Äôexplorera qu‚Äôune infime partie de ce vaste domaine qu‚Äôest l‚Äôinformatique. Apr√®s tout, peut-on vraiment expliquer enti√®rement l\u0026rsquo;informatique\u0026hellip; un domaine qui, justement, est le miroir de la vie* ?\n*: cette analogie est √† prendre avec recul : l‚Äôinformatique ne refl√®te pas toute la complexit√© de la vie.\nLes articles de la s√©rie (En cours de r√©daction) IMMV ‚Äî Section 1 ‚Äî Les bases : structures et contr√¥le IMMV ‚Äî Section 1 ‚Äî Les bases : structures et contr√¥le IMVV ‚Äî Section 1 ‚Äî Chapitre 1 ‚Äî File ou Pile ? L\u0026#39;art de passer avant les autres IMVV ‚Äî Section 1 ‚Äî Chapitre 2 ‚Äî Autres structures de donn√©es, j\u0026#39;organise mon bordel IMVV ‚Äî Section 1 ‚Äî Chapitre 3 ‚Äî Structures de contr√¥le et algorithme, apprendre √† r√©fl√©chir IMMV ‚Äî Section 2 ‚Äî L\u0026#39;ex√©cution : comment faire des actions ? IMMV ‚Äî Section 2 ‚Äî L\u0026#39;ex√©cution : comment faire des actions ? IMMV ‚Äî Section 2 ‚Äî Chapitre 1 ‚Äî Synchrone et Asynchrone, ou comment r√©agir au changement IMMV ‚Äî Section 2 ‚Äî Chapitre 2 ‚Äî Monothread, Multithread, Parall√©lisme et Concurrence, je ne peux pas tout faire en m√™me temps ! IMMV ‚Äî Section 3 ‚Äî L\u0026#39;optimisation : comment se faire passer pour un coach de vie IMMV ‚Äî Section 3 ‚Äî L\u0026#39;optimisation : comment se faire passer pour un coach de vie IMVV ‚Äî Section 3 ‚Äî Chapitre 1 ‚Äî La m√©moire, ou comment √©viter les p√©nuries dans un magasin IMVV ‚Äî Section 3 ‚Äî Chapitre 2 ‚Äî M√©mo√Øsation et Lazy loading, les techniques du fain√©ant ultime ","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/introduction/","summary":"\u003cp\u003e\u0026lsquo;Ia ora na,\u003c/p\u003e\n\u003cp\u003eL\u0026rsquo;informatique semble souvent obscure pour beaucoup. Quand je dis que je suis ing√©nieur informatique, on me demande r√©guli√®rement : ¬´ Mais tu fais quoi exactement ? ¬ª.\u003c/p\u003e\n\u003cp\u003eAvec le temps, j‚Äôai pris l‚Äôhabitude de vulgariser mon m√©tier. Et ce qui fonctionne le mieux, ce sont les exemples concrets tir√©s de la vie quotidienne.\u003c/p\u003e\n\u003cp\u003eEn √©cole d\u0026rsquo;ing√©nieur, j\u0026rsquo;apprenais beaucoup plus facilement l\u0026rsquo;informatique en partant de situations r√©elles.\n√Ä travers cette s√©rie d‚Äôarticles, \u003cstrong\u003e\u0026ldquo;L‚Äôinformatique, un miroir de la vraie vie\u0026rdquo;\u003c/strong\u003e (abr√©g√© \u003cem\u003eIMVV\u003c/em\u003e), je vais tenter d‚Äôexpliquer des concepts informatiques en m‚Äôappuyant sur des sc√®nes famili√®res du quotidien, sur un ton l√©ger.\nParce que finalement, coder un programme ou g√©rer une file d‚Äôattente au magasin, ce n‚Äôest pas si diff√©rent.\u003c/p\u003e","title":"IMMV - Introduction - L'informatique, un miroir de la vraie vie"},{"content":"Introduction Cet article est un aper√ßu tr√®s rapide des moyens de paiement en Polyn√©sie Fran√ßaise.\nUpdate (12/05/2022): suite √† quelques feedback, je me rend compte que cet article est √† destination des d√©veloppeurs de site de e-shopping, des commer√ßants, de mes confr√®res mon√©ticiens. Cet article sera complexe √† lire si vous n\u0026rsquo;avez jamais travaill√© avec un TPE, avec une plateforme de paiement, avec des cartes bancaires.\nDisclaimer: Au moment o√π j\u0026rsquo;√©cris cet article, je travaille √† l\u0026rsquo;Oc√©anienne des Services Bancaires (OSB), Ces articles ne sont pas sponsoris√©s par OSB, et j\u0026rsquo;encourage les gens √† faire des tutoriels pour les solutions des autres fournisseurs de solutions de paiement.\nLes diff√©rents types de carte En Polyn√©sie Fran√ßaise, il est possible de payer avec plusieurs types de cartes.\nCarte Bancaire (anciennement Carte Bleue, co-brand√©es ou non de Visa ou Mastercard), American Express (AMEX), Cartes privatives (Socredo Verte / Gold, Banque de Polyn√©sie Hoa, CCP de Fare Rata, Carte Tiare de la Banque de Tahiti), Union Pay International (UPI), Discover, Japan Credit Bureau (JCB) Les 3 derniers types de cartes sont surtout utilis√©s par les touristes.\nLes cartes privatives composent la majorit√© des cartes d√©tenues par les habitants de la Polyn√©sie Fran√ßaise.\nPourquoi autant de personnes ont une carte privative ? Les cartes privatives sont propos√©es par les diff√©rentes banques locales (√† l\u0026rsquo;exception d\u0026rsquo;OFINA qui √©met exclusivement les cartes AMEX). Il s\u0026rsquo;agit des banques Socredo, Banque de Tahiti, Banque de Polyn√©sie, et Fare Rata.\nLes cartes privatives sont soumises √† des r√©glementations et des frais moins co√ªteux que les cartes internationales.\nEn outre, elles sont uniquement r√©gul√©es par les banques locales contrairement aux cartes bancaires internationales, qui sont non seulement r√©gul√©es par les banques locales, mais aussi par les r√©seaux internationaux (CB, Visa, Mastercard, Union Pay, etc.).\nC\u0026rsquo;est en partie √† cause de ces r√©glementations et frais moins co√ªteux que les clients des banques doivent remplir moins de conditions pour avoir une carte privative. C\u0026rsquo;est pour cela que les cartes privatives sont plus r√©pandues sur le territoire.\nNotes:\nLes r√©seaux peuvent d√©cider d\u0026rsquo;appliquer des amendes voire de d√©sactiver le flux vers un acteur mon√©taire (banque, processeur de paiement, etc.) si celui-ci ne respecte pas la r√©glementation. Cette r√©glementation est mise √† jour r√©guli√®rement.\nPour les cartes privatives, ce sont les banques locales qui imposent leur r√©glementation, par abus de langage, on parle aussi de r√©seau privatif pour d√©signer l\u0026rsquo;ensemble de ces banques.\nCes r√©glementations sont suivies par les banques centrales des pays, par exemple l\u0026rsquo;IEOM en Polyn√©sie Fran√ßaise.\nJ\u0026rsquo;ai inclus la carte Tiare de la Banque de Tahiti dans les cartes privatives car elle a les m√™mes limitations g√©ographiques que celles-ci, et elle fonctionne aussi en m√©tropole, mais il s\u0026rsquo;agit bien d\u0026rsquo;une CB, donc elle est soumise aux r√©glementations CB.\nLes cartes Socredo privatives sont maintenant co-brand√©es UPI, mais il y a bien 2 applications dans la carte, sur le territoire, c\u0026rsquo;est l\u0026rsquo;application privative qui est utilis√©e, √† l\u0026rsquo;international, c\u0026rsquo;est l\u0026rsquo;application UPI qui est utilis√©e.\nFonctionnement des transactions Le sch√©ma √† 4 coins est l\u0026rsquo;un des sch√©mas de r√©f√©rence de la mon√©tique. Il explique les entit√©s qui entrent en jeu dans une transaction.\nLa banque √©mettrice √©met la carte et la fournit au porteur.\nLa banque acqu√©reuse fournit un contrat accepteur au commer√ßant, afin que celui-ci puisse encaisser les paiements avec les cartes, moyennant une commission, en plus des services annexes autour de l\u0026rsquo;encaissement (exemple: relev√© TPE). Les TPE et solutions de paiement en ligne sont des services d\u0026rsquo;encaissement.\nUn syst√®me d\u0026rsquo;acceptation est un logiciel ou un ensemble de logiciels, qui permet d\u0026rsquo;encaisser une carte bancaire, par exemple les TPE et les plateformes de paiement en ligne.\nIl existe 2 modes de fonctionnement pour le d√©roulement d\u0026rsquo;un paiement:\nle mode single message le mode dual message Lorsque vous payez avec votre carte, vous r√©alisez une transaction. Si toutes les r√®gles de gestion sont valid√©es, la transaction est autoris√©e.\nEn single message, la transaction autoris√©e est directement transform√©e en mouvement financier, i.e. un enregistrement est cr√©√© chez la banque acqu√©reuse qui dit \u0026ldquo;M. Client doit 1000 XPF √† M. Commer√ßant\u0026rdquo;.\nEn dual message, la transaction est enregistr√©e sur le TPE, ou sur la plateforme de paiement, puis, tous les jours √† une certaine heure, l\u0026rsquo;ensemble des transactions de la journ√©e sont envoy√©es √† la banque acqu√©reuse sous forme de mouvement financier.\nEn Polyn√©sie Fran√ßaise, le mode dual message est le plus r√©pandu, c\u0026rsquo;est d\u0026rsquo;ailleurs pour √ßa que l\u0026rsquo;on vous demande de ne pas d√©brancher votre TPE, votre internet, votre r√©seau √©lectrique.\nLes cartes et les syst√®mes d\u0026rsquo;acceptation Pour qu\u0026rsquo;un syst√®me d\u0026rsquo;acceptation puisse encaisser une carte, elle doit reconna√Ætre la carte.\nPour reconna√Ætre une carte, on utilise le BIN, qui sont les N premiers chiffres du num√©ro de la carte, N √©tant d√©fini par le r√©seau.\nDe plus, seule une application sp√©cifique √† ce r√©seau peut reconna√Ætre cette carte. Par exemple, pour une transaction avec une carte AMEX sur un TPE, c\u0026rsquo;est uniquement une application TPE AMEX qui pourra la reconna√Ætre, mais seulement si la carte fait partie d\u0026rsquo;une plage de BIN accept√©e par l\u0026rsquo;application.\nNote: Dans un TPE, il peut y avoir plusieurs applications, quand une carte est ins√©r√©e, le TPE demande √† chaque application \u0026ldquo;Peux-tu accepter cette carte?\u0026rdquo;.\nDe la m√™me mani√®re, pour une plateforme de paiement en ligne, celle-ci ne pourra accepter que des cartes qui font partie de ses plages de BIN d√©clar√©es.\nZoom sur le paiement en ligne en Polyn√©sie Fran√ßaise Comme √©nonc√© pr√©c√©demment, les cartes privatives sont majoritaires en Polyn√©sie Fran√ßaise, et elles ne sont pas reconnues √† l\u0026rsquo;√©tranger (sauf pour les cartes Socredo co-brand√©es UPI, comme cit√© pr√©c√©demment) car les BIN privatifs ne sont pas d√©clar√©s dans le monde.\nC\u0026rsquo;est pour cela qu\u0026rsquo;on ne peut pas payer avec une carte privative sur la plupart des plateformes de paiement en ligne (Paypal, Stripe, etc.), qui sont internationales.\nPour rem√©dier √† ce probl√®me, OSB propose Payzen, et la Banque de Tahiti propose SystemPay.\n√Ä mon avis, √† l\u0026rsquo;heure actuelle, c\u0026rsquo;est vers ces solutions que je conseille les commer√ßants d\u0026rsquo;aller, car il serait dommage de se priver des cartes privatives, alors qu\u0026rsquo;elles sont plus nombreuses.\nNotes:\nLes 2 solutions sont en r√©alit√© bas√©es sur les solutions Payzen et SystemPay de Lyra, soci√©t√© situ√©e en France. Certains d\u0026rsquo;entre vous ont d\u0026rsquo;ailleurs peut-√™tre d√©j√† √©t√© confus en recherchant de la documentation technique de ces solutions et se sont perdus entre:\nla documentation Payzen d\u0026rsquo;OSB, la documentation Payzen de Lyra, la documentation SystemPay de la Banque de Tahiti, la documentation SystemPay de Lyra. Je vous conseille de vous focaliser sur les documentations locales, et ensuite de compl√©ter avec les documentations de Lyra.\nConclusion Il existe plusieurs types de cartes.\nLes protocoles de paiement s\u0026rsquo;inscrivent dans un sch√©ma √† 4 coins, il y a plusieurs acteurs qui entrent en jeu.\nIl y a une r√©glementation g√©n√©rale qui englobe tous les types de cartes, et chaque type a √©galement sa r√©glementation sp√©cifique. Les banques sont soumises √† ces r√©glementations, l\u0026rsquo;IEOM et les r√©seaux (VISA, Mastercard, AMEX, etc.) veillent √† ce que les banques respectent ces r√©glementations.\nLa g√©ographie et les accords entre les acteurs sont importants pour comprendre les contraintes des syst√®mes de paiement locaux.\nEn Polyn√©sie Fran√ßaise, la majorit√© des cartes bancaires sont des cartes privatives, pour des raisons √©conomiques et r√©glementaires.\n","permalink":"http://localhost:1313/blog.dev/posts/intro-moyens-paiement/","summary":"\u003ch1 id=\"introduction\"\u003eIntroduction\u003c/h1\u003e\n\u003cp\u003eCet article est un aper√ßu tr√®s rapide des moyens de paiement en Polyn√©sie Fran√ßaise.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eUpdate (12/05/2022): suite √† quelques feedback, je me rend compte que cet article est √† destination des d√©veloppeurs de site de e-shopping, des commer√ßants, de mes confr√®res mon√©ticiens. Cet article sera complexe √† lire si vous n\u0026rsquo;avez jamais travaill√© avec un TPE, avec une plateforme de paiement, avec des cartes bancaires.\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e\u003cstrong\u003eDisclaimer\u003c/strong\u003e: Au moment o√π j\u0026rsquo;√©cris cet article, je travaille √† l\u0026rsquo;Oc√©anienne des Services Bancaires (OSB), Ces articles ne sont pas sponsoris√©s par OSB, et j\u0026rsquo;encourage les gens √† faire des tutoriels pour les solutions des autres fournisseurs de solutions de paiement.\u003c/p\u003e","title":"Introduction aux moyens de paiement en Polyn√©sie Fran√ßaise"},{"content":"Ia\u0026rsquo;orana, bonjour !\nCe post marque le d√©but du blog h√©berg√© sur Github.\nVous trouverez ici de temps en temps des articles de d√©veloppement et des POCs.\nBonne lecture !\n","permalink":"http://localhost:1313/blog.dev/posts/hello-world/","summary":"\u003cp\u003eIa\u0026rsquo;orana, bonjour !\u003c/p\u003e\n\u003cp\u003eCe post marque le d√©but du blog h√©berg√© sur Github.\u003c/p\u003e\n\u003cp\u003eVous trouverez ici de temps en temps des articles de d√©veloppement et des POCs.\u003c/p\u003e\n\u003cp\u003eBonne lecture !\u003c/p\u003e","title":"Hello World"},{"content":"La m√©moire est une ressource au m√™me titre que la fourchette dans le pr√©c√©dent article.\nDans un ordinateur, il existe plusieurs types de m√©moire que les programmes vont pouvoir utiliser en fonction de la mani√®re dont ils veulent traiter les donn√©es.\nIl faut voir la m√©moire comme un endroit o√π on entrepose des donn√©es.\nPour cet article on va parler d\u0026rsquo;un magasin, mais √ßa marche aussi avec un restaurant.\nLa m√©moire cache ‚Äî l\u0026rsquo;armoire r√©frig√©r√©e La m√©moire cache est le stockage le plus rapide qu\u0026rsquo;un programme peut utiliser. Pour un magasin, il s\u0026rsquo;agit des √©tag√®res et des armoires r√©frig√©r√©es qui forment les rayons.\nLes clients (les threads du programme) ont rapidement acc√®s aux viandes qui sont dans les armoires r√©frig√©r√©es, ils n\u0026rsquo;ont qu\u0026rsquo;√† tendre la main. Par contre, on ne peut pas stocker une grande quantit√© de viande dans ces armoires, pour l\u0026rsquo;exemple on va dire une dizaine au maximum.\nSur un ordinateur, cette m√©moire cache se trouve directement dans le processeur sous les noms cache L3, cache L2 et cache L1. On n\u0026rsquo;ira pas dans le d√©tail ici, mais sachez que plus le nombre est proche de 0, et plus le cache est rapide.\nJe prends l\u0026rsquo;exemple de l\u0026rsquo;armoire r√©frig√©r√©e car il y a un m√©canisme physique important dans un ordinateur: la m√©moire cache peut accueillir des donn√©es uniquement si elle est aliment√©e en √©lectricit√©, en cas de coupure de courant, on perd les donn√©es qui s\u0026rsquo;y trouvent.\nDe la m√™me mani√®re, dans un magasin, en cas de coupure de courant, il faut jeter toute la viande qui se trouve dans les armoires r√©frig√©r√©es*.\n*: Oui c\u0026rsquo;est pas tout √† fait le cas, mais en cas de coupure prolong√©e √ßa l\u0026rsquo;est.\nLa m√©moire vive ‚Äî l\u0026rsquo;arri√®re du magasin Au cours d\u0026rsquo;une journ√©e, le magasin souhaite vendre bien plus que dix viandes, c\u0026rsquo;est bien normal. Pour cela, √† l\u0026rsquo;arri√®re du magasin il y a un stock r√©frig√©r√© qui peut en contenir 1000. Un employ√© viendra remplir les rayons au cours de la journ√©e.\nCette action prend du temps, l\u0026rsquo;employ√© doit :\nAller dans le stock r√©frig√©r√© R√©cup√©rer des viandes Amener les viandes dans le rayon Mettre les viandes dans l\u0026#39;armoire r√©frig√©r√©e Pendant tout ce temps, le client ne peut prendre que les viandes qui sont encore dans l\u0026rsquo;armoire, il faut donc bien faire attention √† ce que l\u0026rsquo;employ√© recharge l\u0026rsquo;armoire quand il reste encore un peu de bo√Ætes.\nDans un ordinateur, la m√©moire vive (RAM en anglais pour Random Access Memory), joue le r√¥le du stock r√©frig√©r√© tr√®s rapide qu\u0026rsquo;un programme peut utiliser, mais beaucoup moins rapide que la m√©moire cache, environ 50x √† 100x moins rapide.\nEt tout comme la m√©moire cache, la RAM peut accueillir des donn√©es uniquement si elle est aliment√©e en √©lectricit√©.\nC\u0026rsquo;est pour √ßa qu\u0026rsquo;on appelle √ßa de la m√©moire vive, elle doit √™tre aliment√©e.\nAttends, mais tu dis que la RAM est tr√®s rapide, mais le processus pour recharger la m√©moire cache est lent ? On ne peut pas juste utiliser une grande quantit√© de m√©moire cache?\nLa m√©moire cache co√ªte tr√®s cher, beaucoup plus que la RAM. L\u0026rsquo;√©tat actuel est donc un compromis entre rapidit√© et co√ªt, un probl√®me typique en ing√©nierie.\nLe stockage ‚Äî la ferme en Nouvelle-Z√©lande Le stockage d\u0026rsquo;un ordinateur est compos√© des diff√©rents disques durs (HDD, SDD, etc.). Il s\u0026rsquo;agit d\u0026rsquo;une m√©moire persistante, c\u0026rsquo;est-√†-dire que m√™me en cas de coupure de courant, les donn√©es restent √©crites dans les disques.\nPour notre magasin, de la viande qui reste utilisable m√™me en cas de coupure\u0026hellip; Eh bien ce sont les boeufs vivants √† la ferme.\nTon analogie est d√©go√ªtante\nOui je sais, j\u0026rsquo;ai pas mieux, d√©sol√©. En m√™me temps, je ne peux pas vous dire que de la viande fra√Æche, qui reste longtemps √† l\u0026rsquo;air libre, est encore utilisable.\nEn plus, il y a plein d\u0026rsquo;√©tapes entre un boeuf vivant et un steak dans l\u0026rsquo;armoire !\nTout √† fait, mais c\u0026rsquo;est la meilleure analogie possible pour te faire comprendre pourquoi, en cas de coupure, si tu n\u0026rsquo;as pas sauvegard√© ton fichier Word depuis longtemps, tu perds tes donn√©es. Tant que tu n\u0026rsquo;as pas sauvegard√©, tes modifications restent dans le cache et la RAM.\nEt pourquoi en Nouvelle-Z√©lande ?\nOh, √ßa c\u0026rsquo;est parce qu\u0026rsquo;aller chercher une donn√©e dans un disque, c\u0026rsquo;est tr√®s lent compar√© √† aller la chercher dans la RAM. Si tu as un disque SSD c\u0026rsquo;est 10x plus lent, si tu as un disque HDD, c\u0026rsquo;est 100x plus lent.\nSi tu joues √† des jeux vid√©o un peu gourmands en ressources, tu as s√ªrement remarqu√© des √©crans de chargement plus ou moins longs. C\u0026rsquo;est surtout parce que le programme r√©cup√®re les donn√©es qui sont sur le disque.\nOptimiser la m√©moire ‚Äî pas besoin d\u0026rsquo;√™tre mentaliste Vous l\u0026rsquo;aurez donc compris, un magasin a diff√©rents types de m√©moire √† sa disposition. La mani√®re dont il orchestre les denr√©es √† travers ces diff√©rents composants lui permet d\u0026rsquo;anticiper les variations de stock, et limiter le risque de p√©nurie.\nLorsqu\u0026rsquo;un d√©veloppeur code un programme, il peut aussi anticiper l\u0026rsquo;utilisation des donn√©es et les charger avant d\u0026rsquo;en avoir besoin.\nDans l\u0026rsquo;exemple du jeu vid√©o, pourquoi est-ce que toutes les donn√©es ne sont pas charg√©es d√®s le d√©but? Moi j\u0026rsquo;en ai marre des √©crans de chargement.\nTout d\u0026rsquo;abord, ce chargement se fait du stockage vers la RAM (puis vers le cache), ensuite, si on chargeait toutes les donn√©es d\u0026rsquo;un coup, il y a de fortes chances pour que ta RAM soit satur√©e.\nA priori, le d√©veloppeur ne sait pas si tu as peu ou beaucoup de RAM disponible, et puis, maintenir deux versions du code, un qui charge toutes les donn√©es, et un qui charge via les √©crans de chargement, c\u0026rsquo;est du travail suppl√©mentaire qui n\u0026rsquo;apporte pas grand chose.\nLes √©crans de chargement sont un compromis : plut√¥t que de risquer de crasher ton ordinateur, le d√©veloppeur a cod√© le programme de sorte √† charger uniquement le contenu qui sera utilis√© dans le niveau, pour tous les niveaux.\nConclusion Dans cet article, on a vu les diff√©rentes m√©moires utilis√©es par les programmes. √Ä l\u0026rsquo;image d\u0026rsquo;un magasin qui √©vite les p√©nuries, un d√©veloppeur doit jongler avec ces m√©moires pour que son programme tourne correctement.\nDans le prochain article, IMVV ‚Äî Section 3 ‚Äî Chapitre 2 ‚Äî M√©mo√Øsation et Lazy loading, les technique du fain√©ant ultime, nous verrons des techniques qui feront de toi un bon fain√©ant.\n‚Üê Retour √† la section\n‚Üê Retour √† l‚Äôintroduction\n","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/optimisation/memoire/","summary":"\u003cp\u003eLa m√©moire est une \u003cstrong\u003eressource\u003c/strong\u003e au m√™me titre que la fourchette dans le \u003ca href=\"../../l-execution/threads/\"\u003epr√©c√©dent article\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eDans un ordinateur, il existe plusieurs types de m√©moire que les programmes vont pouvoir utiliser en fonction de la mani√®re dont ils veulent traiter les donn√©es.\u003c/p\u003e\n\u003cp\u003eIl faut voir la m√©moire comme un endroit o√π on entrepose des donn√©es.\u003c/p\u003e\n\u003cp\u003ePour cet article on va parler d\u0026rsquo;un magasin, mais √ßa marche aussi avec un restaurant.\u003c/p\u003e\n\u003ch2 id=\"la-m√©moire-cache--larmoire-r√©frig√©r√©e\"\u003eLa m√©moire cache ‚Äî l\u0026rsquo;armoire r√©frig√©r√©e\u003c/h2\u003e\n\u003cp\u003eLa \u003cstrong\u003em√©moire cache\u003c/strong\u003e est le stockage \u003cstrong\u003ele plus rapide\u003c/strong\u003e qu\u0026rsquo;un programme peut utiliser. Pour un magasin, il s\u0026rsquo;agit des √©tag√®res et des armoires r√©frig√©r√©es qui forment les rayons.\u003c/p\u003e","title":"IMVV ‚Äî Section 3 ‚Äî Chapitre 1 ‚Äî La m√©moire, ou comment √©viter les p√©nuries dans un magasin"},{"content":"Dans le pr√©c√©dent article, IMVV ‚Äî Section 1 ‚Äî Chapitre 3 ‚Äî Structures de contr√¥le et algorithme, apprendre √† r√©fl√©chir, on a vu les diff√©rentes structures de contr√¥le et les algorithmes.\nMaintenant on va parler de la mani√®re dont on r√©alise un ensemble de t√¢ches ‚Äî c‚Äôest ce qu‚Äôon appelle en informatique un mode d‚Äôex√©cution. C\u0026rsquo;est applicable aussi bien pour un humain que pour un ordinateur.\nN\u0026rsquo;oublie pas que les objectifs de ces articles sont :\nTe donner une meilleure compr√©hension des bases de l‚Äôinformatique, T\u0026rsquo;inspirer pour analyser ou optimiser les situations du quotidien, ou peut-√™tre, qui sait, te donner envie d\u0026rsquo;explorer encore plus loin\u0026hellip; jusqu‚Äô√† en faire ton m√©tier. Programme et application ‚Äî c\u0026rsquo;est quoi la diff√©rence ? Un programme informatique est un ensemble d\u0026rsquo;algorithmes. Le mot application veut dire la m√™me chose.\nC‚Äôest juste que application, √ßa sonne plus moderne, m√™me si ce mot existe depuis longtemps.\nMerci le marketing Apple et son App Store. üòÑ\nSynchrone ‚Äî Avoir un serveur d√©di√© √† sa table, quel luxe Prenons l\u0026rsquo;exemple d\u0026rsquo;un restaurant chic. Dans ce restaurant chic, il y a 2 tables. Chaque table a son serveur attitr√©, celui-ci r√©pond uniquement aux besoins de sa table.\nPour la suite de cet exercice de pens√©e, on va dire qu\u0026rsquo;il y a 2 familles (famille 1, famille 2), 2 tables (table 1, table 2), 1 serveur, 1 chef.\nLa s√©quence d\u0026rsquo;actions que le serveur doit faire, l\u0026rsquo;algorithme est :\nSi une famille arrive: Accueillir la famille Installer la famille sur une table libre Prendre la commande Donner la commande au chef R√©cup√©rer les plats Servir les plats √† la famille Faire payer la famille Fin si La famille 1 arrive au restaurant, le serveur les accueille et les installe √† la table 1. Il reste en attente de leur commande, √† proximit√©*.\nQuand la famille 1 est pr√™te, vu que le serveur est √† c√¥t√©, ils passent commande. Le serveur s\u0026rsquo;en va ensuite en cuisine pour donner la commande au chef. Le serveur attend les plats. Le chef pr√©pare les plats.\nUne fois que les plats sont pr√™ts, il les r√©cup√®re et les sert √† la famille 1. La famille 1 paie et s\u0026rsquo;en va, heureuse de l\u0026rsquo;attention port√©e.\n*: A ce moment, la famille 2 arrive au restaurant, ils ne sont pas accueillis, puisque le serveur est en attente de la commande de la famille 1. Alors la famille 2 repart, agac√©e, ils laisseront un mauvais avis sur internet.\nDans cette configuration, le serveur ex√©cute ses t√¢ches de mani√®re synchrone, cela veut dire qu\u0026rsquo;il ex√©cute l\u0026rsquo;algorithme √©tape par √©tape sans interruption. Si une √©tape n√©cessite d\u0026rsquo;attendre, par exemple quand il doit attendre que la famille choisisse sa commande, alors il attend, on dit que le mode synchrone est bloquant. Le serveur va au bout de son algorithme.\nMais c\u0026rsquo;est nul, il y a une famille qui n\u0026rsquo;a pas √©t√© servie\u0026hellip;\nSi on reste dans le mode d\u0026rsquo;ex√©cution synchrone, le probl√®me est qu\u0026rsquo;il n\u0026rsquo;y a pas assez de serveur. S\u0026rsquo;il y avait autant de serveurs de tables et de chefs, il n\u0026rsquo;y aurait aucun souci. Chaque famille aurait √©t√© ravie d\u0026rsquo;avoir un serveur et un chef d√©di√©. Mais on verrait plut√¥t cette disposition dans les restaurants luxueux, qui peuvent se permettre d\u0026rsquo;avoir 100 tables, 100 serveurs et 100 chefs.\nPar d√©faut, les applications sont synchrones, car √† part le probl√®me de ressources, c‚Äôest bien plus simple de faire une t√¢che apr√®s l‚Äôautre, cependant, de nos jours, de plus en plus de syst√®mes sont asynchrones (exemple: navigateurs, certains serveurs applicatifs √† la mode).\nüìå Exemples dans la vie r√©elle Une personne qui suit une proc√©dure critique Pr√©parer une salade üíª Exemples en informatique Un distributeur de billets Une imprimante partag√©e Asynchrone ‚Äî Un serveur pour les gouverner tous ‚Äî Oui c\u0026rsquo;est une r√©f√©rence au Seigneur des Anneaux üòÑ ‚Äî\nReprenons l\u0026rsquo;exemple du restaurant, toujours avec 2 familles (famille 1, famille 2), 2 tables (table 1, table 2), 1 serveur, 1 chef.\nMais cette fois, on change l\u0026rsquo;algorithme :\nQuand une famille arrive, alors : Le serveur les accueille Il les installe √† une table libre Il leur donne un menu Il passe √† autre chose Fin quand Quand une famille appelle le serveur pour commander, alors : Le serveur prend la commande Il la transmet au chef Il passe √† autre chose Fin quand Quand la sonnette en cuisine retentit (plats pr√™ts), alors : Le serveur r√©cup√®re les plats Le serveur sert les plats √† la bonne table Il passe √† autre chose Fin quand Quand une famille veut payer, alors : Le serveur encaisse Il lib√®re la table Il passe √† autre chose Fin quand Cet algorithme est diff√©rent de ceux qu\u0026rsquo;on a vus jusqu\u0026rsquo;√† pr√©sent.\n\u0026ldquo;Quand \u0026hellip;,\u0026rdquo; marque un √©v√©nement, \u0026ldquo;alors\u0026rdquo; introduit le bloc d\u0026rsquo;instructions √† ex√©cuter en r√©action, et \u0026ldquo;Fin quand\u0026rdquo; marque la fin de ce bloc.\nOn dit alors qu\u0026rsquo;on fait de la programmation √©v√©nementielle (ou programmation r√©active) et que l\u0026rsquo;algorithme est asynchrone : il fait de sorte √† r√©agir aux √©v√©nements ext√©rieurs.\nLorsqu‚Äôun √©v√©nement se produit, le serveur y r√©agit imm√©diatement : il ex√©cute les instructions associ√©es, puis passe √† l‚Äô√©v√©nement suivant s‚Äôil y en a un. Sinon, il attend. Ce mode d\u0026rsquo;ex√©cution est donc non bloquant.\nEt dans les faits, c\u0026rsquo;est ce que fait la plupart des personnes, serveurs ou non. Quand on fait une t√¢che, et qu\u0026rsquo;on est interrompu par un bug, un appel, un coll√®gue de travail qui pose une question, on est en r√©action.\nAvec cet algorithme, un serveur seul pourra tr√®s bien g√©rer 2 tables.\nüìå Exemples dans la vie r√©elle Les serveurs dans la plupart des restaurants Mon chien quand il entend les croquettes üíª Exemples en informatique Les notifications sur ton smartphone Un arrosage automatique avec capteur d\u0026#39;humidit√© Attention : comme en mode synchrone, s\u0026rsquo;il y a trop de table pour un seul serveur, plusieurs √©v√©nements risquent de s\u0026rsquo;accumuler en attente de traitement.\nMais du coup, comment on fait pour r√©soudre ce probl√®me ?\nOn verra √ßa dans le prochain article.\nConclusion Dans cet article, on a vu ce qu\u0026rsquo;√©taient les modes d\u0026rsquo;ex√©cution synchrone et asynchrone.\nSi tu souhaites continuer cette aventure, tu peux regarder la suite ici: IMMV ‚Äî Section 2 ‚Äî Chapitre 2 ‚Äî Monothread et Multithread, je ne peux pas tout faire en m√™me temps !\n‚Üê Retour √† la section\n‚Üê Retour √† l‚Äôintroduction\n","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/l-execution/sync-async/","summary":"\u003cp\u003eDans le pr√©c√©dent article, \u003ca href=\"../../les-bases/structures-de-controle/\"\u003eIMVV ‚Äî Section 1 ‚Äî Chapitre 3 ‚Äî Structures de contr√¥le et algorithme, apprendre √† r√©fl√©chir\u003c/a\u003e, on a vu les diff√©rentes structures de contr√¥le et les algorithmes.\u003c/p\u003e\n\u003cp\u003eMaintenant on va parler de la mani√®re dont on r√©alise un ensemble de t√¢ches ‚Äî c‚Äôest ce qu‚Äôon appelle en informatique un \u003cstrong\u003emode d‚Äôex√©cution\u003c/strong\u003e. C\u0026rsquo;est applicable aussi bien pour un humain que pour un ordinateur.\u003c/p\u003e\n\u003cp\u003eN\u0026rsquo;oublie pas que les objectifs de ces articles sont :\u003c/p\u003e","title":"IMMV ‚Äî Section 2 ‚Äî Chapitre 1 ‚Äî Synchrone et Asynchrone, ou comment r√©agir au changement"},{"content":"Quand tu prends un ticket pour attendre ton tour, que tu fais la queue √† la caisse, que tu prends l‚Äôassiette du haut de la pile pour mettre la table, ou que tu cliques sur le bouton \u0026lsquo;Retour\u0026rsquo; (‚Üê) du navigateur internet‚Ä¶ Tu manipules sans le savoir des concepts appell√©s en informatique des structures de donn√©es, et les algorithmes associ√©s qui les font vivre.\nDans cet article, on va mettre un peu de clart√© l√†-dedans : pas besoin de coder pour comprendre, on va illustrer tout √ßa avec des situations de la vie courante.\nD√©finitions Avant d‚Äôaller plus loin, quelques d√©finitions simples, histoire de parler le m√™me langage :\nDonn√©e : une donn√©e, c‚Äôest une information num√©rique. √áa peut √™tre un num√©ro de passeport, le nombre de dents d‚Äôune personne, la liste des t√¢ches que tu as encore repouss√©es √† demain, ou ton nombre d‚Äôamis sur Facebook. Structure de donn√©es : imagine une bo√Æte, une √©tag√®re ou un sac √† dos, dans lequel tu ranges tes informations d‚Äôune certaine mani√®re pour mieux les retrouver ou les traiter. C‚Äôest la fa√ßon dont on organise les donn√©es. Algorithme : un algorithme, c‚Äôest une suite d‚Äô√©tapes ou d‚Äôinstructions pour manipuler ces donn√©es. Comme une recette de cuisine, ou une proc√©dure √† suivre pour obtenir un r√©sultat. File et pile : deux mani√®res d‚Äôattendre‚Ä¶ ou de repousser Maintenant qu‚Äôon a les bases, voyons deux structures de donn√©es tr√®s simples mais tr√®s puissantes : la file et la pile. On les retrouve partout dans notre quotidien, souvent sans s‚Äôen rendre compte.\nLa file ‚Äî ou comment attendre son tour (FIFO) Imagine une file d‚Äôattente devant un guichet. Le premier arriv√© est le premier servi. C‚Äôest ce qu‚Äôon appelle en informatique une file (ou queue en anglais), avec une logique FIFO : First In, First Out (premier entr√©, premier sorti).\nD√®s que quelqu‚Äôun est servi, c‚Äôest le suivant dans la file qui avance.\nüéØ C‚Äôest une structure √©quitable : chacun attend selon son ordre d‚Äôarriv√©e.\nüìå Exemples dans la vie r√©elle Faire la queue √† la caisse du magasin La liste des courses (si on lit de haut en bas) üíª Exemples en informatique Les syst√®mes de ticket dans les accueils (le num√©ro est g√©n√©r√© par un programme, et les appels suivent cet ordre) Les commentaires sur une publication Facebook (affich√©s du plus ancien au plus r√©cent) La pile ‚Äî ou comment empiler les priorit√©s (LIFO) Maintenant, imagine une pile de livres que tu dois r√©viser pour un examen. Tu prends celui du haut, tu le lis, puis tu prends celui juste en dessous, et ainsi de suite. Tu lis dans l‚Äôordre inverse de celui dans lequel tu as empil√© les livres. Tu viens de d√©piler ta pile, toujours en commen√ßant par le haut.\nC‚Äôest exactement le principe de la pile (ou stack en anglais), qui suit la logique LIFO : Last In, First Out (dernier entr√©, premier sorti).\nTu vas peut-√™tre me dire :\nOui mais je peux aussi prendre le livre du bas, non‚ÄØ?\nC‚Äôest vrai. Alors prenons un autre exemple, un peu plus r√©aliste :\nImagine que tu tombes sur un article de journal qui parle des nodules polym√©talliques dans les fonds marins de la Polyn√©sie fran√ßaise. Tu n‚Äôy connais pas grand-chose, mais √ßa t‚Äôintrigue. Tu lis l‚Äôarticle, puis tu ouvres une page Wikip√©dia pour comprendre ce qu‚Äôest un nodule polym√©tallique. Sur cette page, tu vois un lien vers les m√©taux rares, puis vers la transition √©nerg√©tique, puis‚Ä¶ tu vois o√π je veux en venir.\nEn lisant ce premier article, tu ne soup√ßonnais pas toute la pile d‚Äôinformations que tu allais explorer. Et tu viens de d√©piler ce savoir, en commen√ßant par la derni√®re page ouverte.\nüéØ Ce n‚Äôest pas une structure √©quitable : ce qui arrive en dernier est trait√© en premier. Mais c‚Äôest tr√®s utile pour remonter dans le temps, ou revenir sur ses pas, exactement comme le bouton \u0026ldquo;retour\u0026rdquo; de ton navigateur.\nüìå Exemples dans la vie r√©elle Les cartons dans un coffre bien rempli Les diff√©rentes strates de terre quand tu creuses dans ton jardin (c\u0026#39;est de la terre empil√©e au cours du temps) üíª Exemples en informatique Le bouton \u0026#39;Retour\u0026#39; (‚Üê) de ton navigateur Les annulations successives (Undo, CTRL\u0026#43;Z) dans un √©diteur de texte Si tu veux conna√Ætre d\u0026rsquo;autres structures de donn√©es, tu peux regarder le prochain article : IMVV ‚Äî Section 1 ‚Äî Chapitre 2 ‚Äî Autres structures de donn√©es, j\u0026rsquo;organise mon bordel\n‚Üê Retour √† la section\n‚Üê Retour √† l‚Äôintroduction\n","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/les-bases/file-et-pile/","summary":"\u003cp\u003eQuand tu prends un ticket pour attendre ton tour, que tu fais la queue √† la caisse, que tu prends l‚Äôassiette du haut de la pile pour mettre la table, ou que tu cliques sur le bouton \u0026lsquo;Retour\u0026rsquo; (‚Üê) du navigateur internet‚Ä¶\nTu manipules sans le savoir des concepts appell√©s en informatique \u003cstrong\u003edes structures de donn√©es\u003c/strong\u003e, et \u003cstrong\u003eles algorithmes\u003c/strong\u003e associ√©s qui les font vivre.\u003c/p\u003e\n\u003cp\u003eDans cet article, on va mettre un peu de clart√© l√†-dedans : pas besoin de coder pour comprendre, on va illustrer tout √ßa avec des situations de la vie courante.\u003c/p\u003e","title":"IMVV ‚Äî Section 1 ‚Äî Chapitre 1 ‚Äî File ou Pile ? L'art de passer avant les autres"},{"content":"√ätre fiu est un art, une vertu. Non, ce n\u0026rsquo;est pas une blague. Tu ne me crois pas ?\n\u0026ldquo;We will encourage you to develop the three great virtues of a programmer: laziness, impatience, and hubris.\u0026rdquo; ‚Äî Larry Wall, Programming perl (1991).\n\u0026ldquo;I choose a lazy person to do a hard job. Because a lazy person will find an easy way to do it.\u0026rdquo; ‚Äî Bill Gates.\nProgrammer une machine pour qu\u0026rsquo;elle fasse le travail √† ta place, c\u0026rsquo;est de la fain√©antise.\nEt les d√©veloppeurs sont des personnes qui ont atteint l\u0026rsquo;apog√©e du fiu. Apr√®s tout, qui passe 2 heures √† automatiser une t√¢che qui prend 2 minutes par jour, √† part quelqu\u0026rsquo;un de vraiment fiu ?\nDans cet article, on verra deux techniques que les d√©veloppeurs utilisent, mais que toi aussi tu utilises sans le savoir.\nM√©mo√Øsation ‚Äî ou comment garder une information dans un coin de la t√™te Supposons que tu sois responsable de la paie dans une petite entreprise. Pour ce mois-ci, tu dois calculer les salaires √† verser √† 2 employ√©s.\nTu sais que tous les deux ont un salaire brut de 200 000 XPF. De plus, ils ont fait un excellent travail, ton patron t\u0026rsquo;a dit de leur rajouter une prime de 50% de leur salaire brut. Enfin, l\u0026rsquo;un d\u0026rsquo;eux a fait des heures suppl√©mentaires, il faut donc lui rajouter 20 000 XPF brut sur sa paie.\nPour le 1er salari√©, tu pars de 200 000, tu rajoutes 50%, soit 100 000, ce qui lui fera 300 000 XPF brut pour ce mois.\nPour le 2√®me salari√©, tu sais que le d√©but du calcul est le m√™me, alors tu r√©utilises le nombre 300 000, et tu rajoutes 20 000 d\u0026rsquo;heures suppl√©mentaires, donc 320 000 bruts.\nMais tu t‚Äôes souvenu que le calcul 200 000 + 50 % avait d√©j√† √©t√© fait, donc tu as directement repris le r√©sultat. Ce que tu viens de faire, c\u0026rsquo;est de la m√©mo√Øsation (memoization en anglais).\nC‚Äôest exactement ce que fait ton navigateur web quand il te propose un r√©sultat de recherche d√©j√† visit√©, ou qu‚Äôun site charge plus vite la 2·µâ fois.\nInstant Dev En informatique, on utilise un tableau ou un tableau associatif pour stocker les r√©sultats interm√©diares, ces structures sont stock√©es dans la RAM. De cette fa√ßon, on peut rapidement r√©cup√©rer le r√©sultat qui nous int√©resse. Attention : En informatique, comme dans la vraie vie, garder des informations de c√¥t√© peut conduire √† une saturation de la m√©moire. C\u0026rsquo;est un des facteurs de burn-out. M√©nagez votre cerveau, il n\u0026rsquo;y a pas de mal √† noter les choses, de plus, vous aurez moins de risque d\u0026rsquo;oublier des informations importantes.\nEager loading et Lazy loading ‚Äî l\u0026rsquo;art d\u0026rsquo;√™tre pr√©par√© √† toute √©ventualit√© Supposons que tu aies invit√© tes amis √† manger √† la maison ce soir. Tu as invit√© 10 personnes, mais tu sais que 5 vont vraiment venir, les autres t\u0026rsquo;ont dit \u0026ldquo;peut-√™tre\u0026rdquo;.\nPour √©viter d\u0026rsquo;√™tre √† court de nourriture, tu as pr√©par√© pour 10 personnes, au pire, ceux qui sont venus repartiront avec quelques plats, et tu termineras le reste durant la semaine.\nLes premiers invit√©s vont arriver, tu n\u0026rsquo;as pas encore pr√©par√© la table. Tu as 2 solutions :\nTout pr√©parer d\u0026rsquo;avance : sortir toutes les assiettes, les verres, les chaises, les couverts, etc. (solution eager loading : tu charges tout d√®s le d√©but).\nAttendre de voir qui arrive : d√®s qu‚Äôun invit√© entre, tu sors une assiette, un verre, une chaise, etc. (solution lazy loading : tu ne charges que ce qui est n√©cessaire, au moment o√π c‚Äôest n√©cessaire).\nMais tu peux aussi exiger des invit√©s qu\u0026rsquo;ils te disent, la veille au plus tard, si oui ou non ils viennent !\nOui, et que se passe-t-il si l\u0026rsquo;un d\u0026rsquo;eux a un emp√™chement ? En mettant tous les couverts, tu as d√©pens√© de l\u0026rsquo;√©nergie pour mettre son couvert, et tu en as re-d√©pens√© pour le ranger. Ce n\u0026rsquo;est pas tr√®s optimis√©.\nSi tous les invit√©s arrivent, tu auras fait plusieurs allers-retours pour mettre les couverts, ce n\u0026rsquo;est pas tr√®s optimis√© non plus\u0026hellip;\nAh, tu mets le doigt sur un point important : les techniques d\u0026rsquo;optimisation doivent √™tre utilis√©es uniquement si on est s√ªr de leur utilit√©.\n\u0026ldquo;Premature optimization is the root of all evil\u0026rdquo; ‚Äî Sir Tony Hoare et Donald Knuth.\nC\u0026rsquo;est un pi√®ge dans lequel tombent plusieurs d√©veloppeurs juniors. Les √©coles sup√©rieures enseignent diff√©rentes techniques d\u0026rsquo;optimisation, on est conditionn√©s √† d√©tecter un probl√®me et √† appliquer imm√©diatement une solution : c\u0026rsquo;est normal.\nAvec l\u0026rsquo;exp√©rience, on apprend qu\u0026rsquo;on a besoin d\u0026rsquo;optimiser uniquement quand une personne se plaint de lenteurs. Et dans ce cas, on cherche o√π se trouve la source du probl√®me, on mesure.\nOk mais\u0026hellip; √ßa me fait bizarre de ne pas pr√©parer une belle table, c\u0026rsquo;est pas un bon accueil.\nDans ce cas, le eager loading a une vraie plus-value. Tu charges tout d\u0026rsquo;un coup pour l\u0026rsquo;effet waow, pour que les personnes se disent que chez toi, on est bien re√ßu. La principale fonctionnalit√© n\u0026rsquo;est pas d\u0026rsquo;optimiser le fait de mettre la table, mais d\u0026rsquo;impressionner tes convives.\nJe finis cette partie avec un exemple informatique : Facebook ne charge pas toutes les publications d√®s le d√©but, seulement une partie.\nQuand tu commences √† scroller, tu vois ces publications. Si tu te rapproches de la fin, Facebook charge les prochaines publications, on appelle √ßa infinite scroll.\nAinsi, Facebook ne prend pas trop de temps √† se charger au d√©but.\nAttends mais\u0026hellip; Dans l\u0026rsquo;article pr√©c√©dent, on parlait des √©crans de chargement des jeux vid√©os, √ßa y ressemble un peu, non ?\nExactement, les √©crans de chargement sont aussi du lazy loading, et pour rejoindre ce qu\u0026rsquo;on disait sur ces √©crans : le lazy loading √©conomise de la m√©moire.\nEnfin, √† ton avis, comment Facebook sait qu\u0026rsquo;il faut charger la suite des publications ?\nEh bien en fait, l\u0026rsquo;application est r√©active, on peut √©crire son algorithme de chargement comme ceci:\nQuand un certain seuil de scroll est atteint (par exemple, 90% du contenu affich√©), alors: Charge la suite du contenu Passe √† autre chose Fin quand Tu l\u0026rsquo;auras remarqu√©, c\u0026rsquo;est ce qu\u0026rsquo;on a vu dans l\u0026rsquo;article IMMV ‚Äî Section 2 ‚Äî Chapitre 1 ‚Äî Synchrone et Asynchrone, ou comment r√©agir au changement.\nConclusion Dans cet article, on a vu diff√©rents m√©canimes d\u0026rsquo;optimisation.\nPlus important encore, si on se rappelle des pr√©c√©dents articles, on a vu qu\u0026rsquo;en informatique, en plus de combiner les structures de donn√©es et les structures de contr√¥le, on pouvait combiner les concepts d\u0026rsquo;optimisation et de modes d\u0026rsquo;ex√©cution.\nLe prochaine article est en cours de r√©daction, on parlera de complexit√©.\n‚Üê Retour √† la section\n‚Üê Retour √† l‚Äôintroduction\n","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/optimisation/memoisation/","summary":"\u003cp\u003e√ätre \u003cem\u003efiu\u003c/em\u003e est un art, une vertu. \u003cstrong\u003eNon, ce n\u0026rsquo;est pas une blague\u003c/strong\u003e. Tu ne me crois pas ?\u003c/p\u003e\n\u003cp\u003e\u003cem\u003e\u0026ldquo;We will encourage you to develop the three great virtues of a programmer: laziness, impatience, and hubris.\u0026rdquo; ‚Äî Larry Wall, Programming perl (1991)\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003e\u0026ldquo;I choose a lazy person to do a hard job. Because a lazy person will find an easy way to do it.\u0026rdquo; ‚Äî Bill Gates\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eProgrammer une machine pour qu\u0026rsquo;elle fasse le travail √† ta place, c\u0026rsquo;est de la fain√©antise.\u003c/p\u003e","title":"IMVV ‚Äî Section 3 ‚Äî Chapitre 2 ‚Äî M√©mo√Øsation et Lazy loading, les techniques du fain√©ant ultime"},{"content":"Dans le pr√©c√©dent article, IMMV ‚Äî Section 2 ‚Äî Chapitre 1 ‚Äî Synchrone et Asynchrone, ou comment r√©agir au changement, on a vu les diff√©rents modes d\u0026rsquo;ex√©cution.\nOn s\u0026rsquo;√©tait arr√™t√© sur le probl√®me suivant : Comment faire pour r√©pondre √† la mont√©e en charge, √† l\u0026rsquo;accumulation de t√¢ches ?\nEh bien, dans cet article, on va voir comment on r√©sout ce probl√®me, en informatique comme dans la vraie vie : les m√©canismes sont souvent tr√®s proches.\nPour cela on va continuer avec notre exemple de restaurant. Et on va expliciter diff√©rents termes que j\u0026rsquo;avais regroup√©s en parlant d\u0026rsquo;algorithmes et de programmes.\nN\u0026rsquo;oublie pas que les objectifs de ces articles sont :\nTe donner une meilleure compr√©hension des bases de l‚Äôinformatique, T\u0026rsquo;inspirer pour analyser ou optimiser les situations du quotidien, ou peut-√™tre, qui sait, te donner envie d\u0026rsquo;explorer encore plus loin\u0026hellip; jusqu‚Äô√† en faire ton m√©tier. Le programme ‚Äî l\u0026rsquo;id√©e de restaurant En informatique, quand on parle de programme, on parle uniquement d\u0026rsquo;un ensemble d\u0026rsquo;algorithmes, des t√¢ches qui le composent. Il n\u0026rsquo;est pas encore en train d\u0026rsquo;√™tre ex√©cut√©. Par exemple, Facebook est un programme ‚Äî mais tant que tu ne l‚Äôouvres pas, il ne fait rien.\nEh bien, c\u0026rsquo;est pareil pour un restaurant dans la vie de tous les jours, quand je parle du restaurant √† un ami, je n\u0026rsquo;y suis pas physiquement. Je parle juste du concept de restaurant, de l\u0026rsquo;id√©e que je m\u0026rsquo;en fais.\nLe processus - le restaurant ouvert Si je veux parler du restaurant physiquement ouvert, avec les employ√©s qui s\u0026rsquo;activent, en informatique il faut plut√¥t utiliser le terme processus. C\u0026rsquo;est le programme en cours d\u0026rsquo;ex√©cution.\nUn processus poss√®de son propre contexte d\u0026rsquo;ex√©cution, c\u0026rsquo;est un gros mot pour dire qu\u0026rsquo;il a ses propres ressources, et que personne ne peut lui prendre ses ressources.\nEn effet, quand le restaurant est ouvert, les assiettes qu\u0026rsquo;il utilise sont ses propres assiettes, ses propres ressources. Il n\u0026rsquo;y a pas un autre restaurant qui lui prendrait ses assiettes pendant qu\u0026rsquo;il est ouvert, sinon il risque d\u0026rsquo;avoir des assiettes manquantes.\nPour ex√©cuter un algorithme, un processus est compos√© d\u0026rsquo;un thread principal, et il peut avoir d\u0026rsquo;autres thread.\nLe thread ‚Äî la proc√©dure en cours d\u0026rsquo;ex√©cution du serveur Le thread (fil d\u0026rsquo;ex√©cution en fran√ßais) est ce qu‚Äôon appelle la proc√©dure en train de s\u0026rsquo;ex√©cuter. C‚Äôest un peu comme un serveur qui suit activement une fiche d\u0026rsquo;instructions √† un instant donn√©. Attention, ce n\u0026rsquo;est pas le serveur.\nEn informatique, on dit que le thread est l‚Äôunit√© d‚Äôex√©cution, C‚Äôest la plus petite unit√© qu‚Äôun ordinateur puisse piloter pour ex√©cuter du code. il n‚Äôexiste pas d‚Äôunit√© plus petite qu‚Äôun thread pour ex√©cuter une t√¢che.\nMaintenant qu‚Äôon comprend ce qu‚Äôest un thread ‚Äî une proc√©dure en cours d\u0026rsquo;ex√©cution ‚Äî il faut se demander qui ex√©cute cette proc√©dure.\nLe coeur ‚Äî le serveur On y arrive enfin, dans un ordinateur, le composant physique qui ex√©cute un thread s\u0026rsquo;appelle un coeur (core en anglais). Pour notre restaurant, ce core est le serveur. C\u0026rsquo;est lui, physiquement, qui prend les commandes, sert les plats, etc.\nConcurrence, parall√©lisme, multithread et monothread ‚Äî ou comment servir 2 familles en m√™me temps Un serveur ne peut faire qu\u0026rsquo;une seule chose √† la fois, √† un instant donn√© : quand il prend une commande √† l\u0026rsquo;instant T, il ne peut pas, en m√™me temps, servir des plats.\nPar contre, il pourrait s\u0026rsquo;interrompre pendant les t√¢ches, par exemple, au lieu de prendre toutes les commandes de la famille, d\u0026rsquo;un coup, il peut :\nprendre la commande d\u0026rsquo;un 1er plat aller chercher un plat √† servir servir le plat prendre la commande d\u0026rsquo;un 2√®me plat aller chercher un autre plat √† servir servir le plat etc. Attention: ici nous n\u0026rsquo;avons pas d√©coup√© les actions. C\u0026rsquo;est juste que le serveur a jongl√© entre les 2 t√¢ches \u0026ldquo;prendre la commande\u0026rdquo; et \u0026ldquo;servir les plats\u0026rdquo;. On appelle ce comportement la concurrence, car les 2 t√¢ches sont en concurrence pour √™tre termin√©es.\nDans un ordinateur, les threads sont concurrents, et comme √©nonc√© plus haut, √©tant donn√© qu\u0026rsquo;un processus est compos√© d\u0026rsquo;un thread principal, on dit que les processus sont concurrents.\nDans la vraie vie il y a des situations o√π on ne jongle pas avec les t√¢ches, o√π il faut √™tre concentr√© sur une t√¢che\nTout √† fait, et dans ce cas, s\u0026rsquo;il y a trop de t√¢ches pour une seule personne, on fait intervenir une 2√®me personne, une 3√®me etc.\nDans notre restaurant, avec 2 serveurs, pendant que l\u0026rsquo;un prend les commandes de la famille 1, un autre peut servir les plats de la famille 2. On appelle √ßa le parall√©lisme, les proc√©dures/threads sont ex√©cut√©s en parall√®le.\nEnfin, dans un restaurant, si on ne peut avoir qu\u0026rsquo;un seul serveur qui suit activement une fiche d\u0026rsquo;instructions ‚Äî un seul thread ‚Äî, on dit que le restaurant/le programme est monothread. S\u0026rsquo;il y en a plusieurs, on dit que le restaurant/serveur est multithread.\nDu coup, la solution pour le restaurant est d\u0026rsquo;embaucher plus de serveurs ?\nC\u0026rsquo;est l\u0026rsquo;une des solutions, oui, mais ce n\u0026rsquo;est pas la seule. Il y a globalement 2 chemins pour r√©pondre √† une mont√©e en charge. On peut :\noptimiser les algorithmes pour les rendre plus performants et/ou changer le mode d\u0026rsquo;ex√©cution, ou alors on peut mettre plus de coeurs et faire du multithread. De la m√™me mani√®re, dans la vraie vie, on peut :\nmieux former le serveur et/ou optimiser les proc√©dures qu\u0026rsquo;il doit suivre et/ou le motiver pour qu\u0026rsquo;il travaille plus vite, embaucher plus de serveurs. Dans tous les cas, je ne m\u0026rsquo;avancerai pas pour apprendre √† un restaurateur son m√©tier.\nLe partage de ressources ‚Äî ou comment partager une fourchette Dans le restaurant, on va maintenant se mettre du point de vue d\u0026rsquo;un couple, venu manger en t√™te √† t√™te dans une ambiance cosy, tamis√©e, √† l\u0026rsquo;abri des regards.\nLe serveur leur annonce la mauvaise nouvelle: il y a assez de couverts pour 2, sauf pour la fourchette. S\u0026rsquo;ils souhaitent tout de m√™me manger ici, ils devront se partager la fourchette, et interdiction de manger avec les doigts.\nLe couple discute, et finalement ce n\u0026rsquo;est pas un probl√®me, ils sont l√† pour profiter de l\u0026rsquo;instant.\nUne fois la commande pass√©e et les plats servis, Le couple commence √† manger. Mais comment s‚Äôorganisent-ils ?\nBen ils mangent chacun leur tour, ou alors l\u0026rsquo;un mange d\u0026rsquo;abord, et l\u0026rsquo;autre ensuite ?\nBingo, que l\u0026rsquo;un mange d\u0026rsquo;abord, puis l\u0026rsquo;autre, ou qu\u0026rsquo;ils mangent √† tour de r√¥le, dans tous les cas, ils doivent se partager une ressource : la fourchette. Donc l\u0026rsquo;un prend le contr√¥le de la ressource/fourchette, fait des actions avec cette ressource, puis lib√®re la ressource. L\u0026rsquo;autre peut √† son tour prendre le contr√¥le de la ressource, etc.\nDans un ordinateur, c\u0026rsquo;est pareil, dans un processus, les threads doivent se partager les ressources. De m√™me, les processus doivent se partager les ressources.\nC\u0026rsquo;est pour √ßa que sur un ordinateur, quand tu ouvres un document Word partag√© avec tes coll√®gues, parfois tu as un message du genre \u0026ldquo;le fichier est d√©j√† ouvert par\u0026hellip;\u0026rdquo; car le document Word est une fourchette ressource partag√©e entre ton application Word, et celle de ton coll√®gue.\nElle est bizarre ton explication\u0026hellip;\nJe ne vois pas de quoi tu parles.\nQuoiqu\u0026rsquo;il en soit, tu comprends donc qu\u0026rsquo;en rajoutant plus de threads/cores/personnes, on ne va pas forc√©ment plus vite. Ils doivent se synchroniser pour partager les ressources et parfois attendre.\nInstant Dev En informatique, ce partage de ressource s‚Äôappelle une section critique. Pour √©viter que deux t√¢ches utilisent la ressource en m√™me temps, on utilise des verrous (locks). Conclusion Dans cet article, on a vu diff√©rents termes informatiques qui permettent de comprendre un peu plus comment fonctionne un ordinateur, comment on pouvait r√©pondre √† la mont√©e en charge de diff√©rentes mani√®res, et que finalement, c\u0026rsquo;est tr√®s proche de la vie r√©elle.\nNous avons fini cette section \u0026ldquo;IMMV ‚Äî Section 2 ‚Äî L\u0026rsquo;ex√©cution : comment faire des actions ?\u0026rdquo;.\nDans la prochaine section, IMMV ‚Äî Section 3 ‚Äî L\u0026rsquo;optimisation : comment se faire passer pour un coach de vie, on verra comment optimiser des applications et la vie r√©elle.\n‚Üê Retour √† la section\n‚Üê Retour √† l‚Äôintroduction\n","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/l-execution/threads/","summary":"\u003cp\u003eDans le pr√©c√©dent article, \u003ca href=\"../sync-async/\"\u003eIMMV ‚Äî Section 2 ‚Äî Chapitre 1 ‚Äî Synchrone et Asynchrone, ou comment r√©agir au changement\u003c/a\u003e, on a vu les diff√©rents modes d\u0026rsquo;ex√©cution.\u003c/p\u003e\n\u003cp\u003eOn s\u0026rsquo;√©tait arr√™t√© sur le probl√®me suivant : Comment faire pour r√©pondre √† la mont√©e en charge, √† l\u0026rsquo;accumulation de t√¢ches ?\u003c/p\u003e\n\u003cp\u003eEh bien, dans cet article, on va voir comment on r√©sout ce probl√®me, en informatique \u003cstrong\u003ecomme dans la vraie vie\u003c/strong\u003e : les m√©canismes sont souvent tr√®s proches.\u003c/p\u003e","title":"IMMV ‚Äî Section 2 ‚Äî Chapitre 2 ‚Äî Monothread, Multithread, Parall√©lisme et Concurrence, je ne peux pas tout faire en m√™me temps !"},{"content":"Dans le pr√©c√©dent article IMVV ‚Äî Section 1 ‚Äî Chapitre 1 ‚Äî File ou Pile ? L\u0026rsquo;art de passer avant les autres on a d√©couvert les files et les piles. Cette fois, on va survoler plusieurs autres structures de donn√©es (data structures en anglais) qu\u0026rsquo;on utilise tr√®s souvent en informatique\u0026hellip; et dans la vraie vie.\nN\u0026rsquo;oublie pas que les objectifs de ces articles sont :\nTe donner une meilleure compr√©hension des bases de l‚Äôinformatique, T\u0026rsquo;inspirer pour analyser ou optimiser les situations du quotidien, ou peut-√™tre, qui sait, te donner envie d\u0026rsquo;explorer encore plus loin\u0026hellip; jusqu‚Äô√† en faire ton m√©tier. Le tableau ‚Äî la base de presque tout Tu as peut-√™tre remarqu√© dans le pr√©c√©dent article que la file et la pile se ressemblent beaucoup. En r√©alit√©, on peut les repr√©senter toutes les deux avec la m√™me structure : un tableau.\nEn informatique, le tableau (ou array en anglais) est l‚Äôune des structures les plus simples : on range des √©l√©ments les uns √† la suite des autres, dans un espace de taille fixe, et chaque √©l√©ment est rep√©r√© par sa position (ou index).\nPrenons un exemple simple : un tableau d\u0026rsquo;amis √† inviter pour un anniversaire, mais dans mon carnet d\u0026rsquo;adresses je n\u0026rsquo;ai que 6 places.\nAmis Manutea Vai Purotu Heiarii Reva (vide) index 0 1 2 3 4 5 L‚Äôindex est simplement la position de la personne dans le tableau, ce n\u0026rsquo;est pas un ordre.\nDans la plupart des langages informatiques, l\u0026rsquo;index commence √† 0, et pas √† 1.\nCet index nous permet d\u0026rsquo;acc√©der directement √† Vai, l\u0026rsquo;amie √† l\u0026rsquo;index 2 (ou 3√®me √©l√©ment), pour voir son num√©ro de t√©l√©phone par exemple.\nEt ce tableau peut se comporter diff√©remment selon la mani√®re dont on ajoute et retire les √©l√©ments. Par exemple, on peut le faire fonctionner comme une file ou une pile, simplement en changeant les r√®gles du jeu.\nSi c\u0026rsquo;est une file : On ajoute les amis √† la fin, par exemple, Jean arrive apr√®s Reva : Amis Manutea Vai Purotu Heiarii Reva Jean index 0 1 2 3 4 5 Et on traite depuis le d√©but, on retire Manutea du tableau : Amis Vai Purotu Heiarii Reva Jean (vide) index 0 1 2 3 4 5 Pour une pile : On ajoute les amis au d√©but, Jean arrive avant Manutea : Amis Jean Manutea Vai Purotu Heiarii Reva index 0 1 2 3 4 5 Et on traite toujours depuis le d√©but, on retire Jean du tableau : Amis Manutea Vai Purotu Heiarii Reva (vide) index 0 1 2 3 4 5 Dans les deux cas, on utilise un tableau pour stocker les amis. C‚Äôest la logique d‚Äôajout et de retrait qui transforme ce tableau en pile ou en file.\nüéØ Et c‚Äôest exactement pour √ßa que, lorsqu‚Äôon traite des dossiers empil√©s, il vaut mieux commencer par ceux du bas. Sinon, on inverse l‚Äôordre d‚Äôarriv√©e‚Ä¶ et ce n‚Äôest plus une file d‚Äôattente, mais une injustice organis√©e.\nS\u0026rsquo;il n\u0026rsquo;y a que 6 places, que se passe-t-il si j\u0026rsquo;ai 7 amis ?\nD\u0026rsquo;abord, je te f√©licite d\u0026rsquo;avoir autant d\u0026rsquo;amis. Ensuite, on peut s\u0026rsquo;en sortir, en achetant un carnet d\u0026rsquo;adresse qui a plus de places, et on recopie nos amis dans ce nouveau carnet.\nC\u0026rsquo;est similaire en informatique, on fait un nouveau tableau, plus grand, et on recopie.\nHeureusement, en informatique on a invent√© une autre structure.\nLa liste ‚Äî comme le tableau, mais dynamique La liste (ou list en anglais), c‚Äôest comme un tableau, mais en mieux : la taille n‚Äôest pas fixe.\nTu peux ajouter ou supprimer des √©l√©ments √† tout moment, sans te soucier du nombre de places pr√©vues au d√©part. Et √† tout moment, tu peux demander : ‚ÄúCombien d‚Äô√©l√©ments j‚Äôai dans cette liste ?‚Äù ‚Äî et obtenir une r√©ponse fiable.\nC‚Äôest la version souple du tableau, celle qu‚Äôon trouve dans la majorit√© des langages de programmation modernes.\nRefaisons les exemples de pile et de file, mais cette fois-ci avec des listes.\nSi c\u0026rsquo;est une file : On ajoute les amis √† la fin, par exemple, Jean arrive apr√®s Reva : Amis Manutea Vai Purotu Heiarii Reva Jean index 0 1 2 3 4 5 Nombre d\u0026rsquo;√©l√©ments: 6\nEt on traite depuis le d√©but, on retire Manutea du tableau : Amis Vai Purotu Heiarii Reva Jean index 0 1 2 3 4 Nombre d\u0026rsquo;√©l√©ments: 5\nPour une pile : On ajoute les amis au d√©but, Jean arrive avant Manutea : Amis Jean Manutea Vai Purotu Heiarii Reva index 0 1 2 3 4 5 Nombre d\u0026rsquo;√©l√©ments: 6\nEt on traite toujours depuis le d√©but, on retire Jean du tableau : Amis Manutea Vai Purotu Heiarii Reva index 0 1 2 3 4 Nombre d\u0026rsquo;√©l√©ments: 5\nOn remarque qu\u0026rsquo;il n\u0026rsquo;y a plus la case (vide) et le nombre d\u0026rsquo;√©l√©ments change.\nInstant Dev Pour permettre cette souplesse, la liste est plus gourmande en calculs:\ncalcul √† la vol√©e du nombre d\u0026rsquo;√©l√©ments, r√©allocation de m√©moire. Mais en vrai, √† moins que tu ne codes un satellite, une carte embarqu√©e, ou une console des ann√©es 80, o√π chaque octet compte, il y a peu de raisons d‚Äôutiliser un tableau fixe. Une liste dynamique t\u0026rsquo;√©vitera bien des migraines.\nLe tableau et la liste sont des structures tr√®s basiques et tr√®s puissantes, elles sont les bases de beaucoup d\u0026rsquo;autres structures qu\u0026rsquo;on verra par la suite.\nLe tableau associatif ‚Äî ou comment indexer On avait pris l\u0026rsquo;exemple d\u0026rsquo;un carnet d\u0026rsquo;adresses qu\u0026rsquo;on avait mis dans un tableau ou dans une liste. C\u0026rsquo;est d√©j√† tr√®s bien de pouvoir stocker ta liste d\u0026rsquo;amis, mais si tu as des centaines d\u0026rsquo;amis et que tu veux appeler Vai pour aller √† la mer, tu vas gal√©rer pour chercher dans ce carnet d\u0026rsquo;adresse.\nEn effet, avec les 2 derni√®res structures, tu dois parcourir les √©l√©ments un par un, jusqu\u0026rsquo;√† tomber sur Vai. Tu vas perdre beaucoup de temps √† chercher son num√©ro, √ßa va t\u0026rsquo;√©nerver, tu vas l\u0026rsquo;appeler, lui dire \u0026ldquo;mais quelle id√©e d\u0026rsquo;avoir un pr√©nom qui commence par V!\u0026rdquo;, elle va s\u0026rsquo;√©nerver, vous ne serez plus amis, alors que tu voulais juste aller surfer.\nJe m\u0026rsquo;emporte un peu? Peut-√™tre.\nPour r√©soudre ce probl√®me, en informatique on a invent√© le tableau associatif (ou map en anglais). On utilise le tableau, et on va profiter de l\u0026rsquo;index pour justement indexer les √©l√©ments.\nPour cela, on a besoin de r√©fl√©chir un peu:\nOn sait que l\u0026rsquo;index est une position dans le tableau, donc un nombre On sait que les pr√©noms commencent par une lettre (oui, je suis s√©rieux), on va supposer que c\u0026rsquo;est une lettre de l\u0026rsquo;alphabet, et pas un caract√®re sp√©cial comme *$@ On sait qu\u0026rsquo;il y a 26 lettres dans l\u0026rsquo;alphabet =\u0026gt; Eur√™ka: On peut utiliser la 1√®re lettre du pr√©nom, la transformer en index en utilisant sa position dans l\u0026rsquo;alphabet, et associer le pr√©nom √† cet index. On dit que l\u0026rsquo;index est une cl√© et que le pr√©nom est une valeur par exemple:\nManutea =\u0026gt; M =\u0026gt; M est la 14√®me lettre de l\u0026rsquo;alphabet, donc Manutea sera le 14√®me √©l√©ment. Pour rappel, l\u0026rsquo;index commence √† 0, donc M = index 13. cl√©: 13 valeur: Manutea\nPour Heiarii on aura: cl√©: 7 valeur: Heiarii\nCe qui nous donne:\nAmis (vide) (vide) (vide) (vide) (vide) (vide) (vide) Heiarii (vide) (vide) (vide) (vide) (vide) Manutea (vide) Purotu (vide) Reva (vide) (vide) (vide) Vai (vide) (vide) (vide) (vide) index 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 Avec cette map, on pourra facilement acc√©der aux informations de Vai, puisqu\u0026rsquo;on pourra juste aller directement √† l\u0026rsquo;index 21.\nInstant Dev En vrai, pour calculer l\u0026rsquo;index, on utilise une fonction de hachage (hash en anglais) qui permet de transformer les cl√©s en index. C\u0026rsquo;est pour √ßa qu\u0026rsquo;on appelle √ßa un HashMap en Java. Oui mais moi je n\u0026rsquo;ai pas envie de m\u0026rsquo;emb√™ter √† compter sur mes doigts √† quelle position est la lettre V\u0026hellip;\nTu as raison, dans la vraie vie, dans ton carnet d\u0026rsquo;adresse pour chaque lettre tu as une encoche o√π la lettre y est marqu√©e, et tu notes les informations dans les pages qui correspondent √† cette lettre.\nCarnet d'adresses papier, en rouge les encoches ‚Äî source: Wikim√©dia En informatique c\u0026rsquo;est le m√™me principe, sauf qu\u0026rsquo;on ne peut pas utiliser de lettre comme index, alors on est oblig√© de trouver cette astuce.\nEt en plus, il est nul ton carnet d\u0026rsquo;adresse, comment je fais si j\u0026rsquo;ai 2 amis qui s\u0026rsquo;appellent Vai et Vahine? Je mets Vahine dans la case juste apr√®s? Et si j\u0026rsquo;ai des centaines d\u0026rsquo;amis comme tu le disais au d√©but, je fais comment pour les mettre dans les 26 cases ?\nOk, tranquille, pas de stress.\nEn informatique, on peut combiner les structures, plut√¥t que d\u0026rsquo;associer un pr√©nom √† une lettre, on va associer une liste de pr√©noms √† une lettre. Ci-dessous on r√©√©crit notre map et on ajoute Vahine :\nCl√©s 7 13 15 17 21 ‚Üì ‚Üì ‚Üì ‚Üì ‚Üì Heiarii Manutea Purotu Reva Vai Vahine Comme tu l\u0026rsquo;as remarqu√©, au lieu de mettre directement les pr√©noms dans les cases, il y a des fl√®ches qui pointent vers des listes. On appelle √ßa un pointeur (ou pointer en anglais). c‚Äôest un m√©canisme qui permet √† l‚Äôordinateur de dire \u0026ldquo;Va chercher les donn√©es ailleurs.\u0026rdquo; Plut√¥t que de stocker directement les valeurs, on stocke l‚Äôendroit o√π elles se trouvent.\nC\u0026rsquo;est la plus grande force de l\u0026rsquo;informatique, on peut combiner diff√©rents concepts abstraits pour r√©pondre √† notre besoin.\nL\u0026rsquo;ensemble ‚Äî une structure unique Si comme moi tu fais ta liste de courses durant la semaine en pr√©vision des grandes courses du dimanche, tu as peut-√™tre d√©j√† eu la liste qui ressemble √† :\nlait oeufs pops viande salade oeufs Tu remarques que les oeufs apparaissent 2 fois. On appelle √ßa un doublon.\n√áa peut arriver si lundi tu t\u0026rsquo;es fait une omelette avec les derniers oeufs, tu les as not√©s pour en racheter. Puis que vendredi, tu voulais faire un g√¢teau, mais tu t\u0026rsquo;es souvenu que tu n\u0026rsquo;avais plus d\u0026rsquo;oeufs\u0026hellip; et alors tu les as r√©√©crits.\nC\u0026rsquo;est tr√®s sp√©cifique comme explication\u0026hellip; C\u0026rsquo;est ce qui t\u0026rsquo;es arriv√©, pas vrai?\nTu n\u0026rsquo;as pas de preuve. Cette accusation est fausse.\nBref, la liste et le tableau n\u0026rsquo;ont aucun moyen d\u0026rsquo;emp√™cher la pr√©sence de doublons dans leurs √©l√©ments. C\u0026rsquo;est pour √ßa qu\u0026rsquo;en informatique on a invent√© l\u0026rsquo;ensemble (ou set en anglais), une structure o√π chaque √©l√©ment est unique.\nPar contre, le set n\u0026rsquo;est pas ordonn√© comme le tableau et la liste. Il n\u0026rsquo;y a pas d\u0026rsquo;index permettant d\u0026rsquo;acc√©der directement au 2√®me ou 6√®me √©l√©ment.\nInstant Dev En informatique, pour faire un set, on utilise en fait une map o√π la cl√© est l\u0026rsquo;√©l√©ment. Le calcul de hash nous garantit qu\u0026rsquo;il ne peut pas y avoir de doublon. Et on met une valeur arbitraire dans la valeur associ√©e, comme 1 ou PRESENT.\nSi on veut une structure ordonn√©e sans doublons, on peut :\ncoder une liste avec une fonction d\u0026rsquo;ajout qui rejette les doublons, transformer un set en liste, utiliser une structure sp√©cialis√©e, comme LinkedHashSet en Java üìå Exemples dans la vie r√©elle L\u0026#39;ensemble des ingr√©dients qu‚Äôil te reste dans le frigo L\u0026#39;ensemble des invit√©s √† ton anniversaire üíª Exemples en informatique L\u0026#39;ensemble des num√©ros de passeport en Polyn√©sie fran√ßaise L\u0026#39;ensemble de tes amis Facebook Le graphe ‚Äî ou comment appeler l\u0026rsquo;ami d\u0026rsquo;un ami d\u0026rsquo;un ami Tu pr√©pares ta liste d‚Äôinvit√©s pour ton anniversaire, tu comptes inviter tout ton carnet d\u0026rsquo;adresses.\nEt l√†, tu r√©alises que tu n‚Äôas pas le contact de Paul. Tu l\u0026rsquo;as crois√© en soir√©e et il √©tait cool, tu voudrais l\u0026rsquo;inviter\u0026hellip; mais tu as oubli√© de lui demander son num√©ro.\nHeureusement, tu sais que Purotu le conna√Æt.\nTu l\u0026rsquo;appelles\u0026hellip; zut, elle n\u0026rsquo;a pas son num√©ro. Mais elle te donne le num√©ro de Tiare, une autre amie de Paul. Tu appelles Tiare, tu te pr√©sentes, tu l\u0026rsquo;invite √©galement car tu n\u0026rsquo;es pas un sauvage. Et tu lui demandes le num√©ro de Paul.\nBingo, elle l\u0026rsquo;a, tu appelles Paul et il est chaud pour venir √† ton anniversaire.\nLes liens entre ces personnes peuvent √™tre repr√©sent√©s par un graphe (ou graph en anglais).\nEt ce que tu viens de faire, sans t\u0026rsquo;en rendre compte, c\u0026rsquo;est un parcours de graphe, un algorithme !\n%%{ init: { 'theme': 'base', 'themeVariables': { 'primaryColor': '#ddd', 'primaryTextColor': '#007acc', 'primaryBorderColor': '#007acc', 'lineColor': '#007acc' } } }%% graph TD A[Toi] --- B[Manutea] A --- C[Vai] A --- D[Purotu] A --- E[Heiarii] A --- F[Reva] A --- G[Jean] D --- H[Tiare] H --- I[Paul] Graphe de relation entre les personnes Ce graphe est non orient√©, c\u0026rsquo;est-√†-dire qu\u0026rsquo;il n\u0026rsquo;y a pas de sens entre les √©l√©ments. Chaque case est un noeud, et chaque trait est une ar√™te.\nEffectivement pour √©viter de f√¢cher les personnes, on ne va pas dire \u0026ldquo;Purotu est l\u0026rsquo;ami de Tiare, mais Tiare n\u0026rsquo;est pas l\u0026rsquo;ami de Purotu\u0026rdquo;.\nPar contre, on peut utiliser un graphe orient√© pour repr√©senter les appels que tu as pass√©s.\n%%{ init: { 'theme': 'base', 'themeVariables': { 'primaryColor': '#ddd', 'primaryTextColor': '#007acc', 'primaryBorderColor': '#007acc', 'lineColor': '#007acc' } } }%% graph TD A[Toi] --\u003e B[Manutea] A --\u003e C[Vai] A --\u003e D[Purotu] A --\u003e E[Heiarii] A --\u003e F[Reva] A --\u003e G[Jean] A --\u003e H[Tiare] A --\u003e I[Paul] Graphe des appels que tu as pass√© Ici, chaque case est un noeud, tout comme le graphe non orient√©, mais cette fois-ci, chaque fl√®che est une ar√™te, et donne le sens d\u0026rsquo;appel.\nOn a donc les m√™mes donn√©es, mais on utilise la structure adapt√©e √† ce qu\u0026rsquo;on veut repr√©senter.\nEt c\u0026rsquo;est quoi le parcours de graphe?\nJe suis heureux que tu poses cette question, mais ta question d√©passe le cadre de cet article.\nConclusion On a d√©j√† vu pas mal de choses, je te laisse relire, essayer de combiner les structures entre elles, te renseigner sur internet en cherchant \u0026ldquo;structures de donn√©es\u0026rdquo; ou \u0026ldquo;data structure\u0026rdquo;.\nIl existe beaucoup de structures de donn√©es, celles qui sont pr√©sent√©es dans cet article sont juste les plus basiques, celles qu\u0026rsquo;on apprend dans les premi√®res heures de cours de programmation.\nSi tu souhaites continuer cette aventure, tu peux regarder la suite ici: IMVV ‚Äî Section 1 ‚Äî Chapitre 3 ‚Äî Structures de contr√¥le et algorithme, apprendre √† r√©fl√©chir\n‚Üê Retour √† la section\n‚Üê Retour √† l‚Äôintroduction\n","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/les-bases/structures-de-donnees/","summary":"\u003cp\u003eDans le pr√©c√©dent article \u003ca href=\"../file-et-pile/\"\u003eIMVV ‚Äî Section 1 ‚Äî Chapitre 1 ‚Äî File ou Pile ? L\u0026rsquo;art de passer avant les autres\u003c/a\u003e on a d√©couvert les files et les piles. Cette fois, on va survoler plusieurs autres \u003cstrong\u003estructures de donn√©es\u003c/strong\u003e (\u003cem\u003edata structures\u003c/em\u003e en anglais) qu\u0026rsquo;on utilise tr√®s souvent en informatique\u0026hellip; et dans la vraie vie.\u003c/p\u003e\n\u003cp\u003eN\u0026rsquo;oublie pas que les objectifs de ces articles sont :\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eTe donner une meilleure compr√©hension des bases de l‚Äôinformatique,\u003c/li\u003e\n\u003cli\u003eT\u0026rsquo;inspirer pour analyser ou optimiser les situations du quotidien,\u003c/li\u003e\n\u003cli\u003eou peut-√™tre, qui sait, te donner envie d\u0026rsquo;explorer encore plus loin\u0026hellip; jusqu‚Äô√† en faire ton m√©tier.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"le-tableau--la-base-de-presque-tout\"\u003eLe tableau ‚Äî la base de presque tout\u003c/h2\u003e\n\u003cp\u003eTu as peut-√™tre remarqu√© dans le pr√©c√©dent article que la \u003cstrong\u003efile\u003c/strong\u003e et la \u003cstrong\u003epile\u003c/strong\u003e se ressemblent beaucoup. En r√©alit√©, on peut les repr√©senter toutes les deux avec la m√™me structure : un \u003cstrong\u003etableau\u003c/strong\u003e.\u003c/p\u003e","title":"IMVV ‚Äî Section 1 ‚Äî Chapitre 2 ‚Äî Autres structures de donn√©es, j'organise mon bordel"},{"content":"Dans l\u0026rsquo;article pr√©c√©dent IMVV ‚Äî Section 1 ‚Äî Chapitre 2 ‚Äî Autres structures de donn√©es, j\u0026rsquo;organise mon bordel, on s\u0026rsquo;√©tait arr√™t√© sur ta question :\nEt c\u0026rsquo;est quoi le parcours de graphe?\nDans cet article, on va parler des structures de contr√¥le (control flow statements en anglais), qu\u0026rsquo;on utilise dans des algorithmes (algorithms en anglais).\nAvant d\u0026rsquo;expliquer l\u0026rsquo;algorithme que tu as fait, le parcours de graphe, on doit expliquer les structures de contr√¥le.\nN\u0026rsquo;oublie pas que les objectifs de ces articles sont :\nTe donner une meilleure compr√©hension des bases de l‚Äôinformatique, T\u0026rsquo;inspirer pour analyser ou optimiser les situations du quotidien, ou peut-√™tre, qui sait, te donner envie d\u0026rsquo;explorer encore plus loin\u0026hellip; jusqu‚Äô√† en faire ton m√©tier. Pseudo-code ‚Äî l\u0026rsquo;art de la cuisine Quand tu fais un g√¢teau, tu r√©alises les actions suivantes:\nPr√©chauffer le four Verser la farine dans le saladier Casser les oeufs et mettre le contenu dans le saladier Verser le lait dans le saladier Remuer Verser la pr√©paration dans un moule Mettre le moule au four Attendre 20 minutes Eteindre le four Sortir le moule du four D√©mouler Toute cette suite d\u0026rsquo;√©tapes est ce qu\u0026rsquo;on appelle un algorithme, et la fa√ßon dont on l\u0026rsquo;a √©crit, √ßa s\u0026rsquo;appelle du pseudo-code, parce que √ßa ressemble √† un langage de programmation, mais ce n\u0026rsquo;en est pas un.\nMais pourquoi on appelle √ßa un algorithme? on peut pas juste dire une suite d\u0026rsquo;actions?\nJe te laisse chercher sur internet pourquoi on appelle √ßa un algorithme.\nLa boucle for ‚Äî ou comment √™tre fiu Ton meilleur ami Manutea te demande \u0026ldquo;Comment tu as fait pour inviter toutes ces personnes √† ton anniversaire ?\u0026rdquo;. Laquelle de ces 2 phrases dirais-tu :\nJ\u0026rsquo;ai appel√© Manutea, puis j\u0026rsquo;ai appel√© Vai, puis j\u0026rsquo;ai appel√© Purotu, puis j\u0026rsquo;ai appel√© Heiarii, puis j\u0026rsquo;ai appel√© Reva, puis j\u0026rsquo;ai appel√© Jean, puis j\u0026rsquo;ai appel√© Tiare, puis j\u0026rsquo;ai appel√© Paul J\u0026rsquo;ai pris mon carnet d\u0026rsquo;adresses, puis pour chaque contact, j\u0026rsquo;ai appel√© le num√©ro correspondant La 1√®re phrase est un algorithme sans boucle (loop en anglais) : chaque action est √©crite explicitement.\nLa 2√®me, elle, utilise une boucle ‚Äî tu r√©p√®tes la m√™me action pour chaque contact. Sans forc√©ment y penser, tu utilises aussi une variable : un espace dans ta t√™te pour m√©moriser un num√©ro, que tu remplaces √† chaque nouvel appel.\nCette mani√®re de r√©p√©ter une action avec une variable, c‚Äôest exactement ce qu‚Äôun ordinateur fait quand on lui demande de parcourir une liste.\nSi tu relis bien la 2√®me phrase, tu verras que pour chaque est en gras. En anglais, pour chaque se dit for each, c\u0026rsquo;est pour √ßa qu\u0026rsquo;on l\u0026rsquo;appelle la boucle for dans la plupart des langages.\nSi on essayait d\u0026rsquo;√©crire un algorithme, sous forme de pseudo-code simple pour d√©crire la 2√®me phrase, √ßa donnerait :\nDans mon carnet d\u0026#39;adresses, pour chaque contact: J\u0026#39;ai appel√© le num√©ro correspondant au contact J\u0026#39;ai invit√© l\u0026#39;ami Fin pour \u0026ldquo;Dans mon carnet d\u0026rsquo;adresses, pour chaque contact\u0026rdquo; marque le d√©but de la boucle, et \u0026ldquo;Fin pour\u0026rdquo; marque la fin de la boucle.\nEntre ces 2 lignes, les actions \u0026ldquo;J\u0026rsquo;ai appel√© le num√©ro correspondant au contact\u0026rdquo; et \u0026ldquo;J\u0026rsquo;ai invit√© l\u0026rsquo;ami\u0026rdquo; forment ce qu\u0026rsquo;on appelle un bloc d\u0026rsquo;instructions.\nPar convention, on indente ce bloc ‚Äî on le d√©cale vers la droite ‚Äî pour montrer visuellement qu\u0026rsquo;il est √† l\u0026rsquo;int√©rieur de la boucle.\nOk, et quel est le rapport entre la boucle for et fiu comme marqu√© dans le titre ?\nSi on devait √©crire l\u0026rsquo;algorithme de la 1√®re phrase, √ßa donnerait :\nJ\u0026#39;ai appel√© Manutea J\u0026#39;ai appel√© Vai J\u0026#39;ai appel√© Purotu J\u0026#39;ai appel√© Heiarii J\u0026#39;ai appel√© Reva J\u0026#39;ai appel√© Jean J\u0026#39;ai appel√© Tiare J\u0026#39;ai appel√© Paul Chaque ligne est une action, donc il faut √©crire autant de lignes qu\u0026rsquo;il y a de contacts dans ta liste de contacts. Maintenant, que se passerait-il si tu devais inviter 100 personnes? Tu serais fiu.\nAlors qu\u0026rsquo;avec la boucle, tu n\u0026rsquo;as pas besoin de changer ton algorithme, c\u0026rsquo;est le m√™me, que tu aies 6 contacts ou 100.\nOui mais dans la vraie vie je dois quand m√™me appeler les amis un par un\nCet exemple n‚Äôest pas l√† pour dire que tu vas programmer ton t√©l√©phone ‚Äî mais pour te faire sentir la puissance de la boucle : un seul bloc, quelle que soit la longueur de ta liste.\nDans la vraie vie, tu fais un groupe Facebook avec tous tes amis et tu postes des messages d\u0026rsquo;informations dans le groupe pour organiser, idem pour un groupe SMS. Si t\u0026rsquo;es old school, tu postes un message dans le journal local et viendra qui verra. D\u0026rsquo;ailleurs j\u0026rsquo;en parlerai dans de prochains articles.\nLa boucle while ‚Äî ou comment faire ses devoirs avant d\u0026rsquo;aller jouer Quand tu √©tais plus jeune, on t\u0026rsquo;a s√ªrement d√©j√† dit \u0026ldquo;Fais d\u0026rsquo;abord tes devoirs, ensuite tu peux aller jouer\u0026rdquo;, ou autrement dit \u0026quot;Tant que tu n\u0026rsquo;a pas fini tes devoirs, tu travailles, ensuite tu peux aller jouer\u0026quot;.\nSi on devait √©crire cet algorithme, √ßa donnerait:\nTant que je n\u0026#39;ai pas fini mes devoirs: Je fais mes devoirs Fin tant que Je vais jouer \u0026ldquo;Tant que je n\u0026rsquo;ai pas fini mes devoirs\u0026rdquo; marque le d√©but de la boucle, et \u0026ldquo;Fin tant que\u0026rdquo; marque la fin de la boucle.\nEntre ces 2 lignes, l\u0026rsquo;action \u0026ldquo;Je fais mes devoirs\u0026rdquo; forme le bloc d\u0026rsquo;instructions.\nTu l\u0026rsquo;auras remarqu√©, c\u0026rsquo;est tr√®s similaire √† la boucle for, sauf qu\u0026rsquo;au lieu de parcourir des √©l√©ments, on v√©rifie une condition, et on r√©p√®te la boucle si la condition n\u0026rsquo;est remplie.\nOn appelle √ßa une boucle while, car Tant que se dit while en anglais.\nEnsuite, une fois que les devoirs sont finis, on sort de la boucle, on fait la suite des instructions, donc \u0026ldquo;Je vais jouer\u0026rdquo;. On aurait aussi pu avoir d\u0026rsquo;autres instructions apr√®s la boucle for, c\u0026rsquo;est juste que l\u0026rsquo;exemple ne s\u0026rsquo;y pr√™tait pas.\nMais alors‚Ä¶ pourquoi deux types de boucles si elles font (presque) la m√™me chose ? Pourquoi une boucle for, et une boucle while ?\nEn fait, en fonction du probl√®me qu\u0026rsquo;on veut r√©soudre :\ndans certains cas on pourra compter, et dans ce cas on pr√©f√®rera utiliser une boucle for dans certains cas on ne pourra pas compter, et dans ce cas on pr√©f√®rera utiliser une boucle while Par exemple, pour un enfant qui joue dehors:\nTant qu\u0026#39;il fait beau: Je joue Fin tant que Ici, impossible de compter.\nMais tu commences peut-√™tre √† te rendre compte d\u0026rsquo;une supercherie.\nInstant Dev üí° En r√©alit√©, toutes les boucles for peuvent √™tre r√©√©crites en boucle while.\nLa boucle for n‚Äôest qu‚Äôune boucle while optimis√©e, √©crite pour √™tre plus simple √† lire‚Ä¶ quand on sait compter.\nLes 2 types de boucles sont des instructions d\u0026rsquo;it√©ration, √† la diff√©rence des instructions simples comme \u0026ldquo;Je joue\u0026rdquo;, les instructions d\u0026rsquo;it√©ration permettre d\u0026rsquo;ex√©cuter des blocs d\u0026rsquo;instructions de mani√®re r√©p√©t√©e.\nBravo, tu commences √† r√©fl√©chir comme un d√©veloppeur !\nExplications\nPour rappel:\ndans une liste, l\u0026rsquo;index commence √† 0, dans une liste, le dernier index est √©gal au nombre d\u0026rsquo;√©l√©ments de la liste moins 1 Amis Manutea Vai Purotu Heiarii Reva Jean Tiare Paul index 0 1 2 3 4 5 6 7 Nombre d\u0026rsquo;√©l√©ments: 8\nune variable c\u0026rsquo;est juste un espace m√©moire o√π on stocke une donn√©e (un tableau, une liste, un pr√©nom, un num√©ro de t√©l√©phone) Si on reprend l\u0026rsquo;exemple de la boucle for:\nDans mon carnet d\u0026#39;adresses, pour chaque contact: J\u0026#39;appelle le num√©ro correspondant au contact J\u0026#39;invite l\u0026#39;ami Fin pour Derri√®re, voici plut√¥t ce que fait un ordinateur (de mani√®re simplifi√©e) :\nJe cr√©e une variable \u0026#34;index\u0026#34;, qui vaut 0 Tant que \u0026#34;index\u0026#34; est inf√©rieur au nombre d\u0026#39;√©l√©ments (8) du carnet d\u0026#39;adresses: Je regarde le contact qui se trouve √† l\u0026#39;\u0026#34;index\u0026#34; dans le carnet d\u0026#39;adresses Je r√©cup√®re son num√©ro Je l\u0026#39;invite \u0026#34;index\u0026#34; prend la valeur \u0026#34;index\u0026#34; + 1 Fin tant que Comme tu le vois, c\u0026rsquo;est un peu plus compliqu√©, c\u0026rsquo;est pour √ßa qu\u0026rsquo;on pr√©f√®re utiliser une boucle for quand on peut compter.\nL\u0026rsquo;instruction conditionnelle ‚Äî ou pourquoi il faut respecter le code de la route Juste au-dessus, on parlait de condition dans la boucle while. Mais on n\u0026rsquo;a jamais expliqu√© ce que c\u0026rsquo;√©tait.\nUne condition est une question qu\u0026rsquo;on se pose, et la r√©ponse est soit ‚Äúoui‚Äù, soit ‚Äúnon‚Äù ‚Äî jamais les deux, jamais \u0026ldquo;un peu\u0026rdquo;.\nQuand on √©crit \u0026ldquo;Tant que je n\u0026rsquo;ai pas fini mes devoirs\u0026rdquo;, √† chaque r√©p√©tition on pose la question \u0026ldquo;Est-ce que j\u0026rsquo;ai fini mes devoirs?\u0026rdquo;.\nEn informatique, comme dans la vraie vie, une condition doit √™tre claire.\nOn peut utiliser ce concept pour faire des branchements dans notre code, dans une instruction conditionnelle (conditional statement en anglais).\nPrenons un exemple simple : tu es en voiture, tu approches un feu tricolore. Il est vert.\nQue fais-tu si le feu passe √† l‚Äôorange juste devant toi‚ÄØ?\nVoici un algorithme qui repr√©sente cette situation :\nSi le feu passe au orange, alors: Tu t\u0026#39;arr√™tes Sinon (c\u0026#39;est toujours vert): Tu continues et traverse l\u0026#39;intersection Fin si \u0026ldquo;Si le feu passe au orange,\u0026rdquo; marque le d√©but de l\u0026rsquo;instruction conditionnelle, \u0026ldquo;alors\u0026rdquo; marque la branche du si, \u0026ldquo;Sinon\u0026rdquo; marque la branche du sinon, et \u0026ldquo;Fin si\u0026rdquo; marque la fin de l\u0026rsquo;instruction conditionnelle.\nDe la m√™me mani√®re que pour les boucles, chaque branche est un bloc d\u0026rsquo;instructions. Comme pour les boucles, chaque branche forme un bloc d‚Äôinstructions, qu‚Äôon indente pour bien le rep√©rer.\nPour visualiser, imagine un arbre : chaque fois qu‚Äôune condition est test√©e, tu choisis une branche √† suivre. Le chemin d√©pend de tes r√©ponses.\nRevenons √† notre parcours de graphe Rappels Tu avais appel√© tes amis pour les inviter √† ton anniversaire, et tu avais √©t√© jusqu\u0026rsquo;au bout du monde, en sautant de relations en relations, pour inviter Paul. Tu avais fait ces actions :\nTu comptes inviter tout ton carnet d\u0026#39;adresses. Tu r√©alises que tu n‚Äôas pas le contact de Paul. Tu l\u0026#39;as crois√© en soir√©e et il √©tait cool, tu voudrais l\u0026#39;inviter... mais t\u0026#39;as oubli√© de lui demander son num√©ro. Heureusement, tu sais que Purotu le conna√Æt. Tu l\u0026#39;appelles... zut, elle n\u0026#39;a pas son num√©ro. Mais elle te donne le num√©ro de Tiare, une autre amie de Paul. Tu appelles Tiare, tu te pr√©sentes, tu l\u0026#39;invites √©galement car tu n\u0026#39;es pas un sauvage. Et tu lui demandes le num√©ro de Paul. Bingo, elle l\u0026#39;a, tu appelles Paul et il est chaud pour venir √† ton anniversaire. Ci-dessous se trouve le graphe de relation entre les personnes, un graphe non orient√©.\n%%{ init: { 'theme': 'base', 'themeVariables': { 'primaryColor': '#ddd', 'primaryTextColor': '#007acc', 'primaryBorderColor': '#007acc', 'lineColor': '#007acc' } } }%% graph TD A[Toi] --- B[Manutea] A --- C[Vai] A --- D[Purotu] A --- E[Heiarii] A --- F[Reva] A --- G[Jean] D --- H[Tiare] H --- I[Paul] Graphe de relation entre les personnes En se basant sur ce qu\u0026rsquo;on a appris dans cet article, on va √©crire un algorithme pour repr√©senter les actions que tu as r√©alis√©es pour inviter tes amis :\n# √âtape 1 : inviter tous mes amis directs (les noeuds les plus proches de \u0026#34;Toi\u0026#34; dans le graphe) Je cr√©e une variable \u0026#34;liste d\u0026#39;amis\u0026#34;, contenant tous mes amis directs Je cr√©e une variable \u0026#34;ami\u0026#34;, le contact courant Dans la \u0026#34;liste d\u0026#39;amis\u0026#34;, pour chaque \u0026#34;ami\u0026#34; : J\u0026#39;appelle \u0026#34;ami\u0026#34; Si \u0026#34;ami\u0026#34; r√©pond, alors : Je l\u0026#39;invite √† mon anniversaire Fin si Fin pour # √âtape 2 : retrouver Paul (en parcourant le graphe en largeur) Je cr√©e une variable \u0026#34;file\u0026#34;, initialis√©e avec la \u0026#34;liste d\u0026#39;amis\u0026#34; Je cr√©e une variable \u0026#34;visit√©s\u0026#34;, une liste vide Tant que la \u0026#34;file\u0026#34; n‚Äôest pas vide : Je prends le premier √©l√©ment de la \u0026#34;file\u0026#34;, je le stocke dans \u0026#34;ami\u0026#34; Si \u0026#34;ami\u0026#34; n‚Äôest pas dans \u0026#34;visit√©s\u0026#34;, alors : J‚Äôajoute \u0026#34;ami\u0026#34; √† \u0026#34;visit√©s\u0026#34; J\u0026#39;appelle \u0026#34;ami\u0026#34; Si \u0026#34;ami\u0026#34; r√©pond, alors : Je lui demande s‚Äôil conna√Æt Paul Si \u0026#34;ami\u0026#34; me donne le num√©ro de Paul : Je cr√©e une variable \u0026#34;Paul\u0026#34; J\u0026#39;appelle \u0026#34;Paul\u0026#34; Si \u0026#34;Paul\u0026#34; r√©pond, alors : Je l‚Äôinvite √† mon anniversaire Je termine la recherche Fin si Sinon : Je r√©cup√®re la liste des amis de \u0026#34;ami\u0026#34; Pour chaque \u0026#34;contact\u0026#34; dans cette liste : J‚Äôajoute \u0026#34;contact\u0026#34; √† la \u0026#34;file\u0026#34; Fin pour Fin si Fin si Fin si Fin tant que √Ä premi√®re vue, √ßa a l\u0026rsquo;air compliqu√©. Mais en fait si tu prends le temps de d√©cortiquer, de bien regarder, tu verras que ce sont juste les actions que tu as r√©alis√©s plus haut, mais dans un langage plus proche de ce que fait un ordinateur.\nLa seule chose qu\u0026rsquo;on a fait en plus des concepts de base, c\u0026rsquo;est qu\u0026rsquo;on a combin√© les structures de contr√¥le et les structures de donn√©es, et le tout nous donne notre algorithme de parcours de graphe !\nInstant Dev üí° On a parcouru le graphe en largeur, c\u0026rsquo;est-√†-dire qu\u0026rsquo;on a d\u0026rsquo;abord regard√© les noeuds voisins de notre point de d√©part.\nD\u0026rsquo;autres algorithmes connus et enseign√©s en informatique sont le parcours en profondeur, l\u0026rsquo;algorithme de Dijkstra, A* et Floyd-Warshall, tu peux regarder sur internet si √ßa t\u0026rsquo;int√©resse.\nConclusion Dans cet article on a appris ce que sont :\nLes structures de contr√¥le, Les boucles, Les conditions, Les variables, Les algorithmes. Il existe d\u0026rsquo;autres structures de contr√¥le, des types de variables, et des algorithmes qu\u0026rsquo;on peut r√©utiliser pour r√©pondre √† beaucoup de probl√®mes. Comme d\u0026rsquo;habitude, je te laisse chercher sur internet si tu veux aller plus loin.\nMais le plus important, c\u0026rsquo;est que tu commences √† r√©fl√©chir comme un d√©veloppeur, et √† comprendre le pseudo-code. Dans la vraie vie, si tu as un probl√®me complexe √† r√©soudre, tu peux essayer de l\u0026rsquo;√©crire comme on l\u0026rsquo;a fait pour le parcours de graphe. Prends ton temps et d√©compose le probl√®me.\nNous avons fini cette section \u0026ldquo;IMMV ‚Äî Section 1 ‚Äî Les Bases : structures et contr√¥le\u0026rdquo;, dans cette section, nous avons √©galement vu les structures de donn√©es.\nDans la prochaine section, IMMV ‚Äî Section 2 ‚Äî L\u0026rsquo;ex√©cution : comment faire des actions ?, nous verrons que l\u0026rsquo;ordinateur et l\u0026rsquo;humain font les actions de mani√®re tr√®s similaire.\n‚Üê Retour √† la section\n‚Üê Retour √† l‚Äôintroduction\n","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/les-bases/structures-de-controle/","summary":"\u003cp\u003eDans l\u0026rsquo;article pr√©c√©dent \u003ca href=\"../structures-de-donnees/\"\u003eIMVV ‚Äî Section 1 ‚Äî Chapitre 2 ‚Äî Autres structures de donn√©es, j\u0026rsquo;organise mon bordel\u003c/a\u003e, on s\u0026rsquo;√©tait arr√™t√© sur ta question :\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eEt c\u0026rsquo;est quoi le parcours de graphe?\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eDans cet article, on va parler des \u003cstrong\u003estructures de contr√¥le\u003c/strong\u003e (\u003cem\u003econtrol flow statements\u003c/em\u003e en anglais), qu\u0026rsquo;on utilise dans des \u003cstrong\u003ealgorithmes\u003c/strong\u003e (\u003cem\u003ealgorithms\u003c/em\u003e en anglais).\u003c/p\u003e\n\u003cp\u003eAvant d\u0026rsquo;expliquer l\u0026rsquo;algorithme que tu as fait, le \u003cstrong\u003eparcours de graphe\u003c/strong\u003e, on doit expliquer les structures de contr√¥le.\u003c/p\u003e","title":"IMVV ‚Äî Section 1 ‚Äî Chapitre 3 ‚Äî Structures de contr√¥le et algorithme, apprendre √† r√©fl√©chir"},{"content":"Pr√©c√©demment, on a vu qu\u0026rsquo;en rajoutant des serveurs, on pouvait servir plus de familles. Dans cette section on verra diff√©rents tips permettant d\u0026rsquo;optimiser un programme existant et la vie r√©elle.\nChapitres IMVV ‚Äî Section 3 ‚Äî Chapitre 1 ‚Äî La m√©moire, ou comment √©viter les p√©nuries dans un magasin IMVV ‚Äî Section 3 ‚Äî Chapitre 2 ‚Äî M√©mo√Øsation et Lazy loading, les techniques du fain√©ant ultime ","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/optimisation/optimisation/","summary":"\u003cp\u003ePr√©c√©demment, on a vu qu\u0026rsquo;en rajoutant des serveurs, on pouvait servir plus de familles. Dans cette section on verra diff√©rents tips permettant d\u0026rsquo;optimiser un programme existant et la vie r√©elle.\u003c/p\u003e\n\u003ch1 id=\"chapitres\"\u003eChapitres\u003c/h1\u003e\n\n\n\u003cul\u003e\n  \n\t\t\n\t\n\t\t\n    \t\n      \t\u003cli\u003e\u003ca href=\"/blog.dev/posts/miroir-informatique-vraie-vie/optimisation/memoire/\"\u003eIMVV ‚Äî Section 3 ‚Äî Chapitre 1 ‚Äî La m√©moire, ou comment √©viter les p√©nuries dans un magasin\u003c/a\u003e\u003c/li\u003e\n    \t\n  \t\n\t\n\t\t\n    \t\n      \t\u003cli\u003e\u003ca href=\"/blog.dev/posts/miroir-informatique-vraie-vie/optimisation/memoisation/\"\u003eIMVV ‚Äî Section 3 ‚Äî Chapitre 2 ‚Äî M√©mo√Øsation et Lazy loading, les techniques du fain√©ant ultime\u003c/a\u003e\u003c/li\u003e\n    \t\n  \t\n\t\n\u003c/ul\u003e","title":"IMMV ‚Äî Section 3 ‚Äî L'optimisation : comment se faire passer pour un coach de vie"},{"content":"Dans cette section, nous verrons comment les actions sont ex√©cut√©es, par les ordinateurs et par les personnes. Et on verra quelques pistes pour r√©pondre √† une accumulation de t√¢ches.\nChapitres IMMV ‚Äî Section 2 ‚Äî Chapitre 1 ‚Äî Synchrone et Asynchrone, ou comment r√©agir au changement IMMV ‚Äî Section 2 ‚Äî Chapitre 2 ‚Äî Monothread, Multithread, Parall√©lisme et Concurrence, je ne peux pas tout faire en m√™me temps ! ","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/l-execution/l-execution/","summary":"\u003cp\u003eDans cette section, nous verrons comment les actions sont ex√©cut√©es, par les ordinateurs et par les personnes. Et on verra quelques pistes pour r√©pondre √† une accumulation de t√¢ches.\u003c/p\u003e\n\u003ch1 id=\"chapitres\"\u003eChapitres\u003c/h1\u003e\n\n\n\u003cul\u003e\n  \n\t\t\n\t\n\t\t\n    \t\n      \t\u003cli\u003e\u003ca href=\"/blog.dev/posts/miroir-informatique-vraie-vie/l-execution/sync-async/\"\u003eIMMV ‚Äî Section 2 ‚Äî Chapitre 1 ‚Äî Synchrone et Asynchrone, ou comment r√©agir au changement\u003c/a\u003e\u003c/li\u003e\n    \t\n  \t\n\t\n\t\t\n    \t\n      \t\u003cli\u003e\u003ca href=\"/blog.dev/posts/miroir-informatique-vraie-vie/l-execution/threads/\"\u003eIMMV ‚Äî Section 2 ‚Äî Chapitre 2 ‚Äî Monothread, Multithread, Parall√©lisme et Concurrence, je ne peux pas tout faire en m√™me temps !\u003c/a\u003e\u003c/li\u003e\n    \t\n  \t\n\t\n\u003c/ul\u003e","title":"IMMV ‚Äî Section 2 ‚Äî L'ex√©cution : comment faire des actions ?"},{"content":"Dans cette section, nous verrons les bases permettant de stocker et manipuler des donn√©es.\nChapitres IMVV ‚Äî Section 1 ‚Äî Chapitre 1 ‚Äî File ou Pile ? L\u0026#39;art de passer avant les autres IMVV ‚Äî Section 1 ‚Äî Chapitre 2 ‚Äî Autres structures de donn√©es, j\u0026#39;organise mon bordel IMVV ‚Äî Section 1 ‚Äî Chapitre 3 ‚Äî Structures de contr√¥le et algorithme, apprendre √† r√©fl√©chir ","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/les-bases/les-bases/","summary":"\u003cp\u003eDans cette section, nous verrons les bases permettant de stocker et manipuler des donn√©es.\u003c/p\u003e\n\u003ch1 id=\"chapitres\"\u003eChapitres\u003c/h1\u003e\n\n\n\u003cul\u003e\n  \n\t\t\n\t\n\t\t\n    \t\n      \t\u003cli\u003e\u003ca href=\"/blog.dev/posts/miroir-informatique-vraie-vie/les-bases/file-et-pile/\"\u003eIMVV ‚Äî Section 1 ‚Äî Chapitre 1 ‚Äî File ou Pile ? L\u0026#39;art de passer avant les autres\u003c/a\u003e\u003c/li\u003e\n    \t\n  \t\n\t\n\t\t\n    \t\n      \t\u003cli\u003e\u003ca href=\"/blog.dev/posts/miroir-informatique-vraie-vie/les-bases/structures-de-donnees/\"\u003eIMVV ‚Äî Section 1 ‚Äî Chapitre 2 ‚Äî Autres structures de donn√©es, j\u0026#39;organise mon bordel\u003c/a\u003e\u003c/li\u003e\n    \t\n  \t\n\t\n\t\t\n    \t\n      \t\u003cli\u003e\u003ca href=\"/blog.dev/posts/miroir-informatique-vraie-vie/les-bases/structures-de-controle/\"\u003eIMVV ‚Äî Section 1 ‚Äî Chapitre 3 ‚Äî Structures de contr√¥le et algorithme, apprendre √† r√©fl√©chir\u003c/a\u003e\u003c/li\u003e\n    \t\n  \t\n\t\n\u003c/ul\u003e","title":"IMMV ‚Äî Section 1 ‚Äî Les bases : structures et contr√¥le"},{"content":"\u0026lsquo;Ia ora na,\nL\u0026rsquo;informatique semble souvent obscure pour beaucoup. Quand je dis que je suis ing√©nieur informatique, on me demande r√©guli√®rement : ¬´ Mais tu fais quoi exactement ? ¬ª.\nAvec le temps, j‚Äôai pris l‚Äôhabitude de vulgariser mon m√©tier. Et ce qui fonctionne le mieux, ce sont les exemples concrets tir√©s de la vie quotidienne.\nEn √©cole d\u0026rsquo;ing√©nieur, j\u0026rsquo;apprenais beaucoup plus facilement l\u0026rsquo;informatique en partant de situations r√©elles. √Ä travers cette s√©rie d‚Äôarticles, \u0026ldquo;L‚Äôinformatique, un miroir de la vraie vie\u0026rdquo; (abr√©g√© IMVV), je vais tenter d‚Äôexpliquer des concepts informatiques en m‚Äôappuyant sur des sc√®nes famili√®res du quotidien, sur un ton l√©ger. Parce que finalement, coder un programme ou g√©rer une file d‚Äôattente au magasin, ce n‚Äôest pas si diff√©rent.\nInformations de lecture Avant de lire les articles list√©s en bas de cette page, quelques informations pour vous faciliter la lecture :\nIl y a un mode sombre et un mode clair : En haut de chaque page se trouve une ic√¥ne pour interchanger entre les modes de lecture sombre et clair\nJ\u0026rsquo;utiliserai des apart√©s pour les d√©veloppeurs,\nInstant Dev Ceci est un apart√© pour les d√©veloppeurs, si tu es non d√©veloppeur tu peux lire, mais tu auras peut-√™tre mal √† la t√™te. J\u0026rsquo;utiliserai des interjections de lecteur, J\u0026rsquo;interviens comme si j\u0026rsquo;√©tais toi, lecteur, pour aider l\u0026rsquo;auteur de ce blog √† rendre ces articles dynamiques\nCette s√©rie d\u0026rsquo;articles n\u0026rsquo;est pas un cours d\u0026rsquo;informatique, vous n\u0026rsquo;apprendrez pas √† d√©velopper juste en suivant ces articles. Mot de fin Que tu sois curieux, d√©butant ou simplement en qu√™te de sens dans ce monde num√©rique, cette s√©rie pourrait bien t‚Äôapporter quelque chose.\nTu y trouveras peut-√™tre :\nune meilleure compr√©hension des bases de l‚Äôinformatique, des id√©es pour analyser ou optimiser les situations du quotidien, ou m√™me, qui sait, l‚Äôenvie de plonger plus loin dans ce domaine‚Ä¶ jusqu‚Äô√† en faire ton m√©tier. Bien s√ªr, cette s√©rie n‚Äôexplorera qu‚Äôune infime partie de ce vaste domaine qu‚Äôest l‚Äôinformatique. Apr√®s tout, peut-on vraiment expliquer enti√®rement l\u0026rsquo;informatique\u0026hellip; un domaine qui, justement, est le miroir de la vie* ?\n*: cette analogie est √† prendre avec recul : l‚Äôinformatique ne refl√®te pas toute la complexit√© de la vie.\nLes articles de la s√©rie (En cours de r√©daction) IMMV ‚Äî Section 1 ‚Äî Les bases : structures et contr√¥le IMMV ‚Äî Section 1 ‚Äî Les bases : structures et contr√¥le IMVV ‚Äî Section 1 ‚Äî Chapitre 1 ‚Äî File ou Pile ? L\u0026#39;art de passer avant les autres IMVV ‚Äî Section 1 ‚Äî Chapitre 2 ‚Äî Autres structures de donn√©es, j\u0026#39;organise mon bordel IMVV ‚Äî Section 1 ‚Äî Chapitre 3 ‚Äî Structures de contr√¥le et algorithme, apprendre √† r√©fl√©chir IMMV ‚Äî Section 2 ‚Äî L\u0026#39;ex√©cution : comment faire des actions ? IMMV ‚Äî Section 2 ‚Äî L\u0026#39;ex√©cution : comment faire des actions ? IMMV ‚Äî Section 2 ‚Äî Chapitre 1 ‚Äî Synchrone et Asynchrone, ou comment r√©agir au changement IMMV ‚Äî Section 2 ‚Äî Chapitre 2 ‚Äî Monothread, Multithread, Parall√©lisme et Concurrence, je ne peux pas tout faire en m√™me temps ! IMMV ‚Äî Section 3 ‚Äî L\u0026#39;optimisation : comment se faire passer pour un coach de vie IMMV ‚Äî Section 3 ‚Äî L\u0026#39;optimisation : comment se faire passer pour un coach de vie IMVV ‚Äî Section 3 ‚Äî Chapitre 1 ‚Äî La m√©moire, ou comment √©viter les p√©nuries dans un magasin IMVV ‚Äî Section 3 ‚Äî Chapitre 2 ‚Äî M√©mo√Øsation et Lazy loading, les techniques du fain√©ant ultime ","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/introduction/","summary":"\u003cp\u003e\u0026lsquo;Ia ora na,\u003c/p\u003e\n\u003cp\u003eL\u0026rsquo;informatique semble souvent obscure pour beaucoup. Quand je dis que je suis ing√©nieur informatique, on me demande r√©guli√®rement : ¬´ Mais tu fais quoi exactement ? ¬ª.\u003c/p\u003e\n\u003cp\u003eAvec le temps, j‚Äôai pris l‚Äôhabitude de vulgariser mon m√©tier. Et ce qui fonctionne le mieux, ce sont les exemples concrets tir√©s de la vie quotidienne.\u003c/p\u003e\n\u003cp\u003eEn √©cole d\u0026rsquo;ing√©nieur, j\u0026rsquo;apprenais beaucoup plus facilement l\u0026rsquo;informatique en partant de situations r√©elles.\n√Ä travers cette s√©rie d‚Äôarticles, \u003cstrong\u003e\u0026ldquo;L‚Äôinformatique, un miroir de la vraie vie\u0026rdquo;\u003c/strong\u003e (abr√©g√© \u003cem\u003eIMVV\u003c/em\u003e), je vais tenter d‚Äôexpliquer des concepts informatiques en m‚Äôappuyant sur des sc√®nes famili√®res du quotidien, sur un ton l√©ger.\nParce que finalement, coder un programme ou g√©rer une file d‚Äôattente au magasin, ce n‚Äôest pas si diff√©rent.\u003c/p\u003e","title":"IMMV - Introduction - L'informatique, un miroir de la vraie vie"},{"content":"Introduction Cet article est un aper√ßu tr√®s rapide des moyens de paiement en Polyn√©sie Fran√ßaise.\nUpdate (12/05/2022): suite √† quelques feedback, je me rend compte que cet article est √† destination des d√©veloppeurs de site de e-shopping, des commer√ßants, de mes confr√®res mon√©ticiens. Cet article sera complexe √† lire si vous n\u0026rsquo;avez jamais travaill√© avec un TPE, avec une plateforme de paiement, avec des cartes bancaires.\nDisclaimer: Au moment o√π j\u0026rsquo;√©cris cet article, je travaille √† l\u0026rsquo;Oc√©anienne des Services Bancaires (OSB), Ces articles ne sont pas sponsoris√©s par OSB, et j\u0026rsquo;encourage les gens √† faire des tutoriels pour les solutions des autres fournisseurs de solutions de paiement.\nLes diff√©rents types de carte En Polyn√©sie Fran√ßaise, il est possible de payer avec plusieurs types de cartes.\nCarte Bancaire (anciennement Carte Bleue, co-brand√©es ou non de Visa ou Mastercard), American Express (AMEX), Cartes privatives (Socredo Verte / Gold, Banque de Polyn√©sie Hoa, CCP de Fare Rata, Carte Tiare de la Banque de Tahiti), Union Pay International (UPI), Discover, Japan Credit Bureau (JCB) Les 3 derniers types de cartes sont surtout utilis√©s par les touristes.\nLes cartes privatives composent la majorit√© des cartes d√©tenues par les habitants de la Polyn√©sie Fran√ßaise.\nPourquoi autant de personnes ont une carte privative ? Les cartes privatives sont propos√©es par les diff√©rentes banques locales (√† l\u0026rsquo;exception d\u0026rsquo;OFINA qui √©met exclusivement les cartes AMEX). Il s\u0026rsquo;agit des banques Socredo, Banque de Tahiti, Banque de Polyn√©sie, et Fare Rata.\nLes cartes privatives sont soumises √† des r√©glementations et des frais moins co√ªteux que les cartes internationales.\nEn outre, elles sont uniquement r√©gul√©es par les banques locales contrairement aux cartes bancaires internationales, qui sont non seulement r√©gul√©es par les banques locales, mais aussi par les r√©seaux internationaux (CB, Visa, Mastercard, Union Pay, etc.).\nC\u0026rsquo;est en partie √† cause de ces r√©glementations et frais moins co√ªteux que les clients des banques doivent remplir moins de conditions pour avoir une carte privative. C\u0026rsquo;est pour cela que les cartes privatives sont plus r√©pandues sur le territoire.\nNotes:\nLes r√©seaux peuvent d√©cider d\u0026rsquo;appliquer des amendes voire de d√©sactiver le flux vers un acteur mon√©taire (banque, processeur de paiement, etc.) si celui-ci ne respecte pas la r√©glementation. Cette r√©glementation est mise √† jour r√©guli√®rement.\nPour les cartes privatives, ce sont les banques locales qui imposent leur r√©glementation, par abus de langage, on parle aussi de r√©seau privatif pour d√©signer l\u0026rsquo;ensemble de ces banques.\nCes r√©glementations sont suivies par les banques centrales des pays, par exemple l\u0026rsquo;IEOM en Polyn√©sie Fran√ßaise.\nJ\u0026rsquo;ai inclus la carte Tiare de la Banque de Tahiti dans les cartes privatives car elle a les m√™mes limitations g√©ographiques que celles-ci, et elle fonctionne aussi en m√©tropole, mais il s\u0026rsquo;agit bien d\u0026rsquo;une CB, donc elle est soumise aux r√©glementations CB.\nLes cartes Socredo privatives sont maintenant co-brand√©es UPI, mais il y a bien 2 applications dans la carte, sur le territoire, c\u0026rsquo;est l\u0026rsquo;application privative qui est utilis√©e, √† l\u0026rsquo;international, c\u0026rsquo;est l\u0026rsquo;application UPI qui est utilis√©e.\nFonctionnement des transactions Le sch√©ma √† 4 coins est l\u0026rsquo;un des sch√©mas de r√©f√©rence de la mon√©tique. Il explique les entit√©s qui entrent en jeu dans une transaction.\nLa banque √©mettrice √©met la carte et la fournit au porteur.\nLa banque acqu√©reuse fournit un contrat accepteur au commer√ßant, afin que celui-ci puisse encaisser les paiements avec les cartes, moyennant une commission, en plus des services annexes autour de l\u0026rsquo;encaissement (exemple: relev√© TPE). Les TPE et solutions de paiement en ligne sont des services d\u0026rsquo;encaissement.\nUn syst√®me d\u0026rsquo;acceptation est un logiciel ou un ensemble de logiciels, qui permet d\u0026rsquo;encaisser une carte bancaire, par exemple les TPE et les plateformes de paiement en ligne.\nIl existe 2 modes de fonctionnement pour le d√©roulement d\u0026rsquo;un paiement:\nle mode single message le mode dual message Lorsque vous payez avec votre carte, vous r√©alisez une transaction. Si toutes les r√®gles de gestion sont valid√©es, la transaction est autoris√©e.\nEn single message, la transaction autoris√©e est directement transform√©e en mouvement financier, i.e. un enregistrement est cr√©√© chez la banque acqu√©reuse qui dit \u0026ldquo;M. Client doit 1000 XPF √† M. Commer√ßant\u0026rdquo;.\nEn dual message, la transaction est enregistr√©e sur le TPE, ou sur la plateforme de paiement, puis, tous les jours √† une certaine heure, l\u0026rsquo;ensemble des transactions de la journ√©e sont envoy√©es √† la banque acqu√©reuse sous forme de mouvement financier.\nEn Polyn√©sie Fran√ßaise, le mode dual message est le plus r√©pandu, c\u0026rsquo;est d\u0026rsquo;ailleurs pour √ßa que l\u0026rsquo;on vous demande de ne pas d√©brancher votre TPE, votre internet, votre r√©seau √©lectrique.\nLes cartes et les syst√®mes d\u0026rsquo;acceptation Pour qu\u0026rsquo;un syst√®me d\u0026rsquo;acceptation puisse encaisser une carte, elle doit reconna√Ætre la carte.\nPour reconna√Ætre une carte, on utilise le BIN, qui sont les N premiers chiffres du num√©ro de la carte, N √©tant d√©fini par le r√©seau.\nDe plus, seule une application sp√©cifique √† ce r√©seau peut reconna√Ætre cette carte. Par exemple, pour une transaction avec une carte AMEX sur un TPE, c\u0026rsquo;est uniquement une application TPE AMEX qui pourra la reconna√Ætre, mais seulement si la carte fait partie d\u0026rsquo;une plage de BIN accept√©e par l\u0026rsquo;application.\nNote: Dans un TPE, il peut y avoir plusieurs applications, quand une carte est ins√©r√©e, le TPE demande √† chaque application \u0026ldquo;Peux-tu accepter cette carte?\u0026rdquo;.\nDe la m√™me mani√®re, pour une plateforme de paiement en ligne, celle-ci ne pourra accepter que des cartes qui font partie de ses plages de BIN d√©clar√©es.\nZoom sur le paiement en ligne en Polyn√©sie Fran√ßaise Comme √©nonc√© pr√©c√©demment, les cartes privatives sont majoritaires en Polyn√©sie Fran√ßaise, et elles ne sont pas reconnues √† l\u0026rsquo;√©tranger (sauf pour les cartes Socredo co-brand√©es UPI, comme cit√© pr√©c√©demment) car les BIN privatifs ne sont pas d√©clar√©s dans le monde.\nC\u0026rsquo;est pour cela qu\u0026rsquo;on ne peut pas payer avec une carte privative sur la plupart des plateformes de paiement en ligne (Paypal, Stripe, etc.), qui sont internationales.\nPour rem√©dier √† ce probl√®me, OSB propose Payzen, et la Banque de Tahiti propose SystemPay.\n√Ä mon avis, √† l\u0026rsquo;heure actuelle, c\u0026rsquo;est vers ces solutions que je conseille les commer√ßants d\u0026rsquo;aller, car il serait dommage de se priver des cartes privatives, alors qu\u0026rsquo;elles sont plus nombreuses.\nNotes:\nLes 2 solutions sont en r√©alit√© bas√©es sur les solutions Payzen et SystemPay de Lyra, soci√©t√© situ√©e en France. Certains d\u0026rsquo;entre vous ont d\u0026rsquo;ailleurs peut-√™tre d√©j√† √©t√© confus en recherchant de la documentation technique de ces solutions et se sont perdus entre:\nla documentation Payzen d\u0026rsquo;OSB, la documentation Payzen de Lyra, la documentation SystemPay de la Banque de Tahiti, la documentation SystemPay de Lyra. Je vous conseille de vous focaliser sur les documentations locales, et ensuite de compl√©ter avec les documentations de Lyra.\nConclusion Il existe plusieurs types de cartes.\nLes protocoles de paiement s\u0026rsquo;inscrivent dans un sch√©ma √† 4 coins, il y a plusieurs acteurs qui entrent en jeu.\nIl y a une r√©glementation g√©n√©rale qui englobe tous les types de cartes, et chaque type a √©galement sa r√©glementation sp√©cifique. Les banques sont soumises √† ces r√©glementations, l\u0026rsquo;IEOM et les r√©seaux (VISA, Mastercard, AMEX, etc.) veillent √† ce que les banques respectent ces r√©glementations.\nLa g√©ographie et les accords entre les acteurs sont importants pour comprendre les contraintes des syst√®mes de paiement locaux.\nEn Polyn√©sie Fran√ßaise, la majorit√© des cartes bancaires sont des cartes privatives, pour des raisons √©conomiques et r√©glementaires.\n","permalink":"http://localhost:1313/blog.dev/posts/intro-moyens-paiement/","summary":"\u003ch1 id=\"introduction\"\u003eIntroduction\u003c/h1\u003e\n\u003cp\u003eCet article est un aper√ßu tr√®s rapide des moyens de paiement en Polyn√©sie Fran√ßaise.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eUpdate (12/05/2022): suite √† quelques feedback, je me rend compte que cet article est √† destination des d√©veloppeurs de site de e-shopping, des commer√ßants, de mes confr√®res mon√©ticiens. Cet article sera complexe √† lire si vous n\u0026rsquo;avez jamais travaill√© avec un TPE, avec une plateforme de paiement, avec des cartes bancaires.\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e\u003cstrong\u003eDisclaimer\u003c/strong\u003e: Au moment o√π j\u0026rsquo;√©cris cet article, je travaille √† l\u0026rsquo;Oc√©anienne des Services Bancaires (OSB), Ces articles ne sont pas sponsoris√©s par OSB, et j\u0026rsquo;encourage les gens √† faire des tutoriels pour les solutions des autres fournisseurs de solutions de paiement.\u003c/p\u003e","title":"Introduction aux moyens de paiement en Polyn√©sie Fran√ßaise"},{"content":"Ia\u0026rsquo;orana, bonjour !\nCe post marque le d√©but du blog h√©berg√© sur Github.\nVous trouverez ici de temps en temps des articles de d√©veloppement et des POCs.\nBonne lecture !\n","permalink":"http://localhost:1313/blog.dev/posts/hello-world/","summary":"\u003cp\u003eIa\u0026rsquo;orana, bonjour !\u003c/p\u003e\n\u003cp\u003eCe post marque le d√©but du blog h√©berg√© sur Github.\u003c/p\u003e\n\u003cp\u003eVous trouverez ici de temps en temps des articles de d√©veloppement et des POCs.\u003c/p\u003e\n\u003cp\u003eBonne lecture !\u003c/p\u003e","title":"Hello World"},{"content":"La m√©moire est une ressource au m√™me titre que la fourchette dans le pr√©c√©dent article.\nDans un ordinateur, il existe plusieurs types de m√©moire que les programmes vont pouvoir utiliser en fonction de la mani√®re dont ils veulent traiter les donn√©es.\nIl faut voir la m√©moire comme un endroit o√π on entrepose des donn√©es.\nPour cet article on va parler d\u0026rsquo;un magasin, mais √ßa marche aussi avec un restaurant.\nLa m√©moire cache ‚Äî l\u0026rsquo;armoire r√©frig√©r√©e La m√©moire cache est le stockage le plus rapide qu\u0026rsquo;un programme peut utiliser. Pour un magasin, il s\u0026rsquo;agit des √©tag√®res et des armoires r√©frig√©r√©es qui forment les rayons.\nLes clients (les threads du programme) ont rapidement acc√®s aux viandes qui sont dans les armoires r√©frig√©r√©es, ils n\u0026rsquo;ont qu\u0026rsquo;√† tendre la main. Par contre, on ne peut pas stocker une grande quantit√© de viande dans ces armoires, pour l\u0026rsquo;exemple on va dire une dizaine au maximum.\nSur un ordinateur, cette m√©moire cache se trouve directement dans le processeur sous les noms cache L3, cache L2 et cache L1. On n\u0026rsquo;ira pas dans le d√©tail ici, mais sachez que plus le nombre est proche de 0, et plus le cache est rapide.\nJe prends l\u0026rsquo;exemple de l\u0026rsquo;armoire r√©frig√©r√©e car il y a un m√©canisme physique important dans un ordinateur: la m√©moire cache peut accueillir des donn√©es uniquement si elle est aliment√©e en √©lectricit√©, en cas de coupure de courant, on perd les donn√©es qui s\u0026rsquo;y trouvent.\nDe la m√™me mani√®re, dans un magasin, en cas de coupure de courant, il faut jeter toute la viande qui se trouve dans les armoires r√©frig√©r√©es*.\n*: Oui c\u0026rsquo;est pas tout √† fait le cas, mais en cas de coupure prolong√©e √ßa l\u0026rsquo;est.\nLa m√©moire vive ‚Äî l\u0026rsquo;arri√®re du magasin Au cours d\u0026rsquo;une journ√©e, le magasin souhaite vendre bien plus que dix viandes, c\u0026rsquo;est bien normal. Pour cela, √† l\u0026rsquo;arri√®re du magasin il y a un stock r√©frig√©r√© qui peut en contenir 1000. Un employ√© viendra remplir les rayons au cours de la journ√©e.\nCette action prend du temps, l\u0026rsquo;employ√© doit :\nAller dans le stock r√©frig√©r√© R√©cup√©rer des viandes Amener les viandes dans le rayon Mettre les viandes dans l\u0026#39;armoire r√©frig√©r√©e Pendant tout ce temps, le client ne peut prendre que les viandes qui sont encore dans l\u0026rsquo;armoire, il faut donc bien faire attention √† ce que l\u0026rsquo;employ√© recharge l\u0026rsquo;armoire quand il reste encore un peu de bo√Ætes.\nDans un ordinateur, la m√©moire vive (RAM en anglais pour Random Access Memory), joue le r√¥le du stock r√©frig√©r√© tr√®s rapide qu\u0026rsquo;un programme peut utiliser, mais beaucoup moins rapide que la m√©moire cache, environ 50x √† 100x moins rapide.\nEt tout comme la m√©moire cache, la RAM peut accueillir des donn√©es uniquement si elle est aliment√©e en √©lectricit√©.\nC\u0026rsquo;est pour √ßa qu\u0026rsquo;on appelle √ßa de la m√©moire vive, elle doit √™tre aliment√©e.\nAttends, mais tu dis que la RAM est tr√®s rapide, mais le processus pour recharger la m√©moire cache est lent ? On ne peut pas juste utiliser une grande quantit√© de m√©moire cache?\nLa m√©moire cache co√ªte tr√®s cher, beaucoup plus que la RAM. L\u0026rsquo;√©tat actuel est donc un compromis entre rapidit√© et co√ªt, un probl√®me typique en ing√©nierie.\nLe stockage ‚Äî la ferme en Nouvelle-Z√©lande Le stockage d\u0026rsquo;un ordinateur est compos√© des diff√©rents disques durs (HDD, SDD, etc.). Il s\u0026rsquo;agit d\u0026rsquo;une m√©moire persistante, c\u0026rsquo;est-√†-dire que m√™me en cas de coupure de courant, les donn√©es restent √©crites dans les disques.\nPour notre magasin, de la viande qui reste utilisable m√™me en cas de coupure\u0026hellip; Eh bien ce sont les boeufs vivants √† la ferme.\nTon analogie est d√©go√ªtante\nOui je sais, j\u0026rsquo;ai pas mieux, d√©sol√©. En m√™me temps, je ne peux pas vous dire que de la viande fra√Æche, qui reste longtemps √† l\u0026rsquo;air libre, est encore utilisable.\nEn plus, il y a plein d\u0026rsquo;√©tapes entre un boeuf vivant et un steak dans l\u0026rsquo;armoire !\nTout √† fait, mais c\u0026rsquo;est la meilleure analogie possible pour te faire comprendre pourquoi, en cas de coupure, si tu n\u0026rsquo;as pas sauvegard√© ton fichier Word depuis longtemps, tu perds tes donn√©es. Tant que tu n\u0026rsquo;as pas sauvegard√©, tes modifications restent dans le cache et la RAM.\nEt pourquoi en Nouvelle-Z√©lande ?\nOh, √ßa c\u0026rsquo;est parce qu\u0026rsquo;aller chercher une donn√©e dans un disque, c\u0026rsquo;est tr√®s lent compar√© √† aller la chercher dans la RAM. Si tu as un disque SSD c\u0026rsquo;est 10x plus lent, si tu as un disque HDD, c\u0026rsquo;est 100x plus lent.\nSi tu joues √† des jeux vid√©o un peu gourmands en ressources, tu as s√ªrement remarqu√© des √©crans de chargement plus ou moins longs. C\u0026rsquo;est surtout parce que le programme r√©cup√®re les donn√©es qui sont sur le disque.\nOptimiser la m√©moire ‚Äî pas besoin d\u0026rsquo;√™tre mentaliste Vous l\u0026rsquo;aurez donc compris, un magasin a diff√©rents types de m√©moire √† sa disposition. La mani√®re dont il orchestre les denr√©es √† travers ces diff√©rents composants lui permet d\u0026rsquo;anticiper les variations de stock, et limiter le risque de p√©nurie.\nLorsqu\u0026rsquo;un d√©veloppeur code un programme, il peut aussi anticiper l\u0026rsquo;utilisation des donn√©es et les charger avant d\u0026rsquo;en avoir besoin.\nDans l\u0026rsquo;exemple du jeu vid√©o, pourquoi est-ce que toutes les donn√©es ne sont pas charg√©es d√®s le d√©but? Moi j\u0026rsquo;en ai marre des √©crans de chargement.\nTout d\u0026rsquo;abord, ce chargement se fait du stockage vers la RAM (puis vers le cache), ensuite, si on chargeait toutes les donn√©es d\u0026rsquo;un coup, il y a de fortes chances pour que ta RAM soit satur√©e.\nA priori, le d√©veloppeur ne sait pas si tu as peu ou beaucoup de RAM disponible, et puis, maintenir deux versions du code, un qui charge toutes les donn√©es, et un qui charge via les √©crans de chargement, c\u0026rsquo;est du travail suppl√©mentaire qui n\u0026rsquo;apporte pas grand chose.\nLes √©crans de chargement sont un compromis : plut√¥t que de risquer de crasher ton ordinateur, le d√©veloppeur a cod√© le programme de sorte √† charger uniquement le contenu qui sera utilis√© dans le niveau, pour tous les niveaux.\nConclusion Dans cet article, on a vu les diff√©rentes m√©moires utilis√©es par les programmes. √Ä l\u0026rsquo;image d\u0026rsquo;un magasin qui √©vite les p√©nuries, un d√©veloppeur doit jongler avec ces m√©moires pour que son programme tourne correctement.\nDans le prochain article, IMVV ‚Äî Section 3 ‚Äî Chapitre 2 ‚Äî M√©mo√Øsation et Lazy loading, les technique du fain√©ant ultime, nous verrons des techniques qui feront de toi un bon fain√©ant.\n‚Üê Retour √† la section\n‚Üê Retour √† l‚Äôintroduction\n","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/optimisation/memoire/","summary":"\u003cp\u003eLa m√©moire est une \u003cstrong\u003eressource\u003c/strong\u003e au m√™me titre que la fourchette dans le \u003ca href=\"../../l-execution/threads/\"\u003epr√©c√©dent article\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eDans un ordinateur, il existe plusieurs types de m√©moire que les programmes vont pouvoir utiliser en fonction de la mani√®re dont ils veulent traiter les donn√©es.\u003c/p\u003e\n\u003cp\u003eIl faut voir la m√©moire comme un endroit o√π on entrepose des donn√©es.\u003c/p\u003e\n\u003cp\u003ePour cet article on va parler d\u0026rsquo;un magasin, mais √ßa marche aussi avec un restaurant.\u003c/p\u003e\n\u003ch2 id=\"la-m√©moire-cache--larmoire-r√©frig√©r√©e\"\u003eLa m√©moire cache ‚Äî l\u0026rsquo;armoire r√©frig√©r√©e\u003c/h2\u003e\n\u003cp\u003eLa \u003cstrong\u003em√©moire cache\u003c/strong\u003e est le stockage \u003cstrong\u003ele plus rapide\u003c/strong\u003e qu\u0026rsquo;un programme peut utiliser. Pour un magasin, il s\u0026rsquo;agit des √©tag√®res et des armoires r√©frig√©r√©es qui forment les rayons.\u003c/p\u003e","title":"IMVV ‚Äî Section 3 ‚Äî Chapitre 1 ‚Äî La m√©moire, ou comment √©viter les p√©nuries dans un magasin"},{"content":"Dans le pr√©c√©dent article, IMVV ‚Äî Section 1 ‚Äî Chapitre 3 ‚Äî Structures de contr√¥le et algorithme, apprendre √† r√©fl√©chir, on a vu les diff√©rentes structures de contr√¥le et les algorithmes.\nMaintenant on va parler de la mani√®re dont on r√©alise un ensemble de t√¢ches ‚Äî c‚Äôest ce qu‚Äôon appelle en informatique un mode d‚Äôex√©cution. C\u0026rsquo;est applicable aussi bien pour un humain que pour un ordinateur.\nN\u0026rsquo;oublie pas que les objectifs de ces articles sont :\nTe donner une meilleure compr√©hension des bases de l‚Äôinformatique, T\u0026rsquo;inspirer pour analyser ou optimiser les situations du quotidien, ou peut-√™tre, qui sait, te donner envie d\u0026rsquo;explorer encore plus loin\u0026hellip; jusqu‚Äô√† en faire ton m√©tier. Programme et application ‚Äî c\u0026rsquo;est quoi la diff√©rence ? Un programme informatique est un ensemble d\u0026rsquo;algorithmes. Le mot application veut dire la m√™me chose.\nC‚Äôest juste que application, √ßa sonne plus moderne, m√™me si ce mot existe depuis longtemps.\nMerci le marketing Apple et son App Store. üòÑ\nSynchrone ‚Äî Avoir un serveur d√©di√© √† sa table, quel luxe Prenons l\u0026rsquo;exemple d\u0026rsquo;un restaurant chic. Dans ce restaurant chic, il y a 2 tables. Chaque table a son serveur attitr√©, celui-ci r√©pond uniquement aux besoins de sa table.\nPour la suite de cet exercice de pens√©e, on va dire qu\u0026rsquo;il y a 2 familles (famille 1, famille 2), 2 tables (table 1, table 2), 1 serveur, 1 chef.\nLa s√©quence d\u0026rsquo;actions que le serveur doit faire, l\u0026rsquo;algorithme est :\nSi une famille arrive: Accueillir la famille Installer la famille sur une table libre Prendre la commande Donner la commande au chef R√©cup√©rer les plats Servir les plats √† la famille Faire payer la famille Fin si La famille 1 arrive au restaurant, le serveur les accueille et les installe √† la table 1. Il reste en attente de leur commande, √† proximit√©*.\nQuand la famille 1 est pr√™te, vu que le serveur est √† c√¥t√©, ils passent commande. Le serveur s\u0026rsquo;en va ensuite en cuisine pour donner la commande au chef. Le serveur attend les plats. Le chef pr√©pare les plats.\nUne fois que les plats sont pr√™ts, il les r√©cup√®re et les sert √† la famille 1. La famille 1 paie et s\u0026rsquo;en va, heureuse de l\u0026rsquo;attention port√©e.\n*: A ce moment, la famille 2 arrive au restaurant, ils ne sont pas accueillis, puisque le serveur est en attente de la commande de la famille 1. Alors la famille 2 repart, agac√©e, ils laisseront un mauvais avis sur internet.\nDans cette configuration, le serveur ex√©cute ses t√¢ches de mani√®re synchrone, cela veut dire qu\u0026rsquo;il ex√©cute l\u0026rsquo;algorithme √©tape par √©tape sans interruption. Si une √©tape n√©cessite d\u0026rsquo;attendre, par exemple quand il doit attendre que la famille choisisse sa commande, alors il attend, on dit que le mode synchrone est bloquant. Le serveur va au bout de son algorithme.\nMais c\u0026rsquo;est nul, il y a une famille qui n\u0026rsquo;a pas √©t√© servie\u0026hellip;\nSi on reste dans le mode d\u0026rsquo;ex√©cution synchrone, le probl√®me est qu\u0026rsquo;il n\u0026rsquo;y a pas assez de serveur. S\u0026rsquo;il y avait autant de serveurs de tables et de chefs, il n\u0026rsquo;y aurait aucun souci. Chaque famille aurait √©t√© ravie d\u0026rsquo;avoir un serveur et un chef d√©di√©. Mais on verrait plut√¥t cette disposition dans les restaurants luxueux, qui peuvent se permettre d\u0026rsquo;avoir 100 tables, 100 serveurs et 100 chefs.\nPar d√©faut, les applications sont synchrones, car √† part le probl√®me de ressources, c‚Äôest bien plus simple de faire une t√¢che apr√®s l‚Äôautre, cependant, de nos jours, de plus en plus de syst√®mes sont asynchrones (exemple: navigateurs, certains serveurs applicatifs √† la mode).\nüìå Exemples dans la vie r√©elle Une personne qui suit une proc√©dure critique Pr√©parer une salade üíª Exemples en informatique Un distributeur de billets Une imprimante partag√©e Asynchrone ‚Äî Un serveur pour les gouverner tous ‚Äî Oui c\u0026rsquo;est une r√©f√©rence au Seigneur des Anneaux üòÑ ‚Äî\nReprenons l\u0026rsquo;exemple du restaurant, toujours avec 2 familles (famille 1, famille 2), 2 tables (table 1, table 2), 1 serveur, 1 chef.\nMais cette fois, on change l\u0026rsquo;algorithme :\nQuand une famille arrive, alors : Le serveur les accueille Il les installe √† une table libre Il leur donne un menu Il passe √† autre chose Fin quand Quand une famille appelle le serveur pour commander, alors : Le serveur prend la commande Il la transmet au chef Il passe √† autre chose Fin quand Quand la sonnette en cuisine retentit (plats pr√™ts), alors : Le serveur r√©cup√®re les plats Le serveur sert les plats √† la bonne table Il passe √† autre chose Fin quand Quand une famille veut payer, alors : Le serveur encaisse Il lib√®re la table Il passe √† autre chose Fin quand Cet algorithme est diff√©rent de ceux qu\u0026rsquo;on a vus jusqu\u0026rsquo;√† pr√©sent.\n\u0026ldquo;Quand \u0026hellip;,\u0026rdquo; marque un √©v√©nement, \u0026ldquo;alors\u0026rdquo; introduit le bloc d\u0026rsquo;instructions √† ex√©cuter en r√©action, et \u0026ldquo;Fin quand\u0026rdquo; marque la fin de ce bloc.\nOn dit alors qu\u0026rsquo;on fait de la programmation √©v√©nementielle (ou programmation r√©active) et que l\u0026rsquo;algorithme est asynchrone : il fait de sorte √† r√©agir aux √©v√©nements ext√©rieurs.\nLorsqu‚Äôun √©v√©nement se produit, le serveur y r√©agit imm√©diatement : il ex√©cute les instructions associ√©es, puis passe √† l‚Äô√©v√©nement suivant s‚Äôil y en a un. Sinon, il attend. Ce mode d\u0026rsquo;ex√©cution est donc non bloquant.\nEt dans les faits, c\u0026rsquo;est ce que fait la plupart des personnes, serveurs ou non. Quand on fait une t√¢che, et qu\u0026rsquo;on est interrompu par un bug, un appel, un coll√®gue de travail qui pose une question, on est en r√©action.\nAvec cet algorithme, un serveur seul pourra tr√®s bien g√©rer 2 tables.\nüìå Exemples dans la vie r√©elle Les serveurs dans la plupart des restaurants Mon chien quand il entend les croquettes üíª Exemples en informatique Les notifications sur ton smartphone Un arrosage automatique avec capteur d\u0026#39;humidit√© Attention : comme en mode synchrone, s\u0026rsquo;il y a trop de table pour un seul serveur, plusieurs √©v√©nements risquent de s\u0026rsquo;accumuler en attente de traitement.\nMais du coup, comment on fait pour r√©soudre ce probl√®me ?\nOn verra √ßa dans le prochain article.\nConclusion Dans cet article, on a vu ce qu\u0026rsquo;√©taient les modes d\u0026rsquo;ex√©cution synchrone et asynchrone.\nSi tu souhaites continuer cette aventure, tu peux regarder la suite ici: IMMV ‚Äî Section 2 ‚Äî Chapitre 2 ‚Äî Monothread et Multithread, je ne peux pas tout faire en m√™me temps !\n‚Üê Retour √† la section\n‚Üê Retour √† l‚Äôintroduction\n","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/l-execution/sync-async/","summary":"\u003cp\u003eDans le pr√©c√©dent article, \u003ca href=\"../../les-bases/structures-de-controle/\"\u003eIMVV ‚Äî Section 1 ‚Äî Chapitre 3 ‚Äî Structures de contr√¥le et algorithme, apprendre √† r√©fl√©chir\u003c/a\u003e, on a vu les diff√©rentes structures de contr√¥le et les algorithmes.\u003c/p\u003e\n\u003cp\u003eMaintenant on va parler de la mani√®re dont on r√©alise un ensemble de t√¢ches ‚Äî c‚Äôest ce qu‚Äôon appelle en informatique un \u003cstrong\u003emode d‚Äôex√©cution\u003c/strong\u003e. C\u0026rsquo;est applicable aussi bien pour un humain que pour un ordinateur.\u003c/p\u003e\n\u003cp\u003eN\u0026rsquo;oublie pas que les objectifs de ces articles sont :\u003c/p\u003e","title":"IMMV ‚Äî Section 2 ‚Äî Chapitre 1 ‚Äî Synchrone et Asynchrone, ou comment r√©agir au changement"},{"content":"Quand tu prends un ticket pour attendre ton tour, que tu fais la queue √† la caisse, que tu prends l‚Äôassiette du haut de la pile pour mettre la table, ou que tu cliques sur le bouton \u0026lsquo;Retour\u0026rsquo; (‚Üê) du navigateur internet‚Ä¶ Tu manipules sans le savoir des concepts appell√©s en informatique des structures de donn√©es, et les algorithmes associ√©s qui les font vivre.\nDans cet article, on va mettre un peu de clart√© l√†-dedans : pas besoin de coder pour comprendre, on va illustrer tout √ßa avec des situations de la vie courante.\nD√©finitions Avant d‚Äôaller plus loin, quelques d√©finitions simples, histoire de parler le m√™me langage :\nDonn√©e : une donn√©e, c‚Äôest une information num√©rique. √áa peut √™tre un num√©ro de passeport, le nombre de dents d‚Äôune personne, la liste des t√¢ches que tu as encore repouss√©es √† demain, ou ton nombre d‚Äôamis sur Facebook. Structure de donn√©es : imagine une bo√Æte, une √©tag√®re ou un sac √† dos, dans lequel tu ranges tes informations d‚Äôune certaine mani√®re pour mieux les retrouver ou les traiter. C‚Äôest la fa√ßon dont on organise les donn√©es. Algorithme : un algorithme, c‚Äôest une suite d‚Äô√©tapes ou d‚Äôinstructions pour manipuler ces donn√©es. Comme une recette de cuisine, ou une proc√©dure √† suivre pour obtenir un r√©sultat. File et pile : deux mani√®res d‚Äôattendre‚Ä¶ ou de repousser Maintenant qu‚Äôon a les bases, voyons deux structures de donn√©es tr√®s simples mais tr√®s puissantes : la file et la pile. On les retrouve partout dans notre quotidien, souvent sans s‚Äôen rendre compte.\nLa file ‚Äî ou comment attendre son tour (FIFO) Imagine une file d‚Äôattente devant un guichet. Le premier arriv√© est le premier servi. C‚Äôest ce qu‚Äôon appelle en informatique une file (ou queue en anglais), avec une logique FIFO : First In, First Out (premier entr√©, premier sorti).\nD√®s que quelqu‚Äôun est servi, c‚Äôest le suivant dans la file qui avance.\nüéØ C‚Äôest une structure √©quitable : chacun attend selon son ordre d‚Äôarriv√©e.\nüìå Exemples dans la vie r√©elle Faire la queue √† la caisse du magasin La liste des courses (si on lit de haut en bas) üíª Exemples en informatique Les syst√®mes de ticket dans les accueils (le num√©ro est g√©n√©r√© par un programme, et les appels suivent cet ordre) Les commentaires sur une publication Facebook (affich√©s du plus ancien au plus r√©cent) La pile ‚Äî ou comment empiler les priorit√©s (LIFO) Maintenant, imagine une pile de livres que tu dois r√©viser pour un examen. Tu prends celui du haut, tu le lis, puis tu prends celui juste en dessous, et ainsi de suite. Tu lis dans l‚Äôordre inverse de celui dans lequel tu as empil√© les livres. Tu viens de d√©piler ta pile, toujours en commen√ßant par le haut.\nC‚Äôest exactement le principe de la pile (ou stack en anglais), qui suit la logique LIFO : Last In, First Out (dernier entr√©, premier sorti).\nTu vas peut-√™tre me dire :\nOui mais je peux aussi prendre le livre du bas, non‚ÄØ?\nC‚Äôest vrai. Alors prenons un autre exemple, un peu plus r√©aliste :\nImagine que tu tombes sur un article de journal qui parle des nodules polym√©talliques dans les fonds marins de la Polyn√©sie fran√ßaise. Tu n‚Äôy connais pas grand-chose, mais √ßa t‚Äôintrigue. Tu lis l‚Äôarticle, puis tu ouvres une page Wikip√©dia pour comprendre ce qu‚Äôest un nodule polym√©tallique. Sur cette page, tu vois un lien vers les m√©taux rares, puis vers la transition √©nerg√©tique, puis‚Ä¶ tu vois o√π je veux en venir.\nEn lisant ce premier article, tu ne soup√ßonnais pas toute la pile d‚Äôinformations que tu allais explorer. Et tu viens de d√©piler ce savoir, en commen√ßant par la derni√®re page ouverte.\nüéØ Ce n‚Äôest pas une structure √©quitable : ce qui arrive en dernier est trait√© en premier. Mais c‚Äôest tr√®s utile pour remonter dans le temps, ou revenir sur ses pas, exactement comme le bouton \u0026ldquo;retour\u0026rdquo; de ton navigateur.\nüìå Exemples dans la vie r√©elle Les cartons dans un coffre bien rempli Les diff√©rentes strates de terre quand tu creuses dans ton jardin (c\u0026#39;est de la terre empil√©e au cours du temps) üíª Exemples en informatique Le bouton \u0026#39;Retour\u0026#39; (‚Üê) de ton navigateur Les annulations successives (Undo, CTRL\u0026#43;Z) dans un √©diteur de texte Si tu veux conna√Ætre d\u0026rsquo;autres structures de donn√©es, tu peux regarder le prochain article : IMVV ‚Äî Section 1 ‚Äî Chapitre 2 ‚Äî Autres structures de donn√©es, j\u0026rsquo;organise mon bordel\n‚Üê Retour √† la section\n‚Üê Retour √† l‚Äôintroduction\n","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/les-bases/file-et-pile/","summary":"\u003cp\u003eQuand tu prends un ticket pour attendre ton tour, que tu fais la queue √† la caisse, que tu prends l‚Äôassiette du haut de la pile pour mettre la table, ou que tu cliques sur le bouton \u0026lsquo;Retour\u0026rsquo; (‚Üê) du navigateur internet‚Ä¶\nTu manipules sans le savoir des concepts appell√©s en informatique \u003cstrong\u003edes structures de donn√©es\u003c/strong\u003e, et \u003cstrong\u003eles algorithmes\u003c/strong\u003e associ√©s qui les font vivre.\u003c/p\u003e\n\u003cp\u003eDans cet article, on va mettre un peu de clart√© l√†-dedans : pas besoin de coder pour comprendre, on va illustrer tout √ßa avec des situations de la vie courante.\u003c/p\u003e","title":"IMVV ‚Äî Section 1 ‚Äî Chapitre 1 ‚Äî File ou Pile ? L'art de passer avant les autres"},{"content":"√ätre fiu est un art, une vertu. Non, ce n\u0026rsquo;est pas une blague. Tu ne me crois pas ?\n\u0026ldquo;We will encourage you to develop the three great virtues of a programmer: laziness, impatience, and hubris.\u0026rdquo; ‚Äî Larry Wall, Programming perl (1991).\n\u0026ldquo;I choose a lazy person to do a hard job. Because a lazy person will find an easy way to do it.\u0026rdquo; ‚Äî Bill Gates.\nProgrammer une machine pour qu\u0026rsquo;elle fasse le travail √† ta place, c\u0026rsquo;est de la fain√©antise.\nEt les d√©veloppeurs sont des personnes qui ont atteint l\u0026rsquo;apog√©e du fiu. Apr√®s tout, qui passe 2 heures √† automatiser une t√¢che qui prend 2 minutes par jour, √† part quelqu\u0026rsquo;un de vraiment fiu ?\nDans cet article, on verra deux techniques que les d√©veloppeurs utilisent, mais que toi aussi tu utilises sans le savoir.\nM√©mo√Øsation ‚Äî ou comment garder une information dans un coin de la t√™te Supposons que tu sois responsable de la paie dans une petite entreprise. Pour ce mois-ci, tu dois calculer les salaires √† verser √† 2 employ√©s.\nTu sais que tous les deux ont un salaire brut de 200 000 XPF. De plus, ils ont fait un excellent travail, ton patron t\u0026rsquo;a dit de leur rajouter une prime de 50% de leur salaire brut. Enfin, l\u0026rsquo;un d\u0026rsquo;eux a fait des heures suppl√©mentaires, il faut donc lui rajouter 20 000 XPF brut sur sa paie.\nPour le 1er salari√©, tu pars de 200 000, tu rajoutes 50%, soit 100 000, ce qui lui fera 300 000 XPF brut pour ce mois.\nPour le 2√®me salari√©, tu sais que le d√©but du calcul est le m√™me, alors tu r√©utilises le nombre 300 000, et tu rajoutes 20 000 d\u0026rsquo;heures suppl√©mentaires, donc 320 000 bruts.\nMais tu t‚Äôes souvenu que le calcul 200 000 + 50 % avait d√©j√† √©t√© fait, donc tu as directement repris le r√©sultat. Ce que tu viens de faire, c\u0026rsquo;est de la m√©mo√Øsation (memoization en anglais).\nC‚Äôest exactement ce que fait ton navigateur web quand il te propose un r√©sultat de recherche d√©j√† visit√©, ou qu‚Äôun site charge plus vite la 2·µâ fois.\nInstant Dev En informatique, on utilise un tableau ou un tableau associatif pour stocker les r√©sultats interm√©diares, ces structures sont stock√©es dans la RAM. De cette fa√ßon, on peut rapidement r√©cup√©rer le r√©sultat qui nous int√©resse. Attention : En informatique, comme dans la vraie vie, garder des informations de c√¥t√© peut conduire √† une saturation de la m√©moire. C\u0026rsquo;est un des facteurs de burn-out. M√©nagez votre cerveau, il n\u0026rsquo;y a pas de mal √† noter les choses, de plus, vous aurez moins de risque d\u0026rsquo;oublier des informations importantes.\nEager loading et Lazy loading ‚Äî l\u0026rsquo;art d\u0026rsquo;√™tre pr√©par√© √† toute √©ventualit√© Supposons que tu aies invit√© tes amis √† manger √† la maison ce soir. Tu as invit√© 10 personnes, mais tu sais que 5 vont vraiment venir, les autres t\u0026rsquo;ont dit \u0026ldquo;peut-√™tre\u0026rdquo;.\nPour √©viter d\u0026rsquo;√™tre √† court de nourriture, tu as pr√©par√© pour 10 personnes, au pire, ceux qui sont venus repartiront avec quelques plats, et tu termineras le reste durant la semaine.\nLes premiers invit√©s vont arriver, tu n\u0026rsquo;as pas encore pr√©par√© la table. Tu as 2 solutions :\nTout pr√©parer d\u0026rsquo;avance : sortir toutes les assiettes, les verres, les chaises, les couverts, etc. (solution eager loading : tu charges tout d√®s le d√©but).\nAttendre de voir qui arrive : d√®s qu‚Äôun invit√© entre, tu sors une assiette, un verre, une chaise, etc. (solution lazy loading : tu ne charges que ce qui est n√©cessaire, au moment o√π c‚Äôest n√©cessaire).\nMais tu peux aussi exiger des invit√©s qu\u0026rsquo;ils te disent, la veille au plus tard, si oui ou non ils viennent !\nOui, et que se passe-t-il si l\u0026rsquo;un d\u0026rsquo;eux a un emp√™chement ? En mettant tous les couverts, tu as d√©pens√© de l\u0026rsquo;√©nergie pour mettre son couvert, et tu en as re-d√©pens√© pour le ranger. Ce n\u0026rsquo;est pas tr√®s optimis√©.\nSi tous les invit√©s arrivent, tu auras fait plusieurs allers-retours pour mettre les couverts, ce n\u0026rsquo;est pas tr√®s optimis√© non plus\u0026hellip;\nAh, tu mets le doigt sur un point important : les techniques d\u0026rsquo;optimisation doivent √™tre utilis√©es uniquement si on est s√ªr de leur utilit√©.\n\u0026ldquo;Premature optimization is the root of all evil\u0026rdquo; ‚Äî Sir Tony Hoare et Donald Knuth.\nC\u0026rsquo;est un pi√®ge dans lequel tombent plusieurs d√©veloppeurs juniors. Les √©coles sup√©rieures enseignent diff√©rentes techniques d\u0026rsquo;optimisation, on est conditionn√©s √† d√©tecter un probl√®me et √† appliquer imm√©diatement une solution : c\u0026rsquo;est normal.\nAvec l\u0026rsquo;exp√©rience, on apprend qu\u0026rsquo;on a besoin d\u0026rsquo;optimiser uniquement quand une personne se plaint de lenteurs. Et dans ce cas, on cherche o√π se trouve la source du probl√®me, on mesure.\nOk mais\u0026hellip; √ßa me fait bizarre de ne pas pr√©parer une belle table, c\u0026rsquo;est pas un bon accueil.\nDans ce cas, le eager loading a une vraie plus-value. Tu charges tout d\u0026rsquo;un coup pour l\u0026rsquo;effet waow, pour que les personnes se disent que chez toi, on est bien re√ßu. La principale fonctionnalit√© n\u0026rsquo;est pas d\u0026rsquo;optimiser le fait de mettre la table, mais d\u0026rsquo;impressionner tes convives.\nJe finis cette partie avec un exemple informatique : Facebook ne charge pas toutes les publications d√®s le d√©but, seulement une partie.\nQuand tu commences √† scroller, tu vois ces publications. Si tu te rapproches de la fin, Facebook charge les prochaines publications, on appelle √ßa infinite scroll.\nAinsi, Facebook ne prend pas trop de temps √† se charger au d√©but.\nAttends mais\u0026hellip; Dans l\u0026rsquo;article pr√©c√©dent, on parlait des √©crans de chargement des jeux vid√©os, √ßa y ressemble un peu, non ?\nExactement, les √©crans de chargement sont aussi du lazy loading, et pour rejoindre ce qu\u0026rsquo;on disait sur ces √©crans : le lazy loading √©conomise de la m√©moire.\nEnfin, √† ton avis, comment Facebook sait qu\u0026rsquo;il faut charger la suite des publications ?\nEh bien en fait, l\u0026rsquo;application est r√©active, on peut √©crire son algorithme de chargement comme ceci:\nQuand un certain seuil de scroll est atteint (par exemple, 90% du contenu affich√©), alors: Charge la suite du contenu Passe √† autre chose Fin quand Tu l\u0026rsquo;auras remarqu√©, c\u0026rsquo;est ce qu\u0026rsquo;on a vu dans l\u0026rsquo;article IMMV ‚Äî Section 2 ‚Äî Chapitre 1 ‚Äî Synchrone et Asynchrone, ou comment r√©agir au changement.\nConclusion Dans cet article, on a vu diff√©rents m√©canimes d\u0026rsquo;optimisation.\nPlus important encore, si on se rappelle des pr√©c√©dents articles, on a vu qu\u0026rsquo;en informatique, en plus de combiner les structures de donn√©es et les structures de contr√¥le, on pouvait combiner les concepts d\u0026rsquo;optimisation et de modes d\u0026rsquo;ex√©cution.\nLe prochaine article est en cours de r√©daction, on parlera de complexit√©.\n‚Üê Retour √† la section\n‚Üê Retour √† l‚Äôintroduction\n","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/optimisation/memoisation/","summary":"\u003cp\u003e√ätre \u003cem\u003efiu\u003c/em\u003e est un art, une vertu. \u003cstrong\u003eNon, ce n\u0026rsquo;est pas une blague\u003c/strong\u003e. Tu ne me crois pas ?\u003c/p\u003e\n\u003cp\u003e\u003cem\u003e\u0026ldquo;We will encourage you to develop the three great virtues of a programmer: laziness, impatience, and hubris.\u0026rdquo; ‚Äî Larry Wall, Programming perl (1991)\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003e\u0026ldquo;I choose a lazy person to do a hard job. Because a lazy person will find an easy way to do it.\u0026rdquo; ‚Äî Bill Gates\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eProgrammer une machine pour qu\u0026rsquo;elle fasse le travail √† ta place, c\u0026rsquo;est de la fain√©antise.\u003c/p\u003e","title":"IMVV ‚Äî Section 3 ‚Äî Chapitre 2 ‚Äî M√©mo√Øsation et Lazy loading, les techniques du fain√©ant ultime"},{"content":"Dans le pr√©c√©dent article, IMMV ‚Äî Section 2 ‚Äî Chapitre 1 ‚Äî Synchrone et Asynchrone, ou comment r√©agir au changement, on a vu les diff√©rents modes d\u0026rsquo;ex√©cution.\nOn s\u0026rsquo;√©tait arr√™t√© sur le probl√®me suivant : Comment faire pour r√©pondre √† la mont√©e en charge, √† l\u0026rsquo;accumulation de t√¢ches ?\nEh bien, dans cet article, on va voir comment on r√©sout ce probl√®me, en informatique comme dans la vraie vie : les m√©canismes sont souvent tr√®s proches.\nPour cela on va continuer avec notre exemple de restaurant. Et on va expliciter diff√©rents termes que j\u0026rsquo;avais regroup√©s en parlant d\u0026rsquo;algorithmes et de programmes.\nN\u0026rsquo;oublie pas que les objectifs de ces articles sont :\nTe donner une meilleure compr√©hension des bases de l‚Äôinformatique, T\u0026rsquo;inspirer pour analyser ou optimiser les situations du quotidien, ou peut-√™tre, qui sait, te donner envie d\u0026rsquo;explorer encore plus loin\u0026hellip; jusqu‚Äô√† en faire ton m√©tier. Le programme ‚Äî l\u0026rsquo;id√©e de restaurant En informatique, quand on parle de programme, on parle uniquement d\u0026rsquo;un ensemble d\u0026rsquo;algorithmes, des t√¢ches qui le composent. Il n\u0026rsquo;est pas encore en train d\u0026rsquo;√™tre ex√©cut√©. Par exemple, Facebook est un programme ‚Äî mais tant que tu ne l‚Äôouvres pas, il ne fait rien.\nEh bien, c\u0026rsquo;est pareil pour un restaurant dans la vie de tous les jours, quand je parle du restaurant √† un ami, je n\u0026rsquo;y suis pas physiquement. Je parle juste du concept de restaurant, de l\u0026rsquo;id√©e que je m\u0026rsquo;en fais.\nLe processus - le restaurant ouvert Si je veux parler du restaurant physiquement ouvert, avec les employ√©s qui s\u0026rsquo;activent, en informatique il faut plut√¥t utiliser le terme processus. C\u0026rsquo;est le programme en cours d\u0026rsquo;ex√©cution.\nUn processus poss√®de son propre contexte d\u0026rsquo;ex√©cution, c\u0026rsquo;est un gros mot pour dire qu\u0026rsquo;il a ses propres ressources, et que personne ne peut lui prendre ses ressources.\nEn effet, quand le restaurant est ouvert, les assiettes qu\u0026rsquo;il utilise sont ses propres assiettes, ses propres ressources. Il n\u0026rsquo;y a pas un autre restaurant qui lui prendrait ses assiettes pendant qu\u0026rsquo;il est ouvert, sinon il risque d\u0026rsquo;avoir des assiettes manquantes.\nPour ex√©cuter un algorithme, un processus est compos√© d\u0026rsquo;un thread principal, et il peut avoir d\u0026rsquo;autres thread.\nLe thread ‚Äî la proc√©dure en cours d\u0026rsquo;ex√©cution du serveur Le thread (fil d\u0026rsquo;ex√©cution en fran√ßais) est ce qu‚Äôon appelle la proc√©dure en train de s\u0026rsquo;ex√©cuter. C‚Äôest un peu comme un serveur qui suit activement une fiche d\u0026rsquo;instructions √† un instant donn√©. Attention, ce n\u0026rsquo;est pas le serveur.\nEn informatique, on dit que le thread est l‚Äôunit√© d‚Äôex√©cution, C‚Äôest la plus petite unit√© qu‚Äôun ordinateur puisse piloter pour ex√©cuter du code. il n‚Äôexiste pas d‚Äôunit√© plus petite qu‚Äôun thread pour ex√©cuter une t√¢che.\nMaintenant qu‚Äôon comprend ce qu‚Äôest un thread ‚Äî une proc√©dure en cours d\u0026rsquo;ex√©cution ‚Äî il faut se demander qui ex√©cute cette proc√©dure.\nLe coeur ‚Äî le serveur On y arrive enfin, dans un ordinateur, le composant physique qui ex√©cute un thread s\u0026rsquo;appelle un coeur (core en anglais). Pour notre restaurant, ce core est le serveur. C\u0026rsquo;est lui, physiquement, qui prend les commandes, sert les plats, etc.\nConcurrence, parall√©lisme, multithread et monothread ‚Äî ou comment servir 2 familles en m√™me temps Un serveur ne peut faire qu\u0026rsquo;une seule chose √† la fois, √† un instant donn√© : quand il prend une commande √† l\u0026rsquo;instant T, il ne peut pas, en m√™me temps, servir des plats.\nPar contre, il pourrait s\u0026rsquo;interrompre pendant les t√¢ches, par exemple, au lieu de prendre toutes les commandes de la famille, d\u0026rsquo;un coup, il peut :\nprendre la commande d\u0026rsquo;un 1er plat aller chercher un plat √† servir servir le plat prendre la commande d\u0026rsquo;un 2√®me plat aller chercher un autre plat √† servir servir le plat etc. Attention: ici nous n\u0026rsquo;avons pas d√©coup√© les actions. C\u0026rsquo;est juste que le serveur a jongl√© entre les 2 t√¢ches \u0026ldquo;prendre la commande\u0026rdquo; et \u0026ldquo;servir les plats\u0026rdquo;. On appelle ce comportement la concurrence, car les 2 t√¢ches sont en concurrence pour √™tre termin√©es.\nDans un ordinateur, les threads sont concurrents, et comme √©nonc√© plus haut, √©tant donn√© qu\u0026rsquo;un processus est compos√© d\u0026rsquo;un thread principal, on dit que les processus sont concurrents.\nDans la vraie vie il y a des situations o√π on ne jongle pas avec les t√¢ches, o√π il faut √™tre concentr√© sur une t√¢che\nTout √† fait, et dans ce cas, s\u0026rsquo;il y a trop de t√¢ches pour une seule personne, on fait intervenir une 2√®me personne, une 3√®me etc.\nDans notre restaurant, avec 2 serveurs, pendant que l\u0026rsquo;un prend les commandes de la famille 1, un autre peut servir les plats de la famille 2. On appelle √ßa le parall√©lisme, les proc√©dures/threads sont ex√©cut√©s en parall√®le.\nEnfin, dans un restaurant, si on ne peut avoir qu\u0026rsquo;un seul serveur qui suit activement une fiche d\u0026rsquo;instructions ‚Äî un seul thread ‚Äî, on dit que le restaurant/le programme est monothread. S\u0026rsquo;il y en a plusieurs, on dit que le restaurant/serveur est multithread.\nDu coup, la solution pour le restaurant est d\u0026rsquo;embaucher plus de serveurs ?\nC\u0026rsquo;est l\u0026rsquo;une des solutions, oui, mais ce n\u0026rsquo;est pas la seule. Il y a globalement 2 chemins pour r√©pondre √† une mont√©e en charge. On peut :\noptimiser les algorithmes pour les rendre plus performants et/ou changer le mode d\u0026rsquo;ex√©cution, ou alors on peut mettre plus de coeurs et faire du multithread. De la m√™me mani√®re, dans la vraie vie, on peut :\nmieux former le serveur et/ou optimiser les proc√©dures qu\u0026rsquo;il doit suivre et/ou le motiver pour qu\u0026rsquo;il travaille plus vite, embaucher plus de serveurs. Dans tous les cas, je ne m\u0026rsquo;avancerai pas pour apprendre √† un restaurateur son m√©tier.\nLe partage de ressources ‚Äî ou comment partager une fourchette Dans le restaurant, on va maintenant se mettre du point de vue d\u0026rsquo;un couple, venu manger en t√™te √† t√™te dans une ambiance cosy, tamis√©e, √† l\u0026rsquo;abri des regards.\nLe serveur leur annonce la mauvaise nouvelle: il y a assez de couverts pour 2, sauf pour la fourchette. S\u0026rsquo;ils souhaitent tout de m√™me manger ici, ils devront se partager la fourchette, et interdiction de manger avec les doigts.\nLe couple discute, et finalement ce n\u0026rsquo;est pas un probl√®me, ils sont l√† pour profiter de l\u0026rsquo;instant.\nUne fois la commande pass√©e et les plats servis, Le couple commence √† manger. Mais comment s‚Äôorganisent-ils ?\nBen ils mangent chacun leur tour, ou alors l\u0026rsquo;un mange d\u0026rsquo;abord, et l\u0026rsquo;autre ensuite ?\nBingo, que l\u0026rsquo;un mange d\u0026rsquo;abord, puis l\u0026rsquo;autre, ou qu\u0026rsquo;ils mangent √† tour de r√¥le, dans tous les cas, ils doivent se partager une ressource : la fourchette. Donc l\u0026rsquo;un prend le contr√¥le de la ressource/fourchette, fait des actions avec cette ressource, puis lib√®re la ressource. L\u0026rsquo;autre peut √† son tour prendre le contr√¥le de la ressource, etc.\nDans un ordinateur, c\u0026rsquo;est pareil, dans un processus, les threads doivent se partager les ressources. De m√™me, les processus doivent se partager les ressources.\nC\u0026rsquo;est pour √ßa que sur un ordinateur, quand tu ouvres un document Word partag√© avec tes coll√®gues, parfois tu as un message du genre \u0026ldquo;le fichier est d√©j√† ouvert par\u0026hellip;\u0026rdquo; car le document Word est une fourchette ressource partag√©e entre ton application Word, et celle de ton coll√®gue.\nElle est bizarre ton explication\u0026hellip;\nJe ne vois pas de quoi tu parles.\nQuoiqu\u0026rsquo;il en soit, tu comprends donc qu\u0026rsquo;en rajoutant plus de threads/cores/personnes, on ne va pas forc√©ment plus vite. Ils doivent se synchroniser pour partager les ressources et parfois attendre.\nInstant Dev En informatique, ce partage de ressource s‚Äôappelle une section critique. Pour √©viter que deux t√¢ches utilisent la ressource en m√™me temps, on utilise des verrous (locks). Conclusion Dans cet article, on a vu diff√©rents termes informatiques qui permettent de comprendre un peu plus comment fonctionne un ordinateur, comment on pouvait r√©pondre √† la mont√©e en charge de diff√©rentes mani√®res, et que finalement, c\u0026rsquo;est tr√®s proche de la vie r√©elle.\nNous avons fini cette section \u0026ldquo;IMMV ‚Äî Section 2 ‚Äî L\u0026rsquo;ex√©cution : comment faire des actions ?\u0026rdquo;.\nDans la prochaine section, IMMV ‚Äî Section 3 ‚Äî L\u0026rsquo;optimisation : comment se faire passer pour un coach de vie, on verra comment optimiser des applications et la vie r√©elle.\n‚Üê Retour √† la section\n‚Üê Retour √† l‚Äôintroduction\n","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/l-execution/threads/","summary":"\u003cp\u003eDans le pr√©c√©dent article, \u003ca href=\"../sync-async/\"\u003eIMMV ‚Äî Section 2 ‚Äî Chapitre 1 ‚Äî Synchrone et Asynchrone, ou comment r√©agir au changement\u003c/a\u003e, on a vu les diff√©rents modes d\u0026rsquo;ex√©cution.\u003c/p\u003e\n\u003cp\u003eOn s\u0026rsquo;√©tait arr√™t√© sur le probl√®me suivant : Comment faire pour r√©pondre √† la mont√©e en charge, √† l\u0026rsquo;accumulation de t√¢ches ?\u003c/p\u003e\n\u003cp\u003eEh bien, dans cet article, on va voir comment on r√©sout ce probl√®me, en informatique \u003cstrong\u003ecomme dans la vraie vie\u003c/strong\u003e : les m√©canismes sont souvent tr√®s proches.\u003c/p\u003e","title":"IMMV ‚Äî Section 2 ‚Äî Chapitre 2 ‚Äî Monothread, Multithread, Parall√©lisme et Concurrence, je ne peux pas tout faire en m√™me temps !"},{"content":"Dans le pr√©c√©dent article IMVV ‚Äî Section 1 ‚Äî Chapitre 1 ‚Äî File ou Pile ? L\u0026rsquo;art de passer avant les autres on a d√©couvert les files et les piles. Cette fois, on va survoler plusieurs autres structures de donn√©es (data structures en anglais) qu\u0026rsquo;on utilise tr√®s souvent en informatique\u0026hellip; et dans la vraie vie.\nN\u0026rsquo;oublie pas que les objectifs de ces articles sont :\nTe donner une meilleure compr√©hension des bases de l‚Äôinformatique, T\u0026rsquo;inspirer pour analyser ou optimiser les situations du quotidien, ou peut-√™tre, qui sait, te donner envie d\u0026rsquo;explorer encore plus loin\u0026hellip; jusqu‚Äô√† en faire ton m√©tier. Le tableau ‚Äî la base de presque tout Tu as peut-√™tre remarqu√© dans le pr√©c√©dent article que la file et la pile se ressemblent beaucoup. En r√©alit√©, on peut les repr√©senter toutes les deux avec la m√™me structure : un tableau.\nEn informatique, le tableau (ou array en anglais) est l‚Äôune des structures les plus simples : on range des √©l√©ments les uns √† la suite des autres, dans un espace de taille fixe, et chaque √©l√©ment est rep√©r√© par sa position (ou index).\nPrenons un exemple simple : un tableau d\u0026rsquo;amis √† inviter pour un anniversaire, mais dans mon carnet d\u0026rsquo;adresses je n\u0026rsquo;ai que 6 places.\nAmis Manutea Vai Purotu Heiarii Reva (vide) index 0 1 2 3 4 5 L‚Äôindex est simplement la position de la personne dans le tableau, ce n\u0026rsquo;est pas un ordre.\nDans la plupart des langages informatiques, l\u0026rsquo;index commence √† 0, et pas √† 1.\nCet index nous permet d\u0026rsquo;acc√©der directement √† Vai, l\u0026rsquo;amie √† l\u0026rsquo;index 2 (ou 3√®me √©l√©ment), pour voir son num√©ro de t√©l√©phone par exemple.\nEt ce tableau peut se comporter diff√©remment selon la mani√®re dont on ajoute et retire les √©l√©ments. Par exemple, on peut le faire fonctionner comme une file ou une pile, simplement en changeant les r√®gles du jeu.\nSi c\u0026rsquo;est une file : On ajoute les amis √† la fin, par exemple, Jean arrive apr√®s Reva : Amis Manutea Vai Purotu Heiarii Reva Jean index 0 1 2 3 4 5 Et on traite depuis le d√©but, on retire Manutea du tableau : Amis Vai Purotu Heiarii Reva Jean (vide) index 0 1 2 3 4 5 Pour une pile : On ajoute les amis au d√©but, Jean arrive avant Manutea : Amis Jean Manutea Vai Purotu Heiarii Reva index 0 1 2 3 4 5 Et on traite toujours depuis le d√©but, on retire Jean du tableau : Amis Manutea Vai Purotu Heiarii Reva (vide) index 0 1 2 3 4 5 Dans les deux cas, on utilise un tableau pour stocker les amis. C‚Äôest la logique d‚Äôajout et de retrait qui transforme ce tableau en pile ou en file.\nüéØ Et c‚Äôest exactement pour √ßa que, lorsqu‚Äôon traite des dossiers empil√©s, il vaut mieux commencer par ceux du bas. Sinon, on inverse l‚Äôordre d‚Äôarriv√©e‚Ä¶ et ce n‚Äôest plus une file d‚Äôattente, mais une injustice organis√©e.\nS\u0026rsquo;il n\u0026rsquo;y a que 6 places, que se passe-t-il si j\u0026rsquo;ai 7 amis ?\nD\u0026rsquo;abord, je te f√©licite d\u0026rsquo;avoir autant d\u0026rsquo;amis. Ensuite, on peut s\u0026rsquo;en sortir, en achetant un carnet d\u0026rsquo;adresse qui a plus de places, et on recopie nos amis dans ce nouveau carnet.\nC\u0026rsquo;est similaire en informatique, on fait un nouveau tableau, plus grand, et on recopie.\nHeureusement, en informatique on a invent√© une autre structure.\nLa liste ‚Äî comme le tableau, mais dynamique La liste (ou list en anglais), c‚Äôest comme un tableau, mais en mieux : la taille n‚Äôest pas fixe.\nTu peux ajouter ou supprimer des √©l√©ments √† tout moment, sans te soucier du nombre de places pr√©vues au d√©part. Et √† tout moment, tu peux demander : ‚ÄúCombien d‚Äô√©l√©ments j‚Äôai dans cette liste ?‚Äù ‚Äî et obtenir une r√©ponse fiable.\nC‚Äôest la version souple du tableau, celle qu‚Äôon trouve dans la majorit√© des langages de programmation modernes.\nRefaisons les exemples de pile et de file, mais cette fois-ci avec des listes.\nSi c\u0026rsquo;est une file : On ajoute les amis √† la fin, par exemple, Jean arrive apr√®s Reva : Amis Manutea Vai Purotu Heiarii Reva Jean index 0 1 2 3 4 5 Nombre d\u0026rsquo;√©l√©ments: 6\nEt on traite depuis le d√©but, on retire Manutea du tableau : Amis Vai Purotu Heiarii Reva Jean index 0 1 2 3 4 Nombre d\u0026rsquo;√©l√©ments: 5\nPour une pile : On ajoute les amis au d√©but, Jean arrive avant Manutea : Amis Jean Manutea Vai Purotu Heiarii Reva index 0 1 2 3 4 5 Nombre d\u0026rsquo;√©l√©ments: 6\nEt on traite toujours depuis le d√©but, on retire Jean du tableau : Amis Manutea Vai Purotu Heiarii Reva index 0 1 2 3 4 Nombre d\u0026rsquo;√©l√©ments: 5\nOn remarque qu\u0026rsquo;il n\u0026rsquo;y a plus la case (vide) et le nombre d\u0026rsquo;√©l√©ments change.\nInstant Dev Pour permettre cette souplesse, la liste est plus gourmande en calculs:\ncalcul √† la vol√©e du nombre d\u0026rsquo;√©l√©ments, r√©allocation de m√©moire. Mais en vrai, √† moins que tu ne codes un satellite, une carte embarqu√©e, ou une console des ann√©es 80, o√π chaque octet compte, il y a peu de raisons d‚Äôutiliser un tableau fixe. Une liste dynamique t\u0026rsquo;√©vitera bien des migraines.\nLe tableau et la liste sont des structures tr√®s basiques et tr√®s puissantes, elles sont les bases de beaucoup d\u0026rsquo;autres structures qu\u0026rsquo;on verra par la suite.\nLe tableau associatif ‚Äî ou comment indexer On avait pris l\u0026rsquo;exemple d\u0026rsquo;un carnet d\u0026rsquo;adresses qu\u0026rsquo;on avait mis dans un tableau ou dans une liste. C\u0026rsquo;est d√©j√† tr√®s bien de pouvoir stocker ta liste d\u0026rsquo;amis, mais si tu as des centaines d\u0026rsquo;amis et que tu veux appeler Vai pour aller √† la mer, tu vas gal√©rer pour chercher dans ce carnet d\u0026rsquo;adresse.\nEn effet, avec les 2 derni√®res structures, tu dois parcourir les √©l√©ments un par un, jusqu\u0026rsquo;√† tomber sur Vai. Tu vas perdre beaucoup de temps √† chercher son num√©ro, √ßa va t\u0026rsquo;√©nerver, tu vas l\u0026rsquo;appeler, lui dire \u0026ldquo;mais quelle id√©e d\u0026rsquo;avoir un pr√©nom qui commence par V!\u0026rdquo;, elle va s\u0026rsquo;√©nerver, vous ne serez plus amis, alors que tu voulais juste aller surfer.\nJe m\u0026rsquo;emporte un peu? Peut-√™tre.\nPour r√©soudre ce probl√®me, en informatique on a invent√© le tableau associatif (ou map en anglais). On utilise le tableau, et on va profiter de l\u0026rsquo;index pour justement indexer les √©l√©ments.\nPour cela, on a besoin de r√©fl√©chir un peu:\nOn sait que l\u0026rsquo;index est une position dans le tableau, donc un nombre On sait que les pr√©noms commencent par une lettre (oui, je suis s√©rieux), on va supposer que c\u0026rsquo;est une lettre de l\u0026rsquo;alphabet, et pas un caract√®re sp√©cial comme *$@ On sait qu\u0026rsquo;il y a 26 lettres dans l\u0026rsquo;alphabet =\u0026gt; Eur√™ka: On peut utiliser la 1√®re lettre du pr√©nom, la transformer en index en utilisant sa position dans l\u0026rsquo;alphabet, et associer le pr√©nom √† cet index. On dit que l\u0026rsquo;index est une cl√© et que le pr√©nom est une valeur par exemple:\nManutea =\u0026gt; M =\u0026gt; M est la 14√®me lettre de l\u0026rsquo;alphabet, donc Manutea sera le 14√®me √©l√©ment. Pour rappel, l\u0026rsquo;index commence √† 0, donc M = index 13. cl√©: 13 valeur: Manutea\nPour Heiarii on aura: cl√©: 7 valeur: Heiarii\nCe qui nous donne:\nAmis (vide) (vide) (vide) (vide) (vide) (vide) (vide) Heiarii (vide) (vide) (vide) (vide) (vide) Manutea (vide) Purotu (vide) Reva (vide) (vide) (vide) Vai (vide) (vide) (vide) (vide) index 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 Avec cette map, on pourra facilement acc√©der aux informations de Vai, puisqu\u0026rsquo;on pourra juste aller directement √† l\u0026rsquo;index 21.\nInstant Dev En vrai, pour calculer l\u0026rsquo;index, on utilise une fonction de hachage (hash en anglais) qui permet de transformer les cl√©s en index. C\u0026rsquo;est pour √ßa qu\u0026rsquo;on appelle √ßa un HashMap en Java. Oui mais moi je n\u0026rsquo;ai pas envie de m\u0026rsquo;emb√™ter √† compter sur mes doigts √† quelle position est la lettre V\u0026hellip;\nTu as raison, dans la vraie vie, dans ton carnet d\u0026rsquo;adresse pour chaque lettre tu as une encoche o√π la lettre y est marqu√©e, et tu notes les informations dans les pages qui correspondent √† cette lettre.\nCarnet d'adresses papier, en rouge les encoches ‚Äî source: Wikim√©dia En informatique c\u0026rsquo;est le m√™me principe, sauf qu\u0026rsquo;on ne peut pas utiliser de lettre comme index, alors on est oblig√© de trouver cette astuce.\nEt en plus, il est nul ton carnet d\u0026rsquo;adresse, comment je fais si j\u0026rsquo;ai 2 amis qui s\u0026rsquo;appellent Vai et Vahine? Je mets Vahine dans la case juste apr√®s? Et si j\u0026rsquo;ai des centaines d\u0026rsquo;amis comme tu le disais au d√©but, je fais comment pour les mettre dans les 26 cases ?\nOk, tranquille, pas de stress.\nEn informatique, on peut combiner les structures, plut√¥t que d\u0026rsquo;associer un pr√©nom √† une lettre, on va associer une liste de pr√©noms √† une lettre. Ci-dessous on r√©√©crit notre map et on ajoute Vahine :\nCl√©s 7 13 15 17 21 ‚Üì ‚Üì ‚Üì ‚Üì ‚Üì Heiarii Manutea Purotu Reva Vai Vahine Comme tu l\u0026rsquo;as remarqu√©, au lieu de mettre directement les pr√©noms dans les cases, il y a des fl√®ches qui pointent vers des listes. On appelle √ßa un pointeur (ou pointer en anglais). c‚Äôest un m√©canisme qui permet √† l‚Äôordinateur de dire \u0026ldquo;Va chercher les donn√©es ailleurs.\u0026rdquo; Plut√¥t que de stocker directement les valeurs, on stocke l‚Äôendroit o√π elles se trouvent.\nC\u0026rsquo;est la plus grande force de l\u0026rsquo;informatique, on peut combiner diff√©rents concepts abstraits pour r√©pondre √† notre besoin.\nL\u0026rsquo;ensemble ‚Äî une structure unique Si comme moi tu fais ta liste de courses durant la semaine en pr√©vision des grandes courses du dimanche, tu as peut-√™tre d√©j√† eu la liste qui ressemble √† :\nlait oeufs pops viande salade oeufs Tu remarques que les oeufs apparaissent 2 fois. On appelle √ßa un doublon.\n√áa peut arriver si lundi tu t\u0026rsquo;es fait une omelette avec les derniers oeufs, tu les as not√©s pour en racheter. Puis que vendredi, tu voulais faire un g√¢teau, mais tu t\u0026rsquo;es souvenu que tu n\u0026rsquo;avais plus d\u0026rsquo;oeufs\u0026hellip; et alors tu les as r√©√©crits.\nC\u0026rsquo;est tr√®s sp√©cifique comme explication\u0026hellip; C\u0026rsquo;est ce qui t\u0026rsquo;es arriv√©, pas vrai?\nTu n\u0026rsquo;as pas de preuve. Cette accusation est fausse.\nBref, la liste et le tableau n\u0026rsquo;ont aucun moyen d\u0026rsquo;emp√™cher la pr√©sence de doublons dans leurs √©l√©ments. C\u0026rsquo;est pour √ßa qu\u0026rsquo;en informatique on a invent√© l\u0026rsquo;ensemble (ou set en anglais), une structure o√π chaque √©l√©ment est unique.\nPar contre, le set n\u0026rsquo;est pas ordonn√© comme le tableau et la liste. Il n\u0026rsquo;y a pas d\u0026rsquo;index permettant d\u0026rsquo;acc√©der directement au 2√®me ou 6√®me √©l√©ment.\nInstant Dev En informatique, pour faire un set, on utilise en fait une map o√π la cl√© est l\u0026rsquo;√©l√©ment. Le calcul de hash nous garantit qu\u0026rsquo;il ne peut pas y avoir de doublon. Et on met une valeur arbitraire dans la valeur associ√©e, comme 1 ou PRESENT.\nSi on veut une structure ordonn√©e sans doublons, on peut :\ncoder une liste avec une fonction d\u0026rsquo;ajout qui rejette les doublons, transformer un set en liste, utiliser une structure sp√©cialis√©e, comme LinkedHashSet en Java üìå Exemples dans la vie r√©elle L\u0026#39;ensemble des ingr√©dients qu‚Äôil te reste dans le frigo L\u0026#39;ensemble des invit√©s √† ton anniversaire üíª Exemples en informatique L\u0026#39;ensemble des num√©ros de passeport en Polyn√©sie fran√ßaise L\u0026#39;ensemble de tes amis Facebook Le graphe ‚Äî ou comment appeler l\u0026rsquo;ami d\u0026rsquo;un ami d\u0026rsquo;un ami Tu pr√©pares ta liste d‚Äôinvit√©s pour ton anniversaire, tu comptes inviter tout ton carnet d\u0026rsquo;adresses.\nEt l√†, tu r√©alises que tu n‚Äôas pas le contact de Paul. Tu l\u0026rsquo;as crois√© en soir√©e et il √©tait cool, tu voudrais l\u0026rsquo;inviter\u0026hellip; mais tu as oubli√© de lui demander son num√©ro.\nHeureusement, tu sais que Purotu le conna√Æt.\nTu l\u0026rsquo;appelles\u0026hellip; zut, elle n\u0026rsquo;a pas son num√©ro. Mais elle te donne le num√©ro de Tiare, une autre amie de Paul. Tu appelles Tiare, tu te pr√©sentes, tu l\u0026rsquo;invite √©galement car tu n\u0026rsquo;es pas un sauvage. Et tu lui demandes le num√©ro de Paul.\nBingo, elle l\u0026rsquo;a, tu appelles Paul et il est chaud pour venir √† ton anniversaire.\nLes liens entre ces personnes peuvent √™tre repr√©sent√©s par un graphe (ou graph en anglais).\nEt ce que tu viens de faire, sans t\u0026rsquo;en rendre compte, c\u0026rsquo;est un parcours de graphe, un algorithme !\n%%{ init: { 'theme': 'base', 'themeVariables': { 'primaryColor': '#ddd', 'primaryTextColor': '#007acc', 'primaryBorderColor': '#007acc', 'lineColor': '#007acc' } } }%% graph TD A[Toi] --- B[Manutea] A --- C[Vai] A --- D[Purotu] A --- E[Heiarii] A --- F[Reva] A --- G[Jean] D --- H[Tiare] H --- I[Paul] Graphe de relation entre les personnes Ce graphe est non orient√©, c\u0026rsquo;est-√†-dire qu\u0026rsquo;il n\u0026rsquo;y a pas de sens entre les √©l√©ments. Chaque case est un noeud, et chaque trait est une ar√™te.\nEffectivement pour √©viter de f√¢cher les personnes, on ne va pas dire \u0026ldquo;Purotu est l\u0026rsquo;ami de Tiare, mais Tiare n\u0026rsquo;est pas l\u0026rsquo;ami de Purotu\u0026rdquo;.\nPar contre, on peut utiliser un graphe orient√© pour repr√©senter les appels que tu as pass√©s.\n%%{ init: { 'theme': 'base', 'themeVariables': { 'primaryColor': '#ddd', 'primaryTextColor': '#007acc', 'primaryBorderColor': '#007acc', 'lineColor': '#007acc' } } }%% graph TD A[Toi] --\u003e B[Manutea] A --\u003e C[Vai] A --\u003e D[Purotu] A --\u003e E[Heiarii] A --\u003e F[Reva] A --\u003e G[Jean] A --\u003e H[Tiare] A --\u003e I[Paul] Graphe des appels que tu as pass√© Ici, chaque case est un noeud, tout comme le graphe non orient√©, mais cette fois-ci, chaque fl√®che est une ar√™te, et donne le sens d\u0026rsquo;appel.\nOn a donc les m√™mes donn√©es, mais on utilise la structure adapt√©e √† ce qu\u0026rsquo;on veut repr√©senter.\nEt c\u0026rsquo;est quoi le parcours de graphe?\nJe suis heureux que tu poses cette question, mais ta question d√©passe le cadre de cet article.\nConclusion On a d√©j√† vu pas mal de choses, je te laisse relire, essayer de combiner les structures entre elles, te renseigner sur internet en cherchant \u0026ldquo;structures de donn√©es\u0026rdquo; ou \u0026ldquo;data structure\u0026rdquo;.\nIl existe beaucoup de structures de donn√©es, celles qui sont pr√©sent√©es dans cet article sont juste les plus basiques, celles qu\u0026rsquo;on apprend dans les premi√®res heures de cours de programmation.\nSi tu souhaites continuer cette aventure, tu peux regarder la suite ici: IMVV ‚Äî Section 1 ‚Äî Chapitre 3 ‚Äî Structures de contr√¥le et algorithme, apprendre √† r√©fl√©chir\n‚Üê Retour √† la section\n‚Üê Retour √† l‚Äôintroduction\n","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/les-bases/structures-de-donnees/","summary":"\u003cp\u003eDans le pr√©c√©dent article \u003ca href=\"../file-et-pile/\"\u003eIMVV ‚Äî Section 1 ‚Äî Chapitre 1 ‚Äî File ou Pile ? L\u0026rsquo;art de passer avant les autres\u003c/a\u003e on a d√©couvert les files et les piles. Cette fois, on va survoler plusieurs autres \u003cstrong\u003estructures de donn√©es\u003c/strong\u003e (\u003cem\u003edata structures\u003c/em\u003e en anglais) qu\u0026rsquo;on utilise tr√®s souvent en informatique\u0026hellip; et dans la vraie vie.\u003c/p\u003e\n\u003cp\u003eN\u0026rsquo;oublie pas que les objectifs de ces articles sont :\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eTe donner une meilleure compr√©hension des bases de l‚Äôinformatique,\u003c/li\u003e\n\u003cli\u003eT\u0026rsquo;inspirer pour analyser ou optimiser les situations du quotidien,\u003c/li\u003e\n\u003cli\u003eou peut-√™tre, qui sait, te donner envie d\u0026rsquo;explorer encore plus loin\u0026hellip; jusqu‚Äô√† en faire ton m√©tier.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"le-tableau--la-base-de-presque-tout\"\u003eLe tableau ‚Äî la base de presque tout\u003c/h2\u003e\n\u003cp\u003eTu as peut-√™tre remarqu√© dans le pr√©c√©dent article que la \u003cstrong\u003efile\u003c/strong\u003e et la \u003cstrong\u003epile\u003c/strong\u003e se ressemblent beaucoup. En r√©alit√©, on peut les repr√©senter toutes les deux avec la m√™me structure : un \u003cstrong\u003etableau\u003c/strong\u003e.\u003c/p\u003e","title":"IMVV ‚Äî Section 1 ‚Äî Chapitre 2 ‚Äî Autres structures de donn√©es, j'organise mon bordel"},{"content":"Dans l\u0026rsquo;article pr√©c√©dent IMVV ‚Äî Section 1 ‚Äî Chapitre 2 ‚Äî Autres structures de donn√©es, j\u0026rsquo;organise mon bordel, on s\u0026rsquo;√©tait arr√™t√© sur ta question :\nEt c\u0026rsquo;est quoi le parcours de graphe?\nDans cet article, on va parler des structures de contr√¥le (control flow statements en anglais), qu\u0026rsquo;on utilise dans des algorithmes (algorithms en anglais).\nAvant d\u0026rsquo;expliquer l\u0026rsquo;algorithme que tu as fait, le parcours de graphe, on doit expliquer les structures de contr√¥le.\nN\u0026rsquo;oublie pas que les objectifs de ces articles sont :\nTe donner une meilleure compr√©hension des bases de l‚Äôinformatique, T\u0026rsquo;inspirer pour analyser ou optimiser les situations du quotidien, ou peut-√™tre, qui sait, te donner envie d\u0026rsquo;explorer encore plus loin\u0026hellip; jusqu‚Äô√† en faire ton m√©tier. Pseudo-code ‚Äî l\u0026rsquo;art de la cuisine Quand tu fais un g√¢teau, tu r√©alises les actions suivantes:\nPr√©chauffer le four Verser la farine dans le saladier Casser les oeufs et mettre le contenu dans le saladier Verser le lait dans le saladier Remuer Verser la pr√©paration dans un moule Mettre le moule au four Attendre 20 minutes Eteindre le four Sortir le moule du four D√©mouler Toute cette suite d\u0026rsquo;√©tapes est ce qu\u0026rsquo;on appelle un algorithme, et la fa√ßon dont on l\u0026rsquo;a √©crit, √ßa s\u0026rsquo;appelle du pseudo-code, parce que √ßa ressemble √† un langage de programmation, mais ce n\u0026rsquo;en est pas un.\nMais pourquoi on appelle √ßa un algorithme? on peut pas juste dire une suite d\u0026rsquo;actions?\nJe te laisse chercher sur internet pourquoi on appelle √ßa un algorithme.\nLa boucle for ‚Äî ou comment √™tre fiu Ton meilleur ami Manutea te demande \u0026ldquo;Comment tu as fait pour inviter toutes ces personnes √† ton anniversaire ?\u0026rdquo;. Laquelle de ces 2 phrases dirais-tu :\nJ\u0026rsquo;ai appel√© Manutea, puis j\u0026rsquo;ai appel√© Vai, puis j\u0026rsquo;ai appel√© Purotu, puis j\u0026rsquo;ai appel√© Heiarii, puis j\u0026rsquo;ai appel√© Reva, puis j\u0026rsquo;ai appel√© Jean, puis j\u0026rsquo;ai appel√© Tiare, puis j\u0026rsquo;ai appel√© Paul J\u0026rsquo;ai pris mon carnet d\u0026rsquo;adresses, puis pour chaque contact, j\u0026rsquo;ai appel√© le num√©ro correspondant La 1√®re phrase est un algorithme sans boucle (loop en anglais) : chaque action est √©crite explicitement.\nLa 2√®me, elle, utilise une boucle ‚Äî tu r√©p√®tes la m√™me action pour chaque contact. Sans forc√©ment y penser, tu utilises aussi une variable : un espace dans ta t√™te pour m√©moriser un num√©ro, que tu remplaces √† chaque nouvel appel.\nCette mani√®re de r√©p√©ter une action avec une variable, c‚Äôest exactement ce qu‚Äôun ordinateur fait quand on lui demande de parcourir une liste.\nSi tu relis bien la 2√®me phrase, tu verras que pour chaque est en gras. En anglais, pour chaque se dit for each, c\u0026rsquo;est pour √ßa qu\u0026rsquo;on l\u0026rsquo;appelle la boucle for dans la plupart des langages.\nSi on essayait d\u0026rsquo;√©crire un algorithme, sous forme de pseudo-code simple pour d√©crire la 2√®me phrase, √ßa donnerait :\nDans mon carnet d\u0026#39;adresses, pour chaque contact: J\u0026#39;ai appel√© le num√©ro correspondant au contact J\u0026#39;ai invit√© l\u0026#39;ami Fin pour \u0026ldquo;Dans mon carnet d\u0026rsquo;adresses, pour chaque contact\u0026rdquo; marque le d√©but de la boucle, et \u0026ldquo;Fin pour\u0026rdquo; marque la fin de la boucle.\nEntre ces 2 lignes, les actions \u0026ldquo;J\u0026rsquo;ai appel√© le num√©ro correspondant au contact\u0026rdquo; et \u0026ldquo;J\u0026rsquo;ai invit√© l\u0026rsquo;ami\u0026rdquo; forment ce qu\u0026rsquo;on appelle un bloc d\u0026rsquo;instructions.\nPar convention, on indente ce bloc ‚Äî on le d√©cale vers la droite ‚Äî pour montrer visuellement qu\u0026rsquo;il est √† l\u0026rsquo;int√©rieur de la boucle.\nOk, et quel est le rapport entre la boucle for et fiu comme marqu√© dans le titre ?\nSi on devait √©crire l\u0026rsquo;algorithme de la 1√®re phrase, √ßa donnerait :\nJ\u0026#39;ai appel√© Manutea J\u0026#39;ai appel√© Vai J\u0026#39;ai appel√© Purotu J\u0026#39;ai appel√© Heiarii J\u0026#39;ai appel√© Reva J\u0026#39;ai appel√© Jean J\u0026#39;ai appel√© Tiare J\u0026#39;ai appel√© Paul Chaque ligne est une action, donc il faut √©crire autant de lignes qu\u0026rsquo;il y a de contacts dans ta liste de contacts. Maintenant, que se passerait-il si tu devais inviter 100 personnes? Tu serais fiu.\nAlors qu\u0026rsquo;avec la boucle, tu n\u0026rsquo;as pas besoin de changer ton algorithme, c\u0026rsquo;est le m√™me, que tu aies 6 contacts ou 100.\nOui mais dans la vraie vie je dois quand m√™me appeler les amis un par un\nCet exemple n‚Äôest pas l√† pour dire que tu vas programmer ton t√©l√©phone ‚Äî mais pour te faire sentir la puissance de la boucle : un seul bloc, quelle que soit la longueur de ta liste.\nDans la vraie vie, tu fais un groupe Facebook avec tous tes amis et tu postes des messages d\u0026rsquo;informations dans le groupe pour organiser, idem pour un groupe SMS. Si t\u0026rsquo;es old school, tu postes un message dans le journal local et viendra qui verra. D\u0026rsquo;ailleurs j\u0026rsquo;en parlerai dans de prochains articles.\nLa boucle while ‚Äî ou comment faire ses devoirs avant d\u0026rsquo;aller jouer Quand tu √©tais plus jeune, on t\u0026rsquo;a s√ªrement d√©j√† dit \u0026ldquo;Fais d\u0026rsquo;abord tes devoirs, ensuite tu peux aller jouer\u0026rdquo;, ou autrement dit \u0026quot;Tant que tu n\u0026rsquo;a pas fini tes devoirs, tu travailles, ensuite tu peux aller jouer\u0026quot;.\nSi on devait √©crire cet algorithme, √ßa donnerait:\nTant que je n\u0026#39;ai pas fini mes devoirs: Je fais mes devoirs Fin tant que Je vais jouer \u0026ldquo;Tant que je n\u0026rsquo;ai pas fini mes devoirs\u0026rdquo; marque le d√©but de la boucle, et \u0026ldquo;Fin tant que\u0026rdquo; marque la fin de la boucle.\nEntre ces 2 lignes, l\u0026rsquo;action \u0026ldquo;Je fais mes devoirs\u0026rdquo; forme le bloc d\u0026rsquo;instructions.\nTu l\u0026rsquo;auras remarqu√©, c\u0026rsquo;est tr√®s similaire √† la boucle for, sauf qu\u0026rsquo;au lieu de parcourir des √©l√©ments, on v√©rifie une condition, et on r√©p√®te la boucle si la condition n\u0026rsquo;est remplie.\nOn appelle √ßa une boucle while, car Tant que se dit while en anglais.\nEnsuite, une fois que les devoirs sont finis, on sort de la boucle, on fait la suite des instructions, donc \u0026ldquo;Je vais jouer\u0026rdquo;. On aurait aussi pu avoir d\u0026rsquo;autres instructions apr√®s la boucle for, c\u0026rsquo;est juste que l\u0026rsquo;exemple ne s\u0026rsquo;y pr√™tait pas.\nMais alors‚Ä¶ pourquoi deux types de boucles si elles font (presque) la m√™me chose ? Pourquoi une boucle for, et une boucle while ?\nEn fait, en fonction du probl√®me qu\u0026rsquo;on veut r√©soudre :\ndans certains cas on pourra compter, et dans ce cas on pr√©f√®rera utiliser une boucle for dans certains cas on ne pourra pas compter, et dans ce cas on pr√©f√®rera utiliser une boucle while Par exemple, pour un enfant qui joue dehors:\nTant qu\u0026#39;il fait beau: Je joue Fin tant que Ici, impossible de compter.\nMais tu commences peut-√™tre √† te rendre compte d\u0026rsquo;une supercherie.\nInstant Dev üí° En r√©alit√©, toutes les boucles for peuvent √™tre r√©√©crites en boucle while.\nLa boucle for n‚Äôest qu‚Äôune boucle while optimis√©e, √©crite pour √™tre plus simple √† lire‚Ä¶ quand on sait compter.\nLes 2 types de boucles sont des instructions d\u0026rsquo;it√©ration, √† la diff√©rence des instructions simples comme \u0026ldquo;Je joue\u0026rdquo;, les instructions d\u0026rsquo;it√©ration permettre d\u0026rsquo;ex√©cuter des blocs d\u0026rsquo;instructions de mani√®re r√©p√©t√©e.\nBravo, tu commences √† r√©fl√©chir comme un d√©veloppeur !\nExplications\nPour rappel:\ndans une liste, l\u0026rsquo;index commence √† 0, dans une liste, le dernier index est √©gal au nombre d\u0026rsquo;√©l√©ments de la liste moins 1 Amis Manutea Vai Purotu Heiarii Reva Jean Tiare Paul index 0 1 2 3 4 5 6 7 Nombre d\u0026rsquo;√©l√©ments: 8\nune variable c\u0026rsquo;est juste un espace m√©moire o√π on stocke une donn√©e (un tableau, une liste, un pr√©nom, un num√©ro de t√©l√©phone) Si on reprend l\u0026rsquo;exemple de la boucle for:\nDans mon carnet d\u0026#39;adresses, pour chaque contact: J\u0026#39;appelle le num√©ro correspondant au contact J\u0026#39;invite l\u0026#39;ami Fin pour Derri√®re, voici plut√¥t ce que fait un ordinateur (de mani√®re simplifi√©e) :\nJe cr√©e une variable \u0026#34;index\u0026#34;, qui vaut 0 Tant que \u0026#34;index\u0026#34; est inf√©rieur au nombre d\u0026#39;√©l√©ments (8) du carnet d\u0026#39;adresses: Je regarde le contact qui se trouve √† l\u0026#39;\u0026#34;index\u0026#34; dans le carnet d\u0026#39;adresses Je r√©cup√®re son num√©ro Je l\u0026#39;invite \u0026#34;index\u0026#34; prend la valeur \u0026#34;index\u0026#34; + 1 Fin tant que Comme tu le vois, c\u0026rsquo;est un peu plus compliqu√©, c\u0026rsquo;est pour √ßa qu\u0026rsquo;on pr√©f√®re utiliser une boucle for quand on peut compter.\nL\u0026rsquo;instruction conditionnelle ‚Äî ou pourquoi il faut respecter le code de la route Juste au-dessus, on parlait de condition dans la boucle while. Mais on n\u0026rsquo;a jamais expliqu√© ce que c\u0026rsquo;√©tait.\nUne condition est une question qu\u0026rsquo;on se pose, et la r√©ponse est soit ‚Äúoui‚Äù, soit ‚Äúnon‚Äù ‚Äî jamais les deux, jamais \u0026ldquo;un peu\u0026rdquo;.\nQuand on √©crit \u0026ldquo;Tant que je n\u0026rsquo;ai pas fini mes devoirs\u0026rdquo;, √† chaque r√©p√©tition on pose la question \u0026ldquo;Est-ce que j\u0026rsquo;ai fini mes devoirs?\u0026rdquo;.\nEn informatique, comme dans la vraie vie, une condition doit √™tre claire.\nOn peut utiliser ce concept pour faire des branchements dans notre code, dans une instruction conditionnelle (conditional statement en anglais).\nPrenons un exemple simple : tu es en voiture, tu approches un feu tricolore. Il est vert.\nQue fais-tu si le feu passe √† l‚Äôorange juste devant toi‚ÄØ?\nVoici un algorithme qui repr√©sente cette situation :\nSi le feu passe au orange, alors: Tu t\u0026#39;arr√™tes Sinon (c\u0026#39;est toujours vert): Tu continues et traverse l\u0026#39;intersection Fin si \u0026ldquo;Si le feu passe au orange,\u0026rdquo; marque le d√©but de l\u0026rsquo;instruction conditionnelle, \u0026ldquo;alors\u0026rdquo; marque la branche du si, \u0026ldquo;Sinon\u0026rdquo; marque la branche du sinon, et \u0026ldquo;Fin si\u0026rdquo; marque la fin de l\u0026rsquo;instruction conditionnelle.\nDe la m√™me mani√®re que pour les boucles, chaque branche est un bloc d\u0026rsquo;instructions. Comme pour les boucles, chaque branche forme un bloc d‚Äôinstructions, qu‚Äôon indente pour bien le rep√©rer.\nPour visualiser, imagine un arbre : chaque fois qu‚Äôune condition est test√©e, tu choisis une branche √† suivre. Le chemin d√©pend de tes r√©ponses.\nRevenons √† notre parcours de graphe Rappels Tu avais appel√© tes amis pour les inviter √† ton anniversaire, et tu avais √©t√© jusqu\u0026rsquo;au bout du monde, en sautant de relations en relations, pour inviter Paul. Tu avais fait ces actions :\nTu comptes inviter tout ton carnet d\u0026#39;adresses. Tu r√©alises que tu n‚Äôas pas le contact de Paul. Tu l\u0026#39;as crois√© en soir√©e et il √©tait cool, tu voudrais l\u0026#39;inviter... mais t\u0026#39;as oubli√© de lui demander son num√©ro. Heureusement, tu sais que Purotu le conna√Æt. Tu l\u0026#39;appelles... zut, elle n\u0026#39;a pas son num√©ro. Mais elle te donne le num√©ro de Tiare, une autre amie de Paul. Tu appelles Tiare, tu te pr√©sentes, tu l\u0026#39;invites √©galement car tu n\u0026#39;es pas un sauvage. Et tu lui demandes le num√©ro de Paul. Bingo, elle l\u0026#39;a, tu appelles Paul et il est chaud pour venir √† ton anniversaire. Ci-dessous se trouve le graphe de relation entre les personnes, un graphe non orient√©.\n%%{ init: { 'theme': 'base', 'themeVariables': { 'primaryColor': '#ddd', 'primaryTextColor': '#007acc', 'primaryBorderColor': '#007acc', 'lineColor': '#007acc' } } }%% graph TD A[Toi] --- B[Manutea] A --- C[Vai] A --- D[Purotu] A --- E[Heiarii] A --- F[Reva] A --- G[Jean] D --- H[Tiare] H --- I[Paul] Graphe de relation entre les personnes En se basant sur ce qu\u0026rsquo;on a appris dans cet article, on va √©crire un algorithme pour repr√©senter les actions que tu as r√©alis√©es pour inviter tes amis :\n# √âtape 1 : inviter tous mes amis directs (les noeuds les plus proches de \u0026#34;Toi\u0026#34; dans le graphe) Je cr√©e une variable \u0026#34;liste d\u0026#39;amis\u0026#34;, contenant tous mes amis directs Je cr√©e une variable \u0026#34;ami\u0026#34;, le contact courant Dans la \u0026#34;liste d\u0026#39;amis\u0026#34;, pour chaque \u0026#34;ami\u0026#34; : J\u0026#39;appelle \u0026#34;ami\u0026#34; Si \u0026#34;ami\u0026#34; r√©pond, alors : Je l\u0026#39;invite √† mon anniversaire Fin si Fin pour # √âtape 2 : retrouver Paul (en parcourant le graphe en largeur) Je cr√©e une variable \u0026#34;file\u0026#34;, initialis√©e avec la \u0026#34;liste d\u0026#39;amis\u0026#34; Je cr√©e une variable \u0026#34;visit√©s\u0026#34;, une liste vide Tant que la \u0026#34;file\u0026#34; n‚Äôest pas vide : Je prends le premier √©l√©ment de la \u0026#34;file\u0026#34;, je le stocke dans \u0026#34;ami\u0026#34; Si \u0026#34;ami\u0026#34; n‚Äôest pas dans \u0026#34;visit√©s\u0026#34;, alors : J‚Äôajoute \u0026#34;ami\u0026#34; √† \u0026#34;visit√©s\u0026#34; J\u0026#39;appelle \u0026#34;ami\u0026#34; Si \u0026#34;ami\u0026#34; r√©pond, alors : Je lui demande s‚Äôil conna√Æt Paul Si \u0026#34;ami\u0026#34; me donne le num√©ro de Paul : Je cr√©e une variable \u0026#34;Paul\u0026#34; J\u0026#39;appelle \u0026#34;Paul\u0026#34; Si \u0026#34;Paul\u0026#34; r√©pond, alors : Je l‚Äôinvite √† mon anniversaire Je termine la recherche Fin si Sinon : Je r√©cup√®re la liste des amis de \u0026#34;ami\u0026#34; Pour chaque \u0026#34;contact\u0026#34; dans cette liste : J‚Äôajoute \u0026#34;contact\u0026#34; √† la \u0026#34;file\u0026#34; Fin pour Fin si Fin si Fin si Fin tant que √Ä premi√®re vue, √ßa a l\u0026rsquo;air compliqu√©. Mais en fait si tu prends le temps de d√©cortiquer, de bien regarder, tu verras que ce sont juste les actions que tu as r√©alis√©s plus haut, mais dans un langage plus proche de ce que fait un ordinateur.\nLa seule chose qu\u0026rsquo;on a fait en plus des concepts de base, c\u0026rsquo;est qu\u0026rsquo;on a combin√© les structures de contr√¥le et les structures de donn√©es, et le tout nous donne notre algorithme de parcours de graphe !\nInstant Dev üí° On a parcouru le graphe en largeur, c\u0026rsquo;est-√†-dire qu\u0026rsquo;on a d\u0026rsquo;abord regard√© les noeuds voisins de notre point de d√©part.\nD\u0026rsquo;autres algorithmes connus et enseign√©s en informatique sont le parcours en profondeur, l\u0026rsquo;algorithme de Dijkstra, A* et Floyd-Warshall, tu peux regarder sur internet si √ßa t\u0026rsquo;int√©resse.\nConclusion Dans cet article on a appris ce que sont :\nLes structures de contr√¥le, Les boucles, Les conditions, Les variables, Les algorithmes. Il existe d\u0026rsquo;autres structures de contr√¥le, des types de variables, et des algorithmes qu\u0026rsquo;on peut r√©utiliser pour r√©pondre √† beaucoup de probl√®mes. Comme d\u0026rsquo;habitude, je te laisse chercher sur internet si tu veux aller plus loin.\nMais le plus important, c\u0026rsquo;est que tu commences √† r√©fl√©chir comme un d√©veloppeur, et √† comprendre le pseudo-code. Dans la vraie vie, si tu as un probl√®me complexe √† r√©soudre, tu peux essayer de l\u0026rsquo;√©crire comme on l\u0026rsquo;a fait pour le parcours de graphe. Prends ton temps et d√©compose le probl√®me.\nNous avons fini cette section \u0026ldquo;IMMV ‚Äî Section 1 ‚Äî Les Bases : structures et contr√¥le\u0026rdquo;, dans cette section, nous avons √©galement vu les structures de donn√©es.\nDans la prochaine section, IMMV ‚Äî Section 2 ‚Äî L\u0026rsquo;ex√©cution : comment faire des actions ?, nous verrons que l\u0026rsquo;ordinateur et l\u0026rsquo;humain font les actions de mani√®re tr√®s similaire.\n‚Üê Retour √† la section\n‚Üê Retour √† l‚Äôintroduction\n","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/les-bases/structures-de-controle/","summary":"\u003cp\u003eDans l\u0026rsquo;article pr√©c√©dent \u003ca href=\"../structures-de-donnees/\"\u003eIMVV ‚Äî Section 1 ‚Äî Chapitre 2 ‚Äî Autres structures de donn√©es, j\u0026rsquo;organise mon bordel\u003c/a\u003e, on s\u0026rsquo;√©tait arr√™t√© sur ta question :\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eEt c\u0026rsquo;est quoi le parcours de graphe?\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eDans cet article, on va parler des \u003cstrong\u003estructures de contr√¥le\u003c/strong\u003e (\u003cem\u003econtrol flow statements\u003c/em\u003e en anglais), qu\u0026rsquo;on utilise dans des \u003cstrong\u003ealgorithmes\u003c/strong\u003e (\u003cem\u003ealgorithms\u003c/em\u003e en anglais).\u003c/p\u003e\n\u003cp\u003eAvant d\u0026rsquo;expliquer l\u0026rsquo;algorithme que tu as fait, le \u003cstrong\u003eparcours de graphe\u003c/strong\u003e, on doit expliquer les structures de contr√¥le.\u003c/p\u003e","title":"IMVV ‚Äî Section 1 ‚Äî Chapitre 3 ‚Äî Structures de contr√¥le et algorithme, apprendre √† r√©fl√©chir"},{"content":"Pr√©c√©demment, on a vu qu\u0026rsquo;en rajoutant des serveurs, on pouvait servir plus de familles. Dans cette section on verra diff√©rents tips permettant d\u0026rsquo;optimiser un programme existant et la vie r√©elle.\nChapitres IMVV ‚Äî Section 3 ‚Äî Chapitre 1 ‚Äî La m√©moire, ou comment √©viter les p√©nuries dans un magasin IMVV ‚Äî Section 3 ‚Äî Chapitre 2 ‚Äî M√©mo√Øsation et Lazy loading, les techniques du fain√©ant ultime ","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/optimisation/optimisation/","summary":"\u003cp\u003ePr√©c√©demment, on a vu qu\u0026rsquo;en rajoutant des serveurs, on pouvait servir plus de familles. Dans cette section on verra diff√©rents tips permettant d\u0026rsquo;optimiser un programme existant et la vie r√©elle.\u003c/p\u003e\n\u003ch1 id=\"chapitres\"\u003eChapitres\u003c/h1\u003e\n\n\n\u003cul\u003e\n  \n\t\t\n\t\n\t\t\n    \t\n      \t\u003cli\u003e\u003ca href=\"/blog.dev/posts/miroir-informatique-vraie-vie/optimisation/memoire/\"\u003eIMVV ‚Äî Section 3 ‚Äî Chapitre 1 ‚Äî La m√©moire, ou comment √©viter les p√©nuries dans un magasin\u003c/a\u003e\u003c/li\u003e\n    \t\n  \t\n\t\n\t\t\n    \t\n      \t\u003cli\u003e\u003ca href=\"/blog.dev/posts/miroir-informatique-vraie-vie/optimisation/memoisation/\"\u003eIMVV ‚Äî Section 3 ‚Äî Chapitre 2 ‚Äî M√©mo√Øsation et Lazy loading, les techniques du fain√©ant ultime\u003c/a\u003e\u003c/li\u003e\n    \t\n  \t\n\t\n\u003c/ul\u003e","title":"IMMV ‚Äî Section 3 ‚Äî L'optimisation : comment se faire passer pour un coach de vie"},{"content":"Dans cette section, nous verrons comment les actions sont ex√©cut√©es, par les ordinateurs et par les personnes. Et on verra quelques pistes pour r√©pondre √† une accumulation de t√¢ches.\nChapitres IMMV ‚Äî Section 2 ‚Äî Chapitre 1 ‚Äî Synchrone et Asynchrone, ou comment r√©agir au changement IMMV ‚Äî Section 2 ‚Äî Chapitre 2 ‚Äî Monothread, Multithread, Parall√©lisme et Concurrence, je ne peux pas tout faire en m√™me temps ! ","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/l-execution/l-execution/","summary":"\u003cp\u003eDans cette section, nous verrons comment les actions sont ex√©cut√©es, par les ordinateurs et par les personnes. Et on verra quelques pistes pour r√©pondre √† une accumulation de t√¢ches.\u003c/p\u003e\n\u003ch1 id=\"chapitres\"\u003eChapitres\u003c/h1\u003e\n\n\n\u003cul\u003e\n  \n\t\t\n\t\n\t\t\n    \t\n      \t\u003cli\u003e\u003ca href=\"/blog.dev/posts/miroir-informatique-vraie-vie/l-execution/sync-async/\"\u003eIMMV ‚Äî Section 2 ‚Äî Chapitre 1 ‚Äî Synchrone et Asynchrone, ou comment r√©agir au changement\u003c/a\u003e\u003c/li\u003e\n    \t\n  \t\n\t\n\t\t\n    \t\n      \t\u003cli\u003e\u003ca href=\"/blog.dev/posts/miroir-informatique-vraie-vie/l-execution/threads/\"\u003eIMMV ‚Äî Section 2 ‚Äî Chapitre 2 ‚Äî Monothread, Multithread, Parall√©lisme et Concurrence, je ne peux pas tout faire en m√™me temps !\u003c/a\u003e\u003c/li\u003e\n    \t\n  \t\n\t\n\u003c/ul\u003e","title":"IMMV ‚Äî Section 2 ‚Äî L'ex√©cution : comment faire des actions ?"},{"content":"Dans cette section, nous verrons les bases permettant de stocker et manipuler des donn√©es.\nChapitres IMVV ‚Äî Section 1 ‚Äî Chapitre 1 ‚Äî File ou Pile ? L\u0026#39;art de passer avant les autres IMVV ‚Äî Section 1 ‚Äî Chapitre 2 ‚Äî Autres structures de donn√©es, j\u0026#39;organise mon bordel IMVV ‚Äî Section 1 ‚Äî Chapitre 3 ‚Äî Structures de contr√¥le et algorithme, apprendre √† r√©fl√©chir ","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/les-bases/les-bases/","summary":"\u003cp\u003eDans cette section, nous verrons les bases permettant de stocker et manipuler des donn√©es.\u003c/p\u003e\n\u003ch1 id=\"chapitres\"\u003eChapitres\u003c/h1\u003e\n\n\n\u003cul\u003e\n  \n\t\t\n\t\n\t\t\n    \t\n      \t\u003cli\u003e\u003ca href=\"/blog.dev/posts/miroir-informatique-vraie-vie/les-bases/file-et-pile/\"\u003eIMVV ‚Äî Section 1 ‚Äî Chapitre 1 ‚Äî File ou Pile ? L\u0026#39;art de passer avant les autres\u003c/a\u003e\u003c/li\u003e\n    \t\n  \t\n\t\n\t\t\n    \t\n      \t\u003cli\u003e\u003ca href=\"/blog.dev/posts/miroir-informatique-vraie-vie/les-bases/structures-de-donnees/\"\u003eIMVV ‚Äî Section 1 ‚Äî Chapitre 2 ‚Äî Autres structures de donn√©es, j\u0026#39;organise mon bordel\u003c/a\u003e\u003c/li\u003e\n    \t\n  \t\n\t\n\t\t\n    \t\n      \t\u003cli\u003e\u003ca href=\"/blog.dev/posts/miroir-informatique-vraie-vie/les-bases/structures-de-controle/\"\u003eIMVV ‚Äî Section 1 ‚Äî Chapitre 3 ‚Äî Structures de contr√¥le et algorithme, apprendre √† r√©fl√©chir\u003c/a\u003e\u003c/li\u003e\n    \t\n  \t\n\t\n\u003c/ul\u003e","title":"IMMV ‚Äî Section 1 ‚Äî Les bases : structures et contr√¥le"},{"content":"\u0026lsquo;Ia ora na,\nL\u0026rsquo;informatique semble souvent obscure pour beaucoup. Quand je dis que je suis ing√©nieur informatique, on me demande r√©guli√®rement : ¬´ Mais tu fais quoi exactement ? ¬ª.\nAvec le temps, j‚Äôai pris l‚Äôhabitude de vulgariser mon m√©tier. Et ce qui fonctionne le mieux, ce sont les exemples concrets tir√©s de la vie quotidienne.\nEn √©cole d\u0026rsquo;ing√©nieur, j\u0026rsquo;apprenais beaucoup plus facilement l\u0026rsquo;informatique en partant de situations r√©elles. √Ä travers cette s√©rie d‚Äôarticles, \u0026ldquo;L‚Äôinformatique, un miroir de la vraie vie\u0026rdquo; (abr√©g√© IMVV), je vais tenter d‚Äôexpliquer des concepts informatiques en m‚Äôappuyant sur des sc√®nes famili√®res du quotidien, sur un ton l√©ger. Parce que finalement, coder un programme ou g√©rer une file d‚Äôattente au magasin, ce n‚Äôest pas si diff√©rent.\nInformations de lecture Avant de lire les articles list√©s en bas de cette page, quelques informations pour vous faciliter la lecture :\nIl y a un mode sombre et un mode clair : En haut de chaque page se trouve une ic√¥ne pour interchanger entre les modes de lecture sombre et clair\nJ\u0026rsquo;utiliserai des apart√©s pour les d√©veloppeurs,\nInstant Dev Ceci est un apart√© pour les d√©veloppeurs, si tu es non d√©veloppeur tu peux lire, mais tu auras peut-√™tre mal √† la t√™te. J\u0026rsquo;utiliserai des interjections de lecteur, J\u0026rsquo;interviens comme si j\u0026rsquo;√©tais toi, lecteur, pour aider l\u0026rsquo;auteur de ce blog √† rendre ces articles dynamiques\nCette s√©rie d\u0026rsquo;articles n\u0026rsquo;est pas un cours d\u0026rsquo;informatique, vous n\u0026rsquo;apprendrez pas √† d√©velopper juste en suivant ces articles. Mot de fin Que tu sois curieux, d√©butant ou simplement en qu√™te de sens dans ce monde num√©rique, cette s√©rie pourrait bien t‚Äôapporter quelque chose.\nTu y trouveras peut-√™tre :\nune meilleure compr√©hension des bases de l‚Äôinformatique, des id√©es pour analyser ou optimiser les situations du quotidien, ou m√™me, qui sait, l‚Äôenvie de plonger plus loin dans ce domaine‚Ä¶ jusqu‚Äô√† en faire ton m√©tier. Bien s√ªr, cette s√©rie n‚Äôexplorera qu‚Äôune infime partie de ce vaste domaine qu‚Äôest l‚Äôinformatique. Apr√®s tout, peut-on vraiment expliquer enti√®rement l\u0026rsquo;informatique\u0026hellip; un domaine qui, justement, est le miroir de la vie* ?\n*: cette analogie est √† prendre avec recul : l‚Äôinformatique ne refl√®te pas toute la complexit√© de la vie.\nLes articles de la s√©rie (En cours de r√©daction) IMMV ‚Äî Section 1 ‚Äî Les bases : structures et contr√¥le IMMV ‚Äî Section 1 ‚Äî Les bases : structures et contr√¥le IMVV ‚Äî Section 1 ‚Äî Chapitre 1 ‚Äî File ou Pile ? L\u0026#39;art de passer avant les autres IMVV ‚Äî Section 1 ‚Äî Chapitre 2 ‚Äî Autres structures de donn√©es, j\u0026#39;organise mon bordel IMVV ‚Äî Section 1 ‚Äî Chapitre 3 ‚Äî Structures de contr√¥le et algorithme, apprendre √† r√©fl√©chir IMMV ‚Äî Section 2 ‚Äî L\u0026#39;ex√©cution : comment faire des actions ? IMMV ‚Äî Section 2 ‚Äî L\u0026#39;ex√©cution : comment faire des actions ? IMMV ‚Äî Section 2 ‚Äî Chapitre 1 ‚Äî Synchrone et Asynchrone, ou comment r√©agir au changement IMMV ‚Äî Section 2 ‚Äî Chapitre 2 ‚Äî Monothread, Multithread, Parall√©lisme et Concurrence, je ne peux pas tout faire en m√™me temps ! IMMV ‚Äî Section 3 ‚Äî L\u0026#39;optimisation : comment se faire passer pour un coach de vie IMMV ‚Äî Section 3 ‚Äî L\u0026#39;optimisation : comment se faire passer pour un coach de vie IMVV ‚Äî Section 3 ‚Äî Chapitre 1 ‚Äî La m√©moire, ou comment √©viter les p√©nuries dans un magasin IMVV ‚Äî Section 3 ‚Äî Chapitre 2 ‚Äî M√©mo√Øsation et Lazy loading, les techniques du fain√©ant ultime ","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/introduction/","summary":"\u003cp\u003e\u0026lsquo;Ia ora na,\u003c/p\u003e\n\u003cp\u003eL\u0026rsquo;informatique semble souvent obscure pour beaucoup. Quand je dis que je suis ing√©nieur informatique, on me demande r√©guli√®rement : ¬´ Mais tu fais quoi exactement ? ¬ª.\u003c/p\u003e\n\u003cp\u003eAvec le temps, j‚Äôai pris l‚Äôhabitude de vulgariser mon m√©tier. Et ce qui fonctionne le mieux, ce sont les exemples concrets tir√©s de la vie quotidienne.\u003c/p\u003e\n\u003cp\u003eEn √©cole d\u0026rsquo;ing√©nieur, j\u0026rsquo;apprenais beaucoup plus facilement l\u0026rsquo;informatique en partant de situations r√©elles.\n√Ä travers cette s√©rie d‚Äôarticles, \u003cstrong\u003e\u0026ldquo;L‚Äôinformatique, un miroir de la vraie vie\u0026rdquo;\u003c/strong\u003e (abr√©g√© \u003cem\u003eIMVV\u003c/em\u003e), je vais tenter d‚Äôexpliquer des concepts informatiques en m‚Äôappuyant sur des sc√®nes famili√®res du quotidien, sur un ton l√©ger.\nParce que finalement, coder un programme ou g√©rer une file d‚Äôattente au magasin, ce n‚Äôest pas si diff√©rent.\u003c/p\u003e","title":"IMMV - Introduction - L'informatique, un miroir de la vraie vie"},{"content":"Introduction Cet article est un aper√ßu tr√®s rapide des moyens de paiement en Polyn√©sie Fran√ßaise.\nUpdate (12/05/2022): suite √† quelques feedback, je me rend compte que cet article est √† destination des d√©veloppeurs de site de e-shopping, des commer√ßants, de mes confr√®res mon√©ticiens. Cet article sera complexe √† lire si vous n\u0026rsquo;avez jamais travaill√© avec un TPE, avec une plateforme de paiement, avec des cartes bancaires.\nDisclaimer: Au moment o√π j\u0026rsquo;√©cris cet article, je travaille √† l\u0026rsquo;Oc√©anienne des Services Bancaires (OSB), Ces articles ne sont pas sponsoris√©s par OSB, et j\u0026rsquo;encourage les gens √† faire des tutoriels pour les solutions des autres fournisseurs de solutions de paiement.\nLes diff√©rents types de carte En Polyn√©sie Fran√ßaise, il est possible de payer avec plusieurs types de cartes.\nCarte Bancaire (anciennement Carte Bleue, co-brand√©es ou non de Visa ou Mastercard), American Express (AMEX), Cartes privatives (Socredo Verte / Gold, Banque de Polyn√©sie Hoa, CCP de Fare Rata, Carte Tiare de la Banque de Tahiti), Union Pay International (UPI), Discover, Japan Credit Bureau (JCB) Les 3 derniers types de cartes sont surtout utilis√©s par les touristes.\nLes cartes privatives composent la majorit√© des cartes d√©tenues par les habitants de la Polyn√©sie Fran√ßaise.\nPourquoi autant de personnes ont une carte privative ? Les cartes privatives sont propos√©es par les diff√©rentes banques locales (√† l\u0026rsquo;exception d\u0026rsquo;OFINA qui √©met exclusivement les cartes AMEX). Il s\u0026rsquo;agit des banques Socredo, Banque de Tahiti, Banque de Polyn√©sie, et Fare Rata.\nLes cartes privatives sont soumises √† des r√©glementations et des frais moins co√ªteux que les cartes internationales.\nEn outre, elles sont uniquement r√©gul√©es par les banques locales contrairement aux cartes bancaires internationales, qui sont non seulement r√©gul√©es par les banques locales, mais aussi par les r√©seaux internationaux (CB, Visa, Mastercard, Union Pay, etc.).\nC\u0026rsquo;est en partie √† cause de ces r√©glementations et frais moins co√ªteux que les clients des banques doivent remplir moins de conditions pour avoir une carte privative. C\u0026rsquo;est pour cela que les cartes privatives sont plus r√©pandues sur le territoire.\nNotes:\nLes r√©seaux peuvent d√©cider d\u0026rsquo;appliquer des amendes voire de d√©sactiver le flux vers un acteur mon√©taire (banque, processeur de paiement, etc.) si celui-ci ne respecte pas la r√©glementation. Cette r√©glementation est mise √† jour r√©guli√®rement.\nPour les cartes privatives, ce sont les banques locales qui imposent leur r√©glementation, par abus de langage, on parle aussi de r√©seau privatif pour d√©signer l\u0026rsquo;ensemble de ces banques.\nCes r√©glementations sont suivies par les banques centrales des pays, par exemple l\u0026rsquo;IEOM en Polyn√©sie Fran√ßaise.\nJ\u0026rsquo;ai inclus la carte Tiare de la Banque de Tahiti dans les cartes privatives car elle a les m√™mes limitations g√©ographiques que celles-ci, et elle fonctionne aussi en m√©tropole, mais il s\u0026rsquo;agit bien d\u0026rsquo;une CB, donc elle est soumise aux r√©glementations CB.\nLes cartes Socredo privatives sont maintenant co-brand√©es UPI, mais il y a bien 2 applications dans la carte, sur le territoire, c\u0026rsquo;est l\u0026rsquo;application privative qui est utilis√©e, √† l\u0026rsquo;international, c\u0026rsquo;est l\u0026rsquo;application UPI qui est utilis√©e.\nFonctionnement des transactions Le sch√©ma √† 4 coins est l\u0026rsquo;un des sch√©mas de r√©f√©rence de la mon√©tique. Il explique les entit√©s qui entrent en jeu dans une transaction.\nLa banque √©mettrice √©met la carte et la fournit au porteur.\nLa banque acqu√©reuse fournit un contrat accepteur au commer√ßant, afin que celui-ci puisse encaisser les paiements avec les cartes, moyennant une commission, en plus des services annexes autour de l\u0026rsquo;encaissement (exemple: relev√© TPE). Les TPE et solutions de paiement en ligne sont des services d\u0026rsquo;encaissement.\nUn syst√®me d\u0026rsquo;acceptation est un logiciel ou un ensemble de logiciels, qui permet d\u0026rsquo;encaisser une carte bancaire, par exemple les TPE et les plateformes de paiement en ligne.\nIl existe 2 modes de fonctionnement pour le d√©roulement d\u0026rsquo;un paiement:\nle mode single message le mode dual message Lorsque vous payez avec votre carte, vous r√©alisez une transaction. Si toutes les r√®gles de gestion sont valid√©es, la transaction est autoris√©e.\nEn single message, la transaction autoris√©e est directement transform√©e en mouvement financier, i.e. un enregistrement est cr√©√© chez la banque acqu√©reuse qui dit \u0026ldquo;M. Client doit 1000 XPF √† M. Commer√ßant\u0026rdquo;.\nEn dual message, la transaction est enregistr√©e sur le TPE, ou sur la plateforme de paiement, puis, tous les jours √† une certaine heure, l\u0026rsquo;ensemble des transactions de la journ√©e sont envoy√©es √† la banque acqu√©reuse sous forme de mouvement financier.\nEn Polyn√©sie Fran√ßaise, le mode dual message est le plus r√©pandu, c\u0026rsquo;est d\u0026rsquo;ailleurs pour √ßa que l\u0026rsquo;on vous demande de ne pas d√©brancher votre TPE, votre internet, votre r√©seau √©lectrique.\nLes cartes et les syst√®mes d\u0026rsquo;acceptation Pour qu\u0026rsquo;un syst√®me d\u0026rsquo;acceptation puisse encaisser une carte, elle doit reconna√Ætre la carte.\nPour reconna√Ætre une carte, on utilise le BIN, qui sont les N premiers chiffres du num√©ro de la carte, N √©tant d√©fini par le r√©seau.\nDe plus, seule une application sp√©cifique √† ce r√©seau peut reconna√Ætre cette carte. Par exemple, pour une transaction avec une carte AMEX sur un TPE, c\u0026rsquo;est uniquement une application TPE AMEX qui pourra la reconna√Ætre, mais seulement si la carte fait partie d\u0026rsquo;une plage de BIN accept√©e par l\u0026rsquo;application.\nNote: Dans un TPE, il peut y avoir plusieurs applications, quand une carte est ins√©r√©e, le TPE demande √† chaque application \u0026ldquo;Peux-tu accepter cette carte?\u0026rdquo;.\nDe la m√™me mani√®re, pour une plateforme de paiement en ligne, celle-ci ne pourra accepter que des cartes qui font partie de ses plages de BIN d√©clar√©es.\nZoom sur le paiement en ligne en Polyn√©sie Fran√ßaise Comme √©nonc√© pr√©c√©demment, les cartes privatives sont majoritaires en Polyn√©sie Fran√ßaise, et elles ne sont pas reconnues √† l\u0026rsquo;√©tranger (sauf pour les cartes Socredo co-brand√©es UPI, comme cit√© pr√©c√©demment) car les BIN privatifs ne sont pas d√©clar√©s dans le monde.\nC\u0026rsquo;est pour cela qu\u0026rsquo;on ne peut pas payer avec une carte privative sur la plupart des plateformes de paiement en ligne (Paypal, Stripe, etc.), qui sont internationales.\nPour rem√©dier √† ce probl√®me, OSB propose Payzen, et la Banque de Tahiti propose SystemPay.\n√Ä mon avis, √† l\u0026rsquo;heure actuelle, c\u0026rsquo;est vers ces solutions que je conseille les commer√ßants d\u0026rsquo;aller, car il serait dommage de se priver des cartes privatives, alors qu\u0026rsquo;elles sont plus nombreuses.\nNotes:\nLes 2 solutions sont en r√©alit√© bas√©es sur les solutions Payzen et SystemPay de Lyra, soci√©t√© situ√©e en France. Certains d\u0026rsquo;entre vous ont d\u0026rsquo;ailleurs peut-√™tre d√©j√† √©t√© confus en recherchant de la documentation technique de ces solutions et se sont perdus entre:\nla documentation Payzen d\u0026rsquo;OSB, la documentation Payzen de Lyra, la documentation SystemPay de la Banque de Tahiti, la documentation SystemPay de Lyra. Je vous conseille de vous focaliser sur les documentations locales, et ensuite de compl√©ter avec les documentations de Lyra.\nConclusion Il existe plusieurs types de cartes.\nLes protocoles de paiement s\u0026rsquo;inscrivent dans un sch√©ma √† 4 coins, il y a plusieurs acteurs qui entrent en jeu.\nIl y a une r√©glementation g√©n√©rale qui englobe tous les types de cartes, et chaque type a √©galement sa r√©glementation sp√©cifique. Les banques sont soumises √† ces r√©glementations, l\u0026rsquo;IEOM et les r√©seaux (VISA, Mastercard, AMEX, etc.) veillent √† ce que les banques respectent ces r√©glementations.\nLa g√©ographie et les accords entre les acteurs sont importants pour comprendre les contraintes des syst√®mes de paiement locaux.\nEn Polyn√©sie Fran√ßaise, la majorit√© des cartes bancaires sont des cartes privatives, pour des raisons √©conomiques et r√©glementaires.\n","permalink":"http://localhost:1313/blog.dev/posts/intro-moyens-paiement/","summary":"\u003ch1 id=\"introduction\"\u003eIntroduction\u003c/h1\u003e\n\u003cp\u003eCet article est un aper√ßu tr√®s rapide des moyens de paiement en Polyn√©sie Fran√ßaise.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eUpdate (12/05/2022): suite √† quelques feedback, je me rend compte que cet article est √† destination des d√©veloppeurs de site de e-shopping, des commer√ßants, de mes confr√®res mon√©ticiens. Cet article sera complexe √† lire si vous n\u0026rsquo;avez jamais travaill√© avec un TPE, avec une plateforme de paiement, avec des cartes bancaires.\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e\u003cstrong\u003eDisclaimer\u003c/strong\u003e: Au moment o√π j\u0026rsquo;√©cris cet article, je travaille √† l\u0026rsquo;Oc√©anienne des Services Bancaires (OSB), Ces articles ne sont pas sponsoris√©s par OSB, et j\u0026rsquo;encourage les gens √† faire des tutoriels pour les solutions des autres fournisseurs de solutions de paiement.\u003c/p\u003e","title":"Introduction aux moyens de paiement en Polyn√©sie Fran√ßaise"},{"content":"Ia\u0026rsquo;orana, bonjour !\nCe post marque le d√©but du blog h√©berg√© sur Github.\nVous trouverez ici de temps en temps des articles de d√©veloppement et des POCs.\nBonne lecture !\n","permalink":"http://localhost:1313/blog.dev/posts/hello-world/","summary":"\u003cp\u003eIa\u0026rsquo;orana, bonjour !\u003c/p\u003e\n\u003cp\u003eCe post marque le d√©but du blog h√©berg√© sur Github.\u003c/p\u003e\n\u003cp\u003eVous trouverez ici de temps en temps des articles de d√©veloppement et des POCs.\u003c/p\u003e\n\u003cp\u003eBonne lecture !\u003c/p\u003e","title":"Hello World"},{"content":"La m√©moire est une ressource au m√™me titre que la fourchette dans le pr√©c√©dent article.\nDans un ordinateur, il existe plusieurs types de m√©moire que les programmes vont pouvoir utiliser en fonction de la mani√®re dont ils veulent traiter les donn√©es.\nIl faut voir la m√©moire comme un endroit o√π on entrepose des donn√©es.\nPour cet article on va parler d\u0026rsquo;un magasin, mais √ßa marche aussi avec un restaurant.\nLa m√©moire cache ‚Äî l\u0026rsquo;armoire r√©frig√©r√©e La m√©moire cache est le stockage le plus rapide qu\u0026rsquo;un programme peut utiliser. Pour un magasin, il s\u0026rsquo;agit des √©tag√®res et des armoires r√©frig√©r√©es qui forment les rayons.\nLes clients (les threads du programme) ont rapidement acc√®s aux viandes qui sont dans les armoires r√©frig√©r√©es, ils n\u0026rsquo;ont qu\u0026rsquo;√† tendre la main. Par contre, on ne peut pas stocker une grande quantit√© de viande dans ces armoires, pour l\u0026rsquo;exemple on va dire une dizaine au maximum.\nSur un ordinateur, cette m√©moire cache se trouve directement dans le processeur sous les noms cache L3, cache L2 et cache L1. On n\u0026rsquo;ira pas dans le d√©tail ici, mais sachez que plus le nombre est proche de 0, et plus le cache est rapide.\nJe prends l\u0026rsquo;exemple de l\u0026rsquo;armoire r√©frig√©r√©e car il y a un m√©canisme physique important dans un ordinateur: la m√©moire cache peut accueillir des donn√©es uniquement si elle est aliment√©e en √©lectricit√©, en cas de coupure de courant, on perd les donn√©es qui s\u0026rsquo;y trouvent.\nDe la m√™me mani√®re, dans un magasin, en cas de coupure de courant, il faut jeter toute la viande qui se trouve dans les armoires r√©frig√©r√©es*.\n*: Oui c\u0026rsquo;est pas tout √† fait le cas, mais en cas de coupure prolong√©e √ßa l\u0026rsquo;est.\nLa m√©moire vive ‚Äî l\u0026rsquo;arri√®re du magasin Au cours d\u0026rsquo;une journ√©e, le magasin souhaite vendre bien plus que dix viandes, c\u0026rsquo;est bien normal. Pour cela, √† l\u0026rsquo;arri√®re du magasin il y a un stock r√©frig√©r√© qui peut en contenir 1000. Un employ√© viendra remplir les rayons au cours de la journ√©e.\nCette action prend du temps, l\u0026rsquo;employ√© doit :\nAller dans le stock r√©frig√©r√© R√©cup√©rer des viandes Amener les viandes dans le rayon Mettre les viandes dans l\u0026#39;armoire r√©frig√©r√©e Pendant tout ce temps, le client ne peut prendre que les viandes qui sont encore dans l\u0026rsquo;armoire, il faut donc bien faire attention √† ce que l\u0026rsquo;employ√© recharge l\u0026rsquo;armoire quand il reste encore un peu de bo√Ætes.\nDans un ordinateur, la m√©moire vive (RAM en anglais pour Random Access Memory), joue le r√¥le du stock r√©frig√©r√© tr√®s rapide qu\u0026rsquo;un programme peut utiliser, mais beaucoup moins rapide que la m√©moire cache, environ 50x √† 100x moins rapide.\nEt tout comme la m√©moire cache, la RAM peut accueillir des donn√©es uniquement si elle est aliment√©e en √©lectricit√©.\nC\u0026rsquo;est pour √ßa qu\u0026rsquo;on appelle √ßa de la m√©moire vive, elle doit √™tre aliment√©e.\nAttends, mais tu dis que la RAM est tr√®s rapide, mais le processus pour recharger la m√©moire cache est lent ? On ne peut pas juste utiliser une grande quantit√© de m√©moire cache?\nLa m√©moire cache co√ªte tr√®s cher, beaucoup plus que la RAM. L\u0026rsquo;√©tat actuel est donc un compromis entre rapidit√© et co√ªt, un probl√®me typique en ing√©nierie.\nLe stockage ‚Äî la ferme en Nouvelle-Z√©lande Le stockage d\u0026rsquo;un ordinateur est compos√© des diff√©rents disques durs (HDD, SDD, etc.). Il s\u0026rsquo;agit d\u0026rsquo;une m√©moire persistante, c\u0026rsquo;est-√†-dire que m√™me en cas de coupure de courant, les donn√©es restent √©crites dans les disques.\nPour notre magasin, de la viande qui reste utilisable m√™me en cas de coupure\u0026hellip; Eh bien ce sont les boeufs vivants √† la ferme.\nTon analogie est d√©go√ªtante\nOui je sais, j\u0026rsquo;ai pas mieux, d√©sol√©. En m√™me temps, je ne peux pas vous dire que de la viande fra√Æche, qui reste longtemps √† l\u0026rsquo;air libre, est encore utilisable.\nEn plus, il y a plein d\u0026rsquo;√©tapes entre un boeuf vivant et un steak dans l\u0026rsquo;armoire !\nTout √† fait, mais c\u0026rsquo;est la meilleure analogie possible pour te faire comprendre pourquoi, en cas de coupure, si tu n\u0026rsquo;as pas sauvegard√© ton fichier Word depuis longtemps, tu perds tes donn√©es. Tant que tu n\u0026rsquo;as pas sauvegard√©, tes modifications restent dans le cache et la RAM.\nEt pourquoi en Nouvelle-Z√©lande ?\nOh, √ßa c\u0026rsquo;est parce qu\u0026rsquo;aller chercher une donn√©e dans un disque, c\u0026rsquo;est tr√®s lent compar√© √† aller la chercher dans la RAM. Si tu as un disque SSD c\u0026rsquo;est 10x plus lent, si tu as un disque HDD, c\u0026rsquo;est 100x plus lent.\nSi tu joues √† des jeux vid√©o un peu gourmands en ressources, tu as s√ªrement remarqu√© des √©crans de chargement plus ou moins longs. C\u0026rsquo;est surtout parce que le programme r√©cup√®re les donn√©es qui sont sur le disque.\nOptimiser la m√©moire ‚Äî pas besoin d\u0026rsquo;√™tre mentaliste Vous l\u0026rsquo;aurez donc compris, un magasin a diff√©rents types de m√©moire √† sa disposition. La mani√®re dont il orchestre les denr√©es √† travers ces diff√©rents composants lui permet d\u0026rsquo;anticiper les variations de stock, et limiter le risque de p√©nurie.\nLorsqu\u0026rsquo;un d√©veloppeur code un programme, il peut aussi anticiper l\u0026rsquo;utilisation des donn√©es et les charger avant d\u0026rsquo;en avoir besoin.\nDans l\u0026rsquo;exemple du jeu vid√©o, pourquoi est-ce que toutes les donn√©es ne sont pas charg√©es d√®s le d√©but? Moi j\u0026rsquo;en ai marre des √©crans de chargement.\nTout d\u0026rsquo;abord, ce chargement se fait du stockage vers la RAM (puis vers le cache), ensuite, si on chargeait toutes les donn√©es d\u0026rsquo;un coup, il y a de fortes chances pour que ta RAM soit satur√©e.\nA priori, le d√©veloppeur ne sait pas si tu as peu ou beaucoup de RAM disponible, et puis, maintenir deux versions du code, un qui charge toutes les donn√©es, et un qui charge via les √©crans de chargement, c\u0026rsquo;est du travail suppl√©mentaire qui n\u0026rsquo;apporte pas grand chose.\nLes √©crans de chargement sont un compromis : plut√¥t que de risquer de crasher ton ordinateur, le d√©veloppeur a cod√© le programme de sorte √† charger uniquement le contenu qui sera utilis√© dans le niveau, pour tous les niveaux.\nConclusion Dans cet article, on a vu les diff√©rentes m√©moires utilis√©es par les programmes. √Ä l\u0026rsquo;image d\u0026rsquo;un magasin qui √©vite les p√©nuries, un d√©veloppeur doit jongler avec ces m√©moires pour que son programme tourne correctement.\nDans le prochain article, IMVV ‚Äî Section 3 ‚Äî Chapitre 2 ‚Äî M√©mo√Øsation et Lazy loading, les technique du fain√©ant ultime, nous verrons des techniques qui feront de toi un bon fain√©ant.\n‚Üê Retour √† la section\n‚Üê Retour √† l‚Äôintroduction\n","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/optimisation/memoire/","summary":"\u003cp\u003eLa m√©moire est une \u003cstrong\u003eressource\u003c/strong\u003e au m√™me titre que la fourchette dans le \u003ca href=\"../../l-execution/threads/\"\u003epr√©c√©dent article\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eDans un ordinateur, il existe plusieurs types de m√©moire que les programmes vont pouvoir utiliser en fonction de la mani√®re dont ils veulent traiter les donn√©es.\u003c/p\u003e\n\u003cp\u003eIl faut voir la m√©moire comme un endroit o√π on entrepose des donn√©es.\u003c/p\u003e\n\u003cp\u003ePour cet article on va parler d\u0026rsquo;un magasin, mais √ßa marche aussi avec un restaurant.\u003c/p\u003e\n\u003ch2 id=\"la-m√©moire-cache--larmoire-r√©frig√©r√©e\"\u003eLa m√©moire cache ‚Äî l\u0026rsquo;armoire r√©frig√©r√©e\u003c/h2\u003e\n\u003cp\u003eLa \u003cstrong\u003em√©moire cache\u003c/strong\u003e est le stockage \u003cstrong\u003ele plus rapide\u003c/strong\u003e qu\u0026rsquo;un programme peut utiliser. Pour un magasin, il s\u0026rsquo;agit des √©tag√®res et des armoires r√©frig√©r√©es qui forment les rayons.\u003c/p\u003e","title":"IMVV ‚Äî Section 3 ‚Äî Chapitre 1 ‚Äî La m√©moire, ou comment √©viter les p√©nuries dans un magasin"},{"content":"Dans le pr√©c√©dent article, IMVV ‚Äî Section 1 ‚Äî Chapitre 3 ‚Äî Structures de contr√¥le et algorithme, apprendre √† r√©fl√©chir, on a vu les diff√©rentes structures de contr√¥le et les algorithmes.\nMaintenant on va parler de la mani√®re dont on r√©alise un ensemble de t√¢ches ‚Äî c‚Äôest ce qu‚Äôon appelle en informatique un mode d‚Äôex√©cution. C\u0026rsquo;est applicable aussi bien pour un humain que pour un ordinateur.\nN\u0026rsquo;oublie pas que les objectifs de ces articles sont :\nTe donner une meilleure compr√©hension des bases de l‚Äôinformatique, T\u0026rsquo;inspirer pour analyser ou optimiser les situations du quotidien, ou peut-√™tre, qui sait, te donner envie d\u0026rsquo;explorer encore plus loin\u0026hellip; jusqu‚Äô√† en faire ton m√©tier. Programme et application ‚Äî c\u0026rsquo;est quoi la diff√©rence ? Un programme informatique est un ensemble d\u0026rsquo;algorithmes. Le mot application veut dire la m√™me chose.\nC‚Äôest juste que application, √ßa sonne plus moderne, m√™me si ce mot existe depuis longtemps.\nMerci le marketing Apple et son App Store. üòÑ\nSynchrone ‚Äî Avoir un serveur d√©di√© √† sa table, quel luxe Prenons l\u0026rsquo;exemple d\u0026rsquo;un restaurant chic. Dans ce restaurant chic, il y a 2 tables. Chaque table a son serveur attitr√©, celui-ci r√©pond uniquement aux besoins de sa table.\nPour la suite de cet exercice de pens√©e, on va dire qu\u0026rsquo;il y a 2 familles (famille 1, famille 2), 2 tables (table 1, table 2), 1 serveur, 1 chef.\nLa s√©quence d\u0026rsquo;actions que le serveur doit faire, l\u0026rsquo;algorithme est :\nSi une famille arrive: Accueillir la famille Installer la famille sur une table libre Prendre la commande Donner la commande au chef R√©cup√©rer les plats Servir les plats √† la famille Faire payer la famille Fin si La famille 1 arrive au restaurant, le serveur les accueille et les installe √† la table 1. Il reste en attente de leur commande, √† proximit√©*.\nQuand la famille 1 est pr√™te, vu que le serveur est √† c√¥t√©, ils passent commande. Le serveur s\u0026rsquo;en va ensuite en cuisine pour donner la commande au chef. Le serveur attend les plats. Le chef pr√©pare les plats.\nUne fois que les plats sont pr√™ts, il les r√©cup√®re et les sert √† la famille 1. La famille 1 paie et s\u0026rsquo;en va, heureuse de l\u0026rsquo;attention port√©e.\n*: A ce moment, la famille 2 arrive au restaurant, ils ne sont pas accueillis, puisque le serveur est en attente de la commande de la famille 1. Alors la famille 2 repart, agac√©e, ils laisseront un mauvais avis sur internet.\nDans cette configuration, le serveur ex√©cute ses t√¢ches de mani√®re synchrone, cela veut dire qu\u0026rsquo;il ex√©cute l\u0026rsquo;algorithme √©tape par √©tape sans interruption. Si une √©tape n√©cessite d\u0026rsquo;attendre, par exemple quand il doit attendre que la famille choisisse sa commande, alors il attend, on dit que le mode synchrone est bloquant. Le serveur va au bout de son algorithme.\nMais c\u0026rsquo;est nul, il y a une famille qui n\u0026rsquo;a pas √©t√© servie\u0026hellip;\nSi on reste dans le mode d\u0026rsquo;ex√©cution synchrone, le probl√®me est qu\u0026rsquo;il n\u0026rsquo;y a pas assez de serveur. S\u0026rsquo;il y avait autant de serveurs de tables et de chefs, il n\u0026rsquo;y aurait aucun souci. Chaque famille aurait √©t√© ravie d\u0026rsquo;avoir un serveur et un chef d√©di√©. Mais on verrait plut√¥t cette disposition dans les restaurants luxueux, qui peuvent se permettre d\u0026rsquo;avoir 100 tables, 100 serveurs et 100 chefs.\nPar d√©faut, les applications sont synchrones, car √† part le probl√®me de ressources, c‚Äôest bien plus simple de faire une t√¢che apr√®s l‚Äôautre, cependant, de nos jours, de plus en plus de syst√®mes sont asynchrones (exemple: navigateurs, certains serveurs applicatifs √† la mode).\nüìå Exemples dans la vie r√©elle Une personne qui suit une proc√©dure critique Pr√©parer une salade üíª Exemples en informatique Un distributeur de billets Une imprimante partag√©e Asynchrone ‚Äî Un serveur pour les gouverner tous ‚Äî Oui c\u0026rsquo;est une r√©f√©rence au Seigneur des Anneaux üòÑ ‚Äî\nReprenons l\u0026rsquo;exemple du restaurant, toujours avec 2 familles (famille 1, famille 2), 2 tables (table 1, table 2), 1 serveur, 1 chef.\nMais cette fois, on change l\u0026rsquo;algorithme :\nQuand une famille arrive, alors : Le serveur les accueille Il les installe √† une table libre Il leur donne un menu Il passe √† autre chose Fin quand Quand une famille appelle le serveur pour commander, alors : Le serveur prend la commande Il la transmet au chef Il passe √† autre chose Fin quand Quand la sonnette en cuisine retentit (plats pr√™ts), alors : Le serveur r√©cup√®re les plats Le serveur sert les plats √† la bonne table Il passe √† autre chose Fin quand Quand une famille veut payer, alors : Le serveur encaisse Il lib√®re la table Il passe √† autre chose Fin quand Cet algorithme est diff√©rent de ceux qu\u0026rsquo;on a vus jusqu\u0026rsquo;√† pr√©sent.\n\u0026ldquo;Quand \u0026hellip;,\u0026rdquo; marque un √©v√©nement, \u0026ldquo;alors\u0026rdquo; introduit le bloc d\u0026rsquo;instructions √† ex√©cuter en r√©action, et \u0026ldquo;Fin quand\u0026rdquo; marque la fin de ce bloc.\nOn dit alors qu\u0026rsquo;on fait de la programmation √©v√©nementielle (ou programmation r√©active) et que l\u0026rsquo;algorithme est asynchrone : il fait de sorte √† r√©agir aux √©v√©nements ext√©rieurs.\nLorsqu‚Äôun √©v√©nement se produit, le serveur y r√©agit imm√©diatement : il ex√©cute les instructions associ√©es, puis passe √† l‚Äô√©v√©nement suivant s‚Äôil y en a un. Sinon, il attend. Ce mode d\u0026rsquo;ex√©cution est donc non bloquant.\nEt dans les faits, c\u0026rsquo;est ce que fait la plupart des personnes, serveurs ou non. Quand on fait une t√¢che, et qu\u0026rsquo;on est interrompu par un bug, un appel, un coll√®gue de travail qui pose une question, on est en r√©action.\nAvec cet algorithme, un serveur seul pourra tr√®s bien g√©rer 2 tables.\nüìå Exemples dans la vie r√©elle Les serveurs dans la plupart des restaurants Mon chien quand il entend les croquettes üíª Exemples en informatique Les notifications sur ton smartphone Un arrosage automatique avec capteur d\u0026#39;humidit√© Attention : comme en mode synchrone, s\u0026rsquo;il y a trop de table pour un seul serveur, plusieurs √©v√©nements risquent de s\u0026rsquo;accumuler en attente de traitement.\nMais du coup, comment on fait pour r√©soudre ce probl√®me ?\nOn verra √ßa dans le prochain article.\nConclusion Dans cet article, on a vu ce qu\u0026rsquo;√©taient les modes d\u0026rsquo;ex√©cution synchrone et asynchrone.\nSi tu souhaites continuer cette aventure, tu peux regarder la suite ici: IMMV ‚Äî Section 2 ‚Äî Chapitre 2 ‚Äî Monothread et Multithread, je ne peux pas tout faire en m√™me temps !\n‚Üê Retour √† la section\n‚Üê Retour √† l‚Äôintroduction\n","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/l-execution/sync-async/","summary":"\u003cp\u003eDans le pr√©c√©dent article, \u003ca href=\"../../les-bases/structures-de-controle/\"\u003eIMVV ‚Äî Section 1 ‚Äî Chapitre 3 ‚Äî Structures de contr√¥le et algorithme, apprendre √† r√©fl√©chir\u003c/a\u003e, on a vu les diff√©rentes structures de contr√¥le et les algorithmes.\u003c/p\u003e\n\u003cp\u003eMaintenant on va parler de la mani√®re dont on r√©alise un ensemble de t√¢ches ‚Äî c‚Äôest ce qu‚Äôon appelle en informatique un \u003cstrong\u003emode d‚Äôex√©cution\u003c/strong\u003e. C\u0026rsquo;est applicable aussi bien pour un humain que pour un ordinateur.\u003c/p\u003e\n\u003cp\u003eN\u0026rsquo;oublie pas que les objectifs de ces articles sont :\u003c/p\u003e","title":"IMMV ‚Äî Section 2 ‚Äî Chapitre 1 ‚Äî Synchrone et Asynchrone, ou comment r√©agir au changement"},{"content":"Quand tu prends un ticket pour attendre ton tour, que tu fais la queue √† la caisse, que tu prends l‚Äôassiette du haut de la pile pour mettre la table, ou que tu cliques sur le bouton \u0026lsquo;Retour\u0026rsquo; (‚Üê) du navigateur internet‚Ä¶ Tu manipules sans le savoir des concepts appell√©s en informatique des structures de donn√©es, et les algorithmes associ√©s qui les font vivre.\nDans cet article, on va mettre un peu de clart√© l√†-dedans : pas besoin de coder pour comprendre, on va illustrer tout √ßa avec des situations de la vie courante.\nD√©finitions Avant d‚Äôaller plus loin, quelques d√©finitions simples, histoire de parler le m√™me langage :\nDonn√©e : une donn√©e, c‚Äôest une information num√©rique. √áa peut √™tre un num√©ro de passeport, le nombre de dents d‚Äôune personne, la liste des t√¢ches que tu as encore repouss√©es √† demain, ou ton nombre d‚Äôamis sur Facebook. Structure de donn√©es : imagine une bo√Æte, une √©tag√®re ou un sac √† dos, dans lequel tu ranges tes informations d‚Äôune certaine mani√®re pour mieux les retrouver ou les traiter. C‚Äôest la fa√ßon dont on organise les donn√©es. Algorithme : un algorithme, c‚Äôest une suite d‚Äô√©tapes ou d‚Äôinstructions pour manipuler ces donn√©es. Comme une recette de cuisine, ou une proc√©dure √† suivre pour obtenir un r√©sultat. File et pile : deux mani√®res d‚Äôattendre‚Ä¶ ou de repousser Maintenant qu‚Äôon a les bases, voyons deux structures de donn√©es tr√®s simples mais tr√®s puissantes : la file et la pile. On les retrouve partout dans notre quotidien, souvent sans s‚Äôen rendre compte.\nLa file ‚Äî ou comment attendre son tour (FIFO) Imagine une file d‚Äôattente devant un guichet. Le premier arriv√© est le premier servi. C‚Äôest ce qu‚Äôon appelle en informatique une file (ou queue en anglais), avec une logique FIFO : First In, First Out (premier entr√©, premier sorti).\nD√®s que quelqu‚Äôun est servi, c‚Äôest le suivant dans la file qui avance.\nüéØ C‚Äôest une structure √©quitable : chacun attend selon son ordre d‚Äôarriv√©e.\nüìå Exemples dans la vie r√©elle Faire la queue √† la caisse du magasin La liste des courses (si on lit de haut en bas) üíª Exemples en informatique Les syst√®mes de ticket dans les accueils (le num√©ro est g√©n√©r√© par un programme, et les appels suivent cet ordre) Les commentaires sur une publication Facebook (affich√©s du plus ancien au plus r√©cent) La pile ‚Äî ou comment empiler les priorit√©s (LIFO) Maintenant, imagine une pile de livres que tu dois r√©viser pour un examen. Tu prends celui du haut, tu le lis, puis tu prends celui juste en dessous, et ainsi de suite. Tu lis dans l‚Äôordre inverse de celui dans lequel tu as empil√© les livres. Tu viens de d√©piler ta pile, toujours en commen√ßant par le haut.\nC‚Äôest exactement le principe de la pile (ou stack en anglais), qui suit la logique LIFO : Last In, First Out (dernier entr√©, premier sorti).\nTu vas peut-√™tre me dire :\nOui mais je peux aussi prendre le livre du bas, non‚ÄØ?\nC‚Äôest vrai. Alors prenons un autre exemple, un peu plus r√©aliste :\nImagine que tu tombes sur un article de journal qui parle des nodules polym√©talliques dans les fonds marins de la Polyn√©sie fran√ßaise. Tu n‚Äôy connais pas grand-chose, mais √ßa t‚Äôintrigue. Tu lis l‚Äôarticle, puis tu ouvres une page Wikip√©dia pour comprendre ce qu‚Äôest un nodule polym√©tallique. Sur cette page, tu vois un lien vers les m√©taux rares, puis vers la transition √©nerg√©tique, puis‚Ä¶ tu vois o√π je veux en venir.\nEn lisant ce premier article, tu ne soup√ßonnais pas toute la pile d‚Äôinformations que tu allais explorer. Et tu viens de d√©piler ce savoir, en commen√ßant par la derni√®re page ouverte.\nüéØ Ce n‚Äôest pas une structure √©quitable : ce qui arrive en dernier est trait√© en premier. Mais c‚Äôest tr√®s utile pour remonter dans le temps, ou revenir sur ses pas, exactement comme le bouton \u0026ldquo;retour\u0026rdquo; de ton navigateur.\nüìå Exemples dans la vie r√©elle Les cartons dans un coffre bien rempli Les diff√©rentes strates de terre quand tu creuses dans ton jardin (c\u0026#39;est de la terre empil√©e au cours du temps) üíª Exemples en informatique Le bouton \u0026#39;Retour\u0026#39; (‚Üê) de ton navigateur Les annulations successives (Undo, CTRL\u0026#43;Z) dans un √©diteur de texte Si tu veux conna√Ætre d\u0026rsquo;autres structures de donn√©es, tu peux regarder le prochain article : IMVV ‚Äî Section 1 ‚Äî Chapitre 2 ‚Äî Autres structures de donn√©es, j\u0026rsquo;organise mon bordel\n‚Üê Retour √† la section\n‚Üê Retour √† l‚Äôintroduction\n","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/les-bases/file-et-pile/","summary":"\u003cp\u003eQuand tu prends un ticket pour attendre ton tour, que tu fais la queue √† la caisse, que tu prends l‚Äôassiette du haut de la pile pour mettre la table, ou que tu cliques sur le bouton \u0026lsquo;Retour\u0026rsquo; (‚Üê) du navigateur internet‚Ä¶\nTu manipules sans le savoir des concepts appell√©s en informatique \u003cstrong\u003edes structures de donn√©es\u003c/strong\u003e, et \u003cstrong\u003eles algorithmes\u003c/strong\u003e associ√©s qui les font vivre.\u003c/p\u003e\n\u003cp\u003eDans cet article, on va mettre un peu de clart√© l√†-dedans : pas besoin de coder pour comprendre, on va illustrer tout √ßa avec des situations de la vie courante.\u003c/p\u003e","title":"IMVV ‚Äî Section 1 ‚Äî Chapitre 1 ‚Äî File ou Pile ? L'art de passer avant les autres"},{"content":"√ätre fiu est un art, une vertu. Non, ce n\u0026rsquo;est pas une blague. Tu ne me crois pas ?\n\u0026ldquo;We will encourage you to develop the three great virtues of a programmer: laziness, impatience, and hubris.\u0026rdquo; ‚Äî Larry Wall, Programming perl (1991).\n\u0026ldquo;I choose a lazy person to do a hard job. Because a lazy person will find an easy way to do it.\u0026rdquo; ‚Äî Bill Gates.\nProgrammer une machine pour qu\u0026rsquo;elle fasse le travail √† ta place, c\u0026rsquo;est de la fain√©antise.\nEt les d√©veloppeurs sont des personnes qui ont atteint l\u0026rsquo;apog√©e du fiu. Apr√®s tout, qui passe 2 heures √† automatiser une t√¢che qui prend 2 minutes par jour, √† part quelqu\u0026rsquo;un de vraiment fiu ?\nDans cet article, on verra deux techniques que les d√©veloppeurs utilisent, mais que toi aussi tu utilises sans le savoir.\nM√©mo√Øsation ‚Äî ou comment garder une information dans un coin de la t√™te Supposons que tu sois responsable de la paie dans une petite entreprise. Pour ce mois-ci, tu dois calculer les salaires √† verser √† 2 employ√©s.\nTu sais que tous les deux ont un salaire brut de 200 000 XPF. De plus, ils ont fait un excellent travail, ton patron t\u0026rsquo;a dit de leur rajouter une prime de 50% de leur salaire brut. Enfin, l\u0026rsquo;un d\u0026rsquo;eux a fait des heures suppl√©mentaires, il faut donc lui rajouter 20 000 XPF brut sur sa paie.\nPour le 1er salari√©, tu pars de 200 000, tu rajoutes 50%, soit 100 000, ce qui lui fera 300 000 XPF brut pour ce mois.\nPour le 2√®me salari√©, tu sais que le d√©but du calcul est le m√™me, alors tu r√©utilises le nombre 300 000, et tu rajoutes 20 000 d\u0026rsquo;heures suppl√©mentaires, donc 320 000 bruts.\nMais tu t‚Äôes souvenu que le calcul 200 000 + 50 % avait d√©j√† √©t√© fait, donc tu as directement repris le r√©sultat. Ce que tu viens de faire, c\u0026rsquo;est de la m√©mo√Øsation (memoization en anglais).\nC‚Äôest exactement ce que fait ton navigateur web quand il te propose un r√©sultat de recherche d√©j√† visit√©, ou qu‚Äôun site charge plus vite la 2·µâ fois.\nInstant Dev En informatique, on utilise un tableau ou un tableau associatif pour stocker les r√©sultats interm√©diares, ces structures sont stock√©es dans la RAM. De cette fa√ßon, on peut rapidement r√©cup√©rer le r√©sultat qui nous int√©resse. Attention : En informatique, comme dans la vraie vie, garder des informations de c√¥t√© peut conduire √† une saturation de la m√©moire. C\u0026rsquo;est un des facteurs de burn-out. M√©nagez votre cerveau, il n\u0026rsquo;y a pas de mal √† noter les choses, de plus, vous aurez moins de risque d\u0026rsquo;oublier des informations importantes.\nEager loading et Lazy loading ‚Äî l\u0026rsquo;art d\u0026rsquo;√™tre pr√©par√© √† toute √©ventualit√© Supposons que tu aies invit√© tes amis √† manger √† la maison ce soir. Tu as invit√© 10 personnes, mais tu sais que 5 vont vraiment venir, les autres t\u0026rsquo;ont dit \u0026ldquo;peut-√™tre\u0026rdquo;.\nPour √©viter d\u0026rsquo;√™tre √† court de nourriture, tu as pr√©par√© pour 10 personnes, au pire, ceux qui sont venus repartiront avec quelques plats, et tu termineras le reste durant la semaine.\nLes premiers invit√©s vont arriver, tu n\u0026rsquo;as pas encore pr√©par√© la table. Tu as 2 solutions :\nTout pr√©parer d\u0026rsquo;avance : sortir toutes les assiettes, les verres, les chaises, les couverts, etc. (solution eager loading : tu charges tout d√®s le d√©but).\nAttendre de voir qui arrive : d√®s qu‚Äôun invit√© entre, tu sors une assiette, un verre, une chaise, etc. (solution lazy loading : tu ne charges que ce qui est n√©cessaire, au moment o√π c‚Äôest n√©cessaire).\nMais tu peux aussi exiger des invit√©s qu\u0026rsquo;ils te disent, la veille au plus tard, si oui ou non ils viennent !\nOui, et que se passe-t-il si l\u0026rsquo;un d\u0026rsquo;eux a un emp√™chement ? En mettant tous les couverts, tu as d√©pens√© de l\u0026rsquo;√©nergie pour mettre son couvert, et tu en as re-d√©pens√© pour le ranger. Ce n\u0026rsquo;est pas tr√®s optimis√©.\nSi tous les invit√©s arrivent, tu auras fait plusieurs allers-retours pour mettre les couverts, ce n\u0026rsquo;est pas tr√®s optimis√© non plus\u0026hellip;\nAh, tu mets le doigt sur un point important : les techniques d\u0026rsquo;optimisation doivent √™tre utilis√©es uniquement si on est s√ªr de leur utilit√©.\n\u0026ldquo;Premature optimization is the root of all evil\u0026rdquo; ‚Äî Sir Tony Hoare et Donald Knuth.\nC\u0026rsquo;est un pi√®ge dans lequel tombent plusieurs d√©veloppeurs juniors. Les √©coles sup√©rieures enseignent diff√©rentes techniques d\u0026rsquo;optimisation, on est conditionn√©s √† d√©tecter un probl√®me et √† appliquer imm√©diatement une solution : c\u0026rsquo;est normal.\nAvec l\u0026rsquo;exp√©rience, on apprend qu\u0026rsquo;on a besoin d\u0026rsquo;optimiser uniquement quand une personne se plaint de lenteurs. Et dans ce cas, on cherche o√π se trouve la source du probl√®me, on mesure.\nOk mais\u0026hellip; √ßa me fait bizarre de ne pas pr√©parer une belle table, c\u0026rsquo;est pas un bon accueil.\nDans ce cas, le eager loading a une vraie plus-value. Tu charges tout d\u0026rsquo;un coup pour l\u0026rsquo;effet waow, pour que les personnes se disent que chez toi, on est bien re√ßu. La principale fonctionnalit√© n\u0026rsquo;est pas d\u0026rsquo;optimiser le fait de mettre la table, mais d\u0026rsquo;impressionner tes convives.\nJe finis cette partie avec un exemple informatique : Facebook ne charge pas toutes les publications d√®s le d√©but, seulement une partie.\nQuand tu commences √† scroller, tu vois ces publications. Si tu te rapproches de la fin, Facebook charge les prochaines publications, on appelle √ßa infinite scroll.\nAinsi, Facebook ne prend pas trop de temps √† se charger au d√©but.\nAttends mais\u0026hellip; Dans l\u0026rsquo;article pr√©c√©dent, on parlait des √©crans de chargement des jeux vid√©os, √ßa y ressemble un peu, non ?\nExactement, les √©crans de chargement sont aussi du lazy loading, et pour rejoindre ce qu\u0026rsquo;on disait sur ces √©crans : le lazy loading √©conomise de la m√©moire.\nEnfin, √† ton avis, comment Facebook sait qu\u0026rsquo;il faut charger la suite des publications ?\nEh bien en fait, l\u0026rsquo;application est r√©active, on peut √©crire son algorithme de chargement comme ceci:\nQuand un certain seuil de scroll est atteint (par exemple, 90% du contenu affich√©), alors: Charge la suite du contenu Passe √† autre chose Fin quand Tu l\u0026rsquo;auras remarqu√©, c\u0026rsquo;est ce qu\u0026rsquo;on a vu dans l\u0026rsquo;article IMMV ‚Äî Section 2 ‚Äî Chapitre 1 ‚Äî Synchrone et Asynchrone, ou comment r√©agir au changement.\nConclusion Dans cet article, on a vu diff√©rents m√©canimes d\u0026rsquo;optimisation.\nPlus important encore, si on se rappelle des pr√©c√©dents articles, on a vu qu\u0026rsquo;en informatique, en plus de combiner les structures de donn√©es et les structures de contr√¥le, on pouvait combiner les concepts d\u0026rsquo;optimisation et de modes d\u0026rsquo;ex√©cution.\nLe prochaine article est en cours de r√©daction, on parlera de complexit√©.\n‚Üê Retour √† la section\n‚Üê Retour √† l‚Äôintroduction\n","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/optimisation/memoisation/","summary":"\u003cp\u003e√ätre \u003cem\u003efiu\u003c/em\u003e est un art, une vertu. \u003cstrong\u003eNon, ce n\u0026rsquo;est pas une blague\u003c/strong\u003e. Tu ne me crois pas ?\u003c/p\u003e\n\u003cp\u003e\u003cem\u003e\u0026ldquo;We will encourage you to develop the three great virtues of a programmer: laziness, impatience, and hubris.\u0026rdquo; ‚Äî Larry Wall, Programming perl (1991)\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003e\u0026ldquo;I choose a lazy person to do a hard job. Because a lazy person will find an easy way to do it.\u0026rdquo; ‚Äî Bill Gates\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eProgrammer une machine pour qu\u0026rsquo;elle fasse le travail √† ta place, c\u0026rsquo;est de la fain√©antise.\u003c/p\u003e","title":"IMVV ‚Äî Section 3 ‚Äî Chapitre 2 ‚Äî M√©mo√Øsation et Lazy loading, les techniques du fain√©ant ultime"},{"content":"Dans le pr√©c√©dent article, IMMV ‚Äî Section 2 ‚Äî Chapitre 1 ‚Äî Synchrone et Asynchrone, ou comment r√©agir au changement, on a vu les diff√©rents modes d\u0026rsquo;ex√©cution.\nOn s\u0026rsquo;√©tait arr√™t√© sur le probl√®me suivant : Comment faire pour r√©pondre √† la mont√©e en charge, √† l\u0026rsquo;accumulation de t√¢ches ?\nEh bien, dans cet article, on va voir comment on r√©sout ce probl√®me, en informatique comme dans la vraie vie : les m√©canismes sont souvent tr√®s proches.\nPour cela on va continuer avec notre exemple de restaurant. Et on va expliciter diff√©rents termes que j\u0026rsquo;avais regroup√©s en parlant d\u0026rsquo;algorithmes et de programmes.\nN\u0026rsquo;oublie pas que les objectifs de ces articles sont :\nTe donner une meilleure compr√©hension des bases de l‚Äôinformatique, T\u0026rsquo;inspirer pour analyser ou optimiser les situations du quotidien, ou peut-√™tre, qui sait, te donner envie d\u0026rsquo;explorer encore plus loin\u0026hellip; jusqu‚Äô√† en faire ton m√©tier. Le programme ‚Äî l\u0026rsquo;id√©e de restaurant En informatique, quand on parle de programme, on parle uniquement d\u0026rsquo;un ensemble d\u0026rsquo;algorithmes, des t√¢ches qui le composent. Il n\u0026rsquo;est pas encore en train d\u0026rsquo;√™tre ex√©cut√©. Par exemple, Facebook est un programme ‚Äî mais tant que tu ne l‚Äôouvres pas, il ne fait rien.\nEh bien, c\u0026rsquo;est pareil pour un restaurant dans la vie de tous les jours, quand je parle du restaurant √† un ami, je n\u0026rsquo;y suis pas physiquement. Je parle juste du concept de restaurant, de l\u0026rsquo;id√©e que je m\u0026rsquo;en fais.\nLe processus - le restaurant ouvert Si je veux parler du restaurant physiquement ouvert, avec les employ√©s qui s\u0026rsquo;activent, en informatique il faut plut√¥t utiliser le terme processus. C\u0026rsquo;est le programme en cours d\u0026rsquo;ex√©cution.\nUn processus poss√®de son propre contexte d\u0026rsquo;ex√©cution, c\u0026rsquo;est un gros mot pour dire qu\u0026rsquo;il a ses propres ressources, et que personne ne peut lui prendre ses ressources.\nEn effet, quand le restaurant est ouvert, les assiettes qu\u0026rsquo;il utilise sont ses propres assiettes, ses propres ressources. Il n\u0026rsquo;y a pas un autre restaurant qui lui prendrait ses assiettes pendant qu\u0026rsquo;il est ouvert, sinon il risque d\u0026rsquo;avoir des assiettes manquantes.\nPour ex√©cuter un algorithme, un processus est compos√© d\u0026rsquo;un thread principal, et il peut avoir d\u0026rsquo;autres thread.\nLe thread ‚Äî la proc√©dure en cours d\u0026rsquo;ex√©cution du serveur Le thread (fil d\u0026rsquo;ex√©cution en fran√ßais) est ce qu‚Äôon appelle la proc√©dure en train de s\u0026rsquo;ex√©cuter. C‚Äôest un peu comme un serveur qui suit activement une fiche d\u0026rsquo;instructions √† un instant donn√©. Attention, ce n\u0026rsquo;est pas le serveur.\nEn informatique, on dit que le thread est l‚Äôunit√© d‚Äôex√©cution, C‚Äôest la plus petite unit√© qu‚Äôun ordinateur puisse piloter pour ex√©cuter du code. il n‚Äôexiste pas d‚Äôunit√© plus petite qu‚Äôun thread pour ex√©cuter une t√¢che.\nMaintenant qu‚Äôon comprend ce qu‚Äôest un thread ‚Äî une proc√©dure en cours d\u0026rsquo;ex√©cution ‚Äî il faut se demander qui ex√©cute cette proc√©dure.\nLe coeur ‚Äî le serveur On y arrive enfin, dans un ordinateur, le composant physique qui ex√©cute un thread s\u0026rsquo;appelle un coeur (core en anglais). Pour notre restaurant, ce core est le serveur. C\u0026rsquo;est lui, physiquement, qui prend les commandes, sert les plats, etc.\nConcurrence, parall√©lisme, multithread et monothread ‚Äî ou comment servir 2 familles en m√™me temps Un serveur ne peut faire qu\u0026rsquo;une seule chose √† la fois, √† un instant donn√© : quand il prend une commande √† l\u0026rsquo;instant T, il ne peut pas, en m√™me temps, servir des plats.\nPar contre, il pourrait s\u0026rsquo;interrompre pendant les t√¢ches, par exemple, au lieu de prendre toutes les commandes de la famille, d\u0026rsquo;un coup, il peut :\nprendre la commande d\u0026rsquo;un 1er plat aller chercher un plat √† servir servir le plat prendre la commande d\u0026rsquo;un 2√®me plat aller chercher un autre plat √† servir servir le plat etc. Attention: ici nous n\u0026rsquo;avons pas d√©coup√© les actions. C\u0026rsquo;est juste que le serveur a jongl√© entre les 2 t√¢ches \u0026ldquo;prendre la commande\u0026rdquo; et \u0026ldquo;servir les plats\u0026rdquo;. On appelle ce comportement la concurrence, car les 2 t√¢ches sont en concurrence pour √™tre termin√©es.\nDans un ordinateur, les threads sont concurrents, et comme √©nonc√© plus haut, √©tant donn√© qu\u0026rsquo;un processus est compos√© d\u0026rsquo;un thread principal, on dit que les processus sont concurrents.\nDans la vraie vie il y a des situations o√π on ne jongle pas avec les t√¢ches, o√π il faut √™tre concentr√© sur une t√¢che\nTout √† fait, et dans ce cas, s\u0026rsquo;il y a trop de t√¢ches pour une seule personne, on fait intervenir une 2√®me personne, une 3√®me etc.\nDans notre restaurant, avec 2 serveurs, pendant que l\u0026rsquo;un prend les commandes de la famille 1, un autre peut servir les plats de la famille 2. On appelle √ßa le parall√©lisme, les proc√©dures/threads sont ex√©cut√©s en parall√®le.\nEnfin, dans un restaurant, si on ne peut avoir qu\u0026rsquo;un seul serveur qui suit activement une fiche d\u0026rsquo;instructions ‚Äî un seul thread ‚Äî, on dit que le restaurant/le programme est monothread. S\u0026rsquo;il y en a plusieurs, on dit que le restaurant/serveur est multithread.\nDu coup, la solution pour le restaurant est d\u0026rsquo;embaucher plus de serveurs ?\nC\u0026rsquo;est l\u0026rsquo;une des solutions, oui, mais ce n\u0026rsquo;est pas la seule. Il y a globalement 2 chemins pour r√©pondre √† une mont√©e en charge. On peut :\noptimiser les algorithmes pour les rendre plus performants et/ou changer le mode d\u0026rsquo;ex√©cution, ou alors on peut mettre plus de coeurs et faire du multithread. De la m√™me mani√®re, dans la vraie vie, on peut :\nmieux former le serveur et/ou optimiser les proc√©dures qu\u0026rsquo;il doit suivre et/ou le motiver pour qu\u0026rsquo;il travaille plus vite, embaucher plus de serveurs. Dans tous les cas, je ne m\u0026rsquo;avancerai pas pour apprendre √† un restaurateur son m√©tier.\nLe partage de ressources ‚Äî ou comment partager une fourchette Dans le restaurant, on va maintenant se mettre du point de vue d\u0026rsquo;un couple, venu manger en t√™te √† t√™te dans une ambiance cosy, tamis√©e, √† l\u0026rsquo;abri des regards.\nLe serveur leur annonce la mauvaise nouvelle: il y a assez de couverts pour 2, sauf pour la fourchette. S\u0026rsquo;ils souhaitent tout de m√™me manger ici, ils devront se partager la fourchette, et interdiction de manger avec les doigts.\nLe couple discute, et finalement ce n\u0026rsquo;est pas un probl√®me, ils sont l√† pour profiter de l\u0026rsquo;instant.\nUne fois la commande pass√©e et les plats servis, Le couple commence √† manger. Mais comment s‚Äôorganisent-ils ?\nBen ils mangent chacun leur tour, ou alors l\u0026rsquo;un mange d\u0026rsquo;abord, et l\u0026rsquo;autre ensuite ?\nBingo, que l\u0026rsquo;un mange d\u0026rsquo;abord, puis l\u0026rsquo;autre, ou qu\u0026rsquo;ils mangent √† tour de r√¥le, dans tous les cas, ils doivent se partager une ressource : la fourchette. Donc l\u0026rsquo;un prend le contr√¥le de la ressource/fourchette, fait des actions avec cette ressource, puis lib√®re la ressource. L\u0026rsquo;autre peut √† son tour prendre le contr√¥le de la ressource, etc.\nDans un ordinateur, c\u0026rsquo;est pareil, dans un processus, les threads doivent se partager les ressources. De m√™me, les processus doivent se partager les ressources.\nC\u0026rsquo;est pour √ßa que sur un ordinateur, quand tu ouvres un document Word partag√© avec tes coll√®gues, parfois tu as un message du genre \u0026ldquo;le fichier est d√©j√† ouvert par\u0026hellip;\u0026rdquo; car le document Word est une fourchette ressource partag√©e entre ton application Word, et celle de ton coll√®gue.\nElle est bizarre ton explication\u0026hellip;\nJe ne vois pas de quoi tu parles.\nQuoiqu\u0026rsquo;il en soit, tu comprends donc qu\u0026rsquo;en rajoutant plus de threads/cores/personnes, on ne va pas forc√©ment plus vite. Ils doivent se synchroniser pour partager les ressources et parfois attendre.\nInstant Dev En informatique, ce partage de ressource s‚Äôappelle une section critique. Pour √©viter que deux t√¢ches utilisent la ressource en m√™me temps, on utilise des verrous (locks). Conclusion Dans cet article, on a vu diff√©rents termes informatiques qui permettent de comprendre un peu plus comment fonctionne un ordinateur, comment on pouvait r√©pondre √† la mont√©e en charge de diff√©rentes mani√®res, et que finalement, c\u0026rsquo;est tr√®s proche de la vie r√©elle.\nNous avons fini cette section \u0026ldquo;IMMV ‚Äî Section 2 ‚Äî L\u0026rsquo;ex√©cution : comment faire des actions ?\u0026rdquo;.\nDans la prochaine section, IMMV ‚Äî Section 3 ‚Äî L\u0026rsquo;optimisation : comment se faire passer pour un coach de vie, on verra comment optimiser des applications et la vie r√©elle.\n‚Üê Retour √† la section\n‚Üê Retour √† l‚Äôintroduction\n","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/l-execution/threads/","summary":"\u003cp\u003eDans le pr√©c√©dent article, \u003ca href=\"../sync-async/\"\u003eIMMV ‚Äî Section 2 ‚Äî Chapitre 1 ‚Äî Synchrone et Asynchrone, ou comment r√©agir au changement\u003c/a\u003e, on a vu les diff√©rents modes d\u0026rsquo;ex√©cution.\u003c/p\u003e\n\u003cp\u003eOn s\u0026rsquo;√©tait arr√™t√© sur le probl√®me suivant : Comment faire pour r√©pondre √† la mont√©e en charge, √† l\u0026rsquo;accumulation de t√¢ches ?\u003c/p\u003e\n\u003cp\u003eEh bien, dans cet article, on va voir comment on r√©sout ce probl√®me, en informatique \u003cstrong\u003ecomme dans la vraie vie\u003c/strong\u003e : les m√©canismes sont souvent tr√®s proches.\u003c/p\u003e","title":"IMMV ‚Äî Section 2 ‚Äî Chapitre 2 ‚Äî Monothread, Multithread, Parall√©lisme et Concurrence, je ne peux pas tout faire en m√™me temps !"},{"content":"Dans le pr√©c√©dent article IMVV ‚Äî Section 1 ‚Äî Chapitre 1 ‚Äî File ou Pile ? L\u0026rsquo;art de passer avant les autres on a d√©couvert les files et les piles. Cette fois, on va survoler plusieurs autres structures de donn√©es (data structures en anglais) qu\u0026rsquo;on utilise tr√®s souvent en informatique\u0026hellip; et dans la vraie vie.\nN\u0026rsquo;oublie pas que les objectifs de ces articles sont :\nTe donner une meilleure compr√©hension des bases de l‚Äôinformatique, T\u0026rsquo;inspirer pour analyser ou optimiser les situations du quotidien, ou peut-√™tre, qui sait, te donner envie d\u0026rsquo;explorer encore plus loin\u0026hellip; jusqu‚Äô√† en faire ton m√©tier. Le tableau ‚Äî la base de presque tout Tu as peut-√™tre remarqu√© dans le pr√©c√©dent article que la file et la pile se ressemblent beaucoup. En r√©alit√©, on peut les repr√©senter toutes les deux avec la m√™me structure : un tableau.\nEn informatique, le tableau (ou array en anglais) est l‚Äôune des structures les plus simples : on range des √©l√©ments les uns √† la suite des autres, dans un espace de taille fixe, et chaque √©l√©ment est rep√©r√© par sa position (ou index).\nPrenons un exemple simple : un tableau d\u0026rsquo;amis √† inviter pour un anniversaire, mais dans mon carnet d\u0026rsquo;adresses je n\u0026rsquo;ai que 6 places.\nAmis Manutea Vai Purotu Heiarii Reva (vide) index 0 1 2 3 4 5 L‚Äôindex est simplement la position de la personne dans le tableau, ce n\u0026rsquo;est pas un ordre.\nDans la plupart des langages informatiques, l\u0026rsquo;index commence √† 0, et pas √† 1.\nCet index nous permet d\u0026rsquo;acc√©der directement √† Vai, l\u0026rsquo;amie √† l\u0026rsquo;index 2 (ou 3√®me √©l√©ment), pour voir son num√©ro de t√©l√©phone par exemple.\nEt ce tableau peut se comporter diff√©remment selon la mani√®re dont on ajoute et retire les √©l√©ments. Par exemple, on peut le faire fonctionner comme une file ou une pile, simplement en changeant les r√®gles du jeu.\nSi c\u0026rsquo;est une file : On ajoute les amis √† la fin, par exemple, Jean arrive apr√®s Reva : Amis Manutea Vai Purotu Heiarii Reva Jean index 0 1 2 3 4 5 Et on traite depuis le d√©but, on retire Manutea du tableau : Amis Vai Purotu Heiarii Reva Jean (vide) index 0 1 2 3 4 5 Pour une pile : On ajoute les amis au d√©but, Jean arrive avant Manutea : Amis Jean Manutea Vai Purotu Heiarii Reva index 0 1 2 3 4 5 Et on traite toujours depuis le d√©but, on retire Jean du tableau : Amis Manutea Vai Purotu Heiarii Reva (vide) index 0 1 2 3 4 5 Dans les deux cas, on utilise un tableau pour stocker les amis. C‚Äôest la logique d‚Äôajout et de retrait qui transforme ce tableau en pile ou en file.\nüéØ Et c‚Äôest exactement pour √ßa que, lorsqu‚Äôon traite des dossiers empil√©s, il vaut mieux commencer par ceux du bas. Sinon, on inverse l‚Äôordre d‚Äôarriv√©e‚Ä¶ et ce n‚Äôest plus une file d‚Äôattente, mais une injustice organis√©e.\nS\u0026rsquo;il n\u0026rsquo;y a que 6 places, que se passe-t-il si j\u0026rsquo;ai 7 amis ?\nD\u0026rsquo;abord, je te f√©licite d\u0026rsquo;avoir autant d\u0026rsquo;amis. Ensuite, on peut s\u0026rsquo;en sortir, en achetant un carnet d\u0026rsquo;adresse qui a plus de places, et on recopie nos amis dans ce nouveau carnet.\nC\u0026rsquo;est similaire en informatique, on fait un nouveau tableau, plus grand, et on recopie.\nHeureusement, en informatique on a invent√© une autre structure.\nLa liste ‚Äî comme le tableau, mais dynamique La liste (ou list en anglais), c‚Äôest comme un tableau, mais en mieux : la taille n‚Äôest pas fixe.\nTu peux ajouter ou supprimer des √©l√©ments √† tout moment, sans te soucier du nombre de places pr√©vues au d√©part. Et √† tout moment, tu peux demander : ‚ÄúCombien d‚Äô√©l√©ments j‚Äôai dans cette liste ?‚Äù ‚Äî et obtenir une r√©ponse fiable.\nC‚Äôest la version souple du tableau, celle qu‚Äôon trouve dans la majorit√© des langages de programmation modernes.\nRefaisons les exemples de pile et de file, mais cette fois-ci avec des listes.\nSi c\u0026rsquo;est une file : On ajoute les amis √† la fin, par exemple, Jean arrive apr√®s Reva : Amis Manutea Vai Purotu Heiarii Reva Jean index 0 1 2 3 4 5 Nombre d\u0026rsquo;√©l√©ments: 6\nEt on traite depuis le d√©but, on retire Manutea du tableau : Amis Vai Purotu Heiarii Reva Jean index 0 1 2 3 4 Nombre d\u0026rsquo;√©l√©ments: 5\nPour une pile : On ajoute les amis au d√©but, Jean arrive avant Manutea : Amis Jean Manutea Vai Purotu Heiarii Reva index 0 1 2 3 4 5 Nombre d\u0026rsquo;√©l√©ments: 6\nEt on traite toujours depuis le d√©but, on retire Jean du tableau : Amis Manutea Vai Purotu Heiarii Reva index 0 1 2 3 4 Nombre d\u0026rsquo;√©l√©ments: 5\nOn remarque qu\u0026rsquo;il n\u0026rsquo;y a plus la case (vide) et le nombre d\u0026rsquo;√©l√©ments change.\nInstant Dev Pour permettre cette souplesse, la liste est plus gourmande en calculs:\ncalcul √† la vol√©e du nombre d\u0026rsquo;√©l√©ments, r√©allocation de m√©moire. Mais en vrai, √† moins que tu ne codes un satellite, une carte embarqu√©e, ou une console des ann√©es 80, o√π chaque octet compte, il y a peu de raisons d‚Äôutiliser un tableau fixe. Une liste dynamique t\u0026rsquo;√©vitera bien des migraines.\nLe tableau et la liste sont des structures tr√®s basiques et tr√®s puissantes, elles sont les bases de beaucoup d\u0026rsquo;autres structures qu\u0026rsquo;on verra par la suite.\nLe tableau associatif ‚Äî ou comment indexer On avait pris l\u0026rsquo;exemple d\u0026rsquo;un carnet d\u0026rsquo;adresses qu\u0026rsquo;on avait mis dans un tableau ou dans une liste. C\u0026rsquo;est d√©j√† tr√®s bien de pouvoir stocker ta liste d\u0026rsquo;amis, mais si tu as des centaines d\u0026rsquo;amis et que tu veux appeler Vai pour aller √† la mer, tu vas gal√©rer pour chercher dans ce carnet d\u0026rsquo;adresse.\nEn effet, avec les 2 derni√®res structures, tu dois parcourir les √©l√©ments un par un, jusqu\u0026rsquo;√† tomber sur Vai. Tu vas perdre beaucoup de temps √† chercher son num√©ro, √ßa va t\u0026rsquo;√©nerver, tu vas l\u0026rsquo;appeler, lui dire \u0026ldquo;mais quelle id√©e d\u0026rsquo;avoir un pr√©nom qui commence par V!\u0026rdquo;, elle va s\u0026rsquo;√©nerver, vous ne serez plus amis, alors que tu voulais juste aller surfer.\nJe m\u0026rsquo;emporte un peu? Peut-√™tre.\nPour r√©soudre ce probl√®me, en informatique on a invent√© le tableau associatif (ou map en anglais). On utilise le tableau, et on va profiter de l\u0026rsquo;index pour justement indexer les √©l√©ments.\nPour cela, on a besoin de r√©fl√©chir un peu:\nOn sait que l\u0026rsquo;index est une position dans le tableau, donc un nombre On sait que les pr√©noms commencent par une lettre (oui, je suis s√©rieux), on va supposer que c\u0026rsquo;est une lettre de l\u0026rsquo;alphabet, et pas un caract√®re sp√©cial comme *$@ On sait qu\u0026rsquo;il y a 26 lettres dans l\u0026rsquo;alphabet =\u0026gt; Eur√™ka: On peut utiliser la 1√®re lettre du pr√©nom, la transformer en index en utilisant sa position dans l\u0026rsquo;alphabet, et associer le pr√©nom √† cet index. On dit que l\u0026rsquo;index est une cl√© et que le pr√©nom est une valeur par exemple:\nManutea =\u0026gt; M =\u0026gt; M est la 14√®me lettre de l\u0026rsquo;alphabet, donc Manutea sera le 14√®me √©l√©ment. Pour rappel, l\u0026rsquo;index commence √† 0, donc M = index 13. cl√©: 13 valeur: Manutea\nPour Heiarii on aura: cl√©: 7 valeur: Heiarii\nCe qui nous donne:\nAmis (vide) (vide) (vide) (vide) (vide) (vide) (vide) Heiarii (vide) (vide) (vide) (vide) (vide) Manutea (vide) Purotu (vide) Reva (vide) (vide) (vide) Vai (vide) (vide) (vide) (vide) index 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 Avec cette map, on pourra facilement acc√©der aux informations de Vai, puisqu\u0026rsquo;on pourra juste aller directement √† l\u0026rsquo;index 21.\nInstant Dev En vrai, pour calculer l\u0026rsquo;index, on utilise une fonction de hachage (hash en anglais) qui permet de transformer les cl√©s en index. C\u0026rsquo;est pour √ßa qu\u0026rsquo;on appelle √ßa un HashMap en Java. Oui mais moi je n\u0026rsquo;ai pas envie de m\u0026rsquo;emb√™ter √† compter sur mes doigts √† quelle position est la lettre V\u0026hellip;\nTu as raison, dans la vraie vie, dans ton carnet d\u0026rsquo;adresse pour chaque lettre tu as une encoche o√π la lettre y est marqu√©e, et tu notes les informations dans les pages qui correspondent √† cette lettre.\nCarnet d'adresses papier, en rouge les encoches ‚Äî source: Wikim√©dia En informatique c\u0026rsquo;est le m√™me principe, sauf qu\u0026rsquo;on ne peut pas utiliser de lettre comme index, alors on est oblig√© de trouver cette astuce.\nEt en plus, il est nul ton carnet d\u0026rsquo;adresse, comment je fais si j\u0026rsquo;ai 2 amis qui s\u0026rsquo;appellent Vai et Vahine? Je mets Vahine dans la case juste apr√®s? Et si j\u0026rsquo;ai des centaines d\u0026rsquo;amis comme tu le disais au d√©but, je fais comment pour les mettre dans les 26 cases ?\nOk, tranquille, pas de stress.\nEn informatique, on peut combiner les structures, plut√¥t que d\u0026rsquo;associer un pr√©nom √† une lettre, on va associer une liste de pr√©noms √† une lettre. Ci-dessous on r√©√©crit notre map et on ajoute Vahine :\nCl√©s 7 13 15 17 21 ‚Üì ‚Üì ‚Üì ‚Üì ‚Üì Heiarii Manutea Purotu Reva Vai Vahine Comme tu l\u0026rsquo;as remarqu√©, au lieu de mettre directement les pr√©noms dans les cases, il y a des fl√®ches qui pointent vers des listes. On appelle √ßa un pointeur (ou pointer en anglais). c‚Äôest un m√©canisme qui permet √† l‚Äôordinateur de dire \u0026ldquo;Va chercher les donn√©es ailleurs.\u0026rdquo; Plut√¥t que de stocker directement les valeurs, on stocke l‚Äôendroit o√π elles se trouvent.\nC\u0026rsquo;est la plus grande force de l\u0026rsquo;informatique, on peut combiner diff√©rents concepts abstraits pour r√©pondre √† notre besoin.\nL\u0026rsquo;ensemble ‚Äî une structure unique Si comme moi tu fais ta liste de courses durant la semaine en pr√©vision des grandes courses du dimanche, tu as peut-√™tre d√©j√† eu la liste qui ressemble √† :\nlait oeufs pops viande salade oeufs Tu remarques que les oeufs apparaissent 2 fois. On appelle √ßa un doublon.\n√áa peut arriver si lundi tu t\u0026rsquo;es fait une omelette avec les derniers oeufs, tu les as not√©s pour en racheter. Puis que vendredi, tu voulais faire un g√¢teau, mais tu t\u0026rsquo;es souvenu que tu n\u0026rsquo;avais plus d\u0026rsquo;oeufs\u0026hellip; et alors tu les as r√©√©crits.\nC\u0026rsquo;est tr√®s sp√©cifique comme explication\u0026hellip; C\u0026rsquo;est ce qui t\u0026rsquo;es arriv√©, pas vrai?\nTu n\u0026rsquo;as pas de preuve. Cette accusation est fausse.\nBref, la liste et le tableau n\u0026rsquo;ont aucun moyen d\u0026rsquo;emp√™cher la pr√©sence de doublons dans leurs √©l√©ments. C\u0026rsquo;est pour √ßa qu\u0026rsquo;en informatique on a invent√© l\u0026rsquo;ensemble (ou set en anglais), une structure o√π chaque √©l√©ment est unique.\nPar contre, le set n\u0026rsquo;est pas ordonn√© comme le tableau et la liste. Il n\u0026rsquo;y a pas d\u0026rsquo;index permettant d\u0026rsquo;acc√©der directement au 2√®me ou 6√®me √©l√©ment.\nInstant Dev En informatique, pour faire un set, on utilise en fait une map o√π la cl√© est l\u0026rsquo;√©l√©ment. Le calcul de hash nous garantit qu\u0026rsquo;il ne peut pas y avoir de doublon. Et on met une valeur arbitraire dans la valeur associ√©e, comme 1 ou PRESENT.\nSi on veut une structure ordonn√©e sans doublons, on peut :\ncoder une liste avec une fonction d\u0026rsquo;ajout qui rejette les doublons, transformer un set en liste, utiliser une structure sp√©cialis√©e, comme LinkedHashSet en Java üìå Exemples dans la vie r√©elle L\u0026#39;ensemble des ingr√©dients qu‚Äôil te reste dans le frigo L\u0026#39;ensemble des invit√©s √† ton anniversaire üíª Exemples en informatique L\u0026#39;ensemble des num√©ros de passeport en Polyn√©sie fran√ßaise L\u0026#39;ensemble de tes amis Facebook Le graphe ‚Äî ou comment appeler l\u0026rsquo;ami d\u0026rsquo;un ami d\u0026rsquo;un ami Tu pr√©pares ta liste d‚Äôinvit√©s pour ton anniversaire, tu comptes inviter tout ton carnet d\u0026rsquo;adresses.\nEt l√†, tu r√©alises que tu n‚Äôas pas le contact de Paul. Tu l\u0026rsquo;as crois√© en soir√©e et il √©tait cool, tu voudrais l\u0026rsquo;inviter\u0026hellip; mais tu as oubli√© de lui demander son num√©ro.\nHeureusement, tu sais que Purotu le conna√Æt.\nTu l\u0026rsquo;appelles\u0026hellip; zut, elle n\u0026rsquo;a pas son num√©ro. Mais elle te donne le num√©ro de Tiare, une autre amie de Paul. Tu appelles Tiare, tu te pr√©sentes, tu l\u0026rsquo;invite √©galement car tu n\u0026rsquo;es pas un sauvage. Et tu lui demandes le num√©ro de Paul.\nBingo, elle l\u0026rsquo;a, tu appelles Paul et il est chaud pour venir √† ton anniversaire.\nLes liens entre ces personnes peuvent √™tre repr√©sent√©s par un graphe (ou graph en anglais).\nEt ce que tu viens de faire, sans t\u0026rsquo;en rendre compte, c\u0026rsquo;est un parcours de graphe, un algorithme !\n%%{ init: { 'theme': 'base', 'themeVariables': { 'primaryColor': '#ddd', 'primaryTextColor': '#007acc', 'primaryBorderColor': '#007acc', 'lineColor': '#007acc' } } }%% graph TD A[Toi] --- B[Manutea] A --- C[Vai] A --- D[Purotu] A --- E[Heiarii] A --- F[Reva] A --- G[Jean] D --- H[Tiare] H --- I[Paul] Graphe de relation entre les personnes Ce graphe est non orient√©, c\u0026rsquo;est-√†-dire qu\u0026rsquo;il n\u0026rsquo;y a pas de sens entre les √©l√©ments. Chaque case est un noeud, et chaque trait est une ar√™te.\nEffectivement pour √©viter de f√¢cher les personnes, on ne va pas dire \u0026ldquo;Purotu est l\u0026rsquo;ami de Tiare, mais Tiare n\u0026rsquo;est pas l\u0026rsquo;ami de Purotu\u0026rdquo;.\nPar contre, on peut utiliser un graphe orient√© pour repr√©senter les appels que tu as pass√©s.\n%%{ init: { 'theme': 'base', 'themeVariables': { 'primaryColor': '#ddd', 'primaryTextColor': '#007acc', 'primaryBorderColor': '#007acc', 'lineColor': '#007acc' } } }%% graph TD A[Toi] --\u003e B[Manutea] A --\u003e C[Vai] A --\u003e D[Purotu] A --\u003e E[Heiarii] A --\u003e F[Reva] A --\u003e G[Jean] A --\u003e H[Tiare] A --\u003e I[Paul] Graphe des appels que tu as pass√© Ici, chaque case est un noeud, tout comme le graphe non orient√©, mais cette fois-ci, chaque fl√®che est une ar√™te, et donne le sens d\u0026rsquo;appel.\nOn a donc les m√™mes donn√©es, mais on utilise la structure adapt√©e √† ce qu\u0026rsquo;on veut repr√©senter.\nEt c\u0026rsquo;est quoi le parcours de graphe?\nJe suis heureux que tu poses cette question, mais ta question d√©passe le cadre de cet article.\nConclusion On a d√©j√† vu pas mal de choses, je te laisse relire, essayer de combiner les structures entre elles, te renseigner sur internet en cherchant \u0026ldquo;structures de donn√©es\u0026rdquo; ou \u0026ldquo;data structure\u0026rdquo;.\nIl existe beaucoup de structures de donn√©es, celles qui sont pr√©sent√©es dans cet article sont juste les plus basiques, celles qu\u0026rsquo;on apprend dans les premi√®res heures de cours de programmation.\nSi tu souhaites continuer cette aventure, tu peux regarder la suite ici: IMVV ‚Äî Section 1 ‚Äî Chapitre 3 ‚Äî Structures de contr√¥le et algorithme, apprendre √† r√©fl√©chir\n‚Üê Retour √† la section\n‚Üê Retour √† l‚Äôintroduction\n","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/les-bases/structures-de-donnees/","summary":"\u003cp\u003eDans le pr√©c√©dent article \u003ca href=\"../file-et-pile/\"\u003eIMVV ‚Äî Section 1 ‚Äî Chapitre 1 ‚Äî File ou Pile ? L\u0026rsquo;art de passer avant les autres\u003c/a\u003e on a d√©couvert les files et les piles. Cette fois, on va survoler plusieurs autres \u003cstrong\u003estructures de donn√©es\u003c/strong\u003e (\u003cem\u003edata structures\u003c/em\u003e en anglais) qu\u0026rsquo;on utilise tr√®s souvent en informatique\u0026hellip; et dans la vraie vie.\u003c/p\u003e\n\u003cp\u003eN\u0026rsquo;oublie pas que les objectifs de ces articles sont :\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eTe donner une meilleure compr√©hension des bases de l‚Äôinformatique,\u003c/li\u003e\n\u003cli\u003eT\u0026rsquo;inspirer pour analyser ou optimiser les situations du quotidien,\u003c/li\u003e\n\u003cli\u003eou peut-√™tre, qui sait, te donner envie d\u0026rsquo;explorer encore plus loin\u0026hellip; jusqu‚Äô√† en faire ton m√©tier.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"le-tableau--la-base-de-presque-tout\"\u003eLe tableau ‚Äî la base de presque tout\u003c/h2\u003e\n\u003cp\u003eTu as peut-√™tre remarqu√© dans le pr√©c√©dent article que la \u003cstrong\u003efile\u003c/strong\u003e et la \u003cstrong\u003epile\u003c/strong\u003e se ressemblent beaucoup. En r√©alit√©, on peut les repr√©senter toutes les deux avec la m√™me structure : un \u003cstrong\u003etableau\u003c/strong\u003e.\u003c/p\u003e","title":"IMVV ‚Äî Section 1 ‚Äî Chapitre 2 ‚Äî Autres structures de donn√©es, j'organise mon bordel"},{"content":"Dans l\u0026rsquo;article pr√©c√©dent IMVV ‚Äî Section 1 ‚Äî Chapitre 2 ‚Äî Autres structures de donn√©es, j\u0026rsquo;organise mon bordel, on s\u0026rsquo;√©tait arr√™t√© sur ta question :\nEt c\u0026rsquo;est quoi le parcours de graphe?\nDans cet article, on va parler des structures de contr√¥le (control flow statements en anglais), qu\u0026rsquo;on utilise dans des algorithmes (algorithms en anglais).\nAvant d\u0026rsquo;expliquer l\u0026rsquo;algorithme que tu as fait, le parcours de graphe, on doit expliquer les structures de contr√¥le.\nN\u0026rsquo;oublie pas que les objectifs de ces articles sont :\nTe donner une meilleure compr√©hension des bases de l‚Äôinformatique, T\u0026rsquo;inspirer pour analyser ou optimiser les situations du quotidien, ou peut-√™tre, qui sait, te donner envie d\u0026rsquo;explorer encore plus loin\u0026hellip; jusqu‚Äô√† en faire ton m√©tier. Pseudo-code ‚Äî l\u0026rsquo;art de la cuisine Quand tu fais un g√¢teau, tu r√©alises les actions suivantes:\nPr√©chauffer le four Verser la farine dans le saladier Casser les oeufs et mettre le contenu dans le saladier Verser le lait dans le saladier Remuer Verser la pr√©paration dans un moule Mettre le moule au four Attendre 20 minutes Eteindre le four Sortir le moule du four D√©mouler Toute cette suite d\u0026rsquo;√©tapes est ce qu\u0026rsquo;on appelle un algorithme, et la fa√ßon dont on l\u0026rsquo;a √©crit, √ßa s\u0026rsquo;appelle du pseudo-code, parce que √ßa ressemble √† un langage de programmation, mais ce n\u0026rsquo;en est pas un.\nMais pourquoi on appelle √ßa un algorithme? on peut pas juste dire une suite d\u0026rsquo;actions?\nJe te laisse chercher sur internet pourquoi on appelle √ßa un algorithme.\nLa boucle for ‚Äî ou comment √™tre fiu Ton meilleur ami Manutea te demande \u0026ldquo;Comment tu as fait pour inviter toutes ces personnes √† ton anniversaire ?\u0026rdquo;. Laquelle de ces 2 phrases dirais-tu :\nJ\u0026rsquo;ai appel√© Manutea, puis j\u0026rsquo;ai appel√© Vai, puis j\u0026rsquo;ai appel√© Purotu, puis j\u0026rsquo;ai appel√© Heiarii, puis j\u0026rsquo;ai appel√© Reva, puis j\u0026rsquo;ai appel√© Jean, puis j\u0026rsquo;ai appel√© Tiare, puis j\u0026rsquo;ai appel√© Paul J\u0026rsquo;ai pris mon carnet d\u0026rsquo;adresses, puis pour chaque contact, j\u0026rsquo;ai appel√© le num√©ro correspondant La 1√®re phrase est un algorithme sans boucle (loop en anglais) : chaque action est √©crite explicitement.\nLa 2√®me, elle, utilise une boucle ‚Äî tu r√©p√®tes la m√™me action pour chaque contact. Sans forc√©ment y penser, tu utilises aussi une variable : un espace dans ta t√™te pour m√©moriser un num√©ro, que tu remplaces √† chaque nouvel appel.\nCette mani√®re de r√©p√©ter une action avec une variable, c‚Äôest exactement ce qu‚Äôun ordinateur fait quand on lui demande de parcourir une liste.\nSi tu relis bien la 2√®me phrase, tu verras que pour chaque est en gras. En anglais, pour chaque se dit for each, c\u0026rsquo;est pour √ßa qu\u0026rsquo;on l\u0026rsquo;appelle la boucle for dans la plupart des langages.\nSi on essayait d\u0026rsquo;√©crire un algorithme, sous forme de pseudo-code simple pour d√©crire la 2√®me phrase, √ßa donnerait :\nDans mon carnet d\u0026#39;adresses, pour chaque contact: J\u0026#39;ai appel√© le num√©ro correspondant au contact J\u0026#39;ai invit√© l\u0026#39;ami Fin pour \u0026ldquo;Dans mon carnet d\u0026rsquo;adresses, pour chaque contact\u0026rdquo; marque le d√©but de la boucle, et \u0026ldquo;Fin pour\u0026rdquo; marque la fin de la boucle.\nEntre ces 2 lignes, les actions \u0026ldquo;J\u0026rsquo;ai appel√© le num√©ro correspondant au contact\u0026rdquo; et \u0026ldquo;J\u0026rsquo;ai invit√© l\u0026rsquo;ami\u0026rdquo; forment ce qu\u0026rsquo;on appelle un bloc d\u0026rsquo;instructions.\nPar convention, on indente ce bloc ‚Äî on le d√©cale vers la droite ‚Äî pour montrer visuellement qu\u0026rsquo;il est √† l\u0026rsquo;int√©rieur de la boucle.\nOk, et quel est le rapport entre la boucle for et fiu comme marqu√© dans le titre ?\nSi on devait √©crire l\u0026rsquo;algorithme de la 1√®re phrase, √ßa donnerait :\nJ\u0026#39;ai appel√© Manutea J\u0026#39;ai appel√© Vai J\u0026#39;ai appel√© Purotu J\u0026#39;ai appel√© Heiarii J\u0026#39;ai appel√© Reva J\u0026#39;ai appel√© Jean J\u0026#39;ai appel√© Tiare J\u0026#39;ai appel√© Paul Chaque ligne est une action, donc il faut √©crire autant de lignes qu\u0026rsquo;il y a de contacts dans ta liste de contacts. Maintenant, que se passerait-il si tu devais inviter 100 personnes? Tu serais fiu.\nAlors qu\u0026rsquo;avec la boucle, tu n\u0026rsquo;as pas besoin de changer ton algorithme, c\u0026rsquo;est le m√™me, que tu aies 6 contacts ou 100.\nOui mais dans la vraie vie je dois quand m√™me appeler les amis un par un\nCet exemple n‚Äôest pas l√† pour dire que tu vas programmer ton t√©l√©phone ‚Äî mais pour te faire sentir la puissance de la boucle : un seul bloc, quelle que soit la longueur de ta liste.\nDans la vraie vie, tu fais un groupe Facebook avec tous tes amis et tu postes des messages d\u0026rsquo;informations dans le groupe pour organiser, idem pour un groupe SMS. Si t\u0026rsquo;es old school, tu postes un message dans le journal local et viendra qui verra. D\u0026rsquo;ailleurs j\u0026rsquo;en parlerai dans de prochains articles.\nLa boucle while ‚Äî ou comment faire ses devoirs avant d\u0026rsquo;aller jouer Quand tu √©tais plus jeune, on t\u0026rsquo;a s√ªrement d√©j√† dit \u0026ldquo;Fais d\u0026rsquo;abord tes devoirs, ensuite tu peux aller jouer\u0026rdquo;, ou autrement dit \u0026quot;Tant que tu n\u0026rsquo;a pas fini tes devoirs, tu travailles, ensuite tu peux aller jouer\u0026quot;.\nSi on devait √©crire cet algorithme, √ßa donnerait:\nTant que je n\u0026#39;ai pas fini mes devoirs: Je fais mes devoirs Fin tant que Je vais jouer \u0026ldquo;Tant que je n\u0026rsquo;ai pas fini mes devoirs\u0026rdquo; marque le d√©but de la boucle, et \u0026ldquo;Fin tant que\u0026rdquo; marque la fin de la boucle.\nEntre ces 2 lignes, l\u0026rsquo;action \u0026ldquo;Je fais mes devoirs\u0026rdquo; forme le bloc d\u0026rsquo;instructions.\nTu l\u0026rsquo;auras remarqu√©, c\u0026rsquo;est tr√®s similaire √† la boucle for, sauf qu\u0026rsquo;au lieu de parcourir des √©l√©ments, on v√©rifie une condition, et on r√©p√®te la boucle si la condition n\u0026rsquo;est remplie.\nOn appelle √ßa une boucle while, car Tant que se dit while en anglais.\nEnsuite, une fois que les devoirs sont finis, on sort de la boucle, on fait la suite des instructions, donc \u0026ldquo;Je vais jouer\u0026rdquo;. On aurait aussi pu avoir d\u0026rsquo;autres instructions apr√®s la boucle for, c\u0026rsquo;est juste que l\u0026rsquo;exemple ne s\u0026rsquo;y pr√™tait pas.\nMais alors‚Ä¶ pourquoi deux types de boucles si elles font (presque) la m√™me chose ? Pourquoi une boucle for, et une boucle while ?\nEn fait, en fonction du probl√®me qu\u0026rsquo;on veut r√©soudre :\ndans certains cas on pourra compter, et dans ce cas on pr√©f√®rera utiliser une boucle for dans certains cas on ne pourra pas compter, et dans ce cas on pr√©f√®rera utiliser une boucle while Par exemple, pour un enfant qui joue dehors:\nTant qu\u0026#39;il fait beau: Je joue Fin tant que Ici, impossible de compter.\nMais tu commences peut-√™tre √† te rendre compte d\u0026rsquo;une supercherie.\nInstant Dev üí° En r√©alit√©, toutes les boucles for peuvent √™tre r√©√©crites en boucle while.\nLa boucle for n‚Äôest qu‚Äôune boucle while optimis√©e, √©crite pour √™tre plus simple √† lire‚Ä¶ quand on sait compter.\nLes 2 types de boucles sont des instructions d\u0026rsquo;it√©ration, √† la diff√©rence des instructions simples comme \u0026ldquo;Je joue\u0026rdquo;, les instructions d\u0026rsquo;it√©ration permettre d\u0026rsquo;ex√©cuter des blocs d\u0026rsquo;instructions de mani√®re r√©p√©t√©e.\nBravo, tu commences √† r√©fl√©chir comme un d√©veloppeur !\nExplications\nPour rappel:\ndans une liste, l\u0026rsquo;index commence √† 0, dans une liste, le dernier index est √©gal au nombre d\u0026rsquo;√©l√©ments de la liste moins 1 Amis Manutea Vai Purotu Heiarii Reva Jean Tiare Paul index 0 1 2 3 4 5 6 7 Nombre d\u0026rsquo;√©l√©ments: 8\nune variable c\u0026rsquo;est juste un espace m√©moire o√π on stocke une donn√©e (un tableau, une liste, un pr√©nom, un num√©ro de t√©l√©phone) Si on reprend l\u0026rsquo;exemple de la boucle for:\nDans mon carnet d\u0026#39;adresses, pour chaque contact: J\u0026#39;appelle le num√©ro correspondant au contact J\u0026#39;invite l\u0026#39;ami Fin pour Derri√®re, voici plut√¥t ce que fait un ordinateur (de mani√®re simplifi√©e) :\nJe cr√©e une variable \u0026#34;index\u0026#34;, qui vaut 0 Tant que \u0026#34;index\u0026#34; est inf√©rieur au nombre d\u0026#39;√©l√©ments (8) du carnet d\u0026#39;adresses: Je regarde le contact qui se trouve √† l\u0026#39;\u0026#34;index\u0026#34; dans le carnet d\u0026#39;adresses Je r√©cup√®re son num√©ro Je l\u0026#39;invite \u0026#34;index\u0026#34; prend la valeur \u0026#34;index\u0026#34; + 1 Fin tant que Comme tu le vois, c\u0026rsquo;est un peu plus compliqu√©, c\u0026rsquo;est pour √ßa qu\u0026rsquo;on pr√©f√®re utiliser une boucle for quand on peut compter.\nL\u0026rsquo;instruction conditionnelle ‚Äî ou pourquoi il faut respecter le code de la route Juste au-dessus, on parlait de condition dans la boucle while. Mais on n\u0026rsquo;a jamais expliqu√© ce que c\u0026rsquo;√©tait.\nUne condition est une question qu\u0026rsquo;on se pose, et la r√©ponse est soit ‚Äúoui‚Äù, soit ‚Äúnon‚Äù ‚Äî jamais les deux, jamais \u0026ldquo;un peu\u0026rdquo;.\nQuand on √©crit \u0026ldquo;Tant que je n\u0026rsquo;ai pas fini mes devoirs\u0026rdquo;, √† chaque r√©p√©tition on pose la question \u0026ldquo;Est-ce que j\u0026rsquo;ai fini mes devoirs?\u0026rdquo;.\nEn informatique, comme dans la vraie vie, une condition doit √™tre claire.\nOn peut utiliser ce concept pour faire des branchements dans notre code, dans une instruction conditionnelle (conditional statement en anglais).\nPrenons un exemple simple : tu es en voiture, tu approches un feu tricolore. Il est vert.\nQue fais-tu si le feu passe √† l‚Äôorange juste devant toi‚ÄØ?\nVoici un algorithme qui repr√©sente cette situation :\nSi le feu passe au orange, alors: Tu t\u0026#39;arr√™tes Sinon (c\u0026#39;est toujours vert): Tu continues et traverse l\u0026#39;intersection Fin si \u0026ldquo;Si le feu passe au orange,\u0026rdquo; marque le d√©but de l\u0026rsquo;instruction conditionnelle, \u0026ldquo;alors\u0026rdquo; marque la branche du si, \u0026ldquo;Sinon\u0026rdquo; marque la branche du sinon, et \u0026ldquo;Fin si\u0026rdquo; marque la fin de l\u0026rsquo;instruction conditionnelle.\nDe la m√™me mani√®re que pour les boucles, chaque branche est un bloc d\u0026rsquo;instructions. Comme pour les boucles, chaque branche forme un bloc d‚Äôinstructions, qu‚Äôon indente pour bien le rep√©rer.\nPour visualiser, imagine un arbre : chaque fois qu‚Äôune condition est test√©e, tu choisis une branche √† suivre. Le chemin d√©pend de tes r√©ponses.\nRevenons √† notre parcours de graphe Rappels Tu avais appel√© tes amis pour les inviter √† ton anniversaire, et tu avais √©t√© jusqu\u0026rsquo;au bout du monde, en sautant de relations en relations, pour inviter Paul. Tu avais fait ces actions :\nTu comptes inviter tout ton carnet d\u0026#39;adresses. Tu r√©alises que tu n‚Äôas pas le contact de Paul. Tu l\u0026#39;as crois√© en soir√©e et il √©tait cool, tu voudrais l\u0026#39;inviter... mais t\u0026#39;as oubli√© de lui demander son num√©ro. Heureusement, tu sais que Purotu le conna√Æt. Tu l\u0026#39;appelles... zut, elle n\u0026#39;a pas son num√©ro. Mais elle te donne le num√©ro de Tiare, une autre amie de Paul. Tu appelles Tiare, tu te pr√©sentes, tu l\u0026#39;invites √©galement car tu n\u0026#39;es pas un sauvage. Et tu lui demandes le num√©ro de Paul. Bingo, elle l\u0026#39;a, tu appelles Paul et il est chaud pour venir √† ton anniversaire. Ci-dessous se trouve le graphe de relation entre les personnes, un graphe non orient√©.\n%%{ init: { 'theme': 'base', 'themeVariables': { 'primaryColor': '#ddd', 'primaryTextColor': '#007acc', 'primaryBorderColor': '#007acc', 'lineColor': '#007acc' } } }%% graph TD A[Toi] --- B[Manutea] A --- C[Vai] A --- D[Purotu] A --- E[Heiarii] A --- F[Reva] A --- G[Jean] D --- H[Tiare] H --- I[Paul] Graphe de relation entre les personnes En se basant sur ce qu\u0026rsquo;on a appris dans cet article, on va √©crire un algorithme pour repr√©senter les actions que tu as r√©alis√©es pour inviter tes amis :\n# √âtape 1 : inviter tous mes amis directs (les noeuds les plus proches de \u0026#34;Toi\u0026#34; dans le graphe) Je cr√©e une variable \u0026#34;liste d\u0026#39;amis\u0026#34;, contenant tous mes amis directs Je cr√©e une variable \u0026#34;ami\u0026#34;, le contact courant Dans la \u0026#34;liste d\u0026#39;amis\u0026#34;, pour chaque \u0026#34;ami\u0026#34; : J\u0026#39;appelle \u0026#34;ami\u0026#34; Si \u0026#34;ami\u0026#34; r√©pond, alors : Je l\u0026#39;invite √† mon anniversaire Fin si Fin pour # √âtape 2 : retrouver Paul (en parcourant le graphe en largeur) Je cr√©e une variable \u0026#34;file\u0026#34;, initialis√©e avec la \u0026#34;liste d\u0026#39;amis\u0026#34; Je cr√©e une variable \u0026#34;visit√©s\u0026#34;, une liste vide Tant que la \u0026#34;file\u0026#34; n‚Äôest pas vide : Je prends le premier √©l√©ment de la \u0026#34;file\u0026#34;, je le stocke dans \u0026#34;ami\u0026#34; Si \u0026#34;ami\u0026#34; n‚Äôest pas dans \u0026#34;visit√©s\u0026#34;, alors : J‚Äôajoute \u0026#34;ami\u0026#34; √† \u0026#34;visit√©s\u0026#34; J\u0026#39;appelle \u0026#34;ami\u0026#34; Si \u0026#34;ami\u0026#34; r√©pond, alors : Je lui demande s‚Äôil conna√Æt Paul Si \u0026#34;ami\u0026#34; me donne le num√©ro de Paul : Je cr√©e une variable \u0026#34;Paul\u0026#34; J\u0026#39;appelle \u0026#34;Paul\u0026#34; Si \u0026#34;Paul\u0026#34; r√©pond, alors : Je l‚Äôinvite √† mon anniversaire Je termine la recherche Fin si Sinon : Je r√©cup√®re la liste des amis de \u0026#34;ami\u0026#34; Pour chaque \u0026#34;contact\u0026#34; dans cette liste : J‚Äôajoute \u0026#34;contact\u0026#34; √† la \u0026#34;file\u0026#34; Fin pour Fin si Fin si Fin si Fin tant que √Ä premi√®re vue, √ßa a l\u0026rsquo;air compliqu√©. Mais en fait si tu prends le temps de d√©cortiquer, de bien regarder, tu verras que ce sont juste les actions que tu as r√©alis√©s plus haut, mais dans un langage plus proche de ce que fait un ordinateur.\nLa seule chose qu\u0026rsquo;on a fait en plus des concepts de base, c\u0026rsquo;est qu\u0026rsquo;on a combin√© les structures de contr√¥le et les structures de donn√©es, et le tout nous donne notre algorithme de parcours de graphe !\nInstant Dev üí° On a parcouru le graphe en largeur, c\u0026rsquo;est-√†-dire qu\u0026rsquo;on a d\u0026rsquo;abord regard√© les noeuds voisins de notre point de d√©part.\nD\u0026rsquo;autres algorithmes connus et enseign√©s en informatique sont le parcours en profondeur, l\u0026rsquo;algorithme de Dijkstra, A* et Floyd-Warshall, tu peux regarder sur internet si √ßa t\u0026rsquo;int√©resse.\nConclusion Dans cet article on a appris ce que sont :\nLes structures de contr√¥le, Les boucles, Les conditions, Les variables, Les algorithmes. Il existe d\u0026rsquo;autres structures de contr√¥le, des types de variables, et des algorithmes qu\u0026rsquo;on peut r√©utiliser pour r√©pondre √† beaucoup de probl√®mes. Comme d\u0026rsquo;habitude, je te laisse chercher sur internet si tu veux aller plus loin.\nMais le plus important, c\u0026rsquo;est que tu commences √† r√©fl√©chir comme un d√©veloppeur, et √† comprendre le pseudo-code. Dans la vraie vie, si tu as un probl√®me complexe √† r√©soudre, tu peux essayer de l\u0026rsquo;√©crire comme on l\u0026rsquo;a fait pour le parcours de graphe. Prends ton temps et d√©compose le probl√®me.\nNous avons fini cette section \u0026ldquo;IMMV ‚Äî Section 1 ‚Äî Les Bases : structures et contr√¥le\u0026rdquo;, dans cette section, nous avons √©galement vu les structures de donn√©es.\nDans la prochaine section, IMMV ‚Äî Section 2 ‚Äî L\u0026rsquo;ex√©cution : comment faire des actions ?, nous verrons que l\u0026rsquo;ordinateur et l\u0026rsquo;humain font les actions de mani√®re tr√®s similaire.\n‚Üê Retour √† la section\n‚Üê Retour √† l‚Äôintroduction\n","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/les-bases/structures-de-controle/","summary":"\u003cp\u003eDans l\u0026rsquo;article pr√©c√©dent \u003ca href=\"../structures-de-donnees/\"\u003eIMVV ‚Äî Section 1 ‚Äî Chapitre 2 ‚Äî Autres structures de donn√©es, j\u0026rsquo;organise mon bordel\u003c/a\u003e, on s\u0026rsquo;√©tait arr√™t√© sur ta question :\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eEt c\u0026rsquo;est quoi le parcours de graphe?\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eDans cet article, on va parler des \u003cstrong\u003estructures de contr√¥le\u003c/strong\u003e (\u003cem\u003econtrol flow statements\u003c/em\u003e en anglais), qu\u0026rsquo;on utilise dans des \u003cstrong\u003ealgorithmes\u003c/strong\u003e (\u003cem\u003ealgorithms\u003c/em\u003e en anglais).\u003c/p\u003e\n\u003cp\u003eAvant d\u0026rsquo;expliquer l\u0026rsquo;algorithme que tu as fait, le \u003cstrong\u003eparcours de graphe\u003c/strong\u003e, on doit expliquer les structures de contr√¥le.\u003c/p\u003e","title":"IMVV ‚Äî Section 1 ‚Äî Chapitre 3 ‚Äî Structures de contr√¥le et algorithme, apprendre √† r√©fl√©chir"},{"content":"Pr√©c√©demment, on a vu qu\u0026rsquo;en rajoutant des serveurs, on pouvait servir plus de familles. Dans cette section on verra diff√©rents tips permettant d\u0026rsquo;optimiser un programme existant et la vie r√©elle.\nChapitres IMVV ‚Äî Section 3 ‚Äî Chapitre 1 ‚Äî La m√©moire, ou comment √©viter les p√©nuries dans un magasin IMVV ‚Äî Section 3 ‚Äî Chapitre 2 ‚Äî M√©mo√Øsation et Lazy loading, les techniques du fain√©ant ultime ","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/optimisation/optimisation/","summary":"\u003cp\u003ePr√©c√©demment, on a vu qu\u0026rsquo;en rajoutant des serveurs, on pouvait servir plus de familles. Dans cette section on verra diff√©rents tips permettant d\u0026rsquo;optimiser un programme existant et la vie r√©elle.\u003c/p\u003e\n\u003ch1 id=\"chapitres\"\u003eChapitres\u003c/h1\u003e\n\n\n\u003cul\u003e\n  \n\t\t\n\t\n\t\t\n    \t\n      \t\u003cli\u003e\u003ca href=\"/blog.dev/posts/miroir-informatique-vraie-vie/optimisation/memoire/\"\u003eIMVV ‚Äî Section 3 ‚Äî Chapitre 1 ‚Äî La m√©moire, ou comment √©viter les p√©nuries dans un magasin\u003c/a\u003e\u003c/li\u003e\n    \t\n  \t\n\t\n\t\t\n    \t\n      \t\u003cli\u003e\u003ca href=\"/blog.dev/posts/miroir-informatique-vraie-vie/optimisation/memoisation/\"\u003eIMVV ‚Äî Section 3 ‚Äî Chapitre 2 ‚Äî M√©mo√Øsation et Lazy loading, les techniques du fain√©ant ultime\u003c/a\u003e\u003c/li\u003e\n    \t\n  \t\n\t\n\u003c/ul\u003e","title":"IMMV ‚Äî Section 3 ‚Äî L'optimisation : comment se faire passer pour un coach de vie"},{"content":"Dans cette section, nous verrons comment les actions sont ex√©cut√©es, par les ordinateurs et par les personnes. Et on verra quelques pistes pour r√©pondre √† une accumulation de t√¢ches.\nChapitres IMMV ‚Äî Section 2 ‚Äî Chapitre 1 ‚Äî Synchrone et Asynchrone, ou comment r√©agir au changement IMMV ‚Äî Section 2 ‚Äî Chapitre 2 ‚Äî Monothread, Multithread, Parall√©lisme et Concurrence, je ne peux pas tout faire en m√™me temps ! ","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/l-execution/l-execution/","summary":"\u003cp\u003eDans cette section, nous verrons comment les actions sont ex√©cut√©es, par les ordinateurs et par les personnes. Et on verra quelques pistes pour r√©pondre √† une accumulation de t√¢ches.\u003c/p\u003e\n\u003ch1 id=\"chapitres\"\u003eChapitres\u003c/h1\u003e\n\n\n\u003cul\u003e\n  \n\t\t\n\t\n\t\t\n    \t\n      \t\u003cli\u003e\u003ca href=\"/blog.dev/posts/miroir-informatique-vraie-vie/l-execution/sync-async/\"\u003eIMMV ‚Äî Section 2 ‚Äî Chapitre 1 ‚Äî Synchrone et Asynchrone, ou comment r√©agir au changement\u003c/a\u003e\u003c/li\u003e\n    \t\n  \t\n\t\n\t\t\n    \t\n      \t\u003cli\u003e\u003ca href=\"/blog.dev/posts/miroir-informatique-vraie-vie/l-execution/threads/\"\u003eIMMV ‚Äî Section 2 ‚Äî Chapitre 2 ‚Äî Monothread, Multithread, Parall√©lisme et Concurrence, je ne peux pas tout faire en m√™me temps !\u003c/a\u003e\u003c/li\u003e\n    \t\n  \t\n\t\n\u003c/ul\u003e","title":"IMMV ‚Äî Section 2 ‚Äî L'ex√©cution : comment faire des actions ?"},{"content":"Dans cette section, nous verrons les bases permettant de stocker et manipuler des donn√©es.\nChapitres IMVV ‚Äî Section 1 ‚Äî Chapitre 1 ‚Äî File ou Pile ? L\u0026#39;art de passer avant les autres IMVV ‚Äî Section 1 ‚Äî Chapitre 2 ‚Äî Autres structures de donn√©es, j\u0026#39;organise mon bordel IMVV ‚Äî Section 1 ‚Äî Chapitre 3 ‚Äî Structures de contr√¥le et algorithme, apprendre √† r√©fl√©chir ","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/les-bases/les-bases/","summary":"\u003cp\u003eDans cette section, nous verrons les bases permettant de stocker et manipuler des donn√©es.\u003c/p\u003e\n\u003ch1 id=\"chapitres\"\u003eChapitres\u003c/h1\u003e\n\n\n\u003cul\u003e\n  \n\t\t\n\t\n\t\t\n    \t\n      \t\u003cli\u003e\u003ca href=\"/blog.dev/posts/miroir-informatique-vraie-vie/les-bases/file-et-pile/\"\u003eIMVV ‚Äî Section 1 ‚Äî Chapitre 1 ‚Äî File ou Pile ? L\u0026#39;art de passer avant les autres\u003c/a\u003e\u003c/li\u003e\n    \t\n  \t\n\t\n\t\t\n    \t\n      \t\u003cli\u003e\u003ca href=\"/blog.dev/posts/miroir-informatique-vraie-vie/les-bases/structures-de-donnees/\"\u003eIMVV ‚Äî Section 1 ‚Äî Chapitre 2 ‚Äî Autres structures de donn√©es, j\u0026#39;organise mon bordel\u003c/a\u003e\u003c/li\u003e\n    \t\n  \t\n\t\n\t\t\n    \t\n      \t\u003cli\u003e\u003ca href=\"/blog.dev/posts/miroir-informatique-vraie-vie/les-bases/structures-de-controle/\"\u003eIMVV ‚Äî Section 1 ‚Äî Chapitre 3 ‚Äî Structures de contr√¥le et algorithme, apprendre √† r√©fl√©chir\u003c/a\u003e\u003c/li\u003e\n    \t\n  \t\n\t\n\u003c/ul\u003e","title":"IMMV ‚Äî Section 1 ‚Äî Les bases : structures et contr√¥le"},{"content":"\u0026lsquo;Ia ora na,\nL\u0026rsquo;informatique semble souvent obscure pour beaucoup. Quand je dis que je suis ing√©nieur informatique, on me demande r√©guli√®rement : ¬´ Mais tu fais quoi exactement ? ¬ª.\nAvec le temps, j‚Äôai pris l‚Äôhabitude de vulgariser mon m√©tier. Et ce qui fonctionne le mieux, ce sont les exemples concrets tir√©s de la vie quotidienne.\nEn √©cole d\u0026rsquo;ing√©nieur, j\u0026rsquo;apprenais beaucoup plus facilement l\u0026rsquo;informatique en partant de situations r√©elles. √Ä travers cette s√©rie d‚Äôarticles, \u0026ldquo;L‚Äôinformatique, un miroir de la vraie vie\u0026rdquo; (abr√©g√© IMVV), je vais tenter d‚Äôexpliquer des concepts informatiques en m‚Äôappuyant sur des sc√®nes famili√®res du quotidien, sur un ton l√©ger. Parce que finalement, coder un programme ou g√©rer une file d‚Äôattente au magasin, ce n‚Äôest pas si diff√©rent.\nInformations de lecture Avant de lire les articles list√©s en bas de cette page, quelques informations pour vous faciliter la lecture :\nIl y a un mode sombre et un mode clair : En haut de chaque page se trouve une ic√¥ne pour interchanger entre les modes de lecture sombre et clair\nJ\u0026rsquo;utiliserai des apart√©s pour les d√©veloppeurs,\nInstant Dev Ceci est un apart√© pour les d√©veloppeurs, si tu es non d√©veloppeur tu peux lire, mais tu auras peut-√™tre mal √† la t√™te. J\u0026rsquo;utiliserai des interjections de lecteur, J\u0026rsquo;interviens comme si j\u0026rsquo;√©tais toi, lecteur, pour aider l\u0026rsquo;auteur de ce blog √† rendre ces articles dynamiques\nCette s√©rie d\u0026rsquo;articles n\u0026rsquo;est pas un cours d\u0026rsquo;informatique, vous n\u0026rsquo;apprendrez pas √† d√©velopper juste en suivant ces articles. Mot de fin Que tu sois curieux, d√©butant ou simplement en qu√™te de sens dans ce monde num√©rique, cette s√©rie pourrait bien t‚Äôapporter quelque chose.\nTu y trouveras peut-√™tre :\nune meilleure compr√©hension des bases de l‚Äôinformatique, des id√©es pour analyser ou optimiser les situations du quotidien, ou m√™me, qui sait, l‚Äôenvie de plonger plus loin dans ce domaine‚Ä¶ jusqu‚Äô√† en faire ton m√©tier. Bien s√ªr, cette s√©rie n‚Äôexplorera qu‚Äôune infime partie de ce vaste domaine qu‚Äôest l‚Äôinformatique. Apr√®s tout, peut-on vraiment expliquer enti√®rement l\u0026rsquo;informatique\u0026hellip; un domaine qui, justement, est le miroir de la vie* ?\n*: cette analogie est √† prendre avec recul : l‚Äôinformatique ne refl√®te pas toute la complexit√© de la vie.\nLes articles de la s√©rie (En cours de r√©daction) IMMV ‚Äî Section 1 ‚Äî Les bases : structures et contr√¥le IMMV ‚Äî Section 1 ‚Äî Les bases : structures et contr√¥le IMVV ‚Äî Section 1 ‚Äî Chapitre 1 ‚Äî File ou Pile ? L\u0026#39;art de passer avant les autres IMVV ‚Äî Section 1 ‚Äî Chapitre 2 ‚Äî Autres structures de donn√©es, j\u0026#39;organise mon bordel IMVV ‚Äî Section 1 ‚Äî Chapitre 3 ‚Äî Structures de contr√¥le et algorithme, apprendre √† r√©fl√©chir IMMV ‚Äî Section 2 ‚Äî L\u0026#39;ex√©cution : comment faire des actions ? IMMV ‚Äî Section 2 ‚Äî L\u0026#39;ex√©cution : comment faire des actions ? IMMV ‚Äî Section 2 ‚Äî Chapitre 1 ‚Äî Synchrone et Asynchrone, ou comment r√©agir au changement IMMV ‚Äî Section 2 ‚Äî Chapitre 2 ‚Äî Monothread, Multithread, Parall√©lisme et Concurrence, je ne peux pas tout faire en m√™me temps ! IMMV ‚Äî Section 3 ‚Äî L\u0026#39;optimisation : comment se faire passer pour un coach de vie IMMV ‚Äî Section 3 ‚Äî L\u0026#39;optimisation : comment se faire passer pour un coach de vie IMVV ‚Äî Section 3 ‚Äî Chapitre 1 ‚Äî La m√©moire, ou comment √©viter les p√©nuries dans un magasin IMVV ‚Äî Section 3 ‚Äî Chapitre 2 ‚Äî M√©mo√Øsation et Lazy loading, les techniques du fain√©ant ultime ","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/introduction/","summary":"\u003cp\u003e\u0026lsquo;Ia ora na,\u003c/p\u003e\n\u003cp\u003eL\u0026rsquo;informatique semble souvent obscure pour beaucoup. Quand je dis que je suis ing√©nieur informatique, on me demande r√©guli√®rement : ¬´ Mais tu fais quoi exactement ? ¬ª.\u003c/p\u003e\n\u003cp\u003eAvec le temps, j‚Äôai pris l‚Äôhabitude de vulgariser mon m√©tier. Et ce qui fonctionne le mieux, ce sont les exemples concrets tir√©s de la vie quotidienne.\u003c/p\u003e\n\u003cp\u003eEn √©cole d\u0026rsquo;ing√©nieur, j\u0026rsquo;apprenais beaucoup plus facilement l\u0026rsquo;informatique en partant de situations r√©elles.\n√Ä travers cette s√©rie d‚Äôarticles, \u003cstrong\u003e\u0026ldquo;L‚Äôinformatique, un miroir de la vraie vie\u0026rdquo;\u003c/strong\u003e (abr√©g√© \u003cem\u003eIMVV\u003c/em\u003e), je vais tenter d‚Äôexpliquer des concepts informatiques en m‚Äôappuyant sur des sc√®nes famili√®res du quotidien, sur un ton l√©ger.\nParce que finalement, coder un programme ou g√©rer une file d‚Äôattente au magasin, ce n‚Äôest pas si diff√©rent.\u003c/p\u003e","title":"IMMV - Introduction - L'informatique, un miroir de la vraie vie"},{"content":"Introduction Cet article est un aper√ßu tr√®s rapide des moyens de paiement en Polyn√©sie Fran√ßaise.\nUpdate (12/05/2022): suite √† quelques feedback, je me rend compte que cet article est √† destination des d√©veloppeurs de site de e-shopping, des commer√ßants, de mes confr√®res mon√©ticiens. Cet article sera complexe √† lire si vous n\u0026rsquo;avez jamais travaill√© avec un TPE, avec une plateforme de paiement, avec des cartes bancaires.\nDisclaimer: Au moment o√π j\u0026rsquo;√©cris cet article, je travaille √† l\u0026rsquo;Oc√©anienne des Services Bancaires (OSB), Ces articles ne sont pas sponsoris√©s par OSB, et j\u0026rsquo;encourage les gens √† faire des tutoriels pour les solutions des autres fournisseurs de solutions de paiement.\nLes diff√©rents types de carte En Polyn√©sie Fran√ßaise, il est possible de payer avec plusieurs types de cartes.\nCarte Bancaire (anciennement Carte Bleue, co-brand√©es ou non de Visa ou Mastercard), American Express (AMEX), Cartes privatives (Socredo Verte / Gold, Banque de Polyn√©sie Hoa, CCP de Fare Rata, Carte Tiare de la Banque de Tahiti), Union Pay International (UPI), Discover, Japan Credit Bureau (JCB) Les 3 derniers types de cartes sont surtout utilis√©s par les touristes.\nLes cartes privatives composent la majorit√© des cartes d√©tenues par les habitants de la Polyn√©sie Fran√ßaise.\nPourquoi autant de personnes ont une carte privative ? Les cartes privatives sont propos√©es par les diff√©rentes banques locales (√† l\u0026rsquo;exception d\u0026rsquo;OFINA qui √©met exclusivement les cartes AMEX). Il s\u0026rsquo;agit des banques Socredo, Banque de Tahiti, Banque de Polyn√©sie, et Fare Rata.\nLes cartes privatives sont soumises √† des r√©glementations et des frais moins co√ªteux que les cartes internationales.\nEn outre, elles sont uniquement r√©gul√©es par les banques locales contrairement aux cartes bancaires internationales, qui sont non seulement r√©gul√©es par les banques locales, mais aussi par les r√©seaux internationaux (CB, Visa, Mastercard, Union Pay, etc.).\nC\u0026rsquo;est en partie √† cause de ces r√©glementations et frais moins co√ªteux que les clients des banques doivent remplir moins de conditions pour avoir une carte privative. C\u0026rsquo;est pour cela que les cartes privatives sont plus r√©pandues sur le territoire.\nNotes:\nLes r√©seaux peuvent d√©cider d\u0026rsquo;appliquer des amendes voire de d√©sactiver le flux vers un acteur mon√©taire (banque, processeur de paiement, etc.) si celui-ci ne respecte pas la r√©glementation. Cette r√©glementation est mise √† jour r√©guli√®rement.\nPour les cartes privatives, ce sont les banques locales qui imposent leur r√©glementation, par abus de langage, on parle aussi de r√©seau privatif pour d√©signer l\u0026rsquo;ensemble de ces banques.\nCes r√©glementations sont suivies par les banques centrales des pays, par exemple l\u0026rsquo;IEOM en Polyn√©sie Fran√ßaise.\nJ\u0026rsquo;ai inclus la carte Tiare de la Banque de Tahiti dans les cartes privatives car elle a les m√™mes limitations g√©ographiques que celles-ci, et elle fonctionne aussi en m√©tropole, mais il s\u0026rsquo;agit bien d\u0026rsquo;une CB, donc elle est soumise aux r√©glementations CB.\nLes cartes Socredo privatives sont maintenant co-brand√©es UPI, mais il y a bien 2 applications dans la carte, sur le territoire, c\u0026rsquo;est l\u0026rsquo;application privative qui est utilis√©e, √† l\u0026rsquo;international, c\u0026rsquo;est l\u0026rsquo;application UPI qui est utilis√©e.\nFonctionnement des transactions Le sch√©ma √† 4 coins est l\u0026rsquo;un des sch√©mas de r√©f√©rence de la mon√©tique. Il explique les entit√©s qui entrent en jeu dans une transaction.\nLa banque √©mettrice √©met la carte et la fournit au porteur.\nLa banque acqu√©reuse fournit un contrat accepteur au commer√ßant, afin que celui-ci puisse encaisser les paiements avec les cartes, moyennant une commission, en plus des services annexes autour de l\u0026rsquo;encaissement (exemple: relev√© TPE). Les TPE et solutions de paiement en ligne sont des services d\u0026rsquo;encaissement.\nUn syst√®me d\u0026rsquo;acceptation est un logiciel ou un ensemble de logiciels, qui permet d\u0026rsquo;encaisser une carte bancaire, par exemple les TPE et les plateformes de paiement en ligne.\nIl existe 2 modes de fonctionnement pour le d√©roulement d\u0026rsquo;un paiement:\nle mode single message le mode dual message Lorsque vous payez avec votre carte, vous r√©alisez une transaction. Si toutes les r√®gles de gestion sont valid√©es, la transaction est autoris√©e.\nEn single message, la transaction autoris√©e est directement transform√©e en mouvement financier, i.e. un enregistrement est cr√©√© chez la banque acqu√©reuse qui dit \u0026ldquo;M. Client doit 1000 XPF √† M. Commer√ßant\u0026rdquo;.\nEn dual message, la transaction est enregistr√©e sur le TPE, ou sur la plateforme de paiement, puis, tous les jours √† une certaine heure, l\u0026rsquo;ensemble des transactions de la journ√©e sont envoy√©es √† la banque acqu√©reuse sous forme de mouvement financier.\nEn Polyn√©sie Fran√ßaise, le mode dual message est le plus r√©pandu, c\u0026rsquo;est d\u0026rsquo;ailleurs pour √ßa que l\u0026rsquo;on vous demande de ne pas d√©brancher votre TPE, votre internet, votre r√©seau √©lectrique.\nLes cartes et les syst√®mes d\u0026rsquo;acceptation Pour qu\u0026rsquo;un syst√®me d\u0026rsquo;acceptation puisse encaisser une carte, elle doit reconna√Ætre la carte.\nPour reconna√Ætre une carte, on utilise le BIN, qui sont les N premiers chiffres du num√©ro de la carte, N √©tant d√©fini par le r√©seau.\nDe plus, seule une application sp√©cifique √† ce r√©seau peut reconna√Ætre cette carte. Par exemple, pour une transaction avec une carte AMEX sur un TPE, c\u0026rsquo;est uniquement une application TPE AMEX qui pourra la reconna√Ætre, mais seulement si la carte fait partie d\u0026rsquo;une plage de BIN accept√©e par l\u0026rsquo;application.\nNote: Dans un TPE, il peut y avoir plusieurs applications, quand une carte est ins√©r√©e, le TPE demande √† chaque application \u0026ldquo;Peux-tu accepter cette carte?\u0026rdquo;.\nDe la m√™me mani√®re, pour une plateforme de paiement en ligne, celle-ci ne pourra accepter que des cartes qui font partie de ses plages de BIN d√©clar√©es.\nZoom sur le paiement en ligne en Polyn√©sie Fran√ßaise Comme √©nonc√© pr√©c√©demment, les cartes privatives sont majoritaires en Polyn√©sie Fran√ßaise, et elles ne sont pas reconnues √† l\u0026rsquo;√©tranger (sauf pour les cartes Socredo co-brand√©es UPI, comme cit√© pr√©c√©demment) car les BIN privatifs ne sont pas d√©clar√©s dans le monde.\nC\u0026rsquo;est pour cela qu\u0026rsquo;on ne peut pas payer avec une carte privative sur la plupart des plateformes de paiement en ligne (Paypal, Stripe, etc.), qui sont internationales.\nPour rem√©dier √† ce probl√®me, OSB propose Payzen, et la Banque de Tahiti propose SystemPay.\n√Ä mon avis, √† l\u0026rsquo;heure actuelle, c\u0026rsquo;est vers ces solutions que je conseille les commer√ßants d\u0026rsquo;aller, car il serait dommage de se priver des cartes privatives, alors qu\u0026rsquo;elles sont plus nombreuses.\nNotes:\nLes 2 solutions sont en r√©alit√© bas√©es sur les solutions Payzen et SystemPay de Lyra, soci√©t√© situ√©e en France. Certains d\u0026rsquo;entre vous ont d\u0026rsquo;ailleurs peut-√™tre d√©j√† √©t√© confus en recherchant de la documentation technique de ces solutions et se sont perdus entre:\nla documentation Payzen d\u0026rsquo;OSB, la documentation Payzen de Lyra, la documentation SystemPay de la Banque de Tahiti, la documentation SystemPay de Lyra. Je vous conseille de vous focaliser sur les documentations locales, et ensuite de compl√©ter avec les documentations de Lyra.\nConclusion Il existe plusieurs types de cartes.\nLes protocoles de paiement s\u0026rsquo;inscrivent dans un sch√©ma √† 4 coins, il y a plusieurs acteurs qui entrent en jeu.\nIl y a une r√©glementation g√©n√©rale qui englobe tous les types de cartes, et chaque type a √©galement sa r√©glementation sp√©cifique. Les banques sont soumises √† ces r√©glementations, l\u0026rsquo;IEOM et les r√©seaux (VISA, Mastercard, AMEX, etc.) veillent √† ce que les banques respectent ces r√©glementations.\nLa g√©ographie et les accords entre les acteurs sont importants pour comprendre les contraintes des syst√®mes de paiement locaux.\nEn Polyn√©sie Fran√ßaise, la majorit√© des cartes bancaires sont des cartes privatives, pour des raisons √©conomiques et r√©glementaires.\n","permalink":"http://localhost:1313/blog.dev/posts/intro-moyens-paiement/","summary":"\u003ch1 id=\"introduction\"\u003eIntroduction\u003c/h1\u003e\n\u003cp\u003eCet article est un aper√ßu tr√®s rapide des moyens de paiement en Polyn√©sie Fran√ßaise.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eUpdate (12/05/2022): suite √† quelques feedback, je me rend compte que cet article est √† destination des d√©veloppeurs de site de e-shopping, des commer√ßants, de mes confr√®res mon√©ticiens. Cet article sera complexe √† lire si vous n\u0026rsquo;avez jamais travaill√© avec un TPE, avec une plateforme de paiement, avec des cartes bancaires.\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e\u003cstrong\u003eDisclaimer\u003c/strong\u003e: Au moment o√π j\u0026rsquo;√©cris cet article, je travaille √† l\u0026rsquo;Oc√©anienne des Services Bancaires (OSB), Ces articles ne sont pas sponsoris√©s par OSB, et j\u0026rsquo;encourage les gens √† faire des tutoriels pour les solutions des autres fournisseurs de solutions de paiement.\u003c/p\u003e","title":"Introduction aux moyens de paiement en Polyn√©sie Fran√ßaise"},{"content":"Ia\u0026rsquo;orana, bonjour !\nCe post marque le d√©but du blog h√©berg√© sur Github.\nVous trouverez ici de temps en temps des articles de d√©veloppement et des POCs.\nBonne lecture !\n","permalink":"http://localhost:1313/blog.dev/posts/hello-world/","summary":"\u003cp\u003eIa\u0026rsquo;orana, bonjour !\u003c/p\u003e\n\u003cp\u003eCe post marque le d√©but du blog h√©berg√© sur Github.\u003c/p\u003e\n\u003cp\u003eVous trouverez ici de temps en temps des articles de d√©veloppement et des POCs.\u003c/p\u003e\n\u003cp\u003eBonne lecture !\u003c/p\u003e","title":"Hello World"},{"content":"La m√©moire est une ressource au m√™me titre que la fourchette dans le pr√©c√©dent article.\nDans un ordinateur, il existe plusieurs types de m√©moire que les programmes vont pouvoir utiliser en fonction de la mani√®re dont ils veulent traiter les donn√©es.\nIl faut voir la m√©moire comme un endroit o√π on entrepose des donn√©es.\nPour cet article on va parler d\u0026rsquo;un magasin, mais √ßa marche aussi avec un restaurant.\nLa m√©moire cache ‚Äî l\u0026rsquo;armoire r√©frig√©r√©e La m√©moire cache est le stockage le plus rapide qu\u0026rsquo;un programme peut utiliser. Pour un magasin, il s\u0026rsquo;agit des √©tag√®res et des armoires r√©frig√©r√©es qui forment les rayons.\nLes clients (les threads du programme) ont rapidement acc√®s aux viandes qui sont dans les armoires r√©frig√©r√©es, ils n\u0026rsquo;ont qu\u0026rsquo;√† tendre la main. Par contre, on ne peut pas stocker une grande quantit√© de viande dans ces armoires, pour l\u0026rsquo;exemple on va dire une dizaine au maximum.\nSur un ordinateur, cette m√©moire cache se trouve directement dans le processeur sous les noms cache L3, cache L2 et cache L1. On n\u0026rsquo;ira pas dans le d√©tail ici, mais sachez que plus le nombre est proche de 0, et plus le cache est rapide.\nJe prends l\u0026rsquo;exemple de l\u0026rsquo;armoire r√©frig√©r√©e car il y a un m√©canisme physique important dans un ordinateur: la m√©moire cache peut accueillir des donn√©es uniquement si elle est aliment√©e en √©lectricit√©, en cas de coupure de courant, on perd les donn√©es qui s\u0026rsquo;y trouvent.\nDe la m√™me mani√®re, dans un magasin, en cas de coupure de courant, il faut jeter toute la viande qui se trouve dans les armoires r√©frig√©r√©es*.\n*: Oui c\u0026rsquo;est pas tout √† fait le cas, mais en cas de coupure prolong√©e √ßa l\u0026rsquo;est.\nLa m√©moire vive ‚Äî l\u0026rsquo;arri√®re du magasin Au cours d\u0026rsquo;une journ√©e, le magasin souhaite vendre bien plus que dix viandes, c\u0026rsquo;est bien normal. Pour cela, √† l\u0026rsquo;arri√®re du magasin il y a un stock r√©frig√©r√© qui peut en contenir 1000. Un employ√© viendra remplir les rayons au cours de la journ√©e.\nCette action prend du temps, l\u0026rsquo;employ√© doit :\nAller dans le stock r√©frig√©r√© R√©cup√©rer des viandes Amener les viandes dans le rayon Mettre les viandes dans l\u0026#39;armoire r√©frig√©r√©e Pendant tout ce temps, le client ne peut prendre que les viandes qui sont encore dans l\u0026rsquo;armoire, il faut donc bien faire attention √† ce que l\u0026rsquo;employ√© recharge l\u0026rsquo;armoire quand il reste encore un peu de bo√Ætes.\nDans un ordinateur, la m√©moire vive (RAM en anglais pour Random Access Memory), joue le r√¥le du stock r√©frig√©r√© tr√®s rapide qu\u0026rsquo;un programme peut utiliser, mais beaucoup moins rapide que la m√©moire cache, environ 50x √† 100x moins rapide.\nEt tout comme la m√©moire cache, la RAM peut accueillir des donn√©es uniquement si elle est aliment√©e en √©lectricit√©.\nC\u0026rsquo;est pour √ßa qu\u0026rsquo;on appelle √ßa de la m√©moire vive, elle doit √™tre aliment√©e.\nAttends, mais tu dis que la RAM est tr√®s rapide, mais le processus pour recharger la m√©moire cache est lent ? On ne peut pas juste utiliser une grande quantit√© de m√©moire cache?\nLa m√©moire cache co√ªte tr√®s cher, beaucoup plus que la RAM. L\u0026rsquo;√©tat actuel est donc un compromis entre rapidit√© et co√ªt, un probl√®me typique en ing√©nierie.\nLe stockage ‚Äî la ferme en Nouvelle-Z√©lande Le stockage d\u0026rsquo;un ordinateur est compos√© des diff√©rents disques durs (HDD, SDD, etc.). Il s\u0026rsquo;agit d\u0026rsquo;une m√©moire persistante, c\u0026rsquo;est-√†-dire que m√™me en cas de coupure de courant, les donn√©es restent √©crites dans les disques.\nPour notre magasin, de la viande qui reste utilisable m√™me en cas de coupure\u0026hellip; Eh bien ce sont les boeufs vivants √† la ferme.\nTon analogie est d√©go√ªtante\nOui je sais, j\u0026rsquo;ai pas mieux, d√©sol√©. En m√™me temps, je ne peux pas vous dire que de la viande fra√Æche, qui reste longtemps √† l\u0026rsquo;air libre, est encore utilisable.\nEn plus, il y a plein d\u0026rsquo;√©tapes entre un boeuf vivant et un steak dans l\u0026rsquo;armoire !\nTout √† fait, mais c\u0026rsquo;est la meilleure analogie possible pour te faire comprendre pourquoi, en cas de coupure, si tu n\u0026rsquo;as pas sauvegard√© ton fichier Word depuis longtemps, tu perds tes donn√©es. Tant que tu n\u0026rsquo;as pas sauvegard√©, tes modifications restent dans le cache et la RAM.\nEt pourquoi en Nouvelle-Z√©lande ?\nOh, √ßa c\u0026rsquo;est parce qu\u0026rsquo;aller chercher une donn√©e dans un disque, c\u0026rsquo;est tr√®s lent compar√© √† aller la chercher dans la RAM. Si tu as un disque SSD c\u0026rsquo;est 10x plus lent, si tu as un disque HDD, c\u0026rsquo;est 100x plus lent.\nSi tu joues √† des jeux vid√©o un peu gourmands en ressources, tu as s√ªrement remarqu√© des √©crans de chargement plus ou moins longs. C\u0026rsquo;est surtout parce que le programme r√©cup√®re les donn√©es qui sont sur le disque.\nOptimiser la m√©moire ‚Äî pas besoin d\u0026rsquo;√™tre mentaliste Vous l\u0026rsquo;aurez donc compris, un magasin a diff√©rents types de m√©moire √† sa disposition. La mani√®re dont il orchestre les denr√©es √† travers ces diff√©rents composants lui permet d\u0026rsquo;anticiper les variations de stock, et limiter le risque de p√©nurie.\nLorsqu\u0026rsquo;un d√©veloppeur code un programme, il peut aussi anticiper l\u0026rsquo;utilisation des donn√©es et les charger avant d\u0026rsquo;en avoir besoin.\nDans l\u0026rsquo;exemple du jeu vid√©o, pourquoi est-ce que toutes les donn√©es ne sont pas charg√©es d√®s le d√©but? Moi j\u0026rsquo;en ai marre des √©crans de chargement.\nTout d\u0026rsquo;abord, ce chargement se fait du stockage vers la RAM (puis vers le cache), ensuite, si on chargeait toutes les donn√©es d\u0026rsquo;un coup, il y a de fortes chances pour que ta RAM soit satur√©e.\nA priori, le d√©veloppeur ne sait pas si tu as peu ou beaucoup de RAM disponible, et puis, maintenir deux versions du code, un qui charge toutes les donn√©es, et un qui charge via les √©crans de chargement, c\u0026rsquo;est du travail suppl√©mentaire qui n\u0026rsquo;apporte pas grand chose.\nLes √©crans de chargement sont un compromis : plut√¥t que de risquer de crasher ton ordinateur, le d√©veloppeur a cod√© le programme de sorte √† charger uniquement le contenu qui sera utilis√© dans le niveau, pour tous les niveaux.\nConclusion Dans cet article, on a vu les diff√©rentes m√©moires utilis√©es par les programmes. √Ä l\u0026rsquo;image d\u0026rsquo;un magasin qui √©vite les p√©nuries, un d√©veloppeur doit jongler avec ces m√©moires pour que son programme tourne correctement.\nDans le prochain article, IMVV ‚Äî Section 3 ‚Äî Chapitre 2 ‚Äî M√©mo√Øsation et Lazy loading, les technique du fain√©ant ultime, nous verrons des techniques qui feront de toi un bon fain√©ant.\n‚Üê Retour √† la section\n‚Üê Retour √† l‚Äôintroduction\n","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/optimisation/memoire/","summary":"\u003cp\u003eLa m√©moire est une \u003cstrong\u003eressource\u003c/strong\u003e au m√™me titre que la fourchette dans le \u003ca href=\"../../l-execution/threads/\"\u003epr√©c√©dent article\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eDans un ordinateur, il existe plusieurs types de m√©moire que les programmes vont pouvoir utiliser en fonction de la mani√®re dont ils veulent traiter les donn√©es.\u003c/p\u003e\n\u003cp\u003eIl faut voir la m√©moire comme un endroit o√π on entrepose des donn√©es.\u003c/p\u003e\n\u003cp\u003ePour cet article on va parler d\u0026rsquo;un magasin, mais √ßa marche aussi avec un restaurant.\u003c/p\u003e\n\u003ch2 id=\"la-m√©moire-cache--larmoire-r√©frig√©r√©e\"\u003eLa m√©moire cache ‚Äî l\u0026rsquo;armoire r√©frig√©r√©e\u003c/h2\u003e\n\u003cp\u003eLa \u003cstrong\u003em√©moire cache\u003c/strong\u003e est le stockage \u003cstrong\u003ele plus rapide\u003c/strong\u003e qu\u0026rsquo;un programme peut utiliser. Pour un magasin, il s\u0026rsquo;agit des √©tag√®res et des armoires r√©frig√©r√©es qui forment les rayons.\u003c/p\u003e","title":"IMVV ‚Äî Section 3 ‚Äî Chapitre 1 ‚Äî La m√©moire, ou comment √©viter les p√©nuries dans un magasin"},{"content":"Dans le pr√©c√©dent article, IMVV ‚Äî Section 1 ‚Äî Chapitre 3 ‚Äî Structures de contr√¥le et algorithme, apprendre √† r√©fl√©chir, on a vu les diff√©rentes structures de contr√¥le et les algorithmes.\nMaintenant on va parler de la mani√®re dont on r√©alise un ensemble de t√¢ches ‚Äî c‚Äôest ce qu‚Äôon appelle en informatique un mode d‚Äôex√©cution. C\u0026rsquo;est applicable aussi bien pour un humain que pour un ordinateur.\nN\u0026rsquo;oublie pas que les objectifs de ces articles sont :\nTe donner une meilleure compr√©hension des bases de l‚Äôinformatique, T\u0026rsquo;inspirer pour analyser ou optimiser les situations du quotidien, ou peut-√™tre, qui sait, te donner envie d\u0026rsquo;explorer encore plus loin\u0026hellip; jusqu‚Äô√† en faire ton m√©tier. Programme et application ‚Äî c\u0026rsquo;est quoi la diff√©rence ? Un programme informatique est un ensemble d\u0026rsquo;algorithmes. Le mot application veut dire la m√™me chose.\nC‚Äôest juste que application, √ßa sonne plus moderne, m√™me si ce mot existe depuis longtemps.\nMerci le marketing Apple et son App Store. üòÑ\nSynchrone ‚Äî Avoir un serveur d√©di√© √† sa table, quel luxe Prenons l\u0026rsquo;exemple d\u0026rsquo;un restaurant chic. Dans ce restaurant chic, il y a 2 tables. Chaque table a son serveur attitr√©, celui-ci r√©pond uniquement aux besoins de sa table.\nPour la suite de cet exercice de pens√©e, on va dire qu\u0026rsquo;il y a 2 familles (famille 1, famille 2), 2 tables (table 1, table 2), 1 serveur, 1 chef.\nLa s√©quence d\u0026rsquo;actions que le serveur doit faire, l\u0026rsquo;algorithme est :\nSi une famille arrive: Accueillir la famille Installer la famille sur une table libre Prendre la commande Donner la commande au chef R√©cup√©rer les plats Servir les plats √† la famille Faire payer la famille Fin si La famille 1 arrive au restaurant, le serveur les accueille et les installe √† la table 1. Il reste en attente de leur commande, √† proximit√©*.\nQuand la famille 1 est pr√™te, vu que le serveur est √† c√¥t√©, ils passent commande. Le serveur s\u0026rsquo;en va ensuite en cuisine pour donner la commande au chef. Le serveur attend les plats. Le chef pr√©pare les plats.\nUne fois que les plats sont pr√™ts, il les r√©cup√®re et les sert √† la famille 1. La famille 1 paie et s\u0026rsquo;en va, heureuse de l\u0026rsquo;attention port√©e.\n*: A ce moment, la famille 2 arrive au restaurant, ils ne sont pas accueillis, puisque le serveur est en attente de la commande de la famille 1. Alors la famille 2 repart, agac√©e, ils laisseront un mauvais avis sur internet.\nDans cette configuration, le serveur ex√©cute ses t√¢ches de mani√®re synchrone, cela veut dire qu\u0026rsquo;il ex√©cute l\u0026rsquo;algorithme √©tape par √©tape sans interruption. Si une √©tape n√©cessite d\u0026rsquo;attendre, par exemple quand il doit attendre que la famille choisisse sa commande, alors il attend, on dit que le mode synchrone est bloquant. Le serveur va au bout de son algorithme.\nMais c\u0026rsquo;est nul, il y a une famille qui n\u0026rsquo;a pas √©t√© servie\u0026hellip;\nSi on reste dans le mode d\u0026rsquo;ex√©cution synchrone, le probl√®me est qu\u0026rsquo;il n\u0026rsquo;y a pas assez de serveur. S\u0026rsquo;il y avait autant de serveurs de tables et de chefs, il n\u0026rsquo;y aurait aucun souci. Chaque famille aurait √©t√© ravie d\u0026rsquo;avoir un serveur et un chef d√©di√©. Mais on verrait plut√¥t cette disposition dans les restaurants luxueux, qui peuvent se permettre d\u0026rsquo;avoir 100 tables, 100 serveurs et 100 chefs.\nPar d√©faut, les applications sont synchrones, car √† part le probl√®me de ressources, c‚Äôest bien plus simple de faire une t√¢che apr√®s l‚Äôautre, cependant, de nos jours, de plus en plus de syst√®mes sont asynchrones (exemple: navigateurs, certains serveurs applicatifs √† la mode).\nüìå Exemples dans la vie r√©elle Une personne qui suit une proc√©dure critique Pr√©parer une salade üíª Exemples en informatique Un distributeur de billets Une imprimante partag√©e Asynchrone ‚Äî Un serveur pour les gouverner tous ‚Äî Oui c\u0026rsquo;est une r√©f√©rence au Seigneur des Anneaux üòÑ ‚Äî\nReprenons l\u0026rsquo;exemple du restaurant, toujours avec 2 familles (famille 1, famille 2), 2 tables (table 1, table 2), 1 serveur, 1 chef.\nMais cette fois, on change l\u0026rsquo;algorithme :\nQuand une famille arrive, alors : Le serveur les accueille Il les installe √† une table libre Il leur donne un menu Il passe √† autre chose Fin quand Quand une famille appelle le serveur pour commander, alors : Le serveur prend la commande Il la transmet au chef Il passe √† autre chose Fin quand Quand la sonnette en cuisine retentit (plats pr√™ts), alors : Le serveur r√©cup√®re les plats Le serveur sert les plats √† la bonne table Il passe √† autre chose Fin quand Quand une famille veut payer, alors : Le serveur encaisse Il lib√®re la table Il passe √† autre chose Fin quand Cet algorithme est diff√©rent de ceux qu\u0026rsquo;on a vus jusqu\u0026rsquo;√† pr√©sent.\n\u0026ldquo;Quand \u0026hellip;,\u0026rdquo; marque un √©v√©nement, \u0026ldquo;alors\u0026rdquo; introduit le bloc d\u0026rsquo;instructions √† ex√©cuter en r√©action, et \u0026ldquo;Fin quand\u0026rdquo; marque la fin de ce bloc.\nOn dit alors qu\u0026rsquo;on fait de la programmation √©v√©nementielle (ou programmation r√©active) et que l\u0026rsquo;algorithme est asynchrone : il fait de sorte √† r√©agir aux √©v√©nements ext√©rieurs.\nLorsqu‚Äôun √©v√©nement se produit, le serveur y r√©agit imm√©diatement : il ex√©cute les instructions associ√©es, puis passe √† l‚Äô√©v√©nement suivant s‚Äôil y en a un. Sinon, il attend. Ce mode d\u0026rsquo;ex√©cution est donc non bloquant.\nEt dans les faits, c\u0026rsquo;est ce que fait la plupart des personnes, serveurs ou non. Quand on fait une t√¢che, et qu\u0026rsquo;on est interrompu par un bug, un appel, un coll√®gue de travail qui pose une question, on est en r√©action.\nAvec cet algorithme, un serveur seul pourra tr√®s bien g√©rer 2 tables.\nüìå Exemples dans la vie r√©elle Les serveurs dans la plupart des restaurants Mon chien quand il entend les croquettes üíª Exemples en informatique Les notifications sur ton smartphone Un arrosage automatique avec capteur d\u0026#39;humidit√© Attention : comme en mode synchrone, s\u0026rsquo;il y a trop de table pour un seul serveur, plusieurs √©v√©nements risquent de s\u0026rsquo;accumuler en attente de traitement.\nMais du coup, comment on fait pour r√©soudre ce probl√®me ?\nOn verra √ßa dans le prochain article.\nConclusion Dans cet article, on a vu ce qu\u0026rsquo;√©taient les modes d\u0026rsquo;ex√©cution synchrone et asynchrone.\nSi tu souhaites continuer cette aventure, tu peux regarder la suite ici: IMMV ‚Äî Section 2 ‚Äî Chapitre 2 ‚Äî Monothread et Multithread, je ne peux pas tout faire en m√™me temps !\n‚Üê Retour √† la section\n‚Üê Retour √† l‚Äôintroduction\n","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/l-execution/sync-async/","summary":"\u003cp\u003eDans le pr√©c√©dent article, \u003ca href=\"../../les-bases/structures-de-controle/\"\u003eIMVV ‚Äî Section 1 ‚Äî Chapitre 3 ‚Äî Structures de contr√¥le et algorithme, apprendre √† r√©fl√©chir\u003c/a\u003e, on a vu les diff√©rentes structures de contr√¥le et les algorithmes.\u003c/p\u003e\n\u003cp\u003eMaintenant on va parler de la mani√®re dont on r√©alise un ensemble de t√¢ches ‚Äî c‚Äôest ce qu‚Äôon appelle en informatique un \u003cstrong\u003emode d‚Äôex√©cution\u003c/strong\u003e. C\u0026rsquo;est applicable aussi bien pour un humain que pour un ordinateur.\u003c/p\u003e\n\u003cp\u003eN\u0026rsquo;oublie pas que les objectifs de ces articles sont :\u003c/p\u003e","title":"IMMV ‚Äî Section 2 ‚Äî Chapitre 1 ‚Äî Synchrone et Asynchrone, ou comment r√©agir au changement"},{"content":"Quand tu prends un ticket pour attendre ton tour, que tu fais la queue √† la caisse, que tu prends l‚Äôassiette du haut de la pile pour mettre la table, ou que tu cliques sur le bouton \u0026lsquo;Retour\u0026rsquo; (‚Üê) du navigateur internet‚Ä¶ Tu manipules sans le savoir des concepts appell√©s en informatique des structures de donn√©es, et les algorithmes associ√©s qui les font vivre.\nDans cet article, on va mettre un peu de clart√© l√†-dedans : pas besoin de coder pour comprendre, on va illustrer tout √ßa avec des situations de la vie courante.\nD√©finitions Avant d‚Äôaller plus loin, quelques d√©finitions simples, histoire de parler le m√™me langage :\nDonn√©e : une donn√©e, c‚Äôest une information num√©rique. √áa peut √™tre un num√©ro de passeport, le nombre de dents d‚Äôune personne, la liste des t√¢ches que tu as encore repouss√©es √† demain, ou ton nombre d‚Äôamis sur Facebook. Structure de donn√©es : imagine une bo√Æte, une √©tag√®re ou un sac √† dos, dans lequel tu ranges tes informations d‚Äôune certaine mani√®re pour mieux les retrouver ou les traiter. C‚Äôest la fa√ßon dont on organise les donn√©es. Algorithme : un algorithme, c‚Äôest une suite d‚Äô√©tapes ou d‚Äôinstructions pour manipuler ces donn√©es. Comme une recette de cuisine, ou une proc√©dure √† suivre pour obtenir un r√©sultat. File et pile : deux mani√®res d‚Äôattendre‚Ä¶ ou de repousser Maintenant qu‚Äôon a les bases, voyons deux structures de donn√©es tr√®s simples mais tr√®s puissantes : la file et la pile. On les retrouve partout dans notre quotidien, souvent sans s‚Äôen rendre compte.\nLa file ‚Äî ou comment attendre son tour (FIFO) Imagine une file d‚Äôattente devant un guichet. Le premier arriv√© est le premier servi. C‚Äôest ce qu‚Äôon appelle en informatique une file (ou queue en anglais), avec une logique FIFO : First In, First Out (premier entr√©, premier sorti).\nD√®s que quelqu‚Äôun est servi, c‚Äôest le suivant dans la file qui avance.\nüéØ C‚Äôest une structure √©quitable : chacun attend selon son ordre d‚Äôarriv√©e.\nüìå Exemples dans la vie r√©elle Faire la queue √† la caisse du magasin La liste des courses (si on lit de haut en bas) üíª Exemples en informatique Les syst√®mes de ticket dans les accueils (le num√©ro est g√©n√©r√© par un programme, et les appels suivent cet ordre) Les commentaires sur une publication Facebook (affich√©s du plus ancien au plus r√©cent) La pile ‚Äî ou comment empiler les priorit√©s (LIFO) Maintenant, imagine une pile de livres que tu dois r√©viser pour un examen. Tu prends celui du haut, tu le lis, puis tu prends celui juste en dessous, et ainsi de suite. Tu lis dans l‚Äôordre inverse de celui dans lequel tu as empil√© les livres. Tu viens de d√©piler ta pile, toujours en commen√ßant par le haut.\nC‚Äôest exactement le principe de la pile (ou stack en anglais), qui suit la logique LIFO : Last In, First Out (dernier entr√©, premier sorti).\nTu vas peut-√™tre me dire :\nOui mais je peux aussi prendre le livre du bas, non‚ÄØ?\nC‚Äôest vrai. Alors prenons un autre exemple, un peu plus r√©aliste :\nImagine que tu tombes sur un article de journal qui parle des nodules polym√©talliques dans les fonds marins de la Polyn√©sie fran√ßaise. Tu n‚Äôy connais pas grand-chose, mais √ßa t‚Äôintrigue. Tu lis l‚Äôarticle, puis tu ouvres une page Wikip√©dia pour comprendre ce qu‚Äôest un nodule polym√©tallique. Sur cette page, tu vois un lien vers les m√©taux rares, puis vers la transition √©nerg√©tique, puis‚Ä¶ tu vois o√π je veux en venir.\nEn lisant ce premier article, tu ne soup√ßonnais pas toute la pile d‚Äôinformations que tu allais explorer. Et tu viens de d√©piler ce savoir, en commen√ßant par la derni√®re page ouverte.\nüéØ Ce n‚Äôest pas une structure √©quitable : ce qui arrive en dernier est trait√© en premier. Mais c‚Äôest tr√®s utile pour remonter dans le temps, ou revenir sur ses pas, exactement comme le bouton \u0026ldquo;retour\u0026rdquo; de ton navigateur.\nüìå Exemples dans la vie r√©elle Les cartons dans un coffre bien rempli Les diff√©rentes strates de terre quand tu creuses dans ton jardin (c\u0026#39;est de la terre empil√©e au cours du temps) üíª Exemples en informatique Le bouton \u0026#39;Retour\u0026#39; (‚Üê) de ton navigateur Les annulations successives (Undo, CTRL\u0026#43;Z) dans un √©diteur de texte Si tu veux conna√Ætre d\u0026rsquo;autres structures de donn√©es, tu peux regarder le prochain article : IMVV ‚Äî Section 1 ‚Äî Chapitre 2 ‚Äî Autres structures de donn√©es, j\u0026rsquo;organise mon bordel\n‚Üê Retour √† la section\n‚Üê Retour √† l‚Äôintroduction\n","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/les-bases/file-et-pile/","summary":"\u003cp\u003eQuand tu prends un ticket pour attendre ton tour, que tu fais la queue √† la caisse, que tu prends l‚Äôassiette du haut de la pile pour mettre la table, ou que tu cliques sur le bouton \u0026lsquo;Retour\u0026rsquo; (‚Üê) du navigateur internet‚Ä¶\nTu manipules sans le savoir des concepts appell√©s en informatique \u003cstrong\u003edes structures de donn√©es\u003c/strong\u003e, et \u003cstrong\u003eles algorithmes\u003c/strong\u003e associ√©s qui les font vivre.\u003c/p\u003e\n\u003cp\u003eDans cet article, on va mettre un peu de clart√© l√†-dedans : pas besoin de coder pour comprendre, on va illustrer tout √ßa avec des situations de la vie courante.\u003c/p\u003e","title":"IMVV ‚Äî Section 1 ‚Äî Chapitre 1 ‚Äî File ou Pile ? L'art de passer avant les autres"},{"content":"√ätre fiu est un art, une vertu. Non, ce n\u0026rsquo;est pas une blague. Tu ne me crois pas ?\n\u0026ldquo;We will encourage you to develop the three great virtues of a programmer: laziness, impatience, and hubris.\u0026rdquo; ‚Äî Larry Wall, Programming perl (1991).\n\u0026ldquo;I choose a lazy person to do a hard job. Because a lazy person will find an easy way to do it.\u0026rdquo; ‚Äî Bill Gates.\nProgrammer une machine pour qu\u0026rsquo;elle fasse le travail √† ta place, c\u0026rsquo;est de la fain√©antise.\nEt les d√©veloppeurs sont des personnes qui ont atteint l\u0026rsquo;apog√©e du fiu. Apr√®s tout, qui passe 2 heures √† automatiser une t√¢che qui prend 2 minutes par jour, √† part quelqu\u0026rsquo;un de vraiment fiu ?\nDans cet article, on verra deux techniques que les d√©veloppeurs utilisent, mais que toi aussi tu utilises sans le savoir.\nM√©mo√Øsation ‚Äî ou comment garder une information dans un coin de la t√™te Supposons que tu sois responsable de la paie dans une petite entreprise. Pour ce mois-ci, tu dois calculer les salaires √† verser √† 2 employ√©s.\nTu sais que tous les deux ont un salaire brut de 200 000 XPF. De plus, ils ont fait un excellent travail, ton patron t\u0026rsquo;a dit de leur rajouter une prime de 50% de leur salaire brut. Enfin, l\u0026rsquo;un d\u0026rsquo;eux a fait des heures suppl√©mentaires, il faut donc lui rajouter 20 000 XPF brut sur sa paie.\nPour le 1er salari√©, tu pars de 200 000, tu rajoutes 50%, soit 100 000, ce qui lui fera 300 000 XPF brut pour ce mois.\nPour le 2√®me salari√©, tu sais que le d√©but du calcul est le m√™me, alors tu r√©utilises le nombre 300 000, et tu rajoutes 20 000 d\u0026rsquo;heures suppl√©mentaires, donc 320 000 bruts.\nMais tu t‚Äôes souvenu que le calcul 200 000 + 50 % avait d√©j√† √©t√© fait, donc tu as directement repris le r√©sultat. Ce que tu viens de faire, c\u0026rsquo;est de la m√©mo√Øsation (memoization en anglais).\nC‚Äôest exactement ce que fait ton navigateur web quand il te propose un r√©sultat de recherche d√©j√† visit√©, ou qu‚Äôun site charge plus vite la 2·µâ fois.\nInstant Dev En informatique, on utilise un tableau ou un tableau associatif pour stocker les r√©sultats interm√©diares, ces structures sont stock√©es dans la RAM. De cette fa√ßon, on peut rapidement r√©cup√©rer le r√©sultat qui nous int√©resse. Attention : En informatique, comme dans la vraie vie, garder des informations de c√¥t√© peut conduire √† une saturation de la m√©moire. C\u0026rsquo;est un des facteurs de burn-out. M√©nagez votre cerveau, il n\u0026rsquo;y a pas de mal √† noter les choses, de plus, vous aurez moins de risque d\u0026rsquo;oublier des informations importantes.\nEager loading et Lazy loading ‚Äî l\u0026rsquo;art d\u0026rsquo;√™tre pr√©par√© √† toute √©ventualit√© Supposons que tu aies invit√© tes amis √† manger √† la maison ce soir. Tu as invit√© 10 personnes, mais tu sais que 5 vont vraiment venir, les autres t\u0026rsquo;ont dit \u0026ldquo;peut-√™tre\u0026rdquo;.\nPour √©viter d\u0026rsquo;√™tre √† court de nourriture, tu as pr√©par√© pour 10 personnes, au pire, ceux qui sont venus repartiront avec quelques plats, et tu termineras le reste durant la semaine.\nLes premiers invit√©s vont arriver, tu n\u0026rsquo;as pas encore pr√©par√© la table. Tu as 2 solutions :\nTout pr√©parer d\u0026rsquo;avance : sortir toutes les assiettes, les verres, les chaises, les couverts, etc. (solution eager loading : tu charges tout d√®s le d√©but).\nAttendre de voir qui arrive : d√®s qu‚Äôun invit√© entre, tu sors une assiette, un verre, une chaise, etc. (solution lazy loading : tu ne charges que ce qui est n√©cessaire, au moment o√π c‚Äôest n√©cessaire).\nMais tu peux aussi exiger des invit√©s qu\u0026rsquo;ils te disent, la veille au plus tard, si oui ou non ils viennent !\nOui, et que se passe-t-il si l\u0026rsquo;un d\u0026rsquo;eux a un emp√™chement ? En mettant tous les couverts, tu as d√©pens√© de l\u0026rsquo;√©nergie pour mettre son couvert, et tu en as re-d√©pens√© pour le ranger. Ce n\u0026rsquo;est pas tr√®s optimis√©.\nSi tous les invit√©s arrivent, tu auras fait plusieurs allers-retours pour mettre les couverts, ce n\u0026rsquo;est pas tr√®s optimis√© non plus\u0026hellip;\nAh, tu mets le doigt sur un point important : les techniques d\u0026rsquo;optimisation doivent √™tre utilis√©es uniquement si on est s√ªr de leur utilit√©.\n\u0026ldquo;Premature optimization is the root of all evil\u0026rdquo; ‚Äî Sir Tony Hoare et Donald Knuth.\nC\u0026rsquo;est un pi√®ge dans lequel tombent plusieurs d√©veloppeurs juniors. Les √©coles sup√©rieures enseignent diff√©rentes techniques d\u0026rsquo;optimisation, on est conditionn√©s √† d√©tecter un probl√®me et √† appliquer imm√©diatement une solution : c\u0026rsquo;est normal.\nAvec l\u0026rsquo;exp√©rience, on apprend qu\u0026rsquo;on a besoin d\u0026rsquo;optimiser uniquement quand une personne se plaint de lenteurs. Et dans ce cas, on cherche o√π se trouve la source du probl√®me, on mesure, puis on optimise.\nOk mais\u0026hellip; √ßa me fait bizarre de ne pas pr√©parer une belle table, c\u0026rsquo;est pas un bon accueil.\nDans ce cas, le eager loading a une vraie plus-value. Tu charges tout d\u0026rsquo;un coup pour l\u0026rsquo;effet waow, pour que les personnes se disent que chez toi, on est bien re√ßu. La principale fonctionnalit√© n\u0026rsquo;est pas d\u0026rsquo;optimiser le fait de mettre la table, mais d\u0026rsquo;impressionner tes convives.\nJe finis cette partie avec un exemple informatique : Facebook ne charge pas toutes les publications d√®s le d√©but, seulement une partie.\nQuand tu commences √† scroller, tu vois ces publications. Si tu te rapproches de la fin, Facebook charge les prochaines publications, on appelle √ßa infinite scroll.\nAinsi, Facebook ne prend pas trop de temps √† se charger au d√©but.\nAttends mais\u0026hellip; Dans l\u0026rsquo;article pr√©c√©dent, on parlait des √©crans de chargement des jeux vid√©os, √ßa y ressemble un peu, non ?\nExactement, les √©crans de chargement sont aussi du lazy loading, et pour rejoindre ce qu\u0026rsquo;on disait sur ces √©crans : le lazy loading √©conomise de la m√©moire.\nEnfin, √† ton avis, comment Facebook sait qu\u0026rsquo;il faut charger la suite des publications ?\nEh bien en fait, l\u0026rsquo;application est r√©active, on peut √©crire son algorithme de chargement comme ceci:\nQuand un certain seuil de scroll est atteint (par exemple, 90% du contenu affich√©), alors: Charge la suite du contenu Passe √† autre chose Fin quand Tu l\u0026rsquo;auras remarqu√©, c\u0026rsquo;est ce qu\u0026rsquo;on a vu dans l\u0026rsquo;article IMMV ‚Äî Section 2 ‚Äî Chapitre 1 ‚Äî Synchrone et Asynchrone, ou comment r√©agir au changement.\nConclusion Dans cet article, on a vu diff√©rents m√©canimes d\u0026rsquo;optimisation.\nPlus important encore, si on se rappelle des pr√©c√©dents articles, on a vu qu\u0026rsquo;en informatique, en plus de combiner les structures de donn√©es et les structures de contr√¥le, on pouvait combiner les concepts d\u0026rsquo;optimisation et de modes d\u0026rsquo;ex√©cution.\nLe prochaine article est en cours de r√©daction, on parlera de complexit√©.\n‚Üê Retour √† la section\n‚Üê Retour √† l‚Äôintroduction\n","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/optimisation/memoisation/","summary":"\u003cp\u003e√ätre \u003cem\u003efiu\u003c/em\u003e est un art, une vertu. \u003cstrong\u003eNon, ce n\u0026rsquo;est pas une blague\u003c/strong\u003e. Tu ne me crois pas ?\u003c/p\u003e\n\u003cp\u003e\u003cem\u003e\u0026ldquo;We will encourage you to develop the three great virtues of a programmer: laziness, impatience, and hubris.\u0026rdquo; ‚Äî Larry Wall, Programming perl (1991)\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003e\u0026ldquo;I choose a lazy person to do a hard job. Because a lazy person will find an easy way to do it.\u0026rdquo; ‚Äî Bill Gates\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eProgrammer une machine pour qu\u0026rsquo;elle fasse le travail √† ta place, c\u0026rsquo;est de la fain√©antise.\u003c/p\u003e","title":"IMVV ‚Äî Section 3 ‚Äî Chapitre 2 ‚Äî M√©mo√Øsation et Lazy loading, les techniques du fain√©ant ultime"},{"content":"Dans le pr√©c√©dent article, IMMV ‚Äî Section 2 ‚Äî Chapitre 1 ‚Äî Synchrone et Asynchrone, ou comment r√©agir au changement, on a vu les diff√©rents modes d\u0026rsquo;ex√©cution.\nOn s\u0026rsquo;√©tait arr√™t√© sur le probl√®me suivant : Comment faire pour r√©pondre √† la mont√©e en charge, √† l\u0026rsquo;accumulation de t√¢ches ?\nEh bien, dans cet article, on va voir comment on r√©sout ce probl√®me, en informatique comme dans la vraie vie : les m√©canismes sont souvent tr√®s proches.\nPour cela on va continuer avec notre exemple de restaurant. Et on va expliciter diff√©rents termes que j\u0026rsquo;avais regroup√©s en parlant d\u0026rsquo;algorithmes et de programmes.\nN\u0026rsquo;oublie pas que les objectifs de ces articles sont :\nTe donner une meilleure compr√©hension des bases de l‚Äôinformatique, T\u0026rsquo;inspirer pour analyser ou optimiser les situations du quotidien, ou peut-√™tre, qui sait, te donner envie d\u0026rsquo;explorer encore plus loin\u0026hellip; jusqu‚Äô√† en faire ton m√©tier. Le programme ‚Äî l\u0026rsquo;id√©e de restaurant En informatique, quand on parle de programme, on parle uniquement d\u0026rsquo;un ensemble d\u0026rsquo;algorithmes, des t√¢ches qui le composent. Il n\u0026rsquo;est pas encore en train d\u0026rsquo;√™tre ex√©cut√©. Par exemple, Facebook est un programme ‚Äî mais tant que tu ne l‚Äôouvres pas, il ne fait rien.\nEh bien, c\u0026rsquo;est pareil pour un restaurant dans la vie de tous les jours, quand je parle du restaurant √† un ami, je n\u0026rsquo;y suis pas physiquement. Je parle juste du concept de restaurant, de l\u0026rsquo;id√©e que je m\u0026rsquo;en fais.\nLe processus - le restaurant ouvert Si je veux parler du restaurant physiquement ouvert, avec les employ√©s qui s\u0026rsquo;activent, en informatique il faut plut√¥t utiliser le terme processus. C\u0026rsquo;est le programme en cours d\u0026rsquo;ex√©cution.\nUn processus poss√®de son propre contexte d\u0026rsquo;ex√©cution, c\u0026rsquo;est un gros mot pour dire qu\u0026rsquo;il a ses propres ressources, et que personne ne peut lui prendre ses ressources.\nEn effet, quand le restaurant est ouvert, les assiettes qu\u0026rsquo;il utilise sont ses propres assiettes, ses propres ressources. Il n\u0026rsquo;y a pas un autre restaurant qui lui prendrait ses assiettes pendant qu\u0026rsquo;il est ouvert, sinon il risque d\u0026rsquo;avoir des assiettes manquantes.\nPour ex√©cuter un algorithme, un processus est compos√© d\u0026rsquo;un thread principal, et il peut avoir d\u0026rsquo;autres thread.\nLe thread ‚Äî la proc√©dure en cours d\u0026rsquo;ex√©cution du serveur Le thread (fil d\u0026rsquo;ex√©cution en fran√ßais) est ce qu‚Äôon appelle la proc√©dure en train de s\u0026rsquo;ex√©cuter. C‚Äôest un peu comme un serveur qui suit activement une fiche d\u0026rsquo;instructions √† un instant donn√©. Attention, ce n\u0026rsquo;est pas le serveur.\nEn informatique, on dit que le thread est l‚Äôunit√© d‚Äôex√©cution, C‚Äôest la plus petite unit√© qu‚Äôun ordinateur puisse piloter pour ex√©cuter du code. il n‚Äôexiste pas d‚Äôunit√© plus petite qu‚Äôun thread pour ex√©cuter une t√¢che.\nMaintenant qu‚Äôon comprend ce qu‚Äôest un thread ‚Äî une proc√©dure en cours d\u0026rsquo;ex√©cution ‚Äî il faut se demander qui ex√©cute cette proc√©dure.\nLe coeur ‚Äî le serveur On y arrive enfin, dans un ordinateur, le composant physique qui ex√©cute un thread s\u0026rsquo;appelle un coeur (core en anglais). Pour notre restaurant, ce core est le serveur. C\u0026rsquo;est lui, physiquement, qui prend les commandes, sert les plats, etc.\nConcurrence, parall√©lisme, multithread et monothread ‚Äî ou comment servir 2 familles en m√™me temps Un serveur ne peut faire qu\u0026rsquo;une seule chose √† la fois, √† un instant donn√© : quand il prend une commande √† l\u0026rsquo;instant T, il ne peut pas, en m√™me temps, servir des plats.\nPar contre, il pourrait s\u0026rsquo;interrompre pendant les t√¢ches, par exemple, au lieu de prendre toutes les commandes de la famille, d\u0026rsquo;un coup, il peut :\nprendre la commande d\u0026rsquo;un 1er plat aller chercher un plat √† servir servir le plat prendre la commande d\u0026rsquo;un 2√®me plat aller chercher un autre plat √† servir servir le plat etc. Attention: ici nous n\u0026rsquo;avons pas d√©coup√© les actions. C\u0026rsquo;est juste que le serveur a jongl√© entre les 2 t√¢ches \u0026ldquo;prendre la commande\u0026rdquo; et \u0026ldquo;servir les plats\u0026rdquo;. On appelle ce comportement la concurrence, car les 2 t√¢ches sont en concurrence pour √™tre termin√©es.\nDans un ordinateur, les threads sont concurrents, et comme √©nonc√© plus haut, √©tant donn√© qu\u0026rsquo;un processus est compos√© d\u0026rsquo;un thread principal, on dit que les processus sont concurrents.\nDans la vraie vie il y a des situations o√π on ne jongle pas avec les t√¢ches, o√π il faut √™tre concentr√© sur une t√¢che\nTout √† fait, et dans ce cas, s\u0026rsquo;il y a trop de t√¢ches pour une seule personne, on fait intervenir une 2√®me personne, une 3√®me etc.\nDans notre restaurant, avec 2 serveurs, pendant que l\u0026rsquo;un prend les commandes de la famille 1, un autre peut servir les plats de la famille 2. On appelle √ßa le parall√©lisme, les proc√©dures/threads sont ex√©cut√©s en parall√®le.\nEnfin, dans un restaurant, si on ne peut avoir qu\u0026rsquo;un seul serveur qui suit activement une fiche d\u0026rsquo;instructions ‚Äî un seul thread ‚Äî, on dit que le restaurant/le programme est monothread. S\u0026rsquo;il y en a plusieurs, on dit que le restaurant/serveur est multithread.\nDu coup, la solution pour le restaurant est d\u0026rsquo;embaucher plus de serveurs ?\nC\u0026rsquo;est l\u0026rsquo;une des solutions, oui, mais ce n\u0026rsquo;est pas la seule. Il y a globalement 2 chemins pour r√©pondre √† une mont√©e en charge. On peut :\noptimiser les algorithmes pour les rendre plus performants et/ou changer le mode d\u0026rsquo;ex√©cution, ou alors on peut mettre plus de coeurs et faire du multithread. De la m√™me mani√®re, dans la vraie vie, on peut :\nmieux former le serveur et/ou optimiser les proc√©dures qu\u0026rsquo;il doit suivre et/ou le motiver pour qu\u0026rsquo;il travaille plus vite, embaucher plus de serveurs. Dans tous les cas, je ne m\u0026rsquo;avancerai pas pour apprendre √† un restaurateur son m√©tier.\nLe partage de ressources ‚Äî ou comment partager une fourchette Dans le restaurant, on va maintenant se mettre du point de vue d\u0026rsquo;un couple, venu manger en t√™te √† t√™te dans une ambiance cosy, tamis√©e, √† l\u0026rsquo;abri des regards.\nLe serveur leur annonce la mauvaise nouvelle: il y a assez de couverts pour 2, sauf pour la fourchette. S\u0026rsquo;ils souhaitent tout de m√™me manger ici, ils devront se partager la fourchette, et interdiction de manger avec les doigts.\nLe couple discute, et finalement ce n\u0026rsquo;est pas un probl√®me, ils sont l√† pour profiter de l\u0026rsquo;instant.\nUne fois la commande pass√©e et les plats servis, Le couple commence √† manger. Mais comment s‚Äôorganisent-ils ?\nBen ils mangent chacun leur tour, ou alors l\u0026rsquo;un mange d\u0026rsquo;abord, et l\u0026rsquo;autre ensuite ?\nBingo, que l\u0026rsquo;un mange d\u0026rsquo;abord, puis l\u0026rsquo;autre, ou qu\u0026rsquo;ils mangent √† tour de r√¥le, dans tous les cas, ils doivent se partager une ressource : la fourchette. Donc l\u0026rsquo;un prend le contr√¥le de la ressource/fourchette, fait des actions avec cette ressource, puis lib√®re la ressource. L\u0026rsquo;autre peut √† son tour prendre le contr√¥le de la ressource, etc.\nDans un ordinateur, c\u0026rsquo;est pareil, dans un processus, les threads doivent se partager les ressources. De m√™me, les processus doivent se partager les ressources.\nC\u0026rsquo;est pour √ßa que sur un ordinateur, quand tu ouvres un document Word partag√© avec tes coll√®gues, parfois tu as un message du genre \u0026ldquo;le fichier est d√©j√† ouvert par\u0026hellip;\u0026rdquo; car le document Word est une fourchette ressource partag√©e entre ton application Word, et celle de ton coll√®gue.\nElle est bizarre ton explication\u0026hellip;\nJe ne vois pas de quoi tu parles.\nQuoiqu\u0026rsquo;il en soit, tu comprends donc qu\u0026rsquo;en rajoutant plus de threads/cores/personnes, on ne va pas forc√©ment plus vite. Ils doivent se synchroniser pour partager les ressources et parfois attendre.\nInstant Dev En informatique, ce partage de ressource s‚Äôappelle une section critique. Pour √©viter que deux t√¢ches utilisent la ressource en m√™me temps, on utilise des verrous (locks). Conclusion Dans cet article, on a vu diff√©rents termes informatiques qui permettent de comprendre un peu plus comment fonctionne un ordinateur, comment on pouvait r√©pondre √† la mont√©e en charge de diff√©rentes mani√®res, et que finalement, c\u0026rsquo;est tr√®s proche de la vie r√©elle.\nNous avons fini cette section \u0026ldquo;IMMV ‚Äî Section 2 ‚Äî L\u0026rsquo;ex√©cution : comment faire des actions ?\u0026rdquo;.\nDans la prochaine section, IMMV ‚Äî Section 3 ‚Äî L\u0026rsquo;optimisation : comment se faire passer pour un coach de vie, on verra comment optimiser des applications et la vie r√©elle.\n‚Üê Retour √† la section\n‚Üê Retour √† l‚Äôintroduction\n","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/l-execution/threads/","summary":"\u003cp\u003eDans le pr√©c√©dent article, \u003ca href=\"../sync-async/\"\u003eIMMV ‚Äî Section 2 ‚Äî Chapitre 1 ‚Äî Synchrone et Asynchrone, ou comment r√©agir au changement\u003c/a\u003e, on a vu les diff√©rents modes d\u0026rsquo;ex√©cution.\u003c/p\u003e\n\u003cp\u003eOn s\u0026rsquo;√©tait arr√™t√© sur le probl√®me suivant : Comment faire pour r√©pondre √† la mont√©e en charge, √† l\u0026rsquo;accumulation de t√¢ches ?\u003c/p\u003e\n\u003cp\u003eEh bien, dans cet article, on va voir comment on r√©sout ce probl√®me, en informatique \u003cstrong\u003ecomme dans la vraie vie\u003c/strong\u003e : les m√©canismes sont souvent tr√®s proches.\u003c/p\u003e","title":"IMMV ‚Äî Section 2 ‚Äî Chapitre 2 ‚Äî Monothread, Multithread, Parall√©lisme et Concurrence, je ne peux pas tout faire en m√™me temps !"},{"content":"Dans le pr√©c√©dent article IMVV ‚Äî Section 1 ‚Äî Chapitre 1 ‚Äî File ou Pile ? L\u0026rsquo;art de passer avant les autres on a d√©couvert les files et les piles. Cette fois, on va survoler plusieurs autres structures de donn√©es (data structures en anglais) qu\u0026rsquo;on utilise tr√®s souvent en informatique\u0026hellip; et dans la vraie vie.\nN\u0026rsquo;oublie pas que les objectifs de ces articles sont :\nTe donner une meilleure compr√©hension des bases de l‚Äôinformatique, T\u0026rsquo;inspirer pour analyser ou optimiser les situations du quotidien, ou peut-√™tre, qui sait, te donner envie d\u0026rsquo;explorer encore plus loin\u0026hellip; jusqu‚Äô√† en faire ton m√©tier. Le tableau ‚Äî la base de presque tout Tu as peut-√™tre remarqu√© dans le pr√©c√©dent article que la file et la pile se ressemblent beaucoup. En r√©alit√©, on peut les repr√©senter toutes les deux avec la m√™me structure : un tableau.\nEn informatique, le tableau (ou array en anglais) est l‚Äôune des structures les plus simples : on range des √©l√©ments les uns √† la suite des autres, dans un espace de taille fixe, et chaque √©l√©ment est rep√©r√© par sa position (ou index).\nPrenons un exemple simple : un tableau d\u0026rsquo;amis √† inviter pour un anniversaire, mais dans mon carnet d\u0026rsquo;adresses je n\u0026rsquo;ai que 6 places.\nAmis Manutea Vai Purotu Heiarii Reva (vide) index 0 1 2 3 4 5 L‚Äôindex est simplement la position de la personne dans le tableau, ce n\u0026rsquo;est pas un ordre.\nDans la plupart des langages informatiques, l\u0026rsquo;index commence √† 0, et pas √† 1.\nCet index nous permet d\u0026rsquo;acc√©der directement √† Vai, l\u0026rsquo;amie √† l\u0026rsquo;index 2 (ou 3√®me √©l√©ment), pour voir son num√©ro de t√©l√©phone par exemple.\nEt ce tableau peut se comporter diff√©remment selon la mani√®re dont on ajoute et retire les √©l√©ments. Par exemple, on peut le faire fonctionner comme une file ou une pile, simplement en changeant les r√®gles du jeu.\nSi c\u0026rsquo;est une file : On ajoute les amis √† la fin, par exemple, Jean arrive apr√®s Reva : Amis Manutea Vai Purotu Heiarii Reva Jean index 0 1 2 3 4 5 Et on traite depuis le d√©but, on retire Manutea du tableau : Amis Vai Purotu Heiarii Reva Jean (vide) index 0 1 2 3 4 5 Pour une pile : On ajoute les amis au d√©but, Jean arrive avant Manutea : Amis Jean Manutea Vai Purotu Heiarii Reva index 0 1 2 3 4 5 Et on traite toujours depuis le d√©but, on retire Jean du tableau : Amis Manutea Vai Purotu Heiarii Reva (vide) index 0 1 2 3 4 5 Dans les deux cas, on utilise un tableau pour stocker les amis. C‚Äôest la logique d‚Äôajout et de retrait qui transforme ce tableau en pile ou en file.\nüéØ Et c‚Äôest exactement pour √ßa que, lorsqu‚Äôon traite des dossiers empil√©s, il vaut mieux commencer par ceux du bas. Sinon, on inverse l‚Äôordre d‚Äôarriv√©e‚Ä¶ et ce n‚Äôest plus une file d‚Äôattente, mais une injustice organis√©e.\nS\u0026rsquo;il n\u0026rsquo;y a que 6 places, que se passe-t-il si j\u0026rsquo;ai 7 amis ?\nD\u0026rsquo;abord, je te f√©licite d\u0026rsquo;avoir autant d\u0026rsquo;amis. Ensuite, on peut s\u0026rsquo;en sortir, en achetant un carnet d\u0026rsquo;adresse qui a plus de places, et on recopie nos amis dans ce nouveau carnet.\nC\u0026rsquo;est similaire en informatique, on fait un nouveau tableau, plus grand, et on recopie.\nHeureusement, en informatique on a invent√© une autre structure.\nLa liste ‚Äî comme le tableau, mais dynamique La liste (ou list en anglais), c‚Äôest comme un tableau, mais en mieux : la taille n‚Äôest pas fixe.\nTu peux ajouter ou supprimer des √©l√©ments √† tout moment, sans te soucier du nombre de places pr√©vues au d√©part. Et √† tout moment, tu peux demander : ‚ÄúCombien d‚Äô√©l√©ments j‚Äôai dans cette liste ?‚Äù ‚Äî et obtenir une r√©ponse fiable.\nC‚Äôest la version souple du tableau, celle qu‚Äôon trouve dans la majorit√© des langages de programmation modernes.\nRefaisons les exemples de pile et de file, mais cette fois-ci avec des listes.\nSi c\u0026rsquo;est une file : On ajoute les amis √† la fin, par exemple, Jean arrive apr√®s Reva : Amis Manutea Vai Purotu Heiarii Reva Jean index 0 1 2 3 4 5 Nombre d\u0026rsquo;√©l√©ments: 6\nEt on traite depuis le d√©but, on retire Manutea du tableau : Amis Vai Purotu Heiarii Reva Jean index 0 1 2 3 4 Nombre d\u0026rsquo;√©l√©ments: 5\nPour une pile : On ajoute les amis au d√©but, Jean arrive avant Manutea : Amis Jean Manutea Vai Purotu Heiarii Reva index 0 1 2 3 4 5 Nombre d\u0026rsquo;√©l√©ments: 6\nEt on traite toujours depuis le d√©but, on retire Jean du tableau : Amis Manutea Vai Purotu Heiarii Reva index 0 1 2 3 4 Nombre d\u0026rsquo;√©l√©ments: 5\nOn remarque qu\u0026rsquo;il n\u0026rsquo;y a plus la case (vide) et le nombre d\u0026rsquo;√©l√©ments change.\nInstant Dev Pour permettre cette souplesse, la liste est plus gourmande en calculs:\ncalcul √† la vol√©e du nombre d\u0026rsquo;√©l√©ments, r√©allocation de m√©moire. Mais en vrai, √† moins que tu ne codes un satellite, une carte embarqu√©e, ou une console des ann√©es 80, o√π chaque octet compte, il y a peu de raisons d‚Äôutiliser un tableau fixe. Une liste dynamique t\u0026rsquo;√©vitera bien des migraines.\nLe tableau et la liste sont des structures tr√®s basiques et tr√®s puissantes, elles sont les bases de beaucoup d\u0026rsquo;autres structures qu\u0026rsquo;on verra par la suite.\nLe tableau associatif ‚Äî ou comment indexer On avait pris l\u0026rsquo;exemple d\u0026rsquo;un carnet d\u0026rsquo;adresses qu\u0026rsquo;on avait mis dans un tableau ou dans une liste. C\u0026rsquo;est d√©j√† tr√®s bien de pouvoir stocker ta liste d\u0026rsquo;amis, mais si tu as des centaines d\u0026rsquo;amis et que tu veux appeler Vai pour aller √† la mer, tu vas gal√©rer pour chercher dans ce carnet d\u0026rsquo;adresse.\nEn effet, avec les 2 derni√®res structures, tu dois parcourir les √©l√©ments un par un, jusqu\u0026rsquo;√† tomber sur Vai. Tu vas perdre beaucoup de temps √† chercher son num√©ro, √ßa va t\u0026rsquo;√©nerver, tu vas l\u0026rsquo;appeler, lui dire \u0026ldquo;mais quelle id√©e d\u0026rsquo;avoir un pr√©nom qui commence par V!\u0026rdquo;, elle va s\u0026rsquo;√©nerver, vous ne serez plus amis, alors que tu voulais juste aller surfer.\nJe m\u0026rsquo;emporte un peu? Peut-√™tre.\nPour r√©soudre ce probl√®me, en informatique on a invent√© le tableau associatif (ou map en anglais). On utilise le tableau, et on va profiter de l\u0026rsquo;index pour justement indexer les √©l√©ments.\nPour cela, on a besoin de r√©fl√©chir un peu:\nOn sait que l\u0026rsquo;index est une position dans le tableau, donc un nombre On sait que les pr√©noms commencent par une lettre (oui, je suis s√©rieux), on va supposer que c\u0026rsquo;est une lettre de l\u0026rsquo;alphabet, et pas un caract√®re sp√©cial comme *$@ On sait qu\u0026rsquo;il y a 26 lettres dans l\u0026rsquo;alphabet =\u0026gt; Eur√™ka: On peut utiliser la 1√®re lettre du pr√©nom, la transformer en index en utilisant sa position dans l\u0026rsquo;alphabet, et associer le pr√©nom √† cet index. On dit que l\u0026rsquo;index est une cl√© et que le pr√©nom est une valeur par exemple:\nManutea =\u0026gt; M =\u0026gt; M est la 14√®me lettre de l\u0026rsquo;alphabet, donc Manutea sera le 14√®me √©l√©ment. Pour rappel, l\u0026rsquo;index commence √† 0, donc M = index 13. cl√©: 13 valeur: Manutea\nPour Heiarii on aura: cl√©: 7 valeur: Heiarii\nCe qui nous donne:\nAmis (vide) (vide) (vide) (vide) (vide) (vide) (vide) Heiarii (vide) (vide) (vide) (vide) (vide) Manutea (vide) Purotu (vide) Reva (vide) (vide) (vide) Vai (vide) (vide) (vide) (vide) index 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 Avec cette map, on pourra facilement acc√©der aux informations de Vai, puisqu\u0026rsquo;on pourra juste aller directement √† l\u0026rsquo;index 21.\nInstant Dev En vrai, pour calculer l\u0026rsquo;index, on utilise une fonction de hachage (hash en anglais) qui permet de transformer les cl√©s en index. C\u0026rsquo;est pour √ßa qu\u0026rsquo;on appelle √ßa un HashMap en Java. Oui mais moi je n\u0026rsquo;ai pas envie de m\u0026rsquo;emb√™ter √† compter sur mes doigts √† quelle position est la lettre V\u0026hellip;\nTu as raison, dans la vraie vie, dans ton carnet d\u0026rsquo;adresse pour chaque lettre tu as une encoche o√π la lettre y est marqu√©e, et tu notes les informations dans les pages qui correspondent √† cette lettre.\nCarnet d'adresses papier, en rouge les encoches ‚Äî source: Wikim√©dia En informatique c\u0026rsquo;est le m√™me principe, sauf qu\u0026rsquo;on ne peut pas utiliser de lettre comme index, alors on est oblig√© de trouver cette astuce.\nEt en plus, il est nul ton carnet d\u0026rsquo;adresse, comment je fais si j\u0026rsquo;ai 2 amis qui s\u0026rsquo;appellent Vai et Vahine? Je mets Vahine dans la case juste apr√®s? Et si j\u0026rsquo;ai des centaines d\u0026rsquo;amis comme tu le disais au d√©but, je fais comment pour les mettre dans les 26 cases ?\nOk, tranquille, pas de stress.\nEn informatique, on peut combiner les structures, plut√¥t que d\u0026rsquo;associer un pr√©nom √† une lettre, on va associer une liste de pr√©noms √† une lettre. Ci-dessous on r√©√©crit notre map et on ajoute Vahine :\nCl√©s 7 13 15 17 21 ‚Üì ‚Üì ‚Üì ‚Üì ‚Üì Heiarii Manutea Purotu Reva Vai Vahine Comme tu l\u0026rsquo;as remarqu√©, au lieu de mettre directement les pr√©noms dans les cases, il y a des fl√®ches qui pointent vers des listes. On appelle √ßa un pointeur (ou pointer en anglais). c‚Äôest un m√©canisme qui permet √† l‚Äôordinateur de dire \u0026ldquo;Va chercher les donn√©es ailleurs.\u0026rdquo; Plut√¥t que de stocker directement les valeurs, on stocke l‚Äôendroit o√π elles se trouvent.\nC\u0026rsquo;est la plus grande force de l\u0026rsquo;informatique, on peut combiner diff√©rents concepts abstraits pour r√©pondre √† notre besoin.\nL\u0026rsquo;ensemble ‚Äî une structure unique Si comme moi tu fais ta liste de courses durant la semaine en pr√©vision des grandes courses du dimanche, tu as peut-√™tre d√©j√† eu la liste qui ressemble √† :\nlait oeufs pops viande salade oeufs Tu remarques que les oeufs apparaissent 2 fois. On appelle √ßa un doublon.\n√áa peut arriver si lundi tu t\u0026rsquo;es fait une omelette avec les derniers oeufs, tu les as not√©s pour en racheter. Puis que vendredi, tu voulais faire un g√¢teau, mais tu t\u0026rsquo;es souvenu que tu n\u0026rsquo;avais plus d\u0026rsquo;oeufs\u0026hellip; et alors tu les as r√©√©crits.\nC\u0026rsquo;est tr√®s sp√©cifique comme explication\u0026hellip; C\u0026rsquo;est ce qui t\u0026rsquo;es arriv√©, pas vrai?\nTu n\u0026rsquo;as pas de preuve. Cette accusation est fausse.\nBref, la liste et le tableau n\u0026rsquo;ont aucun moyen d\u0026rsquo;emp√™cher la pr√©sence de doublons dans leurs √©l√©ments. C\u0026rsquo;est pour √ßa qu\u0026rsquo;en informatique on a invent√© l\u0026rsquo;ensemble (ou set en anglais), une structure o√π chaque √©l√©ment est unique.\nPar contre, le set n\u0026rsquo;est pas ordonn√© comme le tableau et la liste. Il n\u0026rsquo;y a pas d\u0026rsquo;index permettant d\u0026rsquo;acc√©der directement au 2√®me ou 6√®me √©l√©ment.\nInstant Dev En informatique, pour faire un set, on utilise en fait une map o√π la cl√© est l\u0026rsquo;√©l√©ment. Le calcul de hash nous garantit qu\u0026rsquo;il ne peut pas y avoir de doublon. Et on met une valeur arbitraire dans la valeur associ√©e, comme 1 ou PRESENT.\nSi on veut une structure ordonn√©e sans doublons, on peut :\ncoder une liste avec une fonction d\u0026rsquo;ajout qui rejette les doublons, transformer un set en liste, utiliser une structure sp√©cialis√©e, comme LinkedHashSet en Java üìå Exemples dans la vie r√©elle L\u0026#39;ensemble des ingr√©dients qu‚Äôil te reste dans le frigo L\u0026#39;ensemble des invit√©s √† ton anniversaire üíª Exemples en informatique L\u0026#39;ensemble des num√©ros de passeport en Polyn√©sie fran√ßaise L\u0026#39;ensemble de tes amis Facebook Le graphe ‚Äî ou comment appeler l\u0026rsquo;ami d\u0026rsquo;un ami d\u0026rsquo;un ami Tu pr√©pares ta liste d‚Äôinvit√©s pour ton anniversaire, tu comptes inviter tout ton carnet d\u0026rsquo;adresses.\nEt l√†, tu r√©alises que tu n‚Äôas pas le contact de Paul. Tu l\u0026rsquo;as crois√© en soir√©e et il √©tait cool, tu voudrais l\u0026rsquo;inviter\u0026hellip; mais tu as oubli√© de lui demander son num√©ro.\nHeureusement, tu sais que Purotu le conna√Æt.\nTu l\u0026rsquo;appelles\u0026hellip; zut, elle n\u0026rsquo;a pas son num√©ro. Mais elle te donne le num√©ro de Tiare, une autre amie de Paul. Tu appelles Tiare, tu te pr√©sentes, tu l\u0026rsquo;invite √©galement car tu n\u0026rsquo;es pas un sauvage. Et tu lui demandes le num√©ro de Paul.\nBingo, elle l\u0026rsquo;a, tu appelles Paul et il est chaud pour venir √† ton anniversaire.\nLes liens entre ces personnes peuvent √™tre repr√©sent√©s par un graphe (ou graph en anglais).\nEt ce que tu viens de faire, sans t\u0026rsquo;en rendre compte, c\u0026rsquo;est un parcours de graphe, un algorithme !\n%%{ init: { 'theme': 'base', 'themeVariables': { 'primaryColor': '#ddd', 'primaryTextColor': '#007acc', 'primaryBorderColor': '#007acc', 'lineColor': '#007acc' } } }%% graph TD A[Toi] --- B[Manutea] A --- C[Vai] A --- D[Purotu] A --- E[Heiarii] A --- F[Reva] A --- G[Jean] D --- H[Tiare] H --- I[Paul] Graphe de relation entre les personnes Ce graphe est non orient√©, c\u0026rsquo;est-√†-dire qu\u0026rsquo;il n\u0026rsquo;y a pas de sens entre les √©l√©ments. Chaque case est un noeud, et chaque trait est une ar√™te.\nEffectivement pour √©viter de f√¢cher les personnes, on ne va pas dire \u0026ldquo;Purotu est l\u0026rsquo;ami de Tiare, mais Tiare n\u0026rsquo;est pas l\u0026rsquo;ami de Purotu\u0026rdquo;.\nPar contre, on peut utiliser un graphe orient√© pour repr√©senter les appels que tu as pass√©s.\n%%{ init: { 'theme': 'base', 'themeVariables': { 'primaryColor': '#ddd', 'primaryTextColor': '#007acc', 'primaryBorderColor': '#007acc', 'lineColor': '#007acc' } } }%% graph TD A[Toi] --\u003e B[Manutea] A --\u003e C[Vai] A --\u003e D[Purotu] A --\u003e E[Heiarii] A --\u003e F[Reva] A --\u003e G[Jean] A --\u003e H[Tiare] A --\u003e I[Paul] Graphe des appels que tu as pass√© Ici, chaque case est un noeud, tout comme le graphe non orient√©, mais cette fois-ci, chaque fl√®che est une ar√™te, et donne le sens d\u0026rsquo;appel.\nOn a donc les m√™mes donn√©es, mais on utilise la structure adapt√©e √† ce qu\u0026rsquo;on veut repr√©senter.\nEt c\u0026rsquo;est quoi le parcours de graphe?\nJe suis heureux que tu poses cette question, mais ta question d√©passe le cadre de cet article.\nConclusion On a d√©j√† vu pas mal de choses, je te laisse relire, essayer de combiner les structures entre elles, te renseigner sur internet en cherchant \u0026ldquo;structures de donn√©es\u0026rdquo; ou \u0026ldquo;data structure\u0026rdquo;.\nIl existe beaucoup de structures de donn√©es, celles qui sont pr√©sent√©es dans cet article sont juste les plus basiques, celles qu\u0026rsquo;on apprend dans les premi√®res heures de cours de programmation.\nSi tu souhaites continuer cette aventure, tu peux regarder la suite ici: IMVV ‚Äî Section 1 ‚Äî Chapitre 3 ‚Äî Structures de contr√¥le et algorithme, apprendre √† r√©fl√©chir\n‚Üê Retour √† la section\n‚Üê Retour √† l‚Äôintroduction\n","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/les-bases/structures-de-donnees/","summary":"\u003cp\u003eDans le pr√©c√©dent article \u003ca href=\"../file-et-pile/\"\u003eIMVV ‚Äî Section 1 ‚Äî Chapitre 1 ‚Äî File ou Pile ? L\u0026rsquo;art de passer avant les autres\u003c/a\u003e on a d√©couvert les files et les piles. Cette fois, on va survoler plusieurs autres \u003cstrong\u003estructures de donn√©es\u003c/strong\u003e (\u003cem\u003edata structures\u003c/em\u003e en anglais) qu\u0026rsquo;on utilise tr√®s souvent en informatique\u0026hellip; et dans la vraie vie.\u003c/p\u003e\n\u003cp\u003eN\u0026rsquo;oublie pas que les objectifs de ces articles sont :\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eTe donner une meilleure compr√©hension des bases de l‚Äôinformatique,\u003c/li\u003e\n\u003cli\u003eT\u0026rsquo;inspirer pour analyser ou optimiser les situations du quotidien,\u003c/li\u003e\n\u003cli\u003eou peut-√™tre, qui sait, te donner envie d\u0026rsquo;explorer encore plus loin\u0026hellip; jusqu‚Äô√† en faire ton m√©tier.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"le-tableau--la-base-de-presque-tout\"\u003eLe tableau ‚Äî la base de presque tout\u003c/h2\u003e\n\u003cp\u003eTu as peut-√™tre remarqu√© dans le pr√©c√©dent article que la \u003cstrong\u003efile\u003c/strong\u003e et la \u003cstrong\u003epile\u003c/strong\u003e se ressemblent beaucoup. En r√©alit√©, on peut les repr√©senter toutes les deux avec la m√™me structure : un \u003cstrong\u003etableau\u003c/strong\u003e.\u003c/p\u003e","title":"IMVV ‚Äî Section 1 ‚Äî Chapitre 2 ‚Äî Autres structures de donn√©es, j'organise mon bordel"},{"content":"Dans l\u0026rsquo;article pr√©c√©dent IMVV ‚Äî Section 1 ‚Äî Chapitre 2 ‚Äî Autres structures de donn√©es, j\u0026rsquo;organise mon bordel, on s\u0026rsquo;√©tait arr√™t√© sur ta question :\nEt c\u0026rsquo;est quoi le parcours de graphe?\nDans cet article, on va parler des structures de contr√¥le (control flow statements en anglais), qu\u0026rsquo;on utilise dans des algorithmes (algorithms en anglais).\nAvant d\u0026rsquo;expliquer l\u0026rsquo;algorithme que tu as fait, le parcours de graphe, on doit expliquer les structures de contr√¥le.\nN\u0026rsquo;oublie pas que les objectifs de ces articles sont :\nTe donner une meilleure compr√©hension des bases de l‚Äôinformatique, T\u0026rsquo;inspirer pour analyser ou optimiser les situations du quotidien, ou peut-√™tre, qui sait, te donner envie d\u0026rsquo;explorer encore plus loin\u0026hellip; jusqu‚Äô√† en faire ton m√©tier. Pseudo-code ‚Äî l\u0026rsquo;art de la cuisine Quand tu fais un g√¢teau, tu r√©alises les actions suivantes:\nPr√©chauffer le four Verser la farine dans le saladier Casser les oeufs et mettre le contenu dans le saladier Verser le lait dans le saladier Remuer Verser la pr√©paration dans un moule Mettre le moule au four Attendre 20 minutes Eteindre le four Sortir le moule du four D√©mouler Toute cette suite d\u0026rsquo;√©tapes est ce qu\u0026rsquo;on appelle un algorithme, et la fa√ßon dont on l\u0026rsquo;a √©crit, √ßa s\u0026rsquo;appelle du pseudo-code, parce que √ßa ressemble √† un langage de programmation, mais ce n\u0026rsquo;en est pas un.\nMais pourquoi on appelle √ßa un algorithme? on peut pas juste dire une suite d\u0026rsquo;actions?\nJe te laisse chercher sur internet pourquoi on appelle √ßa un algorithme.\nLa boucle for ‚Äî ou comment √™tre fiu Ton meilleur ami Manutea te demande \u0026ldquo;Comment tu as fait pour inviter toutes ces personnes √† ton anniversaire ?\u0026rdquo;. Laquelle de ces 2 phrases dirais-tu :\nJ\u0026rsquo;ai appel√© Manutea, puis j\u0026rsquo;ai appel√© Vai, puis j\u0026rsquo;ai appel√© Purotu, puis j\u0026rsquo;ai appel√© Heiarii, puis j\u0026rsquo;ai appel√© Reva, puis j\u0026rsquo;ai appel√© Jean, puis j\u0026rsquo;ai appel√© Tiare, puis j\u0026rsquo;ai appel√© Paul J\u0026rsquo;ai pris mon carnet d\u0026rsquo;adresses, puis pour chaque contact, j\u0026rsquo;ai appel√© le num√©ro correspondant La 1√®re phrase est un algorithme sans boucle (loop en anglais) : chaque action est √©crite explicitement.\nLa 2√®me, elle, utilise une boucle ‚Äî tu r√©p√®tes la m√™me action pour chaque contact. Sans forc√©ment y penser, tu utilises aussi une variable : un espace dans ta t√™te pour m√©moriser un num√©ro, que tu remplaces √† chaque nouvel appel.\nCette mani√®re de r√©p√©ter une action avec une variable, c‚Äôest exactement ce qu‚Äôun ordinateur fait quand on lui demande de parcourir une liste.\nSi tu relis bien la 2√®me phrase, tu verras que pour chaque est en gras. En anglais, pour chaque se dit for each, c\u0026rsquo;est pour √ßa qu\u0026rsquo;on l\u0026rsquo;appelle la boucle for dans la plupart des langages.\nSi on essayait d\u0026rsquo;√©crire un algorithme, sous forme de pseudo-code simple pour d√©crire la 2√®me phrase, √ßa donnerait :\nDans mon carnet d\u0026#39;adresses, pour chaque contact: J\u0026#39;ai appel√© le num√©ro correspondant au contact J\u0026#39;ai invit√© l\u0026#39;ami Fin pour \u0026ldquo;Dans mon carnet d\u0026rsquo;adresses, pour chaque contact\u0026rdquo; marque le d√©but de la boucle, et \u0026ldquo;Fin pour\u0026rdquo; marque la fin de la boucle.\nEntre ces 2 lignes, les actions \u0026ldquo;J\u0026rsquo;ai appel√© le num√©ro correspondant au contact\u0026rdquo; et \u0026ldquo;J\u0026rsquo;ai invit√© l\u0026rsquo;ami\u0026rdquo; forment ce qu\u0026rsquo;on appelle un bloc d\u0026rsquo;instructions.\nPar convention, on indente ce bloc ‚Äî on le d√©cale vers la droite ‚Äî pour montrer visuellement qu\u0026rsquo;il est √† l\u0026rsquo;int√©rieur de la boucle.\nOk, et quel est le rapport entre la boucle for et fiu comme marqu√© dans le titre ?\nSi on devait √©crire l\u0026rsquo;algorithme de la 1√®re phrase, √ßa donnerait :\nJ\u0026#39;ai appel√© Manutea J\u0026#39;ai appel√© Vai J\u0026#39;ai appel√© Purotu J\u0026#39;ai appel√© Heiarii J\u0026#39;ai appel√© Reva J\u0026#39;ai appel√© Jean J\u0026#39;ai appel√© Tiare J\u0026#39;ai appel√© Paul Chaque ligne est une action, donc il faut √©crire autant de lignes qu\u0026rsquo;il y a de contacts dans ta liste de contacts. Maintenant, que se passerait-il si tu devais inviter 100 personnes? Tu serais fiu.\nAlors qu\u0026rsquo;avec la boucle, tu n\u0026rsquo;as pas besoin de changer ton algorithme, c\u0026rsquo;est le m√™me, que tu aies 6 contacts ou 100.\nOui mais dans la vraie vie je dois quand m√™me appeler les amis un par un\nCet exemple n‚Äôest pas l√† pour dire que tu vas programmer ton t√©l√©phone ‚Äî mais pour te faire sentir la puissance de la boucle : un seul bloc, quelle que soit la longueur de ta liste.\nDans la vraie vie, tu fais un groupe Facebook avec tous tes amis et tu postes des messages d\u0026rsquo;informations dans le groupe pour organiser, idem pour un groupe SMS. Si t\u0026rsquo;es old school, tu postes un message dans le journal local et viendra qui verra. D\u0026rsquo;ailleurs j\u0026rsquo;en parlerai dans de prochains articles.\nLa boucle while ‚Äî ou comment faire ses devoirs avant d\u0026rsquo;aller jouer Quand tu √©tais plus jeune, on t\u0026rsquo;a s√ªrement d√©j√† dit \u0026ldquo;Fais d\u0026rsquo;abord tes devoirs, ensuite tu peux aller jouer\u0026rdquo;, ou autrement dit \u0026quot;Tant que tu n\u0026rsquo;a pas fini tes devoirs, tu travailles, ensuite tu peux aller jouer\u0026quot;.\nSi on devait √©crire cet algorithme, √ßa donnerait:\nTant que je n\u0026#39;ai pas fini mes devoirs: Je fais mes devoirs Fin tant que Je vais jouer \u0026ldquo;Tant que je n\u0026rsquo;ai pas fini mes devoirs\u0026rdquo; marque le d√©but de la boucle, et \u0026ldquo;Fin tant que\u0026rdquo; marque la fin de la boucle.\nEntre ces 2 lignes, l\u0026rsquo;action \u0026ldquo;Je fais mes devoirs\u0026rdquo; forme le bloc d\u0026rsquo;instructions.\nTu l\u0026rsquo;auras remarqu√©, c\u0026rsquo;est tr√®s similaire √† la boucle for, sauf qu\u0026rsquo;au lieu de parcourir des √©l√©ments, on v√©rifie une condition, et on r√©p√®te la boucle si la condition n\u0026rsquo;est remplie.\nOn appelle √ßa une boucle while, car Tant que se dit while en anglais.\nEnsuite, une fois que les devoirs sont finis, on sort de la boucle, on fait la suite des instructions, donc \u0026ldquo;Je vais jouer\u0026rdquo;. On aurait aussi pu avoir d\u0026rsquo;autres instructions apr√®s la boucle for, c\u0026rsquo;est juste que l\u0026rsquo;exemple ne s\u0026rsquo;y pr√™tait pas.\nMais alors‚Ä¶ pourquoi deux types de boucles si elles font (presque) la m√™me chose ? Pourquoi une boucle for, et une boucle while ?\nEn fait, en fonction du probl√®me qu\u0026rsquo;on veut r√©soudre :\ndans certains cas on pourra compter, et dans ce cas on pr√©f√®rera utiliser une boucle for dans certains cas on ne pourra pas compter, et dans ce cas on pr√©f√®rera utiliser une boucle while Par exemple, pour un enfant qui joue dehors:\nTant qu\u0026#39;il fait beau: Je joue Fin tant que Ici, impossible de compter.\nMais tu commences peut-√™tre √† te rendre compte d\u0026rsquo;une supercherie.\nInstant Dev üí° En r√©alit√©, toutes les boucles for peuvent √™tre r√©√©crites en boucle while.\nLa boucle for n‚Äôest qu‚Äôune boucle while optimis√©e, √©crite pour √™tre plus simple √† lire‚Ä¶ quand on sait compter.\nLes 2 types de boucles sont des instructions d\u0026rsquo;it√©ration, √† la diff√©rence des instructions simples comme \u0026ldquo;Je joue\u0026rdquo;, les instructions d\u0026rsquo;it√©ration permettre d\u0026rsquo;ex√©cuter des blocs d\u0026rsquo;instructions de mani√®re r√©p√©t√©e.\nBravo, tu commences √† r√©fl√©chir comme un d√©veloppeur !\nExplications\nPour rappel:\ndans une liste, l\u0026rsquo;index commence √† 0, dans une liste, le dernier index est √©gal au nombre d\u0026rsquo;√©l√©ments de la liste moins 1 Amis Manutea Vai Purotu Heiarii Reva Jean Tiare Paul index 0 1 2 3 4 5 6 7 Nombre d\u0026rsquo;√©l√©ments: 8\nune variable c\u0026rsquo;est juste un espace m√©moire o√π on stocke une donn√©e (un tableau, une liste, un pr√©nom, un num√©ro de t√©l√©phone) Si on reprend l\u0026rsquo;exemple de la boucle for:\nDans mon carnet d\u0026#39;adresses, pour chaque contact: J\u0026#39;appelle le num√©ro correspondant au contact J\u0026#39;invite l\u0026#39;ami Fin pour Derri√®re, voici plut√¥t ce que fait un ordinateur (de mani√®re simplifi√©e) :\nJe cr√©e une variable \u0026#34;index\u0026#34;, qui vaut 0 Tant que \u0026#34;index\u0026#34; est inf√©rieur au nombre d\u0026#39;√©l√©ments (8) du carnet d\u0026#39;adresses: Je regarde le contact qui se trouve √† l\u0026#39;\u0026#34;index\u0026#34; dans le carnet d\u0026#39;adresses Je r√©cup√®re son num√©ro Je l\u0026#39;invite \u0026#34;index\u0026#34; prend la valeur \u0026#34;index\u0026#34; + 1 Fin tant que Comme tu le vois, c\u0026rsquo;est un peu plus compliqu√©, c\u0026rsquo;est pour √ßa qu\u0026rsquo;on pr√©f√®re utiliser une boucle for quand on peut compter.\nL\u0026rsquo;instruction conditionnelle ‚Äî ou pourquoi il faut respecter le code de la route Juste au-dessus, on parlait de condition dans la boucle while. Mais on n\u0026rsquo;a jamais expliqu√© ce que c\u0026rsquo;√©tait.\nUne condition est une question qu\u0026rsquo;on se pose, et la r√©ponse est soit ‚Äúoui‚Äù, soit ‚Äúnon‚Äù ‚Äî jamais les deux, jamais \u0026ldquo;un peu\u0026rdquo;.\nQuand on √©crit \u0026ldquo;Tant que je n\u0026rsquo;ai pas fini mes devoirs\u0026rdquo;, √† chaque r√©p√©tition on pose la question \u0026ldquo;Est-ce que j\u0026rsquo;ai fini mes devoirs?\u0026rdquo;.\nEn informatique, comme dans la vraie vie, une condition doit √™tre claire.\nOn peut utiliser ce concept pour faire des branchements dans notre code, dans une instruction conditionnelle (conditional statement en anglais).\nPrenons un exemple simple : tu es en voiture, tu approches un feu tricolore. Il est vert.\nQue fais-tu si le feu passe √† l‚Äôorange juste devant toi‚ÄØ?\nVoici un algorithme qui repr√©sente cette situation :\nSi le feu passe au orange, alors: Tu t\u0026#39;arr√™tes Sinon (c\u0026#39;est toujours vert): Tu continues et traverse l\u0026#39;intersection Fin si \u0026ldquo;Si le feu passe au orange,\u0026rdquo; marque le d√©but de l\u0026rsquo;instruction conditionnelle, \u0026ldquo;alors\u0026rdquo; marque la branche du si, \u0026ldquo;Sinon\u0026rdquo; marque la branche du sinon, et \u0026ldquo;Fin si\u0026rdquo; marque la fin de l\u0026rsquo;instruction conditionnelle.\nDe la m√™me mani√®re que pour les boucles, chaque branche est un bloc d\u0026rsquo;instructions. Comme pour les boucles, chaque branche forme un bloc d‚Äôinstructions, qu‚Äôon indente pour bien le rep√©rer.\nPour visualiser, imagine un arbre : chaque fois qu‚Äôune condition est test√©e, tu choisis une branche √† suivre. Le chemin d√©pend de tes r√©ponses.\nRevenons √† notre parcours de graphe Rappels Tu avais appel√© tes amis pour les inviter √† ton anniversaire, et tu avais √©t√© jusqu\u0026rsquo;au bout du monde, en sautant de relations en relations, pour inviter Paul. Tu avais fait ces actions :\nTu comptes inviter tout ton carnet d\u0026#39;adresses. Tu r√©alises que tu n‚Äôas pas le contact de Paul. Tu l\u0026#39;as crois√© en soir√©e et il √©tait cool, tu voudrais l\u0026#39;inviter... mais t\u0026#39;as oubli√© de lui demander son num√©ro. Heureusement, tu sais que Purotu le conna√Æt. Tu l\u0026#39;appelles... zut, elle n\u0026#39;a pas son num√©ro. Mais elle te donne le num√©ro de Tiare, une autre amie de Paul. Tu appelles Tiare, tu te pr√©sentes, tu l\u0026#39;invites √©galement car tu n\u0026#39;es pas un sauvage. Et tu lui demandes le num√©ro de Paul. Bingo, elle l\u0026#39;a, tu appelles Paul et il est chaud pour venir √† ton anniversaire. Ci-dessous se trouve le graphe de relation entre les personnes, un graphe non orient√©.\n%%{ init: { 'theme': 'base', 'themeVariables': { 'primaryColor': '#ddd', 'primaryTextColor': '#007acc', 'primaryBorderColor': '#007acc', 'lineColor': '#007acc' } } }%% graph TD A[Toi] --- B[Manutea] A --- C[Vai] A --- D[Purotu] A --- E[Heiarii] A --- F[Reva] A --- G[Jean] D --- H[Tiare] H --- I[Paul] Graphe de relation entre les personnes En se basant sur ce qu\u0026rsquo;on a appris dans cet article, on va √©crire un algorithme pour repr√©senter les actions que tu as r√©alis√©es pour inviter tes amis :\n# √âtape 1 : inviter tous mes amis directs (les noeuds les plus proches de \u0026#34;Toi\u0026#34; dans le graphe) Je cr√©e une variable \u0026#34;liste d\u0026#39;amis\u0026#34;, contenant tous mes amis directs Je cr√©e une variable \u0026#34;ami\u0026#34;, le contact courant Dans la \u0026#34;liste d\u0026#39;amis\u0026#34;, pour chaque \u0026#34;ami\u0026#34; : J\u0026#39;appelle \u0026#34;ami\u0026#34; Si \u0026#34;ami\u0026#34; r√©pond, alors : Je l\u0026#39;invite √† mon anniversaire Fin si Fin pour # √âtape 2 : retrouver Paul (en parcourant le graphe en largeur) Je cr√©e une variable \u0026#34;file\u0026#34;, initialis√©e avec la \u0026#34;liste d\u0026#39;amis\u0026#34; Je cr√©e une variable \u0026#34;visit√©s\u0026#34;, une liste vide Tant que la \u0026#34;file\u0026#34; n‚Äôest pas vide : Je prends le premier √©l√©ment de la \u0026#34;file\u0026#34;, je le stocke dans \u0026#34;ami\u0026#34; Si \u0026#34;ami\u0026#34; n‚Äôest pas dans \u0026#34;visit√©s\u0026#34;, alors : J‚Äôajoute \u0026#34;ami\u0026#34; √† \u0026#34;visit√©s\u0026#34; J\u0026#39;appelle \u0026#34;ami\u0026#34; Si \u0026#34;ami\u0026#34; r√©pond, alors : Je lui demande s‚Äôil conna√Æt Paul Si \u0026#34;ami\u0026#34; me donne le num√©ro de Paul : Je cr√©e une variable \u0026#34;Paul\u0026#34; J\u0026#39;appelle \u0026#34;Paul\u0026#34; Si \u0026#34;Paul\u0026#34; r√©pond, alors : Je l‚Äôinvite √† mon anniversaire Je termine la recherche Fin si Sinon : Je r√©cup√®re la liste des amis de \u0026#34;ami\u0026#34; Pour chaque \u0026#34;contact\u0026#34; dans cette liste : J‚Äôajoute \u0026#34;contact\u0026#34; √† la \u0026#34;file\u0026#34; Fin pour Fin si Fin si Fin si Fin tant que √Ä premi√®re vue, √ßa a l\u0026rsquo;air compliqu√©. Mais en fait si tu prends le temps de d√©cortiquer, de bien regarder, tu verras que ce sont juste les actions que tu as r√©alis√©s plus haut, mais dans un langage plus proche de ce que fait un ordinateur.\nLa seule chose qu\u0026rsquo;on a fait en plus des concepts de base, c\u0026rsquo;est qu\u0026rsquo;on a combin√© les structures de contr√¥le et les structures de donn√©es, et le tout nous donne notre algorithme de parcours de graphe !\nInstant Dev üí° On a parcouru le graphe en largeur, c\u0026rsquo;est-√†-dire qu\u0026rsquo;on a d\u0026rsquo;abord regard√© les noeuds voisins de notre point de d√©part.\nD\u0026rsquo;autres algorithmes connus et enseign√©s en informatique sont le parcours en profondeur, l\u0026rsquo;algorithme de Dijkstra, A* et Floyd-Warshall, tu peux regarder sur internet si √ßa t\u0026rsquo;int√©resse.\nConclusion Dans cet article on a appris ce que sont :\nLes structures de contr√¥le, Les boucles, Les conditions, Les variables, Les algorithmes. Il existe d\u0026rsquo;autres structures de contr√¥le, des types de variables, et des algorithmes qu\u0026rsquo;on peut r√©utiliser pour r√©pondre √† beaucoup de probl√®mes. Comme d\u0026rsquo;habitude, je te laisse chercher sur internet si tu veux aller plus loin.\nMais le plus important, c\u0026rsquo;est que tu commences √† r√©fl√©chir comme un d√©veloppeur, et √† comprendre le pseudo-code. Dans la vraie vie, si tu as un probl√®me complexe √† r√©soudre, tu peux essayer de l\u0026rsquo;√©crire comme on l\u0026rsquo;a fait pour le parcours de graphe. Prends ton temps et d√©compose le probl√®me.\nNous avons fini cette section \u0026ldquo;IMMV ‚Äî Section 1 ‚Äî Les Bases : structures et contr√¥le\u0026rdquo;, dans cette section, nous avons √©galement vu les structures de donn√©es.\nDans la prochaine section, IMMV ‚Äî Section 2 ‚Äî L\u0026rsquo;ex√©cution : comment faire des actions ?, nous verrons que l\u0026rsquo;ordinateur et l\u0026rsquo;humain font les actions de mani√®re tr√®s similaire.\n‚Üê Retour √† la section\n‚Üê Retour √† l‚Äôintroduction\n","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/les-bases/structures-de-controle/","summary":"\u003cp\u003eDans l\u0026rsquo;article pr√©c√©dent \u003ca href=\"../structures-de-donnees/\"\u003eIMVV ‚Äî Section 1 ‚Äî Chapitre 2 ‚Äî Autres structures de donn√©es, j\u0026rsquo;organise mon bordel\u003c/a\u003e, on s\u0026rsquo;√©tait arr√™t√© sur ta question :\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eEt c\u0026rsquo;est quoi le parcours de graphe?\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eDans cet article, on va parler des \u003cstrong\u003estructures de contr√¥le\u003c/strong\u003e (\u003cem\u003econtrol flow statements\u003c/em\u003e en anglais), qu\u0026rsquo;on utilise dans des \u003cstrong\u003ealgorithmes\u003c/strong\u003e (\u003cem\u003ealgorithms\u003c/em\u003e en anglais).\u003c/p\u003e\n\u003cp\u003eAvant d\u0026rsquo;expliquer l\u0026rsquo;algorithme que tu as fait, le \u003cstrong\u003eparcours de graphe\u003c/strong\u003e, on doit expliquer les structures de contr√¥le.\u003c/p\u003e","title":"IMVV ‚Äî Section 1 ‚Äî Chapitre 3 ‚Äî Structures de contr√¥le et algorithme, apprendre √† r√©fl√©chir"},{"content":"Pr√©c√©demment, on a vu qu\u0026rsquo;en rajoutant des serveurs, on pouvait servir plus de familles. Dans cette section on verra diff√©rents tips permettant d\u0026rsquo;optimiser un programme existant et la vie r√©elle.\nChapitres IMVV ‚Äî Section 3 ‚Äî Chapitre 1 ‚Äî La m√©moire, ou comment √©viter les p√©nuries dans un magasin IMVV ‚Äî Section 3 ‚Äî Chapitre 2 ‚Äî M√©mo√Øsation et Lazy loading, les techniques du fain√©ant ultime ","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/optimisation/optimisation/","summary":"\u003cp\u003ePr√©c√©demment, on a vu qu\u0026rsquo;en rajoutant des serveurs, on pouvait servir plus de familles. Dans cette section on verra diff√©rents tips permettant d\u0026rsquo;optimiser un programme existant et la vie r√©elle.\u003c/p\u003e\n\u003ch1 id=\"chapitres\"\u003eChapitres\u003c/h1\u003e\n\n\n\u003cul\u003e\n  \n\t\t\n\t\n\t\t\n    \t\n      \t\u003cli\u003e\u003ca href=\"/blog.dev/posts/miroir-informatique-vraie-vie/optimisation/memoire/\"\u003eIMVV ‚Äî Section 3 ‚Äî Chapitre 1 ‚Äî La m√©moire, ou comment √©viter les p√©nuries dans un magasin\u003c/a\u003e\u003c/li\u003e\n    \t\n  \t\n\t\n\t\t\n    \t\n      \t\u003cli\u003e\u003ca href=\"/blog.dev/posts/miroir-informatique-vraie-vie/optimisation/memoisation/\"\u003eIMVV ‚Äî Section 3 ‚Äî Chapitre 2 ‚Äî M√©mo√Øsation et Lazy loading, les techniques du fain√©ant ultime\u003c/a\u003e\u003c/li\u003e\n    \t\n  \t\n\t\n\u003c/ul\u003e","title":"IMMV ‚Äî Section 3 ‚Äî L'optimisation : comment se faire passer pour un coach de vie"},{"content":"Dans cette section, nous verrons comment les actions sont ex√©cut√©es, par les ordinateurs et par les personnes. Et on verra quelques pistes pour r√©pondre √† une accumulation de t√¢ches.\nChapitres IMMV ‚Äî Section 2 ‚Äî Chapitre 1 ‚Äî Synchrone et Asynchrone, ou comment r√©agir au changement IMMV ‚Äî Section 2 ‚Äî Chapitre 2 ‚Äî Monothread, Multithread, Parall√©lisme et Concurrence, je ne peux pas tout faire en m√™me temps ! ","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/l-execution/l-execution/","summary":"\u003cp\u003eDans cette section, nous verrons comment les actions sont ex√©cut√©es, par les ordinateurs et par les personnes. Et on verra quelques pistes pour r√©pondre √† une accumulation de t√¢ches.\u003c/p\u003e\n\u003ch1 id=\"chapitres\"\u003eChapitres\u003c/h1\u003e\n\n\n\u003cul\u003e\n  \n\t\t\n\t\n\t\t\n    \t\n      \t\u003cli\u003e\u003ca href=\"/blog.dev/posts/miroir-informatique-vraie-vie/l-execution/sync-async/\"\u003eIMMV ‚Äî Section 2 ‚Äî Chapitre 1 ‚Äî Synchrone et Asynchrone, ou comment r√©agir au changement\u003c/a\u003e\u003c/li\u003e\n    \t\n  \t\n\t\n\t\t\n    \t\n      \t\u003cli\u003e\u003ca href=\"/blog.dev/posts/miroir-informatique-vraie-vie/l-execution/threads/\"\u003eIMMV ‚Äî Section 2 ‚Äî Chapitre 2 ‚Äî Monothread, Multithread, Parall√©lisme et Concurrence, je ne peux pas tout faire en m√™me temps !\u003c/a\u003e\u003c/li\u003e\n    \t\n  \t\n\t\n\u003c/ul\u003e","title":"IMMV ‚Äî Section 2 ‚Äî L'ex√©cution : comment faire des actions ?"},{"content":"Dans cette section, nous verrons les bases permettant de stocker et manipuler des donn√©es.\nChapitres IMVV ‚Äî Section 1 ‚Äî Chapitre 1 ‚Äî File ou Pile ? L\u0026#39;art de passer avant les autres IMVV ‚Äî Section 1 ‚Äî Chapitre 2 ‚Äî Autres structures de donn√©es, j\u0026#39;organise mon bordel IMVV ‚Äî Section 1 ‚Äî Chapitre 3 ‚Äî Structures de contr√¥le et algorithme, apprendre √† r√©fl√©chir ","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/les-bases/les-bases/","summary":"\u003cp\u003eDans cette section, nous verrons les bases permettant de stocker et manipuler des donn√©es.\u003c/p\u003e\n\u003ch1 id=\"chapitres\"\u003eChapitres\u003c/h1\u003e\n\n\n\u003cul\u003e\n  \n\t\t\n\t\n\t\t\n    \t\n      \t\u003cli\u003e\u003ca href=\"/blog.dev/posts/miroir-informatique-vraie-vie/les-bases/file-et-pile/\"\u003eIMVV ‚Äî Section 1 ‚Äî Chapitre 1 ‚Äî File ou Pile ? L\u0026#39;art de passer avant les autres\u003c/a\u003e\u003c/li\u003e\n    \t\n  \t\n\t\n\t\t\n    \t\n      \t\u003cli\u003e\u003ca href=\"/blog.dev/posts/miroir-informatique-vraie-vie/les-bases/structures-de-donnees/\"\u003eIMVV ‚Äî Section 1 ‚Äî Chapitre 2 ‚Äî Autres structures de donn√©es, j\u0026#39;organise mon bordel\u003c/a\u003e\u003c/li\u003e\n    \t\n  \t\n\t\n\t\t\n    \t\n      \t\u003cli\u003e\u003ca href=\"/blog.dev/posts/miroir-informatique-vraie-vie/les-bases/structures-de-controle/\"\u003eIMVV ‚Äî Section 1 ‚Äî Chapitre 3 ‚Äî Structures de contr√¥le et algorithme, apprendre √† r√©fl√©chir\u003c/a\u003e\u003c/li\u003e\n    \t\n  \t\n\t\n\u003c/ul\u003e","title":"IMMV ‚Äî Section 1 ‚Äî Les bases : structures et contr√¥le"},{"content":"\u0026lsquo;Ia ora na,\nL\u0026rsquo;informatique semble souvent obscure pour beaucoup. Quand je dis que je suis ing√©nieur informatique, on me demande r√©guli√®rement : ¬´ Mais tu fais quoi exactement ? ¬ª.\nAvec le temps, j‚Äôai pris l‚Äôhabitude de vulgariser mon m√©tier. Et ce qui fonctionne le mieux, ce sont les exemples concrets tir√©s de la vie quotidienne.\nEn √©cole d\u0026rsquo;ing√©nieur, j\u0026rsquo;apprenais beaucoup plus facilement l\u0026rsquo;informatique en partant de situations r√©elles. √Ä travers cette s√©rie d‚Äôarticles, \u0026ldquo;L‚Äôinformatique, un miroir de la vraie vie\u0026rdquo; (abr√©g√© IMVV), je vais tenter d‚Äôexpliquer des concepts informatiques en m‚Äôappuyant sur des sc√®nes famili√®res du quotidien, sur un ton l√©ger. Parce que finalement, coder un programme ou g√©rer une file d‚Äôattente au magasin, ce n‚Äôest pas si diff√©rent.\nInformations de lecture Avant de lire les articles list√©s en bas de cette page, quelques informations pour vous faciliter la lecture :\nIl y a un mode sombre et un mode clair : En haut de chaque page se trouve une ic√¥ne pour interchanger entre les modes de lecture sombre et clair\nJ\u0026rsquo;utiliserai des apart√©s pour les d√©veloppeurs,\nInstant Dev Ceci est un apart√© pour les d√©veloppeurs, si tu es non d√©veloppeur tu peux lire, mais tu auras peut-√™tre mal √† la t√™te. J\u0026rsquo;utiliserai des interjections de lecteur, J\u0026rsquo;interviens comme si j\u0026rsquo;√©tais toi, lecteur, pour aider l\u0026rsquo;auteur de ce blog √† rendre ces articles dynamiques\nCette s√©rie d\u0026rsquo;articles n\u0026rsquo;est pas un cours d\u0026rsquo;informatique, vous n\u0026rsquo;apprendrez pas √† d√©velopper juste en suivant ces articles. Mot de fin Que tu sois curieux, d√©butant ou simplement en qu√™te de sens dans ce monde num√©rique, cette s√©rie pourrait bien t‚Äôapporter quelque chose.\nTu y trouveras peut-√™tre :\nune meilleure compr√©hension des bases de l‚Äôinformatique, des id√©es pour analyser ou optimiser les situations du quotidien, ou m√™me, qui sait, l‚Äôenvie de plonger plus loin dans ce domaine‚Ä¶ jusqu‚Äô√† en faire ton m√©tier. Bien s√ªr, cette s√©rie n‚Äôexplorera qu‚Äôune infime partie de ce vaste domaine qu‚Äôest l‚Äôinformatique. Apr√®s tout, peut-on vraiment expliquer enti√®rement l\u0026rsquo;informatique\u0026hellip; un domaine qui, justement, est le miroir de la vie* ?\n*: cette analogie est √† prendre avec recul : l‚Äôinformatique ne refl√®te pas toute la complexit√© de la vie.\nLes articles de la s√©rie (En cours de r√©daction) IMMV ‚Äî Section 1 ‚Äî Les bases : structures et contr√¥le IMMV ‚Äî Section 1 ‚Äî Les bases : structures et contr√¥le IMVV ‚Äî Section 1 ‚Äî Chapitre 1 ‚Äî File ou Pile ? L\u0026#39;art de passer avant les autres IMVV ‚Äî Section 1 ‚Äî Chapitre 2 ‚Äî Autres structures de donn√©es, j\u0026#39;organise mon bordel IMVV ‚Äî Section 1 ‚Äî Chapitre 3 ‚Äî Structures de contr√¥le et algorithme, apprendre √† r√©fl√©chir IMMV ‚Äî Section 2 ‚Äî L\u0026#39;ex√©cution : comment faire des actions ? IMMV ‚Äî Section 2 ‚Äî L\u0026#39;ex√©cution : comment faire des actions ? IMMV ‚Äî Section 2 ‚Äî Chapitre 1 ‚Äî Synchrone et Asynchrone, ou comment r√©agir au changement IMMV ‚Äî Section 2 ‚Äî Chapitre 2 ‚Äî Monothread, Multithread, Parall√©lisme et Concurrence, je ne peux pas tout faire en m√™me temps ! IMMV ‚Äî Section 3 ‚Äî L\u0026#39;optimisation : comment se faire passer pour un coach de vie IMMV ‚Äî Section 3 ‚Äî L\u0026#39;optimisation : comment se faire passer pour un coach de vie IMVV ‚Äî Section 3 ‚Äî Chapitre 1 ‚Äî La m√©moire, ou comment √©viter les p√©nuries dans un magasin IMVV ‚Äî Section 3 ‚Äî Chapitre 2 ‚Äî M√©mo√Øsation et Lazy loading, les techniques du fain√©ant ultime ","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/introduction/","summary":"\u003cp\u003e\u0026lsquo;Ia ora na,\u003c/p\u003e\n\u003cp\u003eL\u0026rsquo;informatique semble souvent obscure pour beaucoup. Quand je dis que je suis ing√©nieur informatique, on me demande r√©guli√®rement : ¬´ Mais tu fais quoi exactement ? ¬ª.\u003c/p\u003e\n\u003cp\u003eAvec le temps, j‚Äôai pris l‚Äôhabitude de vulgariser mon m√©tier. Et ce qui fonctionne le mieux, ce sont les exemples concrets tir√©s de la vie quotidienne.\u003c/p\u003e\n\u003cp\u003eEn √©cole d\u0026rsquo;ing√©nieur, j\u0026rsquo;apprenais beaucoup plus facilement l\u0026rsquo;informatique en partant de situations r√©elles.\n√Ä travers cette s√©rie d‚Äôarticles, \u003cstrong\u003e\u0026ldquo;L‚Äôinformatique, un miroir de la vraie vie\u0026rdquo;\u003c/strong\u003e (abr√©g√© \u003cem\u003eIMVV\u003c/em\u003e), je vais tenter d‚Äôexpliquer des concepts informatiques en m‚Äôappuyant sur des sc√®nes famili√®res du quotidien, sur un ton l√©ger.\nParce que finalement, coder un programme ou g√©rer une file d‚Äôattente au magasin, ce n‚Äôest pas si diff√©rent.\u003c/p\u003e","title":"IMMV - Introduction - L'informatique, un miroir de la vraie vie"},{"content":"Introduction Cet article est un aper√ßu tr√®s rapide des moyens de paiement en Polyn√©sie Fran√ßaise.\nUpdate (12/05/2022): suite √† quelques feedback, je me rend compte que cet article est √† destination des d√©veloppeurs de site de e-shopping, des commer√ßants, de mes confr√®res mon√©ticiens. Cet article sera complexe √† lire si vous n\u0026rsquo;avez jamais travaill√© avec un TPE, avec une plateforme de paiement, avec des cartes bancaires.\nDisclaimer: Au moment o√π j\u0026rsquo;√©cris cet article, je travaille √† l\u0026rsquo;Oc√©anienne des Services Bancaires (OSB), Ces articles ne sont pas sponsoris√©s par OSB, et j\u0026rsquo;encourage les gens √† faire des tutoriels pour les solutions des autres fournisseurs de solutions de paiement.\nLes diff√©rents types de carte En Polyn√©sie Fran√ßaise, il est possible de payer avec plusieurs types de cartes.\nCarte Bancaire (anciennement Carte Bleue, co-brand√©es ou non de Visa ou Mastercard), American Express (AMEX), Cartes privatives (Socredo Verte / Gold, Banque de Polyn√©sie Hoa, CCP de Fare Rata, Carte Tiare de la Banque de Tahiti), Union Pay International (UPI), Discover, Japan Credit Bureau (JCB) Les 3 derniers types de cartes sont surtout utilis√©s par les touristes.\nLes cartes privatives composent la majorit√© des cartes d√©tenues par les habitants de la Polyn√©sie Fran√ßaise.\nPourquoi autant de personnes ont une carte privative ? Les cartes privatives sont propos√©es par les diff√©rentes banques locales (√† l\u0026rsquo;exception d\u0026rsquo;OFINA qui √©met exclusivement les cartes AMEX). Il s\u0026rsquo;agit des banques Socredo, Banque de Tahiti, Banque de Polyn√©sie, et Fare Rata.\nLes cartes privatives sont soumises √† des r√©glementations et des frais moins co√ªteux que les cartes internationales.\nEn outre, elles sont uniquement r√©gul√©es par les banques locales contrairement aux cartes bancaires internationales, qui sont non seulement r√©gul√©es par les banques locales, mais aussi par les r√©seaux internationaux (CB, Visa, Mastercard, Union Pay, etc.).\nC\u0026rsquo;est en partie √† cause de ces r√©glementations et frais moins co√ªteux que les clients des banques doivent remplir moins de conditions pour avoir une carte privative. C\u0026rsquo;est pour cela que les cartes privatives sont plus r√©pandues sur le territoire.\nNotes:\nLes r√©seaux peuvent d√©cider d\u0026rsquo;appliquer des amendes voire de d√©sactiver le flux vers un acteur mon√©taire (banque, processeur de paiement, etc.) si celui-ci ne respecte pas la r√©glementation. Cette r√©glementation est mise √† jour r√©guli√®rement.\nPour les cartes privatives, ce sont les banques locales qui imposent leur r√©glementation, par abus de langage, on parle aussi de r√©seau privatif pour d√©signer l\u0026rsquo;ensemble de ces banques.\nCes r√©glementations sont suivies par les banques centrales des pays, par exemple l\u0026rsquo;IEOM en Polyn√©sie Fran√ßaise.\nJ\u0026rsquo;ai inclus la carte Tiare de la Banque de Tahiti dans les cartes privatives car elle a les m√™mes limitations g√©ographiques que celles-ci, et elle fonctionne aussi en m√©tropole, mais il s\u0026rsquo;agit bien d\u0026rsquo;une CB, donc elle est soumise aux r√©glementations CB.\nLes cartes Socredo privatives sont maintenant co-brand√©es UPI, mais il y a bien 2 applications dans la carte, sur le territoire, c\u0026rsquo;est l\u0026rsquo;application privative qui est utilis√©e, √† l\u0026rsquo;international, c\u0026rsquo;est l\u0026rsquo;application UPI qui est utilis√©e.\nFonctionnement des transactions Le sch√©ma √† 4 coins est l\u0026rsquo;un des sch√©mas de r√©f√©rence de la mon√©tique. Il explique les entit√©s qui entrent en jeu dans une transaction.\nLa banque √©mettrice √©met la carte et la fournit au porteur.\nLa banque acqu√©reuse fournit un contrat accepteur au commer√ßant, afin que celui-ci puisse encaisser les paiements avec les cartes, moyennant une commission, en plus des services annexes autour de l\u0026rsquo;encaissement (exemple: relev√© TPE). Les TPE et solutions de paiement en ligne sont des services d\u0026rsquo;encaissement.\nUn syst√®me d\u0026rsquo;acceptation est un logiciel ou un ensemble de logiciels, qui permet d\u0026rsquo;encaisser une carte bancaire, par exemple les TPE et les plateformes de paiement en ligne.\nIl existe 2 modes de fonctionnement pour le d√©roulement d\u0026rsquo;un paiement:\nle mode single message le mode dual message Lorsque vous payez avec votre carte, vous r√©alisez une transaction. Si toutes les r√®gles de gestion sont valid√©es, la transaction est autoris√©e.\nEn single message, la transaction autoris√©e est directement transform√©e en mouvement financier, i.e. un enregistrement est cr√©√© chez la banque acqu√©reuse qui dit \u0026ldquo;M. Client doit 1000 XPF √† M. Commer√ßant\u0026rdquo;.\nEn dual message, la transaction est enregistr√©e sur le TPE, ou sur la plateforme de paiement, puis, tous les jours √† une certaine heure, l\u0026rsquo;ensemble des transactions de la journ√©e sont envoy√©es √† la banque acqu√©reuse sous forme de mouvement financier.\nEn Polyn√©sie Fran√ßaise, le mode dual message est le plus r√©pandu, c\u0026rsquo;est d\u0026rsquo;ailleurs pour √ßa que l\u0026rsquo;on vous demande de ne pas d√©brancher votre TPE, votre internet, votre r√©seau √©lectrique.\nLes cartes et les syst√®mes d\u0026rsquo;acceptation Pour qu\u0026rsquo;un syst√®me d\u0026rsquo;acceptation puisse encaisser une carte, elle doit reconna√Ætre la carte.\nPour reconna√Ætre une carte, on utilise le BIN, qui sont les N premiers chiffres du num√©ro de la carte, N √©tant d√©fini par le r√©seau.\nDe plus, seule une application sp√©cifique √† ce r√©seau peut reconna√Ætre cette carte. Par exemple, pour une transaction avec une carte AMEX sur un TPE, c\u0026rsquo;est uniquement une application TPE AMEX qui pourra la reconna√Ætre, mais seulement si la carte fait partie d\u0026rsquo;une plage de BIN accept√©e par l\u0026rsquo;application.\nNote: Dans un TPE, il peut y avoir plusieurs applications, quand une carte est ins√©r√©e, le TPE demande √† chaque application \u0026ldquo;Peux-tu accepter cette carte?\u0026rdquo;.\nDe la m√™me mani√®re, pour une plateforme de paiement en ligne, celle-ci ne pourra accepter que des cartes qui font partie de ses plages de BIN d√©clar√©es.\nZoom sur le paiement en ligne en Polyn√©sie Fran√ßaise Comme √©nonc√© pr√©c√©demment, les cartes privatives sont majoritaires en Polyn√©sie Fran√ßaise, et elles ne sont pas reconnues √† l\u0026rsquo;√©tranger (sauf pour les cartes Socredo co-brand√©es UPI, comme cit√© pr√©c√©demment) car les BIN privatifs ne sont pas d√©clar√©s dans le monde.\nC\u0026rsquo;est pour cela qu\u0026rsquo;on ne peut pas payer avec une carte privative sur la plupart des plateformes de paiement en ligne (Paypal, Stripe, etc.), qui sont internationales.\nPour rem√©dier √† ce probl√®me, OSB propose Payzen, et la Banque de Tahiti propose SystemPay.\n√Ä mon avis, √† l\u0026rsquo;heure actuelle, c\u0026rsquo;est vers ces solutions que je conseille les commer√ßants d\u0026rsquo;aller, car il serait dommage de se priver des cartes privatives, alors qu\u0026rsquo;elles sont plus nombreuses.\nNotes:\nLes 2 solutions sont en r√©alit√© bas√©es sur les solutions Payzen et SystemPay de Lyra, soci√©t√© situ√©e en France. Certains d\u0026rsquo;entre vous ont d\u0026rsquo;ailleurs peut-√™tre d√©j√† √©t√© confus en recherchant de la documentation technique de ces solutions et se sont perdus entre:\nla documentation Payzen d\u0026rsquo;OSB, la documentation Payzen de Lyra, la documentation SystemPay de la Banque de Tahiti, la documentation SystemPay de Lyra. Je vous conseille de vous focaliser sur les documentations locales, et ensuite de compl√©ter avec les documentations de Lyra.\nConclusion Il existe plusieurs types de cartes.\nLes protocoles de paiement s\u0026rsquo;inscrivent dans un sch√©ma √† 4 coins, il y a plusieurs acteurs qui entrent en jeu.\nIl y a une r√©glementation g√©n√©rale qui englobe tous les types de cartes, et chaque type a √©galement sa r√©glementation sp√©cifique. Les banques sont soumises √† ces r√©glementations, l\u0026rsquo;IEOM et les r√©seaux (VISA, Mastercard, AMEX, etc.) veillent √† ce que les banques respectent ces r√©glementations.\nLa g√©ographie et les accords entre les acteurs sont importants pour comprendre les contraintes des syst√®mes de paiement locaux.\nEn Polyn√©sie Fran√ßaise, la majorit√© des cartes bancaires sont des cartes privatives, pour des raisons √©conomiques et r√©glementaires.\n","permalink":"http://localhost:1313/blog.dev/posts/intro-moyens-paiement/","summary":"\u003ch1 id=\"introduction\"\u003eIntroduction\u003c/h1\u003e\n\u003cp\u003eCet article est un aper√ßu tr√®s rapide des moyens de paiement en Polyn√©sie Fran√ßaise.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eUpdate (12/05/2022): suite √† quelques feedback, je me rend compte que cet article est √† destination des d√©veloppeurs de site de e-shopping, des commer√ßants, de mes confr√®res mon√©ticiens. Cet article sera complexe √† lire si vous n\u0026rsquo;avez jamais travaill√© avec un TPE, avec une plateforme de paiement, avec des cartes bancaires.\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e\u003cstrong\u003eDisclaimer\u003c/strong\u003e: Au moment o√π j\u0026rsquo;√©cris cet article, je travaille √† l\u0026rsquo;Oc√©anienne des Services Bancaires (OSB), Ces articles ne sont pas sponsoris√©s par OSB, et j\u0026rsquo;encourage les gens √† faire des tutoriels pour les solutions des autres fournisseurs de solutions de paiement.\u003c/p\u003e","title":"Introduction aux moyens de paiement en Polyn√©sie Fran√ßaise"},{"content":"Ia\u0026rsquo;orana, bonjour !\nCe post marque le d√©but du blog h√©berg√© sur Github.\nVous trouverez ici de temps en temps des articles de d√©veloppement et des POCs.\nBonne lecture !\n","permalink":"http://localhost:1313/blog.dev/posts/hello-world/","summary":"\u003cp\u003eIa\u0026rsquo;orana, bonjour !\u003c/p\u003e\n\u003cp\u003eCe post marque le d√©but du blog h√©berg√© sur Github.\u003c/p\u003e\n\u003cp\u003eVous trouverez ici de temps en temps des articles de d√©veloppement et des POCs.\u003c/p\u003e\n\u003cp\u003eBonne lecture !\u003c/p\u003e","title":"Hello World"},{"content":"La m√©moire est une ressource au m√™me titre que la fourchette dans le pr√©c√©dent article.\nDans un ordinateur, il existe plusieurs types de m√©moire que les programmes vont pouvoir utiliser en fonction de la mani√®re dont ils veulent traiter les donn√©es.\nIl faut voir la m√©moire comme un endroit o√π on entrepose des donn√©es.\nPour cet article on va parler d\u0026rsquo;un magasin, mais √ßa marche aussi avec un restaurant.\nLa m√©moire cache ‚Äî l\u0026rsquo;armoire r√©frig√©r√©e La m√©moire cache est le stockage le plus rapide qu\u0026rsquo;un programme peut utiliser. Pour un magasin, il s\u0026rsquo;agit des √©tag√®res et des armoires r√©frig√©r√©es qui forment les rayons.\nLes clients (les threads du programme) ont rapidement acc√®s aux viandes qui sont dans les armoires r√©frig√©r√©es, ils n\u0026rsquo;ont qu\u0026rsquo;√† tendre la main. Par contre, on ne peut pas stocker une grande quantit√© de viande dans ces armoires, pour l\u0026rsquo;exemple on va dire une dizaine au maximum.\nSur un ordinateur, cette m√©moire cache se trouve directement dans le processeur sous les noms cache L3, cache L2 et cache L1. On n\u0026rsquo;ira pas dans le d√©tail ici, mais sachez que plus le nombre est proche de 0, et plus le cache est rapide.\nJe prends l\u0026rsquo;exemple de l\u0026rsquo;armoire r√©frig√©r√©e car il y a un m√©canisme physique important dans un ordinateur: la m√©moire cache peut accueillir des donn√©es uniquement si elle est aliment√©e en √©lectricit√©, en cas de coupure de courant, on perd les donn√©es qui s\u0026rsquo;y trouvent.\nDe la m√™me mani√®re, dans un magasin, en cas de coupure de courant, il faut jeter toute la viande qui se trouve dans les armoires r√©frig√©r√©es*.\n*: Oui c\u0026rsquo;est pas tout √† fait le cas, mais en cas de coupure prolong√©e √ßa l\u0026rsquo;est.\nLa m√©moire vive ‚Äî l\u0026rsquo;arri√®re du magasin Au cours d\u0026rsquo;une journ√©e, le magasin souhaite vendre bien plus que dix viandes, c\u0026rsquo;est bien normal. Pour cela, √† l\u0026rsquo;arri√®re du magasin il y a un stock r√©frig√©r√© qui peut en contenir 1000. Un employ√© viendra remplir les rayons au cours de la journ√©e.\nCette action prend du temps, l\u0026rsquo;employ√© doit :\nAller dans le stock r√©frig√©r√© R√©cup√©rer des viandes Amener les viandes dans le rayon Mettre les viandes dans l\u0026#39;armoire r√©frig√©r√©e Pendant tout ce temps, le client ne peut prendre que les viandes qui sont encore dans l\u0026rsquo;armoire, il faut donc bien faire attention √† ce que l\u0026rsquo;employ√© recharge l\u0026rsquo;armoire quand il reste encore un peu de bo√Ætes.\nDans un ordinateur, la m√©moire vive (RAM en anglais pour Random Access Memory), joue le r√¥le du stock r√©frig√©r√© tr√®s rapide qu\u0026rsquo;un programme peut utiliser, mais beaucoup moins rapide que la m√©moire cache, environ 50x √† 100x moins rapide.\nEt tout comme la m√©moire cache, la RAM peut accueillir des donn√©es uniquement si elle est aliment√©e en √©lectricit√©.\nC\u0026rsquo;est pour √ßa qu\u0026rsquo;on appelle √ßa de la m√©moire vive, elle doit √™tre aliment√©e.\nAttends, mais tu dis que la RAM est tr√®s rapide, mais le processus pour recharger la m√©moire cache est lent ? On ne peut pas juste utiliser une grande quantit√© de m√©moire cache?\nLa m√©moire cache co√ªte tr√®s cher, beaucoup plus que la RAM. L\u0026rsquo;√©tat actuel est donc un compromis entre rapidit√© et co√ªt, un probl√®me typique en ing√©nierie.\nLe stockage ‚Äî la ferme en Nouvelle-Z√©lande Le stockage d\u0026rsquo;un ordinateur est compos√© des diff√©rents disques durs (HDD, SDD, etc.). Il s\u0026rsquo;agit d\u0026rsquo;une m√©moire persistante, c\u0026rsquo;est-√†-dire que m√™me en cas de coupure de courant, les donn√©es restent √©crites dans les disques.\nPour notre magasin, de la viande qui reste utilisable m√™me en cas de coupure\u0026hellip; Eh bien ce sont les boeufs vivants √† la ferme.\nTon analogie est d√©go√ªtante\nOui je sais, j\u0026rsquo;ai pas mieux, d√©sol√©. En m√™me temps, je ne peux pas vous dire que de la viande fra√Æche, qui reste longtemps √† l\u0026rsquo;air libre, est encore utilisable.\nEn plus, il y a plein d\u0026rsquo;√©tapes entre un boeuf vivant et un steak dans l\u0026rsquo;armoire !\nTout √† fait, mais c\u0026rsquo;est la meilleure analogie possible pour te faire comprendre pourquoi, en cas de coupure, si tu n\u0026rsquo;as pas sauvegard√© ton fichier Word depuis longtemps, tu perds tes donn√©es. Tant que tu n\u0026rsquo;as pas sauvegard√©, tes modifications restent dans le cache et la RAM.\nEt pourquoi en Nouvelle-Z√©lande ?\nOh, √ßa c\u0026rsquo;est parce qu\u0026rsquo;aller chercher une donn√©e dans un disque, c\u0026rsquo;est tr√®s lent compar√© √† aller la chercher dans la RAM. Si tu as un disque SSD c\u0026rsquo;est 10x plus lent, si tu as un disque HDD, c\u0026rsquo;est 100x plus lent.\nSi tu joues √† des jeux vid√©o un peu gourmands en ressources, tu as s√ªrement remarqu√© des √©crans de chargement plus ou moins longs. C\u0026rsquo;est surtout parce que le programme r√©cup√®re les donn√©es qui sont sur le disque.\nOptimiser la m√©moire ‚Äî pas besoin d\u0026rsquo;√™tre mentaliste Vous l\u0026rsquo;aurez donc compris, un magasin a diff√©rents types de m√©moire √† sa disposition. La mani√®re dont il orchestre les denr√©es √† travers ces diff√©rents composants lui permet d\u0026rsquo;anticiper les variations de stock, et limiter le risque de p√©nurie.\nLorsqu\u0026rsquo;un d√©veloppeur code un programme, il peut aussi anticiper l\u0026rsquo;utilisation des donn√©es et les charger avant d\u0026rsquo;en avoir besoin.\nDans l\u0026rsquo;exemple du jeu vid√©o, pourquoi est-ce que toutes les donn√©es ne sont pas charg√©es d√®s le d√©but? Moi j\u0026rsquo;en ai marre des √©crans de chargement.\nTout d\u0026rsquo;abord, ce chargement se fait du stockage vers la RAM (puis vers le cache), ensuite, si on chargeait toutes les donn√©es d\u0026rsquo;un coup, il y a de fortes chances pour que ta RAM soit satur√©e.\nA priori, le d√©veloppeur ne sait pas si tu as peu ou beaucoup de RAM disponible, et puis, maintenir deux versions du code, un qui charge toutes les donn√©es, et un qui charge via les √©crans de chargement, c\u0026rsquo;est du travail suppl√©mentaire qui n\u0026rsquo;apporte pas grand chose.\nLes √©crans de chargement sont un compromis : plut√¥t que de risquer de crasher ton ordinateur, le d√©veloppeur a cod√© le programme de sorte √† charger uniquement le contenu qui sera utilis√© dans le niveau, pour tous les niveaux.\nConclusion Dans cet article, on a vu les diff√©rentes m√©moires utilis√©es par les programmes. √Ä l\u0026rsquo;image d\u0026rsquo;un magasin qui √©vite les p√©nuries, un d√©veloppeur doit jongler avec ces m√©moires pour que son programme tourne correctement.\nDans le prochain article, IMVV ‚Äî Section 3 ‚Äî Chapitre 2 ‚Äî M√©mo√Øsation et Lazy loading, les technique du fain√©ant ultime, nous verrons des techniques qui feront de toi un bon fain√©ant.\n‚Üê Retour √† la section\n‚Üê Retour √† l‚Äôintroduction\n","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/optimisation/memoire/","summary":"\u003cp\u003eLa m√©moire est une \u003cstrong\u003eressource\u003c/strong\u003e au m√™me titre que la fourchette dans le \u003ca href=\"../../l-execution/threads/\"\u003epr√©c√©dent article\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eDans un ordinateur, il existe plusieurs types de m√©moire que les programmes vont pouvoir utiliser en fonction de la mani√®re dont ils veulent traiter les donn√©es.\u003c/p\u003e\n\u003cp\u003eIl faut voir la m√©moire comme un endroit o√π on entrepose des donn√©es.\u003c/p\u003e\n\u003cp\u003ePour cet article on va parler d\u0026rsquo;un magasin, mais √ßa marche aussi avec un restaurant.\u003c/p\u003e\n\u003ch2 id=\"la-m√©moire-cache--larmoire-r√©frig√©r√©e\"\u003eLa m√©moire cache ‚Äî l\u0026rsquo;armoire r√©frig√©r√©e\u003c/h2\u003e\n\u003cp\u003eLa \u003cstrong\u003em√©moire cache\u003c/strong\u003e est le stockage \u003cstrong\u003ele plus rapide\u003c/strong\u003e qu\u0026rsquo;un programme peut utiliser. Pour un magasin, il s\u0026rsquo;agit des √©tag√®res et des armoires r√©frig√©r√©es qui forment les rayons.\u003c/p\u003e","title":"IMVV ‚Äî Section 3 ‚Äî Chapitre 1 ‚Äî La m√©moire, ou comment √©viter les p√©nuries dans un magasin"},{"content":"Dans le pr√©c√©dent article, IMVV ‚Äî Section 1 ‚Äî Chapitre 3 ‚Äî Structures de contr√¥le et algorithme, apprendre √† r√©fl√©chir, on a vu les diff√©rentes structures de contr√¥le et les algorithmes.\nMaintenant on va parler de la mani√®re dont on r√©alise un ensemble de t√¢ches ‚Äî c‚Äôest ce qu‚Äôon appelle en informatique un mode d‚Äôex√©cution. C\u0026rsquo;est applicable aussi bien pour un humain que pour un ordinateur.\nN\u0026rsquo;oublie pas que les objectifs de ces articles sont :\nTe donner une meilleure compr√©hension des bases de l‚Äôinformatique, T\u0026rsquo;inspirer pour analyser ou optimiser les situations du quotidien, ou peut-√™tre, qui sait, te donner envie d\u0026rsquo;explorer encore plus loin\u0026hellip; jusqu‚Äô√† en faire ton m√©tier. Programme et application ‚Äî c\u0026rsquo;est quoi la diff√©rence ? Un programme informatique est un ensemble d\u0026rsquo;algorithmes. Le mot application veut dire la m√™me chose.\nC‚Äôest juste que application, √ßa sonne plus moderne, m√™me si ce mot existe depuis longtemps.\nMerci le marketing Apple et son App Store. üòÑ\nSynchrone ‚Äî Avoir un serveur d√©di√© √† sa table, quel luxe Prenons l\u0026rsquo;exemple d\u0026rsquo;un restaurant chic. Dans ce restaurant chic, il y a 2 tables. Chaque table a son serveur attitr√©, celui-ci r√©pond uniquement aux besoins de sa table.\nPour la suite de cet exercice de pens√©e, on va dire qu\u0026rsquo;il y a 2 familles (famille 1, famille 2), 2 tables (table 1, table 2), 1 serveur, 1 chef.\nLa s√©quence d\u0026rsquo;actions que le serveur doit faire, l\u0026rsquo;algorithme est :\nSi une famille arrive: Accueillir la famille Installer la famille sur une table libre Prendre la commande Donner la commande au chef R√©cup√©rer les plats Servir les plats √† la famille Faire payer la famille Fin si La famille 1 arrive au restaurant, le serveur les accueille et les installe √† la table 1. Il reste en attente de leur commande, √† proximit√©*.\nQuand la famille 1 est pr√™te, vu que le serveur est √† c√¥t√©, ils passent commande. Le serveur s\u0026rsquo;en va ensuite en cuisine pour donner la commande au chef. Le serveur attend les plats. Le chef pr√©pare les plats.\nUne fois que les plats sont pr√™ts, il les r√©cup√®re et les sert √† la famille 1. La famille 1 paie et s\u0026rsquo;en va, heureuse de l\u0026rsquo;attention port√©e.\n*: A ce moment, la famille 2 arrive au restaurant, ils ne sont pas accueillis, puisque le serveur est en attente de la commande de la famille 1. Alors la famille 2 repart, agac√©e, ils laisseront un mauvais avis sur internet.\nDans cette configuration, le serveur ex√©cute ses t√¢ches de mani√®re synchrone, cela veut dire qu\u0026rsquo;il ex√©cute l\u0026rsquo;algorithme √©tape par √©tape sans interruption. Si une √©tape n√©cessite d\u0026rsquo;attendre, par exemple quand il doit attendre que la famille choisisse sa commande, alors il attend, on dit que le mode synchrone est bloquant. Le serveur va au bout de son algorithme.\nMais c\u0026rsquo;est nul, il y a une famille qui n\u0026rsquo;a pas √©t√© servie\u0026hellip;\nSi on reste dans le mode d\u0026rsquo;ex√©cution synchrone, le probl√®me est qu\u0026rsquo;il n\u0026rsquo;y a pas assez de serveur. S\u0026rsquo;il y avait autant de serveurs de tables et de chefs, il n\u0026rsquo;y aurait aucun souci. Chaque famille aurait √©t√© ravie d\u0026rsquo;avoir un serveur et un chef d√©di√©. Mais on verrait plut√¥t cette disposition dans les restaurants luxueux, qui peuvent se permettre d\u0026rsquo;avoir 100 tables, 100 serveurs et 100 chefs.\nPar d√©faut, les applications sont synchrones, car √† part le probl√®me de ressources, c‚Äôest bien plus simple de faire une t√¢che apr√®s l‚Äôautre, cependant, de nos jours, de plus en plus de syst√®mes sont asynchrones (exemple: navigateurs, certains serveurs applicatifs √† la mode).\nüìå Exemples dans la vie r√©elle Une personne qui suit une proc√©dure critique Pr√©parer une salade üíª Exemples en informatique Un distributeur de billets Une imprimante partag√©e Asynchrone ‚Äî Un serveur pour les gouverner tous ‚Äî Oui c\u0026rsquo;est une r√©f√©rence au Seigneur des Anneaux üòÑ ‚Äî\nReprenons l\u0026rsquo;exemple du restaurant, toujours avec 2 familles (famille 1, famille 2), 2 tables (table 1, table 2), 1 serveur, 1 chef.\nMais cette fois, on change l\u0026rsquo;algorithme :\nQuand une famille arrive, alors : Le serveur les accueille Il les installe √† une table libre Il leur donne un menu Il passe √† autre chose Fin quand Quand une famille appelle le serveur pour commander, alors : Le serveur prend la commande Il la transmet au chef Il passe √† autre chose Fin quand Quand la sonnette en cuisine retentit (plats pr√™ts), alors : Le serveur r√©cup√®re les plats Le serveur sert les plats √† la bonne table Il passe √† autre chose Fin quand Quand une famille veut payer, alors : Le serveur encaisse Il lib√®re la table Il passe √† autre chose Fin quand Cet algorithme est diff√©rent de ceux qu\u0026rsquo;on a vus jusqu\u0026rsquo;√† pr√©sent.\n\u0026ldquo;Quand \u0026hellip;,\u0026rdquo; marque un √©v√©nement, \u0026ldquo;alors\u0026rdquo; introduit le bloc d\u0026rsquo;instructions √† ex√©cuter en r√©action, et \u0026ldquo;Fin quand\u0026rdquo; marque la fin de ce bloc.\nOn dit alors qu\u0026rsquo;on fait de la programmation √©v√©nementielle (ou programmation r√©active) et que l\u0026rsquo;algorithme est asynchrone : il fait de sorte √† r√©agir aux √©v√©nements ext√©rieurs.\nLorsqu‚Äôun √©v√©nement se produit, le serveur y r√©agit imm√©diatement : il ex√©cute les instructions associ√©es, puis passe √† l‚Äô√©v√©nement suivant s‚Äôil y en a un. Sinon, il attend. Ce mode d\u0026rsquo;ex√©cution est donc non bloquant.\nEt dans les faits, c\u0026rsquo;est ce que fait la plupart des personnes, serveurs ou non. Quand on fait une t√¢che, et qu\u0026rsquo;on est interrompu par un bug, un appel, un coll√®gue de travail qui pose une question, on est en r√©action.\nAvec cet algorithme, un serveur seul pourra tr√®s bien g√©rer 2 tables.\nüìå Exemples dans la vie r√©elle Les serveurs dans la plupart des restaurants Mon chien quand il entend les croquettes üíª Exemples en informatique Les notifications sur ton smartphone Un arrosage automatique avec capteur d\u0026#39;humidit√© Attention : comme en mode synchrone, s\u0026rsquo;il y a trop de table pour un seul serveur, plusieurs √©v√©nements risquent de s\u0026rsquo;accumuler en attente de traitement.\nMais du coup, comment on fait pour r√©soudre ce probl√®me ?\nOn verra √ßa dans le prochain article.\nConclusion Dans cet article, on a vu ce qu\u0026rsquo;√©taient les modes d\u0026rsquo;ex√©cution synchrone et asynchrone.\nSi tu souhaites continuer cette aventure, tu peux regarder la suite ici: IMMV ‚Äî Section 2 ‚Äî Chapitre 2 ‚Äî Monothread et Multithread, je ne peux pas tout faire en m√™me temps !\n‚Üê Retour √† la section\n‚Üê Retour √† l‚Äôintroduction\n","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/l-execution/sync-async/","summary":"\u003cp\u003eDans le pr√©c√©dent article, \u003ca href=\"../../les-bases/structures-de-controle/\"\u003eIMVV ‚Äî Section 1 ‚Äî Chapitre 3 ‚Äî Structures de contr√¥le et algorithme, apprendre √† r√©fl√©chir\u003c/a\u003e, on a vu les diff√©rentes structures de contr√¥le et les algorithmes.\u003c/p\u003e\n\u003cp\u003eMaintenant on va parler de la mani√®re dont on r√©alise un ensemble de t√¢ches ‚Äî c‚Äôest ce qu‚Äôon appelle en informatique un \u003cstrong\u003emode d‚Äôex√©cution\u003c/strong\u003e. C\u0026rsquo;est applicable aussi bien pour un humain que pour un ordinateur.\u003c/p\u003e\n\u003cp\u003eN\u0026rsquo;oublie pas que les objectifs de ces articles sont :\u003c/p\u003e","title":"IMMV ‚Äî Section 2 ‚Äî Chapitre 1 ‚Äî Synchrone et Asynchrone, ou comment r√©agir au changement"},{"content":"Quand tu prends un ticket pour attendre ton tour, que tu fais la queue √† la caisse, que tu prends l‚Äôassiette du haut de la pile pour mettre la table, ou que tu cliques sur le bouton \u0026lsquo;Retour\u0026rsquo; (‚Üê) du navigateur internet‚Ä¶ Tu manipules sans le savoir des concepts appell√©s en informatique des structures de donn√©es, et les algorithmes associ√©s qui les font vivre.\nDans cet article, on va mettre un peu de clart√© l√†-dedans : pas besoin de coder pour comprendre, on va illustrer tout √ßa avec des situations de la vie courante.\nD√©finitions Avant d‚Äôaller plus loin, quelques d√©finitions simples, histoire de parler le m√™me langage :\nDonn√©e : une donn√©e, c‚Äôest une information num√©rique. √áa peut √™tre un num√©ro de passeport, le nombre de dents d‚Äôune personne, la liste des t√¢ches que tu as encore repouss√©es √† demain, ou ton nombre d‚Äôamis sur Facebook. Structure de donn√©es : imagine une bo√Æte, une √©tag√®re ou un sac √† dos, dans lequel tu ranges tes informations d‚Äôune certaine mani√®re pour mieux les retrouver ou les traiter. C‚Äôest la fa√ßon dont on organise les donn√©es. Algorithme : un algorithme, c‚Äôest une suite d‚Äô√©tapes ou d‚Äôinstructions pour manipuler ces donn√©es. Comme une recette de cuisine, ou une proc√©dure √† suivre pour obtenir un r√©sultat. File et pile : deux mani√®res d‚Äôattendre‚Ä¶ ou de repousser Maintenant qu‚Äôon a les bases, voyons deux structures de donn√©es tr√®s simples mais tr√®s puissantes : la file et la pile. On les retrouve partout dans notre quotidien, souvent sans s‚Äôen rendre compte.\nLa file ‚Äî ou comment attendre son tour (FIFO) Imagine une file d‚Äôattente devant un guichet. Le premier arriv√© est le premier servi. C‚Äôest ce qu‚Äôon appelle en informatique une file (ou queue en anglais), avec une logique FIFO : First In, First Out (premier entr√©, premier sorti).\nD√®s que quelqu‚Äôun est servi, c‚Äôest le suivant dans la file qui avance.\nüéØ C‚Äôest une structure √©quitable : chacun attend selon son ordre d‚Äôarriv√©e.\nüìå Exemples dans la vie r√©elle Faire la queue √† la caisse du magasin La liste des courses (si on lit de haut en bas) üíª Exemples en informatique Les syst√®mes de ticket dans les accueils (le num√©ro est g√©n√©r√© par un programme, et les appels suivent cet ordre) Les commentaires sur une publication Facebook (affich√©s du plus ancien au plus r√©cent) La pile ‚Äî ou comment empiler les priorit√©s (LIFO) Maintenant, imagine une pile de livres que tu dois r√©viser pour un examen. Tu prends celui du haut, tu le lis, puis tu prends celui juste en dessous, et ainsi de suite. Tu lis dans l‚Äôordre inverse de celui dans lequel tu as empil√© les livres. Tu viens de d√©piler ta pile, toujours en commen√ßant par le haut.\nC‚Äôest exactement le principe de la pile (ou stack en anglais), qui suit la logique LIFO : Last In, First Out (dernier entr√©, premier sorti).\nTu vas peut-√™tre me dire :\nOui mais je peux aussi prendre le livre du bas, non‚ÄØ?\nC‚Äôest vrai. Alors prenons un autre exemple, un peu plus r√©aliste :\nImagine que tu tombes sur un article de journal qui parle des nodules polym√©talliques dans les fonds marins de la Polyn√©sie fran√ßaise. Tu n‚Äôy connais pas grand-chose, mais √ßa t‚Äôintrigue. Tu lis l‚Äôarticle, puis tu ouvres une page Wikip√©dia pour comprendre ce qu‚Äôest un nodule polym√©tallique. Sur cette page, tu vois un lien vers les m√©taux rares, puis vers la transition √©nerg√©tique, puis‚Ä¶ tu vois o√π je veux en venir.\nEn lisant ce premier article, tu ne soup√ßonnais pas toute la pile d‚Äôinformations que tu allais explorer. Et tu viens de d√©piler ce savoir, en commen√ßant par la derni√®re page ouverte.\nüéØ Ce n‚Äôest pas une structure √©quitable : ce qui arrive en dernier est trait√© en premier. Mais c‚Äôest tr√®s utile pour remonter dans le temps, ou revenir sur ses pas, exactement comme le bouton \u0026ldquo;retour\u0026rdquo; de ton navigateur.\nüìå Exemples dans la vie r√©elle Les cartons dans un coffre bien rempli Les diff√©rentes strates de terre quand tu creuses dans ton jardin (c\u0026#39;est de la terre empil√©e au cours du temps) üíª Exemples en informatique Le bouton \u0026#39;Retour\u0026#39; (‚Üê) de ton navigateur Les annulations successives (Undo, CTRL\u0026#43;Z) dans un √©diteur de texte Si tu veux conna√Ætre d\u0026rsquo;autres structures de donn√©es, tu peux regarder le prochain article : IMVV ‚Äî Section 1 ‚Äî Chapitre 2 ‚Äî Autres structures de donn√©es, j\u0026rsquo;organise mon bordel\n‚Üê Retour √† la section\n‚Üê Retour √† l‚Äôintroduction\n","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/les-bases/file-et-pile/","summary":"\u003cp\u003eQuand tu prends un ticket pour attendre ton tour, que tu fais la queue √† la caisse, que tu prends l‚Äôassiette du haut de la pile pour mettre la table, ou que tu cliques sur le bouton \u0026lsquo;Retour\u0026rsquo; (‚Üê) du navigateur internet‚Ä¶\nTu manipules sans le savoir des concepts appell√©s en informatique \u003cstrong\u003edes structures de donn√©es\u003c/strong\u003e, et \u003cstrong\u003eles algorithmes\u003c/strong\u003e associ√©s qui les font vivre.\u003c/p\u003e\n\u003cp\u003eDans cet article, on va mettre un peu de clart√© l√†-dedans : pas besoin de coder pour comprendre, on va illustrer tout √ßa avec des situations de la vie courante.\u003c/p\u003e","title":"IMVV ‚Äî Section 1 ‚Äî Chapitre 1 ‚Äî File ou Pile ? L'art de passer avant les autres"},{"content":"√ätre fiu est un art, une vertu. Non, ce n\u0026rsquo;est pas une blague. Tu ne me crois pas ?\n\u0026ldquo;We will encourage you to develop the three great virtues of a programmer: laziness, impatience, and hubris.\u0026rdquo; ‚Äî Larry Wall, Programming perl (1991).\n\u0026ldquo;I choose a lazy person to do a hard job. Because a lazy person will find an easy way to do it.\u0026rdquo; ‚Äî Bill Gates.\nProgrammer une machine pour qu\u0026rsquo;elle fasse le travail √† ta place, c\u0026rsquo;est de la fain√©antise.\nEt les d√©veloppeurs sont des personnes qui ont atteint l\u0026rsquo;apog√©e du fiu. Apr√®s tout, qui passe 2 heures √† automatiser une t√¢che qui prend 2 minutes par jour, √† part quelqu\u0026rsquo;un de vraiment fiu ?\nDans cet article, on verra deux techniques que les d√©veloppeurs utilisent, mais que toi aussi tu utilises sans le savoir.\nM√©mo√Øsation ‚Äî ou comment garder une information dans un coin de la t√™te Supposons que tu sois responsable de la paie dans une petite entreprise. Pour ce mois-ci, tu dois calculer les salaires √† verser √† 2 employ√©s.\nTu sais que tous les deux ont un salaire brut de 200 000 XPF. De plus, ils ont fait un excellent travail, ton patron t\u0026rsquo;a dit de leur rajouter une prime de 50% de leur salaire brut. Enfin, l\u0026rsquo;un d\u0026rsquo;eux a fait des heures suppl√©mentaires, il faut donc lui rajouter 20 000 XPF brut sur sa paie.\nPour le 1er salari√©, tu pars de 200 000, tu rajoutes 50%, soit 100 000, ce qui lui fera 300 000 XPF brut pour ce mois.\nPour le 2√®me salari√©, tu sais que le d√©but du calcul est le m√™me, alors tu r√©utilises le nombre 300 000, et tu rajoutes 20 000 d\u0026rsquo;heures suppl√©mentaires, donc 320 000 bruts.\nMais tu t‚Äôes souvenu que le calcul 200 000 + 50 % avait d√©j√† √©t√© fait, donc tu as directement repris le r√©sultat. Ce que tu viens de faire, c\u0026rsquo;est de la m√©mo√Øsation (memoization en anglais).\nC‚Äôest exactement ce que fait ton navigateur web quand il te propose un r√©sultat de recherche d√©j√† visit√©, ou qu‚Äôun site charge plus vite la 2·µâ fois.\nInstant Dev En informatique, on utilise un tableau ou un tableau associatif pour stocker les r√©sultats interm√©diares, ces structures sont stock√©es dans la RAM. De cette fa√ßon, on peut rapidement r√©cup√©rer le r√©sultat qui nous int√©resse. Attention : En informatique, comme dans la vraie vie, garder des informations de c√¥t√© peut conduire √† une saturation de la m√©moire. C\u0026rsquo;est un des facteurs de burn-out. M√©nagez votre cerveau, il n\u0026rsquo;y a pas de mal √† noter les choses, de plus, vous aurez moins de risque d\u0026rsquo;oublier des informations importantes.\nEager loading et Lazy loading ‚Äî l\u0026rsquo;art d\u0026rsquo;√™tre pr√©par√© √† toute √©ventualit√© Supposons que tu aies invit√© tes amis √† manger √† la maison ce soir. Tu as invit√© 10 personnes, mais tu sais que 5 vont vraiment venir, les autres t\u0026rsquo;ont dit \u0026ldquo;peut-√™tre\u0026rdquo;.\nPour √©viter d\u0026rsquo;√™tre √† court de nourriture, tu as pr√©par√© pour 10 personnes, au pire, ceux qui sont venus repartiront avec quelques plats, et tu termineras le reste durant la semaine.\nLes premiers invit√©s vont arriver, tu n\u0026rsquo;as pas encore pr√©par√© la table. Tu as 2 solutions :\nTout pr√©parer d\u0026rsquo;avance : sortir toutes les assiettes, les verres, les chaises, les couverts, etc. (solution eager loading : tu charges tout d√®s le d√©but).\nAttendre de voir qui arrive : d√®s qu‚Äôun invit√© entre, tu sors une assiette, un verre, une chaise, etc. (solution lazy loading : tu ne charges que ce qui est n√©cessaire, au moment o√π c‚Äôest n√©cessaire).\nMais tu peux aussi exiger des invit√©s qu\u0026rsquo;ils te disent, la veille au plus tard, si oui ou non ils viennent !\nOui, et que se passe-t-il si l\u0026rsquo;un d\u0026rsquo;eux a un emp√™chement ? En mettant tous les couverts, tu as d√©pens√© de l\u0026rsquo;√©nergie pour mettre son couvert, et tu en as re-d√©pens√© pour le ranger. Ce n\u0026rsquo;est pas tr√®s optimis√©.\nSi tous les invit√©s arrivent, tu auras fait plusieurs allers-retours pour mettre les couverts, ce n\u0026rsquo;est pas tr√®s optimis√© non plus\u0026hellip;\nAh, tu mets le doigt sur un point important : les techniques d\u0026rsquo;optimisation doivent √™tre utilis√©es uniquement si on est s√ªr de leur utilit√©.\n\u0026ldquo;Premature optimization is the root of all evil\u0026rdquo; ‚Äî Sir Tony Hoare et Donald Knuth.\nC\u0026rsquo;est un pi√®ge dans lequel tombent plusieurs d√©veloppeurs juniors. Les √©coles sup√©rieures enseignent diff√©rentes techniques d\u0026rsquo;optimisation, on est conditionn√©s √† d√©tecter un probl√®me et √† appliquer imm√©diatement une solution : c\u0026rsquo;est normal.\nAvec l\u0026rsquo;exp√©rience, on apprend qu\u0026rsquo;on a besoin d\u0026rsquo;optimiser uniquement quand une personne se plaint de lenteurs. Et dans ce cas, on cherche o√π se trouve la source du probl√®me, on mesure, puis on optimise.\nOk mais\u0026hellip; √ßa me fait bizarre de ne pas pr√©parer une belle table, c\u0026rsquo;est pas un bon accueil.\nDans ce cas, le eager loading a une vraie plus-value. Tu charges tout d\u0026rsquo;un coup pour l\u0026rsquo;effet waow, pour que les personnes se disent que chez toi, on est bien re√ßu. La principale fonctionnalit√© n\u0026rsquo;est pas d\u0026rsquo;optimiser le fait de mettre la table, mais d\u0026rsquo;impressionner tes convives.\nJe finis cette partie avec un exemple informatique : Facebook ne charge pas toutes les publications d√®s le d√©but, seulement une partie.\nQuand tu commences √† scroller, tu vois ces publications. Si tu te rapproches de la fin, Facebook charge les prochaines publications, on appelle √ßa infinite scroll.\nAinsi, Facebook ne prend pas trop de temps √† se charger au d√©but.\nAttends mais\u0026hellip; Dans l\u0026rsquo;article pr√©c√©dent, on parlait des √©crans de chargement des jeux vid√©os, √ßa y ressemble un peu, non ?\nExactement, les √©crans de chargement sont aussi du lazy loading, et pour rejoindre ce qu\u0026rsquo;on disait sur ces √©crans : le lazy loading √©conomise de la m√©moire.\nEnfin, √† ton avis, comment Facebook sait qu\u0026rsquo;il faut charger la suite des publications ?\nEh bien en fait, l\u0026rsquo;application est r√©active, on peut √©crire son algorithme de chargement comme ceci:\nQuand un certain seuil de scroll est atteint (par exemple, 90% du contenu affich√©), alors: Charge la suite du contenu Passe √† autre chose Fin quand Tu l\u0026rsquo;auras remarqu√©, c\u0026rsquo;est ce qu\u0026rsquo;on a vu dans l\u0026rsquo;article IMMV ‚Äî Section 2 ‚Äî Chapitre 1 ‚Äî Synchrone et Asynchrone, ou comment r√©agir au changement.\nConclusion Dans cet article, on a vu diff√©rents m√©canimes d\u0026rsquo;optimisation.\nPlus important encore, si on se rappelle des pr√©c√©dents articles, on a vu qu\u0026rsquo;en informatique, en plus de combiner les structures de donn√©es et les structures de contr√¥le, on pouvait combiner les concepts d\u0026rsquo;optimisation et de modes d\u0026rsquo;ex√©cution.\nLe prochaine article est en cours de r√©daction, on parlera de complexit√©.\n‚Üê Retour √† la section\n‚Üê Retour √† l‚Äôintroduction\n","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/optimisation/memoisation/","summary":"\u003cp\u003e√ätre \u003cem\u003efiu\u003c/em\u003e est un art, une vertu. \u003cstrong\u003eNon, ce n\u0026rsquo;est pas une blague\u003c/strong\u003e. Tu ne me crois pas ?\u003c/p\u003e\n\u003cp\u003e\u003cem\u003e\u0026ldquo;We will encourage you to develop the three great virtues of a programmer: laziness, impatience, and hubris.\u0026rdquo; ‚Äî Larry Wall, Programming perl (1991)\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003e\u0026ldquo;I choose a lazy person to do a hard job. Because a lazy person will find an easy way to do it.\u0026rdquo; ‚Äî Bill Gates\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eProgrammer une machine pour qu\u0026rsquo;elle fasse le travail √† ta place, c\u0026rsquo;est de la fain√©antise.\u003c/p\u003e","title":"IMVV ‚Äî Section 3 ‚Äî Chapitre 2 ‚Äî M√©mo√Øsation et Lazy loading, les techniques du fain√©ant ultime"},{"content":"Dans le pr√©c√©dent article, IMMV ‚Äî Section 2 ‚Äî Chapitre 1 ‚Äî Synchrone et Asynchrone, ou comment r√©agir au changement, on a vu les diff√©rents modes d\u0026rsquo;ex√©cution.\nOn s\u0026rsquo;√©tait arr√™t√© sur le probl√®me suivant : Comment faire pour r√©pondre √† la mont√©e en charge, √† l\u0026rsquo;accumulation de t√¢ches ?\nEh bien, dans cet article, on va voir comment on r√©sout ce probl√®me, en informatique comme dans la vraie vie : les m√©canismes sont souvent tr√®s proches.\nPour cela on va continuer avec notre exemple de restaurant. Et on va expliciter diff√©rents termes que j\u0026rsquo;avais regroup√©s en parlant d\u0026rsquo;algorithmes et de programmes.\nN\u0026rsquo;oublie pas que les objectifs de ces articles sont :\nTe donner une meilleure compr√©hension des bases de l‚Äôinformatique, T\u0026rsquo;inspirer pour analyser ou optimiser les situations du quotidien, ou peut-√™tre, qui sait, te donner envie d\u0026rsquo;explorer encore plus loin\u0026hellip; jusqu‚Äô√† en faire ton m√©tier. Le programme ‚Äî l\u0026rsquo;id√©e de restaurant En informatique, quand on parle de programme, on parle uniquement d\u0026rsquo;un ensemble d\u0026rsquo;algorithmes, des t√¢ches qui le composent. Il n\u0026rsquo;est pas encore en train d\u0026rsquo;√™tre ex√©cut√©. Par exemple, Facebook est un programme ‚Äî mais tant que tu ne l‚Äôouvres pas, il ne fait rien.\nEh bien, c\u0026rsquo;est pareil pour un restaurant dans la vie de tous les jours, quand je parle du restaurant √† un ami, je n\u0026rsquo;y suis pas physiquement. Je parle juste du concept de restaurant, de l\u0026rsquo;id√©e que je m\u0026rsquo;en fais.\nLe processus - le restaurant ouvert Si je veux parler du restaurant physiquement ouvert, avec les employ√©s qui s\u0026rsquo;activent, en informatique il faut plut√¥t utiliser le terme processus. C\u0026rsquo;est le programme en cours d\u0026rsquo;ex√©cution.\nUn processus poss√®de son propre contexte d\u0026rsquo;ex√©cution, c\u0026rsquo;est un gros mot pour dire qu\u0026rsquo;il a ses propres ressources, et que personne ne peut lui prendre ses ressources.\nEn effet, quand le restaurant est ouvert, les assiettes qu\u0026rsquo;il utilise sont ses propres assiettes, ses propres ressources. Il n\u0026rsquo;y a pas un autre restaurant qui lui prendrait ses assiettes pendant qu\u0026rsquo;il est ouvert, sinon il risque d\u0026rsquo;avoir des assiettes manquantes.\nPour ex√©cuter un algorithme, un processus est compos√© d\u0026rsquo;un thread principal, et il peut avoir d\u0026rsquo;autres thread.\nLe thread ‚Äî la proc√©dure en cours d\u0026rsquo;ex√©cution du serveur Le thread (fil d\u0026rsquo;ex√©cution en fran√ßais) est ce qu‚Äôon appelle la proc√©dure en train de s\u0026rsquo;ex√©cuter. C‚Äôest un peu comme un serveur qui suit activement une fiche d\u0026rsquo;instructions √† un instant donn√©. Attention, ce n\u0026rsquo;est pas le serveur.\nEn informatique, on dit que le thread est l‚Äôunit√© d‚Äôex√©cution, C‚Äôest la plus petite unit√© qu‚Äôun ordinateur puisse piloter pour ex√©cuter du code. il n‚Äôexiste pas d‚Äôunit√© plus petite qu‚Äôun thread pour ex√©cuter une t√¢che.\nMaintenant qu‚Äôon comprend ce qu‚Äôest un thread ‚Äî une proc√©dure en cours d\u0026rsquo;ex√©cution ‚Äî il faut se demander qui ex√©cute cette proc√©dure.\nLe coeur ‚Äî le serveur On y arrive enfin, dans un ordinateur, le composant physique qui ex√©cute un thread s\u0026rsquo;appelle un coeur (core en anglais). Pour notre restaurant, ce core est le serveur. C\u0026rsquo;est lui, physiquement, qui prend les commandes, sert les plats, etc.\nConcurrence, parall√©lisme, multithread et monothread ‚Äî ou comment servir 2 familles en m√™me temps Un serveur ne peut faire qu\u0026rsquo;une seule chose √† la fois, √† un instant donn√© : quand il prend une commande √† l\u0026rsquo;instant T, il ne peut pas, en m√™me temps, servir des plats.\nPar contre, il pourrait s\u0026rsquo;interrompre pendant les t√¢ches, par exemple, au lieu de prendre toutes les commandes de la famille, d\u0026rsquo;un coup, il peut :\nprendre la commande d\u0026rsquo;un 1er plat aller chercher un plat √† servir servir le plat prendre la commande d\u0026rsquo;un 2√®me plat aller chercher un autre plat √† servir servir le plat etc. Attention: ici nous n\u0026rsquo;avons pas d√©coup√© les actions. C\u0026rsquo;est juste que le serveur a jongl√© entre les 2 t√¢ches \u0026ldquo;prendre la commande\u0026rdquo; et \u0026ldquo;servir les plats\u0026rdquo;. On appelle ce comportement la concurrence, car les 2 t√¢ches sont en concurrence pour √™tre termin√©es.\nDans un ordinateur, les threads sont concurrents, et comme √©nonc√© plus haut, √©tant donn√© qu\u0026rsquo;un processus est compos√© d\u0026rsquo;un thread principal, on dit que les processus sont concurrents.\nDans la vraie vie il y a des situations o√π on ne jongle pas avec les t√¢ches, o√π il faut √™tre concentr√© sur une t√¢che\nTout √† fait, et dans ce cas, s\u0026rsquo;il y a trop de t√¢ches pour une seule personne, on fait intervenir une 2√®me personne, une 3√®me etc.\nDans notre restaurant, avec 2 serveurs, pendant que l\u0026rsquo;un prend les commandes de la famille 1, un autre peut servir les plats de la famille 2. On appelle √ßa le parall√©lisme, les proc√©dures/threads sont ex√©cut√©s en parall√®le.\nEnfin, dans un restaurant, si on ne peut avoir qu\u0026rsquo;un seul serveur qui suit activement une fiche d\u0026rsquo;instructions ‚Äî un seul thread ‚Äî, on dit que le restaurant/le programme est monothread. S\u0026rsquo;il y en a plusieurs, on dit que le restaurant/serveur est multithread.\nDu coup, la solution pour le restaurant est d\u0026rsquo;embaucher plus de serveurs ?\nC\u0026rsquo;est l\u0026rsquo;une des solutions, oui, mais ce n\u0026rsquo;est pas la seule. Il y a globalement 2 chemins pour r√©pondre √† une mont√©e en charge. On peut :\noptimiser les algorithmes pour les rendre plus performants et/ou changer le mode d\u0026rsquo;ex√©cution, ou alors on peut mettre plus de coeurs et faire du multithread. De la m√™me mani√®re, dans la vraie vie, on peut :\nmieux former le serveur et/ou optimiser les proc√©dures qu\u0026rsquo;il doit suivre et/ou le motiver pour qu\u0026rsquo;il travaille plus vite, embaucher plus de serveurs. Dans tous les cas, je ne m\u0026rsquo;avancerai pas pour apprendre √† un restaurateur son m√©tier.\nLe partage de ressources ‚Äî ou comment partager une fourchette Dans le restaurant, on va maintenant se mettre du point de vue d\u0026rsquo;un couple, venu manger en t√™te √† t√™te dans une ambiance cosy, tamis√©e, √† l\u0026rsquo;abri des regards.\nLe serveur leur annonce la mauvaise nouvelle: il y a assez de couverts pour 2, sauf pour la fourchette. S\u0026rsquo;ils souhaitent tout de m√™me manger ici, ils devront se partager la fourchette, et interdiction de manger avec les doigts.\nLe couple discute, et finalement ce n\u0026rsquo;est pas un probl√®me, ils sont l√† pour profiter de l\u0026rsquo;instant.\nUne fois la commande pass√©e et les plats servis, Le couple commence √† manger. Mais comment s‚Äôorganisent-ils ?\nBen ils mangent chacun leur tour, ou alors l\u0026rsquo;un mange d\u0026rsquo;abord, et l\u0026rsquo;autre ensuite ?\nBingo, que l\u0026rsquo;un mange d\u0026rsquo;abord, puis l\u0026rsquo;autre, ou qu\u0026rsquo;ils mangent √† tour de r√¥le, dans tous les cas, ils doivent se partager une ressource : la fourchette. Donc l\u0026rsquo;un prend le contr√¥le de la ressource/fourchette, fait des actions avec cette ressource, puis lib√®re la ressource. L\u0026rsquo;autre peut √† son tour prendre le contr√¥le de la ressource, etc.\nDans un ordinateur, c\u0026rsquo;est pareil, dans un processus, les threads doivent se partager les ressources. De m√™me, les processus doivent se partager les ressources.\nC\u0026rsquo;est pour √ßa que sur un ordinateur, quand tu ouvres un document Word partag√© avec tes coll√®gues, parfois tu as un message du genre \u0026ldquo;le fichier est d√©j√† ouvert par\u0026hellip;\u0026rdquo; car le document Word est une fourchette ressource partag√©e entre ton application Word, et celle de ton coll√®gue.\nElle est bizarre ton explication\u0026hellip;\nJe ne vois pas de quoi tu parles.\nQuoiqu\u0026rsquo;il en soit, tu comprends donc qu\u0026rsquo;en rajoutant plus de threads/cores/personnes, on ne va pas forc√©ment plus vite. Ils doivent se synchroniser pour partager les ressources et parfois attendre.\nInstant Dev En informatique, ce partage de ressource s‚Äôappelle une section critique. Pour √©viter que deux t√¢ches utilisent la ressource en m√™me temps, on utilise des verrous (locks). Conclusion Dans cet article, on a vu diff√©rents termes informatiques qui permettent de comprendre un peu plus comment fonctionne un ordinateur, comment on pouvait r√©pondre √† la mont√©e en charge de diff√©rentes mani√®res, et que finalement, c\u0026rsquo;est tr√®s proche de la vie r√©elle.\nNous avons fini cette section \u0026ldquo;IMMV ‚Äî Section 2 ‚Äî L\u0026rsquo;ex√©cution : comment faire des actions ?\u0026rdquo;.\nDans la prochaine section, IMMV ‚Äî Section 3 ‚Äî L\u0026rsquo;optimisation : comment se faire passer pour un coach de vie, on verra comment optimiser des applications et la vie r√©elle.\n‚Üê Retour √† la section\n‚Üê Retour √† l‚Äôintroduction\n","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/l-execution/threads/","summary":"\u003cp\u003eDans le pr√©c√©dent article, \u003ca href=\"../sync-async/\"\u003eIMMV ‚Äî Section 2 ‚Äî Chapitre 1 ‚Äî Synchrone et Asynchrone, ou comment r√©agir au changement\u003c/a\u003e, on a vu les diff√©rents modes d\u0026rsquo;ex√©cution.\u003c/p\u003e\n\u003cp\u003eOn s\u0026rsquo;√©tait arr√™t√© sur le probl√®me suivant : Comment faire pour r√©pondre √† la mont√©e en charge, √† l\u0026rsquo;accumulation de t√¢ches ?\u003c/p\u003e\n\u003cp\u003eEh bien, dans cet article, on va voir comment on r√©sout ce probl√®me, en informatique \u003cstrong\u003ecomme dans la vraie vie\u003c/strong\u003e : les m√©canismes sont souvent tr√®s proches.\u003c/p\u003e","title":"IMMV ‚Äî Section 2 ‚Äî Chapitre 2 ‚Äî Monothread, Multithread, Parall√©lisme et Concurrence, je ne peux pas tout faire en m√™me temps !"},{"content":"Dans le pr√©c√©dent article IMVV ‚Äî Section 1 ‚Äî Chapitre 1 ‚Äî File ou Pile ? L\u0026rsquo;art de passer avant les autres on a d√©couvert les files et les piles. Cette fois, on va survoler plusieurs autres structures de donn√©es (data structures en anglais) qu\u0026rsquo;on utilise tr√®s souvent en informatique\u0026hellip; et dans la vraie vie.\nN\u0026rsquo;oublie pas que les objectifs de ces articles sont :\nTe donner une meilleure compr√©hension des bases de l‚Äôinformatique, T\u0026rsquo;inspirer pour analyser ou optimiser les situations du quotidien, ou peut-√™tre, qui sait, te donner envie d\u0026rsquo;explorer encore plus loin\u0026hellip; jusqu‚Äô√† en faire ton m√©tier. Le tableau ‚Äî la base de presque tout Tu as peut-√™tre remarqu√© dans le pr√©c√©dent article que la file et la pile se ressemblent beaucoup. En r√©alit√©, on peut les repr√©senter toutes les deux avec la m√™me structure : un tableau.\nEn informatique, le tableau (ou array en anglais) est l‚Äôune des structures les plus simples : on range des √©l√©ments les uns √† la suite des autres, dans un espace de taille fixe, et chaque √©l√©ment est rep√©r√© par sa position (ou index).\nPrenons un exemple simple : un tableau d\u0026rsquo;amis √† inviter pour un anniversaire, mais dans mon carnet d\u0026rsquo;adresses je n\u0026rsquo;ai que 6 places.\nAmis Manutea Vai Purotu Heiarii Reva (vide) index 0 1 2 3 4 5 L‚Äôindex est simplement la position de la personne dans le tableau, ce n\u0026rsquo;est pas un ordre.\nDans la plupart des langages informatiques, l\u0026rsquo;index commence √† 0, et pas √† 1.\nCet index nous permet d\u0026rsquo;acc√©der directement √† Vai, l\u0026rsquo;amie √† l\u0026rsquo;index 2 (ou 3√®me √©l√©ment), pour voir son num√©ro de t√©l√©phone par exemple.\nEt ce tableau peut se comporter diff√©remment selon la mani√®re dont on ajoute et retire les √©l√©ments. Par exemple, on peut le faire fonctionner comme une file ou une pile, simplement en changeant les r√®gles du jeu.\nSi c\u0026rsquo;est une file : On ajoute les amis √† la fin, par exemple, Jean arrive apr√®s Reva : Amis Manutea Vai Purotu Heiarii Reva Jean index 0 1 2 3 4 5 Et on traite depuis le d√©but, on retire Manutea du tableau : Amis Vai Purotu Heiarii Reva Jean (vide) index 0 1 2 3 4 5 Pour une pile : On ajoute les amis au d√©but, Jean arrive avant Manutea : Amis Jean Manutea Vai Purotu Heiarii Reva index 0 1 2 3 4 5 Et on traite toujours depuis le d√©but, on retire Jean du tableau : Amis Manutea Vai Purotu Heiarii Reva (vide) index 0 1 2 3 4 5 Dans les deux cas, on utilise un tableau pour stocker les amis. C‚Äôest la logique d‚Äôajout et de retrait qui transforme ce tableau en pile ou en file.\nüéØ Et c‚Äôest exactement pour √ßa que, lorsqu‚Äôon traite des dossiers empil√©s, il vaut mieux commencer par ceux du bas. Sinon, on inverse l‚Äôordre d‚Äôarriv√©e‚Ä¶ et ce n‚Äôest plus une file d‚Äôattente, mais une injustice organis√©e.\nS\u0026rsquo;il n\u0026rsquo;y a que 6 places, que se passe-t-il si j\u0026rsquo;ai 7 amis ?\nD\u0026rsquo;abord, je te f√©licite d\u0026rsquo;avoir autant d\u0026rsquo;amis. Ensuite, on peut s\u0026rsquo;en sortir, en achetant un carnet d\u0026rsquo;adresse qui a plus de places, et on recopie nos amis dans ce nouveau carnet.\nC\u0026rsquo;est similaire en informatique, on fait un nouveau tableau, plus grand, et on recopie.\nHeureusement, en informatique on a invent√© une autre structure.\nLa liste ‚Äî comme le tableau, mais dynamique La liste (ou list en anglais), c‚Äôest comme un tableau, mais en mieux : la taille n‚Äôest pas fixe.\nTu peux ajouter ou supprimer des √©l√©ments √† tout moment, sans te soucier du nombre de places pr√©vues au d√©part. Et √† tout moment, tu peux demander : ‚ÄúCombien d‚Äô√©l√©ments j‚Äôai dans cette liste ?‚Äù ‚Äî et obtenir une r√©ponse fiable.\nC‚Äôest la version souple du tableau, celle qu‚Äôon trouve dans la majorit√© des langages de programmation modernes.\nRefaisons les exemples de pile et de file, mais cette fois-ci avec des listes.\nSi c\u0026rsquo;est une file : On ajoute les amis √† la fin, par exemple, Jean arrive apr√®s Reva : Amis Manutea Vai Purotu Heiarii Reva Jean index 0 1 2 3 4 5 Nombre d\u0026rsquo;√©l√©ments: 6\nEt on traite depuis le d√©but, on retire Manutea du tableau : Amis Vai Purotu Heiarii Reva Jean index 0 1 2 3 4 Nombre d\u0026rsquo;√©l√©ments: 5\nPour une pile : On ajoute les amis au d√©but, Jean arrive avant Manutea : Amis Jean Manutea Vai Purotu Heiarii Reva index 0 1 2 3 4 5 Nombre d\u0026rsquo;√©l√©ments: 6\nEt on traite toujours depuis le d√©but, on retire Jean du tableau : Amis Manutea Vai Purotu Heiarii Reva index 0 1 2 3 4 Nombre d\u0026rsquo;√©l√©ments: 5\nOn remarque qu\u0026rsquo;il n\u0026rsquo;y a plus la case (vide) et le nombre d\u0026rsquo;√©l√©ments change.\nInstant Dev Pour permettre cette souplesse, la liste est plus gourmande en calculs:\ncalcul √† la vol√©e du nombre d\u0026rsquo;√©l√©ments, r√©allocation de m√©moire. Mais en vrai, √† moins que tu ne codes un satellite, une carte embarqu√©e, ou une console des ann√©es 80, o√π chaque octet compte, il y a peu de raisons d‚Äôutiliser un tableau fixe. Une liste dynamique t\u0026rsquo;√©vitera bien des migraines.\nLe tableau et la liste sont des structures tr√®s basiques et tr√®s puissantes, elles sont les bases de beaucoup d\u0026rsquo;autres structures qu\u0026rsquo;on verra par la suite.\nLe tableau associatif ‚Äî ou comment indexer On avait pris l\u0026rsquo;exemple d\u0026rsquo;un carnet d\u0026rsquo;adresses qu\u0026rsquo;on avait mis dans un tableau ou dans une liste. C\u0026rsquo;est d√©j√† tr√®s bien de pouvoir stocker ta liste d\u0026rsquo;amis, mais si tu as des centaines d\u0026rsquo;amis et que tu veux appeler Vai pour aller √† la mer, tu vas gal√©rer pour chercher dans ce carnet d\u0026rsquo;adresse.\nEn effet, avec les 2 derni√®res structures, tu dois parcourir les √©l√©ments un par un, jusqu\u0026rsquo;√† tomber sur Vai. Tu vas perdre beaucoup de temps √† chercher son num√©ro, √ßa va t\u0026rsquo;√©nerver, tu vas l\u0026rsquo;appeler, lui dire \u0026ldquo;mais quelle id√©e d\u0026rsquo;avoir un pr√©nom qui commence par V!\u0026rdquo;, elle va s\u0026rsquo;√©nerver, vous ne serez plus amis, alors que tu voulais juste aller surfer.\nJe m\u0026rsquo;emporte un peu? Peut-√™tre.\nPour r√©soudre ce probl√®me, en informatique on a invent√© le tableau associatif (ou map en anglais). On utilise le tableau, et on va profiter de l\u0026rsquo;index pour justement indexer les √©l√©ments.\nPour cela, on a besoin de r√©fl√©chir un peu:\nOn sait que l\u0026rsquo;index est une position dans le tableau, donc un nombre On sait que les pr√©noms commencent par une lettre (oui, je suis s√©rieux), on va supposer que c\u0026rsquo;est une lettre de l\u0026rsquo;alphabet, et pas un caract√®re sp√©cial comme *$@ On sait qu\u0026rsquo;il y a 26 lettres dans l\u0026rsquo;alphabet =\u0026gt; Eur√™ka: On peut utiliser la 1√®re lettre du pr√©nom, la transformer en index en utilisant sa position dans l\u0026rsquo;alphabet, et associer le pr√©nom √† cet index. On dit que l\u0026rsquo;index est une cl√© et que le pr√©nom est une valeur par exemple:\nManutea =\u0026gt; M =\u0026gt; M est la 14√®me lettre de l\u0026rsquo;alphabet, donc Manutea sera le 14√®me √©l√©ment. Pour rappel, l\u0026rsquo;index commence √† 0, donc M = index 13. cl√©: 13 valeur: Manutea\nPour Heiarii on aura: cl√©: 7 valeur: Heiarii\nCe qui nous donne:\nAmis (vide) (vide) (vide) (vide) (vide) (vide) (vide) Heiarii (vide) (vide) (vide) (vide) (vide) Manutea (vide) Purotu (vide) Reva (vide) (vide) (vide) Vai (vide) (vide) (vide) (vide) index 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 Avec cette map, on pourra facilement acc√©der aux informations de Vai, puisqu\u0026rsquo;on pourra juste aller directement √† l\u0026rsquo;index 21.\nInstant Dev En vrai, pour calculer l\u0026rsquo;index, on utilise une fonction de hachage (hash en anglais) qui permet de transformer les cl√©s en index. C\u0026rsquo;est pour √ßa qu\u0026rsquo;on appelle √ßa un HashMap en Java. Oui mais moi je n\u0026rsquo;ai pas envie de m\u0026rsquo;emb√™ter √† compter sur mes doigts √† quelle position est la lettre V\u0026hellip;\nTu as raison, dans la vraie vie, dans ton carnet d\u0026rsquo;adresse pour chaque lettre tu as une encoche o√π la lettre y est marqu√©e, et tu notes les informations dans les pages qui correspondent √† cette lettre.\nCarnet d'adresses papier, en rouge les encoches ‚Äî source: Wikim√©dia En informatique c\u0026rsquo;est le m√™me principe, sauf qu\u0026rsquo;on ne peut pas utiliser de lettre comme index, alors on est oblig√© de trouver cette astuce.\nEt en plus, il est nul ton carnet d\u0026rsquo;adresse, comment je fais si j\u0026rsquo;ai 2 amis qui s\u0026rsquo;appellent Vai et Vahine? Je mets Vahine dans la case juste apr√®s? Et si j\u0026rsquo;ai des centaines d\u0026rsquo;amis comme tu le disais au d√©but, je fais comment pour les mettre dans les 26 cases ?\nOk, tranquille, pas de stress.\nEn informatique, on peut combiner les structures, plut√¥t que d\u0026rsquo;associer un pr√©nom √† une lettre, on va associer une liste de pr√©noms √† une lettre. Ci-dessous on r√©√©crit notre map et on ajoute Vahine :\nCl√©s 7 13 15 17 21 ‚Üì ‚Üì ‚Üì ‚Üì ‚Üì Heiarii Manutea Purotu Reva Vai Vahine Comme tu l\u0026rsquo;as remarqu√©, au lieu de mettre directement les pr√©noms dans les cases, il y a des fl√®ches qui pointent vers des listes. On appelle √ßa un pointeur (ou pointer en anglais). c‚Äôest un m√©canisme qui permet √† l‚Äôordinateur de dire \u0026ldquo;Va chercher les donn√©es ailleurs.\u0026rdquo; Plut√¥t que de stocker directement les valeurs, on stocke l‚Äôendroit o√π elles se trouvent.\nC\u0026rsquo;est la plus grande force de l\u0026rsquo;informatique, on peut combiner diff√©rents concepts abstraits pour r√©pondre √† notre besoin.\nL\u0026rsquo;ensemble ‚Äî une structure unique Si comme moi tu fais ta liste de courses durant la semaine en pr√©vision des grandes courses du dimanche, tu as peut-√™tre d√©j√† eu la liste qui ressemble √† :\nlait oeufs pops viande salade oeufs Tu remarques que les oeufs apparaissent 2 fois. On appelle √ßa un doublon.\n√áa peut arriver si lundi tu t\u0026rsquo;es fait une omelette avec les derniers oeufs, tu les as not√©s pour en racheter. Puis que vendredi, tu voulais faire un g√¢teau, mais tu t\u0026rsquo;es souvenu que tu n\u0026rsquo;avais plus d\u0026rsquo;oeufs\u0026hellip; et alors tu les as r√©√©crits.\nC\u0026rsquo;est tr√®s sp√©cifique comme explication\u0026hellip; C\u0026rsquo;est ce qui t\u0026rsquo;es arriv√©, pas vrai?\nTu n\u0026rsquo;as pas de preuve. Cette accusation est fausse.\nBref, la liste et le tableau n\u0026rsquo;ont aucun moyen d\u0026rsquo;emp√™cher la pr√©sence de doublons dans leurs √©l√©ments. C\u0026rsquo;est pour √ßa qu\u0026rsquo;en informatique on a invent√© l\u0026rsquo;ensemble (ou set en anglais), une structure o√π chaque √©l√©ment est unique.\nPar contre, le set n\u0026rsquo;est pas ordonn√© comme le tableau et la liste. Il n\u0026rsquo;y a pas d\u0026rsquo;index permettant d\u0026rsquo;acc√©der directement au 2√®me ou 6√®me √©l√©ment.\nInstant Dev En informatique, pour faire un set, on utilise en fait une map o√π la cl√© est l\u0026rsquo;√©l√©ment. Le calcul de hash nous garantit qu\u0026rsquo;il ne peut pas y avoir de doublon. Et on met une valeur arbitraire dans la valeur associ√©e, comme 1 ou PRESENT.\nSi on veut une structure ordonn√©e sans doublons, on peut :\ncoder une liste avec une fonction d\u0026rsquo;ajout qui rejette les doublons, transformer un set en liste, utiliser une structure sp√©cialis√©e, comme LinkedHashSet en Java üìå Exemples dans la vie r√©elle L\u0026#39;ensemble des ingr√©dients qu‚Äôil te reste dans le frigo L\u0026#39;ensemble des invit√©s √† ton anniversaire üíª Exemples en informatique L\u0026#39;ensemble des num√©ros de passeport en Polyn√©sie fran√ßaise L\u0026#39;ensemble de tes amis Facebook Le graphe ‚Äî ou comment appeler l\u0026rsquo;ami d\u0026rsquo;un ami d\u0026rsquo;un ami Tu pr√©pares ta liste d‚Äôinvit√©s pour ton anniversaire, tu comptes inviter tout ton carnet d\u0026rsquo;adresses.\nEt l√†, tu r√©alises que tu n‚Äôas pas le contact de Paul. Tu l\u0026rsquo;as crois√© en soir√©e et il √©tait cool, tu voudrais l\u0026rsquo;inviter\u0026hellip; mais tu as oubli√© de lui demander son num√©ro.\nHeureusement, tu sais que Purotu le conna√Æt.\nTu l\u0026rsquo;appelles\u0026hellip; zut, elle n\u0026rsquo;a pas son num√©ro. Mais elle te donne le num√©ro de Tiare, une autre amie de Paul. Tu appelles Tiare, tu te pr√©sentes, tu l\u0026rsquo;invite √©galement car tu n\u0026rsquo;es pas un sauvage. Et tu lui demandes le num√©ro de Paul.\nBingo, elle l\u0026rsquo;a, tu appelles Paul et il est chaud pour venir √† ton anniversaire.\nLes liens entre ces personnes peuvent √™tre repr√©sent√©s par un graphe (ou graph en anglais).\nEt ce que tu viens de faire, sans t\u0026rsquo;en rendre compte, c\u0026rsquo;est un parcours de graphe, un algorithme !\n%%{ init: { 'theme': 'base', 'themeVariables': { 'primaryColor': '#ddd', 'primaryTextColor': '#007acc', 'primaryBorderColor': '#007acc', 'lineColor': '#007acc' } } }%% graph TD A[Toi] --- B[Manutea] A --- C[Vai] A --- D[Purotu] A --- E[Heiarii] A --- F[Reva] A --- G[Jean] D --- H[Tiare] H --- I[Paul] Graphe de relation entre les personnes Ce graphe est non orient√©, c\u0026rsquo;est-√†-dire qu\u0026rsquo;il n\u0026rsquo;y a pas de sens entre les √©l√©ments. Chaque case est un noeud, et chaque trait est une ar√™te.\nEffectivement pour √©viter de f√¢cher les personnes, on ne va pas dire \u0026ldquo;Purotu est l\u0026rsquo;ami de Tiare, mais Tiare n\u0026rsquo;est pas l\u0026rsquo;ami de Purotu\u0026rdquo;.\nPar contre, on peut utiliser un graphe orient√© pour repr√©senter les appels que tu as pass√©s.\n%%{ init: { 'theme': 'base', 'themeVariables': { 'primaryColor': '#ddd', 'primaryTextColor': '#007acc', 'primaryBorderColor': '#007acc', 'lineColor': '#007acc' } } }%% graph TD A[Toi] --\u003e B[Manutea] A --\u003e C[Vai] A --\u003e D[Purotu] A --\u003e E[Heiarii] A --\u003e F[Reva] A --\u003e G[Jean] A --\u003e H[Tiare] A --\u003e I[Paul] Graphe des appels que tu as pass√© Ici, chaque case est un noeud, tout comme le graphe non orient√©, mais cette fois-ci, chaque fl√®che est une ar√™te, et donne le sens d\u0026rsquo;appel.\nOn a donc les m√™mes donn√©es, mais on utilise la structure adapt√©e √† ce qu\u0026rsquo;on veut repr√©senter.\nEt c\u0026rsquo;est quoi le parcours de graphe?\nJe suis heureux que tu poses cette question, mais ta question d√©passe le cadre de cet article.\nConclusion On a d√©j√† vu pas mal de choses, je te laisse relire, essayer de combiner les structures entre elles, te renseigner sur internet en cherchant \u0026ldquo;structures de donn√©es\u0026rdquo; ou \u0026ldquo;data structure\u0026rdquo;.\nIl existe beaucoup de structures de donn√©es, celles qui sont pr√©sent√©es dans cet article sont juste les plus basiques, celles qu\u0026rsquo;on apprend dans les premi√®res heures de cours de programmation.\nSi tu souhaites continuer cette aventure, tu peux regarder la suite ici: IMVV ‚Äî Section 1 ‚Äî Chapitre 3 ‚Äî Structures de contr√¥le et algorithme, apprendre √† r√©fl√©chir\n‚Üê Retour √† la section\n‚Üê Retour √† l‚Äôintroduction\n","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/les-bases/structures-de-donnees/","summary":"\u003cp\u003eDans le pr√©c√©dent article \u003ca href=\"../file-et-pile/\"\u003eIMVV ‚Äî Section 1 ‚Äî Chapitre 1 ‚Äî File ou Pile ? L\u0026rsquo;art de passer avant les autres\u003c/a\u003e on a d√©couvert les files et les piles. Cette fois, on va survoler plusieurs autres \u003cstrong\u003estructures de donn√©es\u003c/strong\u003e (\u003cem\u003edata structures\u003c/em\u003e en anglais) qu\u0026rsquo;on utilise tr√®s souvent en informatique\u0026hellip; et dans la vraie vie.\u003c/p\u003e\n\u003cp\u003eN\u0026rsquo;oublie pas que les objectifs de ces articles sont :\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eTe donner une meilleure compr√©hension des bases de l‚Äôinformatique,\u003c/li\u003e\n\u003cli\u003eT\u0026rsquo;inspirer pour analyser ou optimiser les situations du quotidien,\u003c/li\u003e\n\u003cli\u003eou peut-√™tre, qui sait, te donner envie d\u0026rsquo;explorer encore plus loin\u0026hellip; jusqu‚Äô√† en faire ton m√©tier.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"le-tableau--la-base-de-presque-tout\"\u003eLe tableau ‚Äî la base de presque tout\u003c/h2\u003e\n\u003cp\u003eTu as peut-√™tre remarqu√© dans le pr√©c√©dent article que la \u003cstrong\u003efile\u003c/strong\u003e et la \u003cstrong\u003epile\u003c/strong\u003e se ressemblent beaucoup. En r√©alit√©, on peut les repr√©senter toutes les deux avec la m√™me structure : un \u003cstrong\u003etableau\u003c/strong\u003e.\u003c/p\u003e","title":"IMVV ‚Äî Section 1 ‚Äî Chapitre 2 ‚Äî Autres structures de donn√©es, j'organise mon bordel"},{"content":"Dans l\u0026rsquo;article pr√©c√©dent IMVV ‚Äî Section 1 ‚Äî Chapitre 2 ‚Äî Autres structures de donn√©es, j\u0026rsquo;organise mon bordel, on s\u0026rsquo;√©tait arr√™t√© sur ta question :\nEt c\u0026rsquo;est quoi le parcours de graphe?\nDans cet article, on va parler des structures de contr√¥le (control flow statements en anglais), qu\u0026rsquo;on utilise dans des algorithmes (algorithms en anglais).\nAvant d\u0026rsquo;expliquer l\u0026rsquo;algorithme que tu as fait, le parcours de graphe, on doit expliquer les structures de contr√¥le.\nN\u0026rsquo;oublie pas que les objectifs de ces articles sont :\nTe donner une meilleure compr√©hension des bases de l‚Äôinformatique, T\u0026rsquo;inspirer pour analyser ou optimiser les situations du quotidien, ou peut-√™tre, qui sait, te donner envie d\u0026rsquo;explorer encore plus loin\u0026hellip; jusqu‚Äô√† en faire ton m√©tier. Pseudo-code ‚Äî l\u0026rsquo;art de la cuisine Quand tu fais un g√¢teau, tu r√©alises les actions suivantes:\nPr√©chauffer le four Verser la farine dans le saladier Casser les oeufs et mettre le contenu dans le saladier Verser le lait dans le saladier Remuer Verser la pr√©paration dans un moule Mettre le moule au four Attendre 20 minutes Eteindre le four Sortir le moule du four D√©mouler Toute cette suite d\u0026rsquo;√©tapes est ce qu\u0026rsquo;on appelle un algorithme, et la fa√ßon dont on l\u0026rsquo;a √©crit, √ßa s\u0026rsquo;appelle du pseudo-code, parce que √ßa ressemble √† un langage de programmation, mais ce n\u0026rsquo;en est pas un.\nMais pourquoi on appelle √ßa un algorithme? on peut pas juste dire une suite d\u0026rsquo;actions?\nJe te laisse chercher sur internet pourquoi on appelle √ßa un algorithme.\nLa boucle for ‚Äî ou comment √™tre fiu Ton meilleur ami Manutea te demande \u0026ldquo;Comment tu as fait pour inviter toutes ces personnes √† ton anniversaire ?\u0026rdquo;. Laquelle de ces 2 phrases dirais-tu :\nJ\u0026rsquo;ai appel√© Manutea, puis j\u0026rsquo;ai appel√© Vai, puis j\u0026rsquo;ai appel√© Purotu, puis j\u0026rsquo;ai appel√© Heiarii, puis j\u0026rsquo;ai appel√© Reva, puis j\u0026rsquo;ai appel√© Jean, puis j\u0026rsquo;ai appel√© Tiare, puis j\u0026rsquo;ai appel√© Paul J\u0026rsquo;ai pris mon carnet d\u0026rsquo;adresses, puis pour chaque contact, j\u0026rsquo;ai appel√© le num√©ro correspondant La 1√®re phrase est un algorithme sans boucle (loop en anglais) : chaque action est √©crite explicitement.\nLa 2√®me, elle, utilise une boucle ‚Äî tu r√©p√®tes la m√™me action pour chaque contact. Sans forc√©ment y penser, tu utilises aussi une variable : un espace dans ta t√™te pour m√©moriser un num√©ro, que tu remplaces √† chaque nouvel appel.\nCette mani√®re de r√©p√©ter une action avec une variable, c‚Äôest exactement ce qu‚Äôun ordinateur fait quand on lui demande de parcourir une liste.\nSi tu relis bien la 2√®me phrase, tu verras que pour chaque est en gras. En anglais, pour chaque se dit for each, c\u0026rsquo;est pour √ßa qu\u0026rsquo;on l\u0026rsquo;appelle la boucle for dans la plupart des langages.\nSi on essayait d\u0026rsquo;√©crire un algorithme, sous forme de pseudo-code simple pour d√©crire la 2√®me phrase, √ßa donnerait :\nDans mon carnet d\u0026#39;adresses, pour chaque contact: J\u0026#39;ai appel√© le num√©ro correspondant au contact J\u0026#39;ai invit√© l\u0026#39;ami Fin pour \u0026ldquo;Dans mon carnet d\u0026rsquo;adresses, pour chaque contact\u0026rdquo; marque le d√©but de la boucle, et \u0026ldquo;Fin pour\u0026rdquo; marque la fin de la boucle.\nEntre ces 2 lignes, les actions \u0026ldquo;J\u0026rsquo;ai appel√© le num√©ro correspondant au contact\u0026rdquo; et \u0026ldquo;J\u0026rsquo;ai invit√© l\u0026rsquo;ami\u0026rdquo; forment ce qu\u0026rsquo;on appelle un bloc d\u0026rsquo;instructions.\nPar convention, on indente ce bloc ‚Äî on le d√©cale vers la droite ‚Äî pour montrer visuellement qu\u0026rsquo;il est √† l\u0026rsquo;int√©rieur de la boucle.\nOk, et quel est le rapport entre la boucle for et fiu comme marqu√© dans le titre ?\nSi on devait √©crire l\u0026rsquo;algorithme de la 1√®re phrase, √ßa donnerait :\nJ\u0026#39;ai appel√© Manutea J\u0026#39;ai appel√© Vai J\u0026#39;ai appel√© Purotu J\u0026#39;ai appel√© Heiarii J\u0026#39;ai appel√© Reva J\u0026#39;ai appel√© Jean J\u0026#39;ai appel√© Tiare J\u0026#39;ai appel√© Paul Chaque ligne est une action, donc il faut √©crire autant de lignes qu\u0026rsquo;il y a de contacts dans ta liste de contacts. Maintenant, que se passerait-il si tu devais inviter 100 personnes? Tu serais fiu.\nAlors qu\u0026rsquo;avec la boucle, tu n\u0026rsquo;as pas besoin de changer ton algorithme, c\u0026rsquo;est le m√™me, que tu aies 6 contacts ou 100.\nOui mais dans la vraie vie je dois quand m√™me appeler les amis un par un\nCet exemple n‚Äôest pas l√† pour dire que tu vas programmer ton t√©l√©phone ‚Äî mais pour te faire sentir la puissance de la boucle : un seul bloc, quelle que soit la longueur de ta liste.\nDans la vraie vie, tu fais un groupe Facebook avec tous tes amis et tu postes des messages d\u0026rsquo;informations dans le groupe pour organiser, idem pour un groupe SMS. Si t\u0026rsquo;es old school, tu postes un message dans le journal local et viendra qui verra. D\u0026rsquo;ailleurs j\u0026rsquo;en parlerai dans de prochains articles.\nLa boucle while ‚Äî ou comment faire ses devoirs avant d\u0026rsquo;aller jouer Quand tu √©tais plus jeune, on t\u0026rsquo;a s√ªrement d√©j√† dit \u0026ldquo;Fais d\u0026rsquo;abord tes devoirs, ensuite tu peux aller jouer\u0026rdquo;, ou autrement dit \u0026quot;Tant que tu n\u0026rsquo;a pas fini tes devoirs, tu travailles, ensuite tu peux aller jouer\u0026quot;.\nSi on devait √©crire cet algorithme, √ßa donnerait:\nTant que je n\u0026#39;ai pas fini mes devoirs: Je fais mes devoirs Fin tant que Je vais jouer \u0026ldquo;Tant que je n\u0026rsquo;ai pas fini mes devoirs\u0026rdquo; marque le d√©but de la boucle, et \u0026ldquo;Fin tant que\u0026rdquo; marque la fin de la boucle.\nEntre ces 2 lignes, l\u0026rsquo;action \u0026ldquo;Je fais mes devoirs\u0026rdquo; forme le bloc d\u0026rsquo;instructions.\nTu l\u0026rsquo;auras remarqu√©, c\u0026rsquo;est tr√®s similaire √† la boucle for, sauf qu\u0026rsquo;au lieu de parcourir des √©l√©ments, on v√©rifie une condition, et on r√©p√®te la boucle si la condition n\u0026rsquo;est remplie.\nOn appelle √ßa une boucle while, car Tant que se dit while en anglais.\nEnsuite, une fois que les devoirs sont finis, on sort de la boucle, on fait la suite des instructions, donc \u0026ldquo;Je vais jouer\u0026rdquo;. On aurait aussi pu avoir d\u0026rsquo;autres instructions apr√®s la boucle for, c\u0026rsquo;est juste que l\u0026rsquo;exemple ne s\u0026rsquo;y pr√™tait pas.\nMais alors‚Ä¶ pourquoi deux types de boucles si elles font (presque) la m√™me chose ? Pourquoi une boucle for, et une boucle while ?\nEn fait, en fonction du probl√®me qu\u0026rsquo;on veut r√©soudre :\ndans certains cas on pourra compter, et dans ce cas on pr√©f√®rera utiliser une boucle for dans certains cas on ne pourra pas compter, et dans ce cas on pr√©f√®rera utiliser une boucle while Par exemple, pour un enfant qui joue dehors:\nTant qu\u0026#39;il fait beau: Je joue Fin tant que Ici, impossible de compter.\nMais tu commences peut-√™tre √† te rendre compte d\u0026rsquo;une supercherie.\nInstant Dev üí° En r√©alit√©, toutes les boucles for peuvent √™tre r√©√©crites en boucle while.\nLa boucle for n‚Äôest qu‚Äôune boucle while optimis√©e, √©crite pour √™tre plus simple √† lire‚Ä¶ quand on sait compter.\nLes 2 types de boucles sont des instructions d\u0026rsquo;it√©ration, √† la diff√©rence des instructions simples comme \u0026ldquo;Je joue\u0026rdquo;, les instructions d\u0026rsquo;it√©ration permettre d\u0026rsquo;ex√©cuter des blocs d\u0026rsquo;instructions de mani√®re r√©p√©t√©e.\nBravo, tu commences √† r√©fl√©chir comme un d√©veloppeur !\nExplications\nPour rappel:\ndans une liste, l\u0026rsquo;index commence √† 0, dans une liste, le dernier index est √©gal au nombre d\u0026rsquo;√©l√©ments de la liste moins 1 Amis Manutea Vai Purotu Heiarii Reva Jean Tiare Paul index 0 1 2 3 4 5 6 7 Nombre d\u0026rsquo;√©l√©ments: 8\nune variable c\u0026rsquo;est juste un espace m√©moire o√π on stocke une donn√©e (un tableau, une liste, un pr√©nom, un num√©ro de t√©l√©phone) Si on reprend l\u0026rsquo;exemple de la boucle for:\nDans mon carnet d\u0026#39;adresses, pour chaque contact: J\u0026#39;appelle le num√©ro correspondant au contact J\u0026#39;invite l\u0026#39;ami Fin pour Derri√®re, voici plut√¥t ce que fait un ordinateur (de mani√®re simplifi√©e) :\nJe cr√©e une variable \u0026#34;index\u0026#34;, qui vaut 0 Tant que \u0026#34;index\u0026#34; est inf√©rieur au nombre d\u0026#39;√©l√©ments (8) du carnet d\u0026#39;adresses: Je regarde le contact qui se trouve √† l\u0026#39;\u0026#34;index\u0026#34; dans le carnet d\u0026#39;adresses Je r√©cup√®re son num√©ro Je l\u0026#39;invite \u0026#34;index\u0026#34; prend la valeur \u0026#34;index\u0026#34; + 1 Fin tant que Comme tu le vois, c\u0026rsquo;est un peu plus compliqu√©, c\u0026rsquo;est pour √ßa qu\u0026rsquo;on pr√©f√®re utiliser une boucle for quand on peut compter.\nL\u0026rsquo;instruction conditionnelle ‚Äî ou pourquoi il faut respecter le code de la route Juste au-dessus, on parlait de condition dans la boucle while. Mais on n\u0026rsquo;a jamais expliqu√© ce que c\u0026rsquo;√©tait.\nUne condition est une question qu\u0026rsquo;on se pose, et la r√©ponse est soit ‚Äúoui‚Äù, soit ‚Äúnon‚Äù ‚Äî jamais les deux, jamais \u0026ldquo;un peu\u0026rdquo;.\nQuand on √©crit \u0026ldquo;Tant que je n\u0026rsquo;ai pas fini mes devoirs\u0026rdquo;, √† chaque r√©p√©tition on pose la question \u0026ldquo;Est-ce que j\u0026rsquo;ai fini mes devoirs?\u0026rdquo;.\nEn informatique, comme dans la vraie vie, une condition doit √™tre claire.\nOn peut utiliser ce concept pour faire des branchements dans notre code, dans une instruction conditionnelle (conditional statement en anglais).\nPrenons un exemple simple : tu es en voiture, tu approches un feu tricolore. Il est vert.\nQue fais-tu si le feu passe √† l‚Äôorange juste devant toi‚ÄØ?\nVoici un algorithme qui repr√©sente cette situation :\nSi le feu passe au orange, alors: Tu t\u0026#39;arr√™tes Sinon (c\u0026#39;est toujours vert): Tu continues et traverse l\u0026#39;intersection Fin si \u0026ldquo;Si le feu passe au orange,\u0026rdquo; marque le d√©but de l\u0026rsquo;instruction conditionnelle, \u0026ldquo;alors\u0026rdquo; marque la branche du si, \u0026ldquo;Sinon\u0026rdquo; marque la branche du sinon, et \u0026ldquo;Fin si\u0026rdquo; marque la fin de l\u0026rsquo;instruction conditionnelle.\nDe la m√™me mani√®re que pour les boucles, chaque branche est un bloc d\u0026rsquo;instructions. Comme pour les boucles, chaque branche forme un bloc d‚Äôinstructions, qu‚Äôon indente pour bien le rep√©rer.\nPour visualiser, imagine un arbre : chaque fois qu‚Äôune condition est test√©e, tu choisis une branche √† suivre. Le chemin d√©pend de tes r√©ponses.\nRevenons √† notre parcours de graphe Rappels Tu avais appel√© tes amis pour les inviter √† ton anniversaire, et tu avais √©t√© jusqu\u0026rsquo;au bout du monde, en sautant de relations en relations, pour inviter Paul. Tu avais fait ces actions :\nTu comptes inviter tout ton carnet d\u0026#39;adresses. Tu r√©alises que tu n‚Äôas pas le contact de Paul. Tu l\u0026#39;as crois√© en soir√©e et il √©tait cool, tu voudrais l\u0026#39;inviter... mais t\u0026#39;as oubli√© de lui demander son num√©ro. Heureusement, tu sais que Purotu le conna√Æt. Tu l\u0026#39;appelles... zut, elle n\u0026#39;a pas son num√©ro. Mais elle te donne le num√©ro de Tiare, une autre amie de Paul. Tu appelles Tiare, tu te pr√©sentes, tu l\u0026#39;invites √©galement car tu n\u0026#39;es pas un sauvage. Et tu lui demandes le num√©ro de Paul. Bingo, elle l\u0026#39;a, tu appelles Paul et il est chaud pour venir √† ton anniversaire. Ci-dessous se trouve le graphe de relation entre les personnes, un graphe non orient√©.\n%%{ init: { 'theme': 'base', 'themeVariables': { 'primaryColor': '#ddd', 'primaryTextColor': '#007acc', 'primaryBorderColor': '#007acc', 'lineColor': '#007acc' } } }%% graph TD A[Toi] --- B[Manutea] A --- C[Vai] A --- D[Purotu] A --- E[Heiarii] A --- F[Reva] A --- G[Jean] D --- H[Tiare] H --- I[Paul] Graphe de relation entre les personnes En se basant sur ce qu\u0026rsquo;on a appris dans cet article, on va √©crire un algorithme pour repr√©senter les actions que tu as r√©alis√©es pour inviter tes amis :\n# √âtape 1 : inviter tous mes amis directs (les noeuds les plus proches de \u0026#34;Toi\u0026#34; dans le graphe) Je cr√©e une variable \u0026#34;liste d\u0026#39;amis\u0026#34;, contenant tous mes amis directs Je cr√©e une variable \u0026#34;ami\u0026#34;, le contact courant Dans la \u0026#34;liste d\u0026#39;amis\u0026#34;, pour chaque \u0026#34;ami\u0026#34; : J\u0026#39;appelle \u0026#34;ami\u0026#34; Si \u0026#34;ami\u0026#34; r√©pond, alors : Je l\u0026#39;invite √† mon anniversaire Fin si Fin pour # √âtape 2 : retrouver Paul (en parcourant le graphe en largeur) Je cr√©e une variable \u0026#34;file\u0026#34;, initialis√©e avec la \u0026#34;liste d\u0026#39;amis\u0026#34; Je cr√©e une variable \u0026#34;visit√©s\u0026#34;, une liste vide Tant que la \u0026#34;file\u0026#34; n‚Äôest pas vide : Je prends le premier √©l√©ment de la \u0026#34;file\u0026#34;, je le stocke dans \u0026#34;ami\u0026#34; Si \u0026#34;ami\u0026#34; n‚Äôest pas dans \u0026#34;visit√©s\u0026#34;, alors : J‚Äôajoute \u0026#34;ami\u0026#34; √† \u0026#34;visit√©s\u0026#34; J\u0026#39;appelle \u0026#34;ami\u0026#34; Si \u0026#34;ami\u0026#34; r√©pond, alors : Je lui demande s‚Äôil conna√Æt Paul Si \u0026#34;ami\u0026#34; me donne le num√©ro de Paul : Je cr√©e une variable \u0026#34;Paul\u0026#34; J\u0026#39;appelle \u0026#34;Paul\u0026#34; Si \u0026#34;Paul\u0026#34; r√©pond, alors : Je l‚Äôinvite √† mon anniversaire Je termine la recherche Fin si Sinon : Je r√©cup√®re la liste des amis de \u0026#34;ami\u0026#34; Pour chaque \u0026#34;contact\u0026#34; dans cette liste : J‚Äôajoute \u0026#34;contact\u0026#34; √† la \u0026#34;file\u0026#34; Fin pour Fin si Fin si Fin si Fin tant que √Ä premi√®re vue, √ßa a l\u0026rsquo;air compliqu√©. Mais en fait si tu prends le temps de d√©cortiquer, de bien regarder, tu verras que ce sont juste les actions que tu as r√©alis√©s plus haut, mais dans un langage plus proche de ce que fait un ordinateur.\nLa seule chose qu\u0026rsquo;on a fait en plus des concepts de base, c\u0026rsquo;est qu\u0026rsquo;on a combin√© les structures de contr√¥le et les structures de donn√©es, et le tout nous donne notre algorithme de parcours de graphe !\nInstant Dev üí° On a parcouru le graphe en largeur, c\u0026rsquo;est-√†-dire qu\u0026rsquo;on a d\u0026rsquo;abord regard√© les noeuds voisins de notre point de d√©part.\nD\u0026rsquo;autres algorithmes connus et enseign√©s en informatique sont le parcours en profondeur, l\u0026rsquo;algorithme de Dijkstra, A* et Floyd-Warshall, tu peux regarder sur internet si √ßa t\u0026rsquo;int√©resse.\nConclusion Dans cet article on a appris ce que sont :\nLes structures de contr√¥le, Les boucles, Les conditions, Les variables, Les algorithmes. Il existe d\u0026rsquo;autres structures de contr√¥le, des types de variables, et des algorithmes qu\u0026rsquo;on peut r√©utiliser pour r√©pondre √† beaucoup de probl√®mes. Comme d\u0026rsquo;habitude, je te laisse chercher sur internet si tu veux aller plus loin.\nMais le plus important, c\u0026rsquo;est que tu commences √† r√©fl√©chir comme un d√©veloppeur, et √† comprendre le pseudo-code. Dans la vraie vie, si tu as un probl√®me complexe √† r√©soudre, tu peux essayer de l\u0026rsquo;√©crire comme on l\u0026rsquo;a fait pour le parcours de graphe. Prends ton temps et d√©compose le probl√®me.\nNous avons fini cette section \u0026ldquo;IMMV ‚Äî Section 1 ‚Äî Les Bases : structures et contr√¥le\u0026rdquo;, dans cette section, nous avons √©galement vu les structures de donn√©es.\nDans la prochaine section, IMMV ‚Äî Section 2 ‚Äî L\u0026rsquo;ex√©cution : comment faire des actions ?, nous verrons que l\u0026rsquo;ordinateur et l\u0026rsquo;humain font les actions de mani√®re tr√®s similaire.\n‚Üê Retour √† la section\n‚Üê Retour √† l‚Äôintroduction\n","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/les-bases/structures-de-controle/","summary":"\u003cp\u003eDans l\u0026rsquo;article pr√©c√©dent \u003ca href=\"../structures-de-donnees/\"\u003eIMVV ‚Äî Section 1 ‚Äî Chapitre 2 ‚Äî Autres structures de donn√©es, j\u0026rsquo;organise mon bordel\u003c/a\u003e, on s\u0026rsquo;√©tait arr√™t√© sur ta question :\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eEt c\u0026rsquo;est quoi le parcours de graphe?\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eDans cet article, on va parler des \u003cstrong\u003estructures de contr√¥le\u003c/strong\u003e (\u003cem\u003econtrol flow statements\u003c/em\u003e en anglais), qu\u0026rsquo;on utilise dans des \u003cstrong\u003ealgorithmes\u003c/strong\u003e (\u003cem\u003ealgorithms\u003c/em\u003e en anglais).\u003c/p\u003e\n\u003cp\u003eAvant d\u0026rsquo;expliquer l\u0026rsquo;algorithme que tu as fait, le \u003cstrong\u003eparcours de graphe\u003c/strong\u003e, on doit expliquer les structures de contr√¥le.\u003c/p\u003e","title":"IMVV ‚Äî Section 1 ‚Äî Chapitre 3 ‚Äî Structures de contr√¥le et algorithme, apprendre √† r√©fl√©chir"},{"content":"Pr√©c√©demment, on a vu qu\u0026rsquo;en rajoutant des serveurs, on pouvait servir plus de familles. Dans cette section on verra diff√©rents tips permettant d\u0026rsquo;optimiser un programme existant et la vie r√©elle.\nChapitres IMVV ‚Äî Section 3 ‚Äî Chapitre 1 ‚Äî La m√©moire, ou comment √©viter les p√©nuries dans un magasin IMVV ‚Äî Section 3 ‚Äî Chapitre 2 ‚Äî M√©mo√Øsation et Lazy loading, les techniques du fain√©ant ultime ","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/optimisation/optimisation/","summary":"\u003cp\u003ePr√©c√©demment, on a vu qu\u0026rsquo;en rajoutant des serveurs, on pouvait servir plus de familles. Dans cette section on verra diff√©rents tips permettant d\u0026rsquo;optimiser un programme existant et la vie r√©elle.\u003c/p\u003e\n\u003ch1 id=\"chapitres\"\u003eChapitres\u003c/h1\u003e\n\n\n\u003cul\u003e\n  \n\t\t\n\t\n\t\t\n    \t\n      \t\u003cli\u003e\u003ca href=\"/blog.dev/posts/miroir-informatique-vraie-vie/optimisation/memoire/\"\u003eIMVV ‚Äî Section 3 ‚Äî Chapitre 1 ‚Äî La m√©moire, ou comment √©viter les p√©nuries dans un magasin\u003c/a\u003e\u003c/li\u003e\n    \t\n  \t\n\t\n\t\t\n    \t\n      \t\u003cli\u003e\u003ca href=\"/blog.dev/posts/miroir-informatique-vraie-vie/optimisation/memoisation/\"\u003eIMVV ‚Äî Section 3 ‚Äî Chapitre 2 ‚Äî M√©mo√Øsation et Lazy loading, les techniques du fain√©ant ultime\u003c/a\u003e\u003c/li\u003e\n    \t\n  \t\n\t\n\u003c/ul\u003e","title":"IMMV ‚Äî Section 3 ‚Äî L'optimisation : comment se faire passer pour un coach de vie"},{"content":"Dans cette section, nous verrons comment les actions sont ex√©cut√©es, par les ordinateurs et par les personnes. Et on verra quelques pistes pour r√©pondre √† une accumulation de t√¢ches.\nChapitres IMMV ‚Äî Section 2 ‚Äî Chapitre 1 ‚Äî Synchrone et Asynchrone, ou comment r√©agir au changement IMMV ‚Äî Section 2 ‚Äî Chapitre 2 ‚Äî Monothread, Multithread, Parall√©lisme et Concurrence, je ne peux pas tout faire en m√™me temps ! ","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/l-execution/l-execution/","summary":"\u003cp\u003eDans cette section, nous verrons comment les actions sont ex√©cut√©es, par les ordinateurs et par les personnes. Et on verra quelques pistes pour r√©pondre √† une accumulation de t√¢ches.\u003c/p\u003e\n\u003ch1 id=\"chapitres\"\u003eChapitres\u003c/h1\u003e\n\n\n\u003cul\u003e\n  \n\t\t\n\t\n\t\t\n    \t\n      \t\u003cli\u003e\u003ca href=\"/blog.dev/posts/miroir-informatique-vraie-vie/l-execution/sync-async/\"\u003eIMMV ‚Äî Section 2 ‚Äî Chapitre 1 ‚Äî Synchrone et Asynchrone, ou comment r√©agir au changement\u003c/a\u003e\u003c/li\u003e\n    \t\n  \t\n\t\n\t\t\n    \t\n      \t\u003cli\u003e\u003ca href=\"/blog.dev/posts/miroir-informatique-vraie-vie/l-execution/threads/\"\u003eIMMV ‚Äî Section 2 ‚Äî Chapitre 2 ‚Äî Monothread, Multithread, Parall√©lisme et Concurrence, je ne peux pas tout faire en m√™me temps !\u003c/a\u003e\u003c/li\u003e\n    \t\n  \t\n\t\n\u003c/ul\u003e","title":"IMMV ‚Äî Section 2 ‚Äî L'ex√©cution : comment faire des actions ?"},{"content":"Dans cette section, nous verrons les bases permettant de stocker et manipuler des donn√©es.\nChapitres IMVV ‚Äî Section 1 ‚Äî Chapitre 1 ‚Äî File ou Pile ? L\u0026#39;art de passer avant les autres IMVV ‚Äî Section 1 ‚Äî Chapitre 2 ‚Äî Autres structures de donn√©es, j\u0026#39;organise mon bordel IMVV ‚Äî Section 1 ‚Äî Chapitre 3 ‚Äî Structures de contr√¥le et algorithme, apprendre √† r√©fl√©chir ","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/les-bases/les-bases/","summary":"\u003cp\u003eDans cette section, nous verrons les bases permettant de stocker et manipuler des donn√©es.\u003c/p\u003e\n\u003ch1 id=\"chapitres\"\u003eChapitres\u003c/h1\u003e\n\n\n\u003cul\u003e\n  \n\t\t\n\t\n\t\t\n    \t\n      \t\u003cli\u003e\u003ca href=\"/blog.dev/posts/miroir-informatique-vraie-vie/les-bases/file-et-pile/\"\u003eIMVV ‚Äî Section 1 ‚Äî Chapitre 1 ‚Äî File ou Pile ? L\u0026#39;art de passer avant les autres\u003c/a\u003e\u003c/li\u003e\n    \t\n  \t\n\t\n\t\t\n    \t\n      \t\u003cli\u003e\u003ca href=\"/blog.dev/posts/miroir-informatique-vraie-vie/les-bases/structures-de-donnees/\"\u003eIMVV ‚Äî Section 1 ‚Äî Chapitre 2 ‚Äî Autres structures de donn√©es, j\u0026#39;organise mon bordel\u003c/a\u003e\u003c/li\u003e\n    \t\n  \t\n\t\n\t\t\n    \t\n      \t\u003cli\u003e\u003ca href=\"/blog.dev/posts/miroir-informatique-vraie-vie/les-bases/structures-de-controle/\"\u003eIMVV ‚Äî Section 1 ‚Äî Chapitre 3 ‚Äî Structures de contr√¥le et algorithme, apprendre √† r√©fl√©chir\u003c/a\u003e\u003c/li\u003e\n    \t\n  \t\n\t\n\u003c/ul\u003e","title":"IMMV ‚Äî Section 1 ‚Äî Les bases : structures et contr√¥le"},{"content":"\u0026lsquo;Ia ora na,\nL\u0026rsquo;informatique semble souvent obscure pour beaucoup. Quand je dis que je suis ing√©nieur informatique, on me demande r√©guli√®rement : ¬´ Mais tu fais quoi exactement ? ¬ª.\nAvec le temps, j‚Äôai pris l‚Äôhabitude de vulgariser mon m√©tier. Et ce qui fonctionne le mieux, ce sont les exemples concrets tir√©s de la vie quotidienne.\nEn √©cole d\u0026rsquo;ing√©nieur, j\u0026rsquo;apprenais beaucoup plus facilement l\u0026rsquo;informatique en partant de situations r√©elles. √Ä travers cette s√©rie d‚Äôarticles, \u0026ldquo;L‚Äôinformatique, un miroir de la vraie vie\u0026rdquo; (abr√©g√© IMVV), je vais tenter d‚Äôexpliquer des concepts informatiques en m‚Äôappuyant sur des sc√®nes famili√®res du quotidien, sur un ton l√©ger. Parce que finalement, coder un programme ou g√©rer une file d‚Äôattente au magasin, ce n‚Äôest pas si diff√©rent.\nInformations de lecture Avant de lire les articles list√©s en bas de cette page, quelques informations pour vous faciliter la lecture :\nIl y a un mode sombre et un mode clair : En haut de chaque page se trouve une ic√¥ne pour interchanger entre les modes de lecture sombre et clair\nJ\u0026rsquo;utiliserai des apart√©s pour les d√©veloppeurs,\nInstant Dev Ceci est un apart√© pour les d√©veloppeurs, si tu es non d√©veloppeur tu peux lire, mais tu auras peut-√™tre mal √† la t√™te. J\u0026rsquo;utiliserai des interjections de lecteur, J\u0026rsquo;interviens comme si j\u0026rsquo;√©tais toi, lecteur, pour aider l\u0026rsquo;auteur de ce blog √† rendre ces articles dynamiques\nCette s√©rie d\u0026rsquo;articles n\u0026rsquo;est pas un cours d\u0026rsquo;informatique, vous n\u0026rsquo;apprendrez pas √† d√©velopper juste en suivant ces articles. Mot de fin Que tu sois curieux, d√©butant ou simplement en qu√™te de sens dans ce monde num√©rique, cette s√©rie pourrait bien t‚Äôapporter quelque chose.\nTu y trouveras peut-√™tre :\nune meilleure compr√©hension des bases de l‚Äôinformatique, des id√©es pour analyser ou optimiser les situations du quotidien, ou m√™me, qui sait, l‚Äôenvie de plonger plus loin dans ce domaine‚Ä¶ jusqu‚Äô√† en faire ton m√©tier. Bien s√ªr, cette s√©rie n‚Äôexplorera qu‚Äôune infime partie de ce vaste domaine qu‚Äôest l‚Äôinformatique. Apr√®s tout, peut-on vraiment expliquer enti√®rement l\u0026rsquo;informatique\u0026hellip; un domaine qui, justement, est le miroir de la vie* ?\n*: cette analogie est √† prendre avec recul : l‚Äôinformatique ne refl√®te pas toute la complexit√© de la vie.\nLes articles de la s√©rie (En cours de r√©daction) IMMV ‚Äî Section 1 ‚Äî Les bases : structures et contr√¥le IMMV ‚Äî Section 1 ‚Äî Les bases : structures et contr√¥le IMVV ‚Äî Section 1 ‚Äî Chapitre 1 ‚Äî File ou Pile ? L\u0026#39;art de passer avant les autres IMVV ‚Äî Section 1 ‚Äî Chapitre 2 ‚Äî Autres structures de donn√©es, j\u0026#39;organise mon bordel IMVV ‚Äî Section 1 ‚Äî Chapitre 3 ‚Äî Structures de contr√¥le et algorithme, apprendre √† r√©fl√©chir IMMV ‚Äî Section 2 ‚Äî L\u0026#39;ex√©cution : comment faire des actions ? IMMV ‚Äî Section 2 ‚Äî L\u0026#39;ex√©cution : comment faire des actions ? IMMV ‚Äî Section 2 ‚Äî Chapitre 1 ‚Äî Synchrone et Asynchrone, ou comment r√©agir au changement IMMV ‚Äî Section 2 ‚Äî Chapitre 2 ‚Äî Monothread, Multithread, Parall√©lisme et Concurrence, je ne peux pas tout faire en m√™me temps ! IMMV ‚Äî Section 3 ‚Äî L\u0026#39;optimisation : comment se faire passer pour un coach de vie IMMV ‚Äî Section 3 ‚Äî L\u0026#39;optimisation : comment se faire passer pour un coach de vie IMVV ‚Äî Section 3 ‚Äî Chapitre 1 ‚Äî La m√©moire, ou comment √©viter les p√©nuries dans un magasin IMVV ‚Äî Section 3 ‚Äî Chapitre 2 ‚Äî M√©mo√Øsation et Lazy loading, les techniques du fain√©ant ultime ","permalink":"http://localhost:1313/blog.dev/posts/miroir-informatique-vraie-vie/introduction/","summary":"\u003cp\u003e\u0026lsquo;Ia ora na,\u003c/p\u003e\n\u003cp\u003eL\u0026rsquo;informatique semble souvent obscure pour beaucoup. Quand je dis que je suis ing√©nieur informatique, on me demande r√©guli√®rement : ¬´ Mais tu fais quoi exactement ? ¬ª.\u003c/p\u003e\n\u003cp\u003eAvec le temps, j‚Äôai pris l‚Äôhabitude de vulgariser mon m√©tier. Et ce qui fonctionne le mieux, ce sont les exemples concrets tir√©s de la vie quotidienne.\u003c/p\u003e\n\u003cp\u003eEn √©cole d\u0026rsquo;ing√©nieur, j\u0026rsquo;apprenais beaucoup plus facilement l\u0026rsquo;informatique en partant de situations r√©elles.\n√Ä travers cette s√©rie d‚Äôarticles, \u003cstrong\u003e\u0026ldquo;L‚Äôinformatique, un miroir de la vraie vie\u0026rdquo;\u003c/strong\u003e (abr√©g√© \u003cem\u003eIMVV\u003c/em\u003e), je vais tenter d‚Äôexpliquer des concepts informatiques en m‚Äôappuyant sur des sc√®nes famili√®res du quotidien, sur un ton l√©ger.\nParce que finalement, coder un programme ou g√©rer une file d‚Äôattente au magasin, ce n‚Äôest pas si diff√©rent.\u003c/p\u003e","title":"IMMV - Introduction - L'informatique, un miroir de la vraie vie"},{"content":"Introduction Cet article est un aper√ßu tr√®s rapide des moyens de paiement en Polyn√©sie Fran√ßaise.\nUpdate (12/05/2022): suite √† quelques feedback, je me rend compte que cet article est √† destination des d√©veloppeurs de site de e-shopping, des commer√ßants, de mes confr√®res mon√©ticiens. Cet article sera complexe √† lire si vous n\u0026rsquo;avez jamais travaill√© avec un TPE, avec une plateforme de paiement, avec des cartes bancaires.\nDisclaimer: Au moment o√π j\u0026rsquo;√©cris cet article, je travaille √† l\u0026rsquo;Oc√©anienne des Services Bancaires (OSB), Ces articles ne sont pas sponsoris√©s par OSB, et j\u0026rsquo;encourage les gens √† faire des tutoriels pour les solutions des autres fournisseurs de solutions de paiement.\nLes diff√©rents types de carte En Polyn√©sie Fran√ßaise, il est possible de payer avec plusieurs types de cartes.\nCarte Bancaire (anciennement Carte Bleue, co-brand√©es ou non de Visa ou Mastercard), American Express (AMEX), Cartes privatives (Socredo Verte / Gold, Banque de Polyn√©sie Hoa, CCP de Fare Rata, Carte Tiare de la Banque de Tahiti), Union Pay International (UPI), Discover, Japan Credit Bureau (JCB) Les 3 derniers types de cartes sont surtout utilis√©s par les touristes.\nLes cartes privatives composent la majorit√© des cartes d√©tenues par les habitants de la Polyn√©sie Fran√ßaise.\nPourquoi autant de personnes ont une carte privative ? Les cartes privatives sont propos√©es par les diff√©rentes banques locales (√† l\u0026rsquo;exception d\u0026rsquo;OFINA qui √©met exclusivement les cartes AMEX). Il s\u0026rsquo;agit des banques Socredo, Banque de Tahiti, Banque de Polyn√©sie, et Fare Rata.\nLes cartes privatives sont soumises √† des r√©glementations et des frais moins co√ªteux que les cartes internationales.\nEn outre, elles sont uniquement r√©gul√©es par les banques locales contrairement aux cartes bancaires internationales, qui sont non seulement r√©gul√©es par les banques locales, mais aussi par les r√©seaux internationaux (CB, Visa, Mastercard, Union Pay, etc.).\nC\u0026rsquo;est en partie √† cause de ces r√©glementations et frais moins co√ªteux que les clients des banques doivent remplir moins de conditions pour avoir une carte privative. C\u0026rsquo;est pour cela que les cartes privatives sont plus r√©pandues sur le territoire.\nNotes:\nLes r√©seaux peuvent d√©cider d\u0026rsquo;appliquer des amendes voire de d√©sactiver le flux vers un acteur mon√©taire (banque, processeur de paiement, etc.) si celui-ci ne respecte pas la r√©glementation. Cette r√©glementation est mise √† jour r√©guli√®rement.\nPour les cartes privatives, ce sont les banques locales qui imposent leur r√©glementation, par abus de langage, on parle aussi de r√©seau privatif pour d√©signer l\u0026rsquo;ensemble de ces banques.\nCes r√©glementations sont suivies par les banques centrales des pays, par exemple l\u0026rsquo;IEOM en Polyn√©sie Fran√ßaise.\nJ\u0026rsquo;ai inclus la carte Tiare de la Banque de Tahiti dans les cartes privatives car elle a les m√™mes limitations g√©ographiques que celles-ci, et elle fonctionne aussi en m√©tropole, mais il s\u0026rsquo;agit bien d\u0026rsquo;une CB, donc elle est soumise aux r√©glementations CB.\nLes cartes Socredo privatives sont maintenant co-brand√©es UPI, mais il y a bien 2 applications dans la carte, sur le territoire, c\u0026rsquo;est l\u0026rsquo;application privative qui est utilis√©e, √† l\u0026rsquo;international, c\u0026rsquo;est l\u0026rsquo;application UPI qui est utilis√©e.\nFonctionnement des transactions Le sch√©ma √† 4 coins est l\u0026rsquo;un des sch√©mas de r√©f√©rence de la mon√©tique. Il explique les entit√©s qui entrent en jeu dans une transaction.\nLa banque √©mettrice √©met la carte et la fournit au porteur.\nLa banque acqu√©reuse fournit un contrat accepteur au commer√ßant, afin que celui-ci puisse encaisser les paiements avec les cartes, moyennant une commission, en plus des services annexes autour de l\u0026rsquo;encaissement (exemple: relev√© TPE). Les TPE et solutions de paiement en ligne sont des services d\u0026rsquo;encaissement.\nUn syst√®me d\u0026rsquo;acceptation est un logiciel ou un ensemble de logiciels, qui permet d\u0026rsquo;encaisser une carte bancaire, par exemple les TPE et les plateformes de paiement en ligne.\nIl existe 2 modes de fonctionnement pour le d√©roulement d\u0026rsquo;un paiement:\nle mode single message le mode dual message Lorsque vous payez avec votre carte, vous r√©alisez une transaction. Si toutes les r√®gles de gestion sont valid√©es, la transaction est autoris√©e.\nEn single message, la transaction autoris√©e est directement transform√©e en mouvement financier, i.e. un enregistrement est cr√©√© chez la banque acqu√©reuse qui dit \u0026ldquo;M. Client doit 1000 XPF √† M. Commer√ßant\u0026rdquo;.\nEn dual message, la transaction est enregistr√©e sur le TPE, ou sur la plateforme de paiement, puis, tous les jours √† une certaine heure, l\u0026rsquo;ensemble des transactions de la journ√©e sont envoy√©es √† la banque acqu√©reuse sous forme de mouvement financier.\nEn Polyn√©sie Fran√ßaise, le mode dual message est le plus r√©pandu, c\u0026rsquo;est d\u0026rsquo;ailleurs pour √ßa que l\u0026rsquo;on vous demande de ne pas d√©brancher votre TPE, votre internet, votre r√©seau √©lectrique.\nLes cartes et les syst√®mes d\u0026rsquo;acceptation Pour qu\u0026rsquo;un syst√®me d\u0026rsquo;acceptation puisse encaisser une carte, elle doit reconna√Ætre la carte.\nPour reconna√Ætre une carte, on utilise le BIN, qui sont les N premiers chiffres du num√©ro de la carte, N √©tant d√©fini par le r√©seau.\nDe plus, seule une application sp√©cifique √† ce r√©seau peut reconna√Ætre cette carte. Par exemple, pour une transaction avec une carte AMEX sur un TPE, c\u0026rsquo;est uniquement une application TPE AMEX qui pourra la reconna√Ætre, mais seulement si la carte fait partie d\u0026rsquo;une plage de BIN accept√©e par l\u0026rsquo;application.\nNote: Dans un TPE, il peut y avoir plusieurs applications, quand une carte est ins√©r√©e, le TPE demande √† chaque application \u0026ldquo;Peux-tu accepter cette carte?\u0026rdquo;.\nDe la m√™me mani√®re, pour une plateforme de paiement en ligne, celle-ci ne pourra accepter que des cartes qui font partie de ses plages de BIN d√©clar√©es.\nZoom sur le paiement en ligne en Polyn√©sie Fran√ßaise Comme √©nonc√© pr√©c√©demment, les cartes privatives sont majoritaires en Polyn√©sie Fran√ßaise, et elles ne sont pas reconnues √† l\u0026rsquo;√©tranger (sauf pour les cartes Socredo co-brand√©es UPI, comme cit√© pr√©c√©demment) car les BIN privatifs ne sont pas d√©clar√©s dans le monde.\nC\u0026rsquo;est pour cela qu\u0026rsquo;on ne peut pas payer avec une carte privative sur la plupart des plateformes de paiement en ligne (Paypal, Stripe, etc.), qui sont internationales.\nPour rem√©dier √† ce probl√®me, OSB propose Payzen, et la Banque de Tahiti propose SystemPay.\n√Ä mon avis, √† l\u0026rsquo;heure actuelle, c\u0026rsquo;est vers ces solutions que je conseille les commer√ßants d\u0026rsquo;aller, car il serait dommage de se priver des cartes privatives, alors qu\u0026rsquo;elles sont plus nombreuses.\nNotes:\nLes 2 solutions sont en r√©alit√© bas√©es sur les solutions Payzen et SystemPay de Lyra, soci√©t√© situ√©e en France. Certains d\u0026rsquo;entre vous ont d\u0026rsquo;ailleurs peut-√™tre d√©j√† √©t√© confus en recherchant de la documentation technique de ces solutions et se sont perdus entre:\nla documentation Payzen d\u0026rsquo;OSB, la documentation Payzen de Lyra, la documentation SystemPay de la Banque de Tahiti, la documentation SystemPay de Lyra. Je vous conseille de vous focaliser sur les documentations locales, et ensuite de compl√©ter avec les documentations de Lyra.\nConclusion Il existe plusieurs types de cartes.\nLes protocoles de paiement s\u0026rsquo;inscrivent dans un sch√©ma √† 4 coins, il y a plusieurs acteurs qui entrent en jeu.\nIl y a une r√©glementation g√©n√©rale qui englobe tous les types de cartes, et chaque type a √©galement sa r√©glementation sp√©cifique. Les banques sont soumises √† ces r√©glementations, l\u0026rsquo;IEOM et les r√©seaux (VISA, Mastercard, AMEX, etc.) veillent √† ce que les banques respectent ces r√©glementations.\nLa g√©ographie et les accords entre les acteurs sont importants pour comprendre les contraintes des syst√®mes de paiement locaux.\nEn Polyn√©sie Fran√ßaise, la majorit√© des cartes bancaires sont des cartes privatives, pour des raisons √©conomiques et r√©glementaires.\n","permalink":"http://localhost:1313/blog.dev/posts/intro-moyens-paiement/","summary":"\u003ch1 id=\"introduction\"\u003eIntroduction\u003c/h1\u003e\n\u003cp\u003eCet article est un aper√ßu tr√®s rapide des moyens de paiement en Polyn√©sie Fran√ßaise.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eUpdate (12/05/2022): suite √† quelques feedback, je me rend compte que cet article est √† destination des d√©veloppeurs de site de e-shopping, des commer√ßants, de mes confr√®res mon√©ticiens. Cet article sera complexe √† lire si vous n\u0026rsquo;avez jamais travaill√© avec un TPE, avec une plateforme de paiement, avec des cartes bancaires.\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e\u003cstrong\u003eDisclaimer\u003c/strong\u003e: Au moment o√π j\u0026rsquo;√©cris cet article, je travaille √† l\u0026rsquo;Oc√©anienne des Services Bancaires (OSB), Ces articles ne sont pas sponsoris√©s par OSB, et j\u0026rsquo;encourage les gens √† faire des tutoriels pour les solutions des autres fournisseurs de solutions de paiement.\u003c/p\u003e","title":"Introduction aux moyens de paiement en Polyn√©sie Fran√ßaise"},{"content":"Ia\u0026rsquo;orana, bonjour !\nCe post marque le d√©but du blog h√©berg√© sur Github.\nVous trouverez ici de temps en temps des articles de d√©veloppement et des POCs.\nBonne lecture !\n","permalink":"http://localhost:1313/blog.dev/posts/hello-world/","summary":"\u003cp\u003eIa\u0026rsquo;orana, bonjour !\u003c/p\u003e\n\u003cp\u003eCe post marque le d√©but du blog h√©berg√© sur Github.\u003c/p\u003e\n\u003cp\u003eVous trouverez ici de temps en temps des articles de d√©veloppement et des POCs.\u003c/p\u003e\n\u003cp\u003eBonne lecture !\u003c/p\u003e","title":"Hello World"}]